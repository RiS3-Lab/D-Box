
FreeRTOSDemoBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000840c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08010410  08010410  00020410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a0  080105a0  0003800c  2**0
                  CONTENTS
  4 .ARM          00000008  080105a0  080105a0  000205a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105a8  080105a8  0003800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105a8  080105a8  000205a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105ac  080105ac  000205ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .privileged_data 00008000  20000000  080105b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  20008000  080185b0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c60  20008400  080185bc  00038400  2**10
                  ALLOC
 11 ._user_heap_stack 00000600  2000a060  080185bc  0003a060  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0003800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023861  00000000  00000000  00038035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae7  00000000  00000000  0005b896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d18  00000000  00000000  00060380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b58  00000000  00000000  00062098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de90  00000000  00000000  00063bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c88  00000000  00000000  00081a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8bb7  00000000  00000000  000a6708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f2bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d90  00000000  00000000  0015f314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 35 03 01 08 0d ac 00 08 19 ac 00 08     ... 5...........
 8000010:	19 03 01 08 1f ac 00 08 25 ac 00 08 00 00 00 00     ........%.......
	...
 800002c:	39 69 00 08 2b ac 00 08 00 00 00 00 8d 68 00 08     9i..+........h..
 800003c:	09 69 00 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     .i..}...}...}...
 800004c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800005c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800006c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800007c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 9d ac 00 08     }...}...}.......
 800008c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800009c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 80000ac:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 80000bc:	7d 03 01 08 7d 03 01 08 75 ac 00 08 89 ac 00 08     }...}...u.......
 80000cc:	61 ac 00 08 7d 03 01 08 7d 03 01 08 4d ac 00 08     a...}...}...M...
 80000dc:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 80000ec:	39 ac 00 08 7d 03 01 08 00 00 00 00 7d 03 01 08     9...}.......}...
 80000fc:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800010c:	7d 03 01 08 7d 03 01 08 7d 03 01 08 7d 03 01 08     }...}...}...}...
 800011c:	00 00 00 00 7d 03 01 08 00 00 00 00 00 00 00 00     ....}...........
	...
 8000138:	5f f8 08 f1                                         _...

0800013c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 800013c:	b580      	push	{r7, lr}
 800013e:	b082      	sub	sp, #8
 8000140:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000142:	201c      	movs	r0, #28
 8000144:	f006 fc7c 	bl	8006a40 <pvPortMalloc>
 8000148:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 800014a:	687b      	ldr	r3, [r7, #4]
 800014c:	2b00      	cmp	r3, #0
 800014e:	d00a      	beq.n	8000166 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 8000150:	687b      	ldr	r3, [r7, #4]
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	3304      	adds	r3, #4
 800015a:	4618      	mov	r0, r3
 800015c:	f000 fb14 	bl	8000788 <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	761a      	strb	r2, [r3, #24]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8000166:	687b      	ldr	r3, [r7, #4]
    }
 8000168:	4618      	mov	r0, r3
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}

08000170 <xEventGroupCreateStatic>:
    {
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
        configASSERT( pxEventGroupBuffer );
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d10a      	bne.n	8000194 <xEventGroupCreateStatic+0x24>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000182:	f383 8811 	msr	BASEPRI, r3
 8000186:	f3bf 8f6f 	isb	sy
 800018a:	f3bf 8f4f 	dsb	sy
 800018e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000190:	bf00      	nop
 8000192:	e7fe      	b.n	8000192 <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 8000194:	231c      	movs	r3, #28
 8000196:	60bb      	str	r3, [r7, #8]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	2b1c      	cmp	r3, #28
 800019c:	d00a      	beq.n	80001b4 <xEventGroupCreateStatic+0x44>
        __asm volatile
 800019e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001a2:	f383 8811 	msr	BASEPRI, r3
 80001a6:	f3bf 8f6f 	isb	sy
 80001aa:	f3bf 8f4f 	dsb	sy
 80001ae:	60fb      	str	r3, [r7, #12]
    }
 80001b0:	bf00      	nop
 80001b2:	e7fe      	b.n	80001b2 <xEventGroupCreateStatic+0x42>
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	617b      	str	r3, [r7, #20]
        if( pxEventBits != NULL )
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d00a      	beq.n	80001d4 <xEventGroupCreateStatic+0x64>
            pxEventBits->uxEventBits = 0;
 80001be:	697b      	ldr	r3, [r7, #20]
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	3304      	adds	r3, #4
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fadd 	bl	8000788 <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 80001ce:	697b      	ldr	r3, [r7, #20]
 80001d0:	2201      	movs	r2, #1
 80001d2:	761a      	strb	r2, [r3, #24]
        return pxEventBits;
 80001d4:	697b      	ldr	r3, [r7, #20]
    }
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}

080001de <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b090      	sub	sp, #64	; 0x40
 80001e2:	af00      	add	r7, sp, #0
 80001e4:	60f8      	str	r0, [r7, #12]
 80001e6:	60b9      	str	r1, [r7, #8]
 80001e8:	607a      	str	r2, [r7, #4]
 80001ea:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80001f4:	2300      	movs	r3, #0
 80001f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d10a      	bne.n	8000214 <xEventGroupWaitBits+0x36>
        __asm volatile
 80001fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000202:	f383 8811 	msr	BASEPRI, r3
 8000206:	f3bf 8f6f 	isb	sy
 800020a:	f3bf 8f4f 	dsb	sy
 800020e:	623b      	str	r3, [r7, #32]
    }
 8000210:	bf00      	nop
 8000212:	e7fe      	b.n	8000212 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800021a:	2b00      	cmp	r3, #0
 800021c:	d00a      	beq.n	8000234 <xEventGroupWaitBits+0x56>
        __asm volatile
 800021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000222:	f383 8811 	msr	BASEPRI, r3
 8000226:	f3bf 8f6f 	isb	sy
 800022a:	f3bf 8f4f 	dsb	sy
 800022e:	61fb      	str	r3, [r7, #28]
    }
 8000230:	bf00      	nop
 8000232:	e7fe      	b.n	8000232 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10a      	bne.n	8000250 <xEventGroupWaitBits+0x72>
        __asm volatile
 800023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800023e:	f383 8811 	msr	BASEPRI, r3
 8000242:	f3bf 8f6f 	isb	sy
 8000246:	f3bf 8f4f 	dsb	sy
 800024a:	61bb      	str	r3, [r7, #24]
    }
 800024c:	bf00      	nop
 800024e:	e7fe      	b.n	800024e <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000250:	f004 ff08 	bl	8005064 <xTaskGetSchedulerState>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d102      	bne.n	8000260 <xEventGroupWaitBits+0x82>
 800025a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800025c:	2b00      	cmp	r3, #0
 800025e:	d101      	bne.n	8000264 <xEventGroupWaitBits+0x86>
 8000260:	2301      	movs	r3, #1
 8000262:	e000      	b.n	8000266 <xEventGroupWaitBits+0x88>
 8000264:	2300      	movs	r3, #0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d10a      	bne.n	8000280 <xEventGroupWaitBits+0xa2>
        __asm volatile
 800026a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800026e:	f383 8811 	msr	BASEPRI, r3
 8000272:	f3bf 8f6f 	isb	sy
 8000276:	f3bf 8f4f 	dsb	sy
 800027a:	617b      	str	r3, [r7, #20]
    }
 800027c:	bf00      	nop
 800027e:	e7fe      	b.n	800027e <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 8000280:	f003 fd00 	bl	8003c84 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8000284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000290:	f000 fa58 	bl	8000744 <prvTestWaitCondition>
 8000294:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 8000296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00e      	beq.n	80002ba <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 800029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d028      	beq.n	80002fc <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80002aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	43db      	mvns	r3, r3
 80002b2:	401a      	ands	r2, r3
 80002b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e020      	b.n	80002fc <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 80002ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d104      	bne.n	80002ca <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 80002c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 80002c4:	2301      	movs	r3, #1
 80002c6:	633b      	str	r3, [r7, #48]	; 0x30
 80002c8:	e018      	b.n	80002fc <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d003      	beq.n	80002d8 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80002d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d6:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d003      	beq.n	80002e6 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80002de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80002e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002e8:	1d18      	adds	r0, r3, #4
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80002f2:	4619      	mov	r1, r3
 80002f4:	f004 fcbc 	bl	8004c70 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 80002fc:	f003 fcd0 	bl	8003ca0 <xTaskResumeAll>
 8000300:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8000302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000304:	2b00      	cmp	r3, #0
 8000306:	d031      	beq.n	800036c <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	2b00      	cmp	r3, #0
 800030c:	d107      	bne.n	800031e <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <xEventGroupWaitBits+0x19a>)
 8000310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	f3bf 8f4f 	dsb	sy
 800031a:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800031e:	f004 fe6f 	bl	8005000 <uxTaskResetEventItemValue>
 8000322:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d11a      	bne.n	8000364 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 800032e:	f009 ff53 	bl	800a1d8 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8000332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	68b9      	ldr	r1, [r7, #8]
 800033c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800033e:	f000 fa01 	bl	8000744 <prvTestWaitCondition>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d009      	beq.n	800035c <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800034e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	43db      	mvns	r3, r3
 8000356:	401a      	ands	r2, r3
 8000358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800035a:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 800035c:	2301      	movs	r3, #1
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 8000360:	f009 ff58 	bl	800a214 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 800036c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800036e:	4618      	mov	r0, r3
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	e000ed04 	.word	0xe000ed04

0800037c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d10a      	bne.n	80003a6 <xEventGroupClearBits+0x2a>
        __asm volatile
 8000390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000394:	f383 8811 	msr	BASEPRI, r3
 8000398:	f3bf 8f6f 	isb	sy
 800039c:	f3bf 8f4f 	dsb	sy
 80003a0:	60fb      	str	r3, [r7, #12]
    }
 80003a2:	bf00      	nop
 80003a4:	e7fe      	b.n	80003a4 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00a      	beq.n	80003c6 <xEventGroupClearBits+0x4a>
        __asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	60bb      	str	r3, [r7, #8]
    }
 80003c2:	bf00      	nop
 80003c4:	e7fe      	b.n	80003c4 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 80003c6:	f009 ff07 	bl	800a1d8 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	43db      	mvns	r3, r3
 80003d8:	401a      	ands	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 80003de:	f009 ff19 	bl	800a214 <vPortExitCritical>

    return uxReturn;
 80003e2:	693b      	ldr	r3, [r7, #16]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	; 0x38
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80003f6:	2300      	movs	r3, #0
 80003f8:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 80003fe:	2300      	movs	r3, #0
 8000400:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d10a      	bne.n	800041e <xEventGroupSetBits+0x32>
        __asm volatile
 8000408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040c:	f383 8811 	msr	BASEPRI, r3
 8000410:	f3bf 8f6f 	isb	sy
 8000414:	f3bf 8f4f 	dsb	sy
 8000418:	613b      	str	r3, [r7, #16]
    }
 800041a:	bf00      	nop
 800041c:	e7fe      	b.n	800041c <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000424:	2b00      	cmp	r3, #0
 8000426:	d00a      	beq.n	800043e <xEventGroupSetBits+0x52>
        __asm volatile
 8000428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800042c:	f383 8811 	msr	BASEPRI, r3
 8000430:	f3bf 8f6f 	isb	sy
 8000434:	f3bf 8f4f 	dsb	sy
 8000438:	60fb      	str	r3, [r7, #12]
    }
 800043a:	bf00      	nop
 800043c:	e7fe      	b.n	800043c <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000440:	3304      	adds	r3, #4
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000446:	3308      	adds	r3, #8
 8000448:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 800044a:	f003 fc1b 	bl	8003c84 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	431a      	orrs	r2, r3
 800045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800045e:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8000460:	e03c      	b.n	80004dc <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 8000462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 800046e:	2300      	movs	r3, #0
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000478:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000480:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d108      	bne.n	800049e <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4013      	ands	r3, r2
 8000494:	2b00      	cmp	r3, #0
 8000496:	d00b      	beq.n	80004b0 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 8000498:	2301      	movs	r3, #1
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800049c:	e008      	b.n	80004b0 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	4013      	ands	r3, r2
 80004a6:	69ba      	ldr	r2, [r7, #24]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d101      	bne.n	80004b0 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 80004ac:	2301      	movs	r3, #1
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 80004b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d010      	beq.n	80004d8 <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 80004c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80004c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d0:	4619      	mov	r1, r3
 80004d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004d4:	f004 fc96 	bl	8004e04 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 80004dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004de:	6a3b      	ldr	r3, [r7, #32]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d1be      	bne.n	8000462 <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80004e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ea:	43db      	mvns	r3, r3
 80004ec:	401a      	ands	r2, r3
 80004ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f0:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80004f2:	f003 fbd5 	bl	8003ca0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80004f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f8:	681b      	ldr	r3, [r3, #0]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3738      	adds	r7, #56	; 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <xEventGroupSync>:
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b08c      	sub	sp, #48	; 0x30
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xTimeoutOccurred = pdFALSE;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00a      	beq.n	8000538 <xEventGroupSync+0x36>
        __asm volatile
 8000522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000526:	f383 8811 	msr	BASEPRI, r3
 800052a:	f3bf 8f6f 	isb	sy
 800052e:	f3bf 8f4f 	dsb	sy
 8000532:	61bb      	str	r3, [r7, #24]
    }
 8000534:	bf00      	nop
 8000536:	e7fe      	b.n	8000536 <xEventGroupSync+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10a      	bne.n	8000554 <xEventGroupSync+0x52>
        __asm volatile
 800053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000542:	f383 8811 	msr	BASEPRI, r3
 8000546:	f3bf 8f6f 	isb	sy
 800054a:	f3bf 8f4f 	dsb	sy
 800054e:	617b      	str	r3, [r7, #20]
    }
 8000550:	bf00      	nop
 8000552:	e7fe      	b.n	8000552 <xEventGroupSync+0x50>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000554:	f004 fd86 	bl	8005064 <xTaskGetSchedulerState>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d102      	bne.n	8000564 <xEventGroupSync+0x62>
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d101      	bne.n	8000568 <xEventGroupSync+0x66>
 8000564:	2301      	movs	r3, #1
 8000566:	e000      	b.n	800056a <xEventGroupSync+0x68>
 8000568:	2300      	movs	r3, #0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10a      	bne.n	8000584 <xEventGroupSync+0x82>
        __asm volatile
 800056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	f3bf 8f6f 	isb	sy
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	613b      	str	r3, [r7, #16]
    }
 8000580:	bf00      	nop
 8000582:	e7fe      	b.n	8000582 <xEventGroupSync+0x80>
    vTaskSuspendAll();
 8000584:	f003 fb7e 	bl	8003c84 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	623b      	str	r3, [r7, #32]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800058e:	68b9      	ldr	r1, [r7, #8]
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f7ff ff2b 	bl	80003ec <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000596:	6a3a      	ldr	r2, [r7, #32]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d10d      	bne.n	80005c2 <xEventGroupSync+0xc0>
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 80005a6:	6a3a      	ldr	r2, [r7, #32]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80005ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	43db      	mvns	r3, r3
 80005b6:	401a      	ands	r2, r3
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	601a      	str	r2, [r3, #0]
            xTicksToWait = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	e013      	b.n	80005ea <xEventGroupSync+0xe8>
            if( xTicksToWait != ( TickType_t ) 0 )
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <xEventGroupSync+0xde>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	1d18      	adds	r0, r3, #4
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f004 fb4b 	bl	8004c70 <vTaskPlaceOnUnorderedEventList>
                uxReturn = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005de:	e004      	b.n	80005ea <xEventGroupSync+0xe8>
                uxReturn = pxEventBits->uxEventBits;
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                xTimeoutOccurred = pdTRUE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
    xAlreadyYielded = xTaskResumeAll();
 80005ea:	f003 fb59 	bl	8003ca0 <xTaskResumeAll>
 80005ee:	61f8      	str	r0, [r7, #28]
    if( xTicksToWait != ( TickType_t ) 0 )
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d02c      	beq.n	8000650 <xEventGroupSync+0x14e>
        if( xAlreadyYielded == pdFALSE )
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d107      	bne.n	800060c <xEventGroupSync+0x10a>
            portYIELD_WITHIN_API();
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <xEventGroupSync+0x15a>)
 80005fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 800060c:	f004 fcf8 	bl	8005000 <uxTaskResetEventItemValue>
 8000610:	62f8      	str	r0, [r7, #44]	; 0x2c
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d115      	bne.n	8000648 <xEventGroupSync+0x146>
            taskENTER_CRITICAL();
 800061c:	f009 fddc 	bl	800a1d8 <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 8000620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4013      	ands	r3, r2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d106      	bne.n	8000640 <xEventGroupSync+0x13e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	43db      	mvns	r3, r3
 800063a:	401a      	ands	r2, r3
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	601a      	str	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8000640:	f009 fde8 	bl	800a214 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 8000644:	2301      	movs	r3, #1
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return uxReturn;
 8000650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000652:	4618      	mov	r0, r3
 8000654:	3730      	adds	r7, #48	; 0x30
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	e000ed04 	.word	0xe000ed04

08000660 <xEventGroupGetBitsFromISR>:
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    EventGroup_t const * const pxEventBits = xEventGroup;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	61fb      	str	r3, [r7, #28]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800066c:	f3ef 8211 	mrs	r2, BASEPRI
 8000670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000674:	f383 8811 	msr	BASEPRI, r3
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	f3bf 8f4f 	dsb	sy
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	60bb      	str	r3, [r7, #8]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000684:	68fb      	ldr	r3, [r7, #12]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000686:	61bb      	str	r3, [r7, #24]
        uxReturn = pxEventBits->uxEventBits;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000698:	bf00      	nop
    return uxReturn;
 800069a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800069c:	4618      	mov	r0, r3
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	617b      	str	r3, [r7, #20]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3304      	adds	r3, #4
 80006b6:	613b      	str	r3, [r7, #16]

    vTaskSuspendAll();
 80006b8:	f003 fae4 	bl	8003c84 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80006bc:	e017      	b.n	80006ee <vEventGroupDelete+0x48>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3308      	adds	r3, #8
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d10a      	bne.n	80006e0 <vEventGroupDelete+0x3a>
        __asm volatile
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	60fb      	str	r3, [r7, #12]
    }
 80006dc:	bf00      	nop
 80006de:	e7fe      	b.n	80006de <vEventGroupDelete+0x38>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fb8b 	bl	8004e04 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1e3      	bne.n	80006be <vEventGroupDelete+0x18>
            }
        #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
            {
                /* The event group could have been allocated statically or
                 * dynamically, so check before attempting to free the memory. */
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	7e1b      	ldrb	r3, [r3, #24]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <vEventGroupDelete+0x5e>
                {
                    vPortFree( pxEventBits );
 80006fe:	6978      	ldr	r0, [r7, #20]
 8000700:	f006 fa6e 	bl	8006be0 <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 8000704:	f003 facc 	bl	8003ca0 <xTaskResumeAll>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800071a:	6839      	ldr	r1, [r7, #0]
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe65 	bl	80003ec <xEventGroupSetBits>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fe20 	bl	800037c <xEventGroupClearBits>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d107      	bne.n	800076a <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4013      	ands	r3, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00a      	beq.n	800077a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	e007      	b.n	800077a <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4013      	ands	r3, r2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	429a      	cmp	r2, r3
 8000774:	d101      	bne.n	800077a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 800077a:	697b      	ldr	r3, [r7, #20]
}
 800077c:	4618      	mov	r0, r3
 800077e:	371c      	adds	r7, #28
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0208 	add.w	r2, r3, #8
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0208 	add.w	r2, r3, #8
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0208 	add.w	r2, r3, #8
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007de:	b480      	push	{r7}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d103      	bne.n	80007fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e00c      	b.n	8000818 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3308      	adds	r3, #8
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e002      	b.n	800080c <vListInsert+0x2e>
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	429a      	cmp	r2, r3
 8000816:	d2f6      	bcs.n	8000806 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <vListInsertEnd>:
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6892      	ldr	r2, [r2, #8]
 80008aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	6852      	ldr	r2, [r2, #4]
 80008b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d103      	bne.n	80008c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10a      	bne.n	800091a <xQueueGenericSend+0x32>
        __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000916:	bf00      	nop
 8000918:	e7fe      	b.n	8000918 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d103      	bne.n	8000928 <xQueueGenericSend+0x40>
 8000920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <xQueueGenericSend+0x44>
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <xQueueGenericSend+0x46>
 800092c:	2300      	movs	r3, #0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10a      	bne.n	8000948 <xQueueGenericSend+0x60>
        __asm volatile
 8000932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000936:	f383 8811 	msr	BASEPRI, r3
 800093a:	f3bf 8f6f 	isb	sy
 800093e:	f3bf 8f4f 	dsb	sy
 8000942:	623b      	str	r3, [r7, #32]
    }
 8000944:	bf00      	nop
 8000946:	e7fe      	b.n	8000946 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d103      	bne.n	8000956 <xQueueGenericSend+0x6e>
 800094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000952:	2b01      	cmp	r3, #1
 8000954:	d101      	bne.n	800095a <xQueueGenericSend+0x72>
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <xQueueGenericSend+0x74>
 800095a:	2300      	movs	r3, #0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10a      	bne.n	8000976 <xQueueGenericSend+0x8e>
        __asm volatile
 8000960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000964:	f383 8811 	msr	BASEPRI, r3
 8000968:	f3bf 8f6f 	isb	sy
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	61fb      	str	r3, [r7, #28]
    }
 8000972:	bf00      	nop
 8000974:	e7fe      	b.n	8000974 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000976:	f004 fb75 	bl	8005064 <xTaskGetSchedulerState>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <xQueueGenericSend+0x9e>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <xQueueGenericSend+0xa2>
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <xQueueGenericSend+0xa4>
 800098a:	2300      	movs	r3, #0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d10a      	bne.n	80009a6 <xQueueGenericSend+0xbe>
        __asm volatile
 8000990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000994:	f383 8811 	msr	BASEPRI, r3
 8000998:	f3bf 8f6f 	isb	sy
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	61bb      	str	r3, [r7, #24]
    }
 80009a2:	bf00      	nop
 80009a4:	e7fe      	b.n	80009a4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009a6:	f009 fc17 	bl	800a1d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d302      	bcc.n	80009bc <xQueueGenericSend+0xd4>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d145      	bne.n	8000a48 <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009c8:	f001 facd 	bl	8001f66 <prvCopyDataToQueue>
 80009cc:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 80009ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d014      	beq.n	8000a00 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d102      	bne.n	80009e2 <xQueueGenericSend+0xfa>
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d12e      	bne.n	8000a40 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80009e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009e4:	f001 fb4f 	bl	8002086 <prvNotifyQueueSetContainer>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d028      	beq.n	8000a40 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009ee:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <xQueueGenericSend+0x230>)
 80009f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	e01f      	b.n	8000a40 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d010      	beq.n	8000a2a <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0a:	3324      	adds	r3, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f997 	bl	8004d40 <xTaskRemoveFromEventList>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d013      	beq.n	8000a40 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8000a18:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <xQueueGenericSend+0x230>)
 8000a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	f3bf 8f4f 	dsb	sy
 8000a24:	f3bf 8f6f 	isb	sy
 8000a28:	e00a      	b.n	8000a40 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000a30:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <xQueueGenericSend+0x230>)
 8000a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a40:	f009 fbe8 	bl	800a214 <vPortExitCritical>
                return pdPASS;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e063      	b.n	8000b10 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a4e:	f009 fbe1 	bl	800a214 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e05c      	b.n	8000b10 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d106      	bne.n	8000a6a <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fcaf 	bl	80053c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a6a:	f009 fbd3 	bl	800a214 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a6e:	f003 f909 	bl	8003c84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a72:	f009 fbb1 	bl	800a1d8 <vPortEnterCritical>
 8000a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a82:	d103      	bne.n	8000a8c <xQueueGenericSend+0x1a4>
 8000a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d103      	bne.n	8000aa2 <xQueueGenericSend+0x1ba>
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000aa2:	f009 fbb7 	bl	800a214 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000aa6:	1d3a      	adds	r2, r7, #4
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 ff64 	bl	800497c <xTaskCheckForTimeOut>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d124      	bne.n	8000b04 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000aba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000abc:	f001 fa3b 	bl	8001f36 <prvIsQueueFull>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d018      	beq.n	8000af8 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	3310      	adds	r3, #16
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 f8aa 	bl	8004c28 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ad6:	f001 f9b9 	bl	8001e4c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000ada:	f003 f8e1 	bl	8003ca0 <xTaskResumeAll>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f47f af60 	bne.w	80009a6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <xQueueGenericSend+0x230>)
 8000ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	f3bf 8f6f 	isb	sy
 8000af6:	e756      	b.n	80009a6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000afa:	f001 f9a7 	bl	8001e4c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000afe:	f003 f8cf 	bl	8003ca0 <xTaskResumeAll>
 8000b02:	e750      	b.n	80009a6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b06:	f001 f9a1 	bl	8001e4c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b0a:	f003 f8c9 	bl	8003ca0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b0e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	e000ed04 	.word	0xe000ed04

08000b1c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <xQueuePeek+0x30>
        __asm volatile
 8000b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3a:	f383 8811 	msr	BASEPRI, r3
 8000b3e:	f3bf 8f6f 	isb	sy
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b48:	bf00      	nop
 8000b4a:	e7fe      	b.n	8000b4a <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <xQueuePeek+0x3e>
 8000b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <xQueuePeek+0x42>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueuePeek+0x44>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10a      	bne.n	8000b7a <xQueuePeek+0x5e>
        __asm volatile
 8000b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b68:	f383 8811 	msr	BASEPRI, r3
 8000b6c:	f3bf 8f6f 	isb	sy
 8000b70:	f3bf 8f4f 	dsb	sy
 8000b74:	623b      	str	r3, [r7, #32]
    }
 8000b76:	bf00      	nop
 8000b78:	e7fe      	b.n	8000b78 <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b7a:	f004 fa73 	bl	8005064 <xTaskGetSchedulerState>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <xQueuePeek+0x6e>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <xQueuePeek+0x72>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <xQueuePeek+0x74>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10a      	bne.n	8000baa <xQueuePeek+0x8e>
        __asm volatile
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	61fb      	str	r3, [r7, #28]
    }
 8000ba6:	bf00      	nop
 8000ba8:	e7fe      	b.n	8000ba8 <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000baa:	f009 fb15 	bl	800a1d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d021      	beq.n	8000bfe <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bc4:	f001 fa39 	bl	800203a <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bcc:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00f      	beq.n	8000bf6 <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd8:	3324      	adds	r3, #36	; 0x24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f8b0 	bl	8004d40 <xTaskRemoveFromEventList>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000be6:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <xQueuePeek+0x1c0>)
 8000be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	f3bf 8f4f 	dsb	sy
 8000bf2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bf6:	f009 fb0d 	bl	800a214 <vPortExitCritical>
                return pdPASS;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e069      	b.n	8000cd2 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c04:	f009 fb06 	bl	800a214 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e062      	b.n	8000cd2 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fbd4 	bl	80053c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c20:	f009 faf8 	bl	800a214 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c24:	f003 f82e 	bl	8003c84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c28:	f009 fad6 	bl	800a1d8 <vPortEnterCritical>
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d103      	bne.n	8000c42 <xQueuePeek+0x126>
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4e:	d103      	bne.n	8000c58 <xQueuePeek+0x13c>
 8000c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c58:	f009 fadc 	bl	800a214 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c5c:	1d3a      	adds	r2, r7, #4
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fe89 	bl	800497c <xTaskCheckForTimeOut>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d123      	bne.n	8000cb8 <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c72:	f001 f94a 	bl	8001f0a <prvIsQueueEmpty>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d017      	beq.n	8000cac <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	3324      	adds	r3, #36	; 0x24
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 ffcf 	bl	8004c28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8c:	f001 f8de 	bl	8001e4c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c90:	f003 f806 	bl	8003ca0 <xTaskResumeAll>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d187      	bne.n	8000baa <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <xQueuePeek+0x1c0>)
 8000c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	f3bf 8f6f 	isb	sy
 8000caa:	e77e      	b.n	8000baa <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8000cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cae:	f001 f8cd 	bl	8001e4c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cb2:	f002 fff5 	bl	8003ca0 <xTaskResumeAll>
 8000cb6:	e778      	b.n	8000baa <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8000cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cba:	f001 f8c7 	bl	8001e4c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cbe:	f002 ffef 	bl	8003ca0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cc4:	f001 f921 	bl	8001f0a <prvIsQueueEmpty>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f43f af6d 	beq.w	8000baa <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000cd0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000ed04 	.word	0xe000ed04

08000ce0 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <xQueuePeekFromISR+0x2a>
        __asm volatile
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	61fb      	str	r3, [r7, #28]
    }
 8000d06:	bf00      	nop
 8000d08:	e7fe      	b.n	8000d08 <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d103      	bne.n	8000d18 <xQueuePeekFromISR+0x38>
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <xQueuePeekFromISR+0x3c>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <xQueuePeekFromISR+0x3e>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <xQueuePeekFromISR+0x58>
        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	61bb      	str	r3, [r7, #24]
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10a      	bne.n	8000d56 <xQueuePeekFromISR+0x76>
        __asm volatile
 8000d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	617b      	str	r3, [r7, #20]
    }
 8000d52:	bf00      	nop
 8000d54:	e7fe      	b.n	8000d54 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d56:	f009 fabd 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 8000d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	613a      	str	r2, [r7, #16]
 8000d70:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8000d72:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00c      	beq.n	8000d98 <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d88:	f001 f957 	bl	800203a <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8e:	6a3a      	ldr	r2, [r7, #32]
 8000d90:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d96:	e001      	b.n	8000d9c <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f383 8811 	msr	BASEPRI, r3
    }
 8000da6:	bf00      	nop
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <xQueueReceive>:
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b08c      	sub	sp, #48	; 0x30
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Queue_t * const pxQueue = xQueue;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    configASSERT( ( pxQueue ) );
 8000dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10a      	bne.n	8000de2 <xQueueReceive+0x30>
        __asm volatile
 8000dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd0:	f383 8811 	msr	BASEPRI, r3
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	f3bf 8f4f 	dsb	sy
 8000ddc:	623b      	str	r3, [r7, #32]
    }
 8000dde:	bf00      	nop
 8000de0:	e7fe      	b.n	8000de0 <xQueueReceive+0x2e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <xQueueReceive+0x3e>
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <xQueueReceive+0x42>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <xQueueReceive+0x44>
 8000df4:	2300      	movs	r3, #0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10a      	bne.n	8000e10 <xQueueReceive+0x5e>
        __asm volatile
 8000dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	61fb      	str	r3, [r7, #28]
    }
 8000e0c:	bf00      	nop
 8000e0e:	e7fe      	b.n	8000e0e <xQueueReceive+0x5c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e10:	f004 f928 	bl	8005064 <xTaskGetSchedulerState>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <xQueueReceive+0x6e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <xQueueReceive+0x72>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <xQueueReceive+0x74>
 8000e24:	2300      	movs	r3, #0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10a      	bne.n	8000e40 <xQueueReceive+0x8e>
        __asm volatile
 8000e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e2e:	f383 8811 	msr	BASEPRI, r3
 8000e32:	f3bf 8f6f 	isb	sy
 8000e36:	f3bf 8f4f 	dsb	sy
 8000e3a:	61bb      	str	r3, [r7, #24]
    }
 8000e3c:	bf00      	nop
 8000e3e:	e7fe      	b.n	8000e3e <xQueueReceive+0x8c>
        taskENTER_CRITICAL();
 8000e40:	f009 f9ca 	bl	800a1d8 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d01f      	beq.n	8000e90 <xQueueReceive+0xde>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e54:	f001 f8f1 	bl	800203a <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00f      	beq.n	8000e88 <xQueueReceive+0xd6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	3310      	adds	r3, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 ff67 	bl	8004d40 <xTaskRemoveFromEventList>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <xQueueReceive+0x1ba>)
 8000e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	f3bf 8f4f 	dsb	sy
 8000e84:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8000e88:	f009 f9c4 	bl	800a214 <vPortExitCritical>
                return pdPASS;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e069      	b.n	8000f64 <xQueueReceive+0x1b2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <xQueueReceive+0xec>
                    taskEXIT_CRITICAL();
 8000e96:	f009 f9bd 	bl	800a214 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e062      	b.n	8000f64 <xQueueReceive+0x1b2>
                else if( xEntryTimeSet == pdFALSE )
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d106      	bne.n	8000eb2 <xQueueReceive+0x100>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fa8b 	bl	80053c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        taskEXIT_CRITICAL();
 8000eb2:	f009 f9af 	bl	800a214 <vPortExitCritical>
        vTaskSuspendAll();
 8000eb6:	f002 fee5 	bl	8003c84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000eba:	f009 f98d 	bl	800a1d8 <vPortEnterCritical>
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eca:	d103      	bne.n	8000ed4 <xQueueReceive+0x122>
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d103      	bne.n	8000eea <xQueueReceive+0x138>
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eea:	f009 f993 	bl	800a214 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000eee:	1d3a      	adds	r2, r7, #4
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fd40 	bl	800497c <xTaskCheckForTimeOut>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d123      	bne.n	8000f4a <xQueueReceive+0x198>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f04:	f001 f801 	bl	8001f0a <prvIsQueueEmpty>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d017      	beq.n	8000f3e <xQueueReceive+0x18c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	3324      	adds	r3, #36	; 0x24
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fe86 	bl	8004c28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f1e:	f000 ff95 	bl	8001e4c <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000f22:	f002 febd 	bl	8003ca0 <xTaskResumeAll>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d189      	bne.n	8000e40 <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <xQueueReceive+0x1ba>)
 8000f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	f3bf 8f6f 	isb	sy
 8000f3c:	e780      	b.n	8000e40 <xQueueReceive+0x8e>
                prvUnlockQueue( pxQueue );
 8000f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f40:	f000 ff84 	bl	8001e4c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000f44:	f002 feac 	bl	8003ca0 <xTaskResumeAll>
 8000f48:	e77a      	b.n	8000e40 <xQueueReceive+0x8e>
            prvUnlockQueue( pxQueue );
 8000f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f4c:	f000 ff7e 	bl	8001e4c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000f50:	f002 fea6 	bl	8003ca0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f56:	f000 ffd8 	bl	8001f0a <prvIsQueueEmpty>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f43f af6f 	beq.w	8000e40 <xQueueReceive+0x8e>
                return errQUEUE_EMPTY;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	e000ed04 	.word	0xe000ed04

08000f70 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10a      	bne.n	8000f94 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8000f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	60bb      	str	r3, [r7, #8]
    }
 8000f90:	bf00      	nop
 8000f92:	e7fe      	b.n	8000f92 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000f94:	f009 f920 	bl	800a1d8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000f9e:	f009 f939 	bl	800a214 <vPortExitCritical>

    return uxReturn;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10a      	bne.n	8000fd4 <uxQueueSpacesAvailable+0x28>
        __asm volatile
 8000fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc2:	f383 8811 	msr	BASEPRI, r3
 8000fc6:	f3bf 8f6f 	isb	sy
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	60fb      	str	r3, [r7, #12]
    }
 8000fd0:	bf00      	nop
 8000fd2:	e7fe      	b.n	8000fd2 <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 8000fd4:	f009 f900 	bl	800a1d8 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 8000fe4:	f009 f916 	bl	800a214 <vPortExitCritical>

    return uxReturn;
 8000fe8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10a      	bne.n	800101a <vQueueDelete+0x28>
        __asm volatile
 8001004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001008:	f383 8811 	msr	BASEPRI, r3
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	f3bf 8f4f 	dsb	sy
 8001014:	60bb      	str	r3, [r7, #8]
    }
 8001016:	bf00      	nop
 8001018:	e7fe      	b.n	8001018 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fce4 	bl	80019e8 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f005 fdd8 	bl	8006be0 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <xQueueGenericSendFromISR>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b090      	sub	sp, #64	; 0x40
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 800104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10a      	bne.n	8001066 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001062:	bf00      	nop
 8001064:	e7fe      	b.n	8001064 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <xQueueGenericSendFromISR+0x3c>
 800106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <xQueueGenericSendFromISR+0x40>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <xQueueGenericSendFromISR+0x42>
 8001078:	2300      	movs	r3, #0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001090:	bf00      	nop
 8001092:	e7fe      	b.n	8001092 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d103      	bne.n	80010a2 <xQueueGenericSendFromISR+0x6a>
 800109a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <xQueueGenericSendFromISR+0x6e>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <xQueueGenericSendFromISR+0x70>
 80010a6:	2300      	movs	r3, #0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10a      	bne.n	80010c2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	623b      	str	r3, [r7, #32]
    }
 80010be:	bf00      	nop
 80010c0:	e7fe      	b.n	80010c0 <xQueueGenericSendFromISR+0x88>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010c2:	f009 f907 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 80010c6:	f3ef 8211 	mrs	r2, BASEPRI
 80010ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ce:	f383 8811 	msr	BASEPRI, r3
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	f3bf 8f4f 	dsb	sy
 80010da:	61fa      	str	r2, [r7, #28]
 80010dc:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80010de:	69fb      	ldr	r3, [r7, #28]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d302      	bcc.n	80010f4 <xQueueGenericSendFromISR+0xbc>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d155      	bne.n	80011a0 <xQueueGenericSendFromISR+0x168>
            const int8_t cTxLock = pxQueue->cTxLock;
 80010f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800110a:	f000 ff2c 	bl	8001f66 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 800110e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001116:	d129      	bne.n	800116c <xQueueGenericSendFromISR+0x134>
                        if( pxQueue->pxQueueSetContainer != NULL )
 8001118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d012      	beq.n	8001146 <xQueueGenericSendFromISR+0x10e>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d102      	bne.n	800112c <xQueueGenericSendFromISR+0xf4>
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d136      	bne.n	800119a <xQueueGenericSendFromISR+0x162>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800112c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800112e:	f000 ffaa 	bl	8002086 <prvNotifyQueueSetContainer>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <xQueueGenericSendFromISR+0x162>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02d      	beq.n	800119a <xQueueGenericSendFromISR+0x162>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e029      	b.n	800119a <xQueueGenericSendFromISR+0x162>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	2b00      	cmp	r3, #0
 800114c:	d025      	beq.n	800119a <xQueueGenericSendFromISR+0x162>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001150:	3324      	adds	r3, #36	; 0x24
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fdf4 	bl	8004d40 <xTaskRemoveFromEventList>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d01d      	beq.n	800119a <xQueueGenericSendFromISR+0x162>
                                    if( pxHigherPriorityTaskWoken != NULL )
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d01a      	beq.n	800119a <xQueueGenericSendFromISR+0x162>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e016      	b.n	800119a <xQueueGenericSendFromISR+0x162>
                configASSERT( cTxLock != queueINT8_MAX );
 800116c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001170:	2b7f      	cmp	r3, #127	; 0x7f
 8001172:	d10a      	bne.n	800118a <xQueueGenericSendFromISR+0x152>
        __asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	617b      	str	r3, [r7, #20]
    }
 8001186:	bf00      	nop
 8001188:	e7fe      	b.n	8001188 <xQueueGenericSendFromISR+0x150>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800118a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800118e:	3301      	adds	r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b25a      	sxtb	r2, r3
 8001194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 800119a:	2301      	movs	r3, #1
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800119e:	e001      	b.n	80011a4 <xQueueGenericSendFromISR+0x16c>
            xReturn = errQUEUE_FULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a6:	613b      	str	r3, [r7, #16]
        __asm volatile
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f383 8811 	msr	BASEPRI, r3
    }
 80011ae:	bf00      	nop
    return xReturn;
 80011b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <xQueueGiveFromISR>:
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b08e      	sub	sp, #56	; 0x38
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( pxQueue );
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10a      	bne.n	80011e4 <xQueueGiveFromISR+0x2a>
        __asm volatile
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	623b      	str	r3, [r7, #32]
    }
 80011e0:	bf00      	nop
 80011e2:	e7fe      	b.n	80011e2 <xQueueGiveFromISR+0x28>
    configASSERT( pxQueue->uxItemSize == 0 );
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00a      	beq.n	8001202 <xQueueGiveFromISR+0x48>
        __asm volatile
 80011ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	61fb      	str	r3, [r7, #28]
    }
 80011fe:	bf00      	nop
 8001200:	e7fe      	b.n	8001200 <xQueueGiveFromISR+0x46>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <xQueueGiveFromISR+0x58>
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <xQueueGiveFromISR+0x5c>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <xQueueGiveFromISR+0x5e>
 8001216:	2300      	movs	r3, #0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10a      	bne.n	8001232 <xQueueGiveFromISR+0x78>
        __asm volatile
 800121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001220:	f383 8811 	msr	BASEPRI, r3
 8001224:	f3bf 8f6f 	isb	sy
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	61bb      	str	r3, [r7, #24]
    }
 800122e:	bf00      	nop
 8001230:	e7fe      	b.n	8001230 <xQueueGiveFromISR+0x76>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001232:	f009 f84f 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 8001236:	f3ef 8211 	mrs	r2, BASEPRI
 800123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123e:	f383 8811 	msr	BASEPRI, r3
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	f3bf 8f4f 	dsb	sy
 800124a:	617a      	str	r2, [r7, #20]
 800124c:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 800124e:	697b      	ldr	r3, [r7, #20]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125e:	429a      	cmp	r2, r3
 8001260:	d24b      	bcs.n	80012fa <xQueueGiveFromISR+0x140>
            const int8_t cTxLock = pxQueue->cTxLock;
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 8001274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d123      	bne.n	80012c6 <xQueueGiveFromISR+0x10c>
                        if( pxQueue->pxQueueSetContainer != NULL )
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00c      	beq.n	80012a0 <xQueueGiveFromISR+0xe6>
                            if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001288:	f000 fefd 	bl	8002086 <prvNotifyQueueSetContainer>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d030      	beq.n	80012f4 <xQueueGiveFromISR+0x13a>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02d      	beq.n	80012f4 <xQueueGiveFromISR+0x13a>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e029      	b.n	80012f4 <xQueueGiveFromISR+0x13a>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d025      	beq.n	80012f4 <xQueueGiveFromISR+0x13a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012aa:	3324      	adds	r3, #36	; 0x24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fd47 	bl	8004d40 <xTaskRemoveFromEventList>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01d      	beq.n	80012f4 <xQueueGiveFromISR+0x13a>
                                    if( pxHigherPriorityTaskWoken != NULL )
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01a      	beq.n	80012f4 <xQueueGiveFromISR+0x13a>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e016      	b.n	80012f4 <xQueueGiveFromISR+0x13a>
                configASSERT( cTxLock != queueINT8_MAX );
 80012c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012ca:	2b7f      	cmp	r3, #127	; 0x7f
 80012cc:	d10a      	bne.n	80012e4 <xQueueGiveFromISR+0x12a>
        __asm volatile
 80012ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	f3bf 8f6f 	isb	sy
 80012da:	f3bf 8f4f 	dsb	sy
 80012de:	60fb      	str	r3, [r7, #12]
    }
 80012e0:	bf00      	nop
 80012e2:	e7fe      	b.n	80012e2 <xQueueGiveFromISR+0x128>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 80012f4:	2301      	movs	r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
 80012f8:	e001      	b.n	80012fe <xQueueGiveFromISR+0x144>
            xReturn = errQUEUE_FULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f383 8811 	msr	BASEPRI, r3
    }
 8001308:	bf00      	nop
    return xReturn;
 800130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800130c:	4618      	mov	r0, r3
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <xQueueReceiveFromISR>:
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b090      	sub	sp, #64	; 0x40
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 8001324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800133c:	bf00      	nop
 800133e:	e7fe      	b.n	800133e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <xQueueReceiveFromISR+0x3a>
 8001346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <xQueueReceiveFromISR+0x3e>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <xQueueReceiveFromISR+0x40>
 8001352:	2300      	movs	r3, #0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10a      	bne.n	800136e <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800136a:	bf00      	nop
 800136c:	e7fe      	b.n	800136c <xQueueReceiveFromISR+0x58>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800136e:	f008 ffb1 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 8001372:	f3ef 8211 	mrs	r2, BASEPRI
 8001376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	623a      	str	r2, [r7, #32]
 8001388:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800138a:	6a3b      	ldr	r3, [r7, #32]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03e      	beq.n	8001418 <xQueueReceiveFromISR+0x104>
            const int8_t cRxLock = pxQueue->cRxLock;
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013a8:	f000 fe47 	bl	800203a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	1e5a      	subs	r2, r3, #1
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 80013b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d112      	bne.n	80013e4 <xQueueReceiveFromISR+0xd0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d025      	beq.n	8001412 <xQueueReceiveFromISR+0xfe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	3310      	adds	r3, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fcb8 	bl	8004d40 <xTaskRemoveFromEventList>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01d      	beq.n	8001412 <xQueueReceiveFromISR+0xfe>
                        if( pxHigherPriorityTaskWoken != NULL )
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01a      	beq.n	8001412 <xQueueReceiveFromISR+0xfe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e016      	b.n	8001412 <xQueueReceiveFromISR+0xfe>
                configASSERT( cRxLock != queueINT8_MAX );
 80013e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013e8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ea:	d10a      	bne.n	8001402 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80013ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f0:	f383 8811 	msr	BASEPRI, r3
 80013f4:	f3bf 8f6f 	isb	sy
 80013f8:	f3bf 8f4f 	dsb	sy
 80013fc:	61bb      	str	r3, [r7, #24]
    }
 80013fe:	bf00      	nop
 8001400:	e7fe      	b.n	8001400 <xQueueReceiveFromISR+0xec>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	3301      	adds	r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	b25a      	sxtb	r2, r3
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 8001412:	2301      	movs	r3, #1
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001416:	e001      	b.n	800141c <xQueueReceiveFromISR+0x108>
            xReturn = pdFAIL;
 8001418:	2300      	movs	r3, #0
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f383 8811 	msr	BASEPRI, r3
    }
 8001426:	bf00      	nop
    return xReturn;
 8001428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800142a:	4618      	mov	r0, r3
 800142c:	3740      	adds	r7, #64	; 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10a      	bne.n	800145a <xQueueIsQueueEmptyFromISR+0x28>
        __asm volatile
 8001444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	f3bf 8f6f 	isb	sy
 8001450:	f3bf 8f4f 	dsb	sy
 8001454:	60fb      	str	r3, [r7, #12]
    }
 8001456:	bf00      	nop
 8001458:	e7fe      	b.n	8001458 <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e001      	b.n	800146c <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800146c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800146e:	4618      	mov	r0, r3
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10a      	bne.n	80014a0 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60fb      	str	r3, [r7, #12]
    }
 800149c:	bf00      	nop
 800149e:	e7fe      	b.n	800149e <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d102      	bne.n	80014b2 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e001      	b.n	80014b6 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80014b6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <uxQueueMessagesWaitingFromISR>:
{
 80014c2:	b480      	push	{r7}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	617b      	str	r3, [r7, #20]
    configASSERT( pxQueue );
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <uxQueueMessagesWaitingFromISR+0x28>
        __asm volatile
 80014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d8:	f383 8811 	msr	BASEPRI, r3
 80014dc:	f3bf 8f6f 	isb	sy
 80014e0:	f3bf 8f4f 	dsb	sy
 80014e4:	60fb      	str	r3, [r7, #12]
    }
 80014e6:	bf00      	nop
 80014e8:	e7fe      	b.n	80014e8 <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	613b      	str	r3, [r7, #16]
    return uxReturn;
 80014f0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80014f2:	4618      	mov	r0, r3
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <xQueueCreateMutex>:
    {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	461a      	mov	r2, r3
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f000 fab7 	bl	8001a88 <xQueueGenericCreate>
 800151a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 fe3c 	bl	800219a <prvInitialiseMutex>
        return xNewQueue;
 8001522:	68fb      	ldr	r3, [r7, #12]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <xQueueCreateMutexStatic>:
    {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f000 faf0 	bl	8001b30 <xQueueGenericCreateStatic>
 8001550:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fe21 	bl	800219a <prvInitialiseMutex>
        return xNewQueue;
 8001558:	68fb      	ldr	r3, [r7, #12]
    }
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <xQueueCreateCountingSemaphore>:
    {
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
        configASSERT( uxMaxCount != 0 );
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	613b      	str	r3, [r7, #16]
    }
 8001584:	bf00      	nop
 8001586:	e7fe      	b.n	8001586 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d90a      	bls.n	80015a6 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	60fb      	str	r3, [r7, #12]
    }
 80015a2:	bf00      	nop
 80015a4:	e7fe      	b.n	80015a4 <xQueueCreateCountingSemaphore+0x42>
        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80015a6:	2202      	movs	r2, #2
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa6c 	bl	8001a88 <xQueueGenericCreate>
 80015b0:	6178      	str	r0, [r7, #20]
        if( xHandle != NULL )
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <xQueueCreateCountingSemaphore+0x5c>
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38
        return xHandle;
 80015be:	697b      	ldr	r3, [r7, #20]
    }
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <xQueueCreateCountingSemaphoreStatic>:
    {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
        configASSERT( uxMaxCount != 0 );
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <xQueueCreateCountingSemaphoreStatic+0x28>
        __asm volatile
 80015da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015de:	f383 8811 	msr	BASEPRI, r3
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	61bb      	str	r3, [r7, #24]
    }
 80015ec:	bf00      	nop
 80015ee:	e7fe      	b.n	80015ee <xQueueCreateCountingSemaphoreStatic+0x26>
        configASSERT( uxInitialCount <= uxMaxCount );
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d90a      	bls.n	800160e <xQueueCreateCountingSemaphoreStatic+0x46>
        __asm volatile
 80015f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fc:	f383 8811 	msr	BASEPRI, r3
 8001600:	f3bf 8f6f 	isb	sy
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	617b      	str	r3, [r7, #20]
    }
 800160a:	bf00      	nop
 800160c:	e7fe      	b.n	800160c <xQueueCreateCountingSemaphoreStatic+0x44>
        xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800160e:	2302      	movs	r3, #2
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fa89 	bl	8001b30 <xQueueGenericCreateStatic>
 800161e:	61f8      	str	r0, [r7, #28]
        if( xHandle != NULL )
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <xQueueCreateCountingSemaphoreStatic+0x64>
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
        return xHandle;
 800162c:	69fb      	ldr	r3, [r7, #28]
    }
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <xQueueSemaphoreTake>:
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b08e      	sub	sp, #56	; 0x38
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
    Queue_t * const pxQueue = xQueue;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( ( pxQueue ) );
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10a      	bne.n	8001668 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	623b      	str	r3, [r7, #32]
    }
 8001664:	bf00      	nop
 8001666:	e7fe      	b.n	8001666 <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00a      	beq.n	8001686 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8001670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001674:	f383 8811 	msr	BASEPRI, r3
 8001678:	f3bf 8f6f 	isb	sy
 800167c:	f3bf 8f4f 	dsb	sy
 8001680:	61fb      	str	r3, [r7, #28]
    }
 8001682:	bf00      	nop
 8001684:	e7fe      	b.n	8001684 <xQueueSemaphoreTake+0x4e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001686:	f003 fced 	bl	8005064 <xTaskGetSchedulerState>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <xQueueSemaphoreTake+0x60>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <xQueueSemaphoreTake+0x64>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <xQueueSemaphoreTake+0x66>
 800169a:	2300      	movs	r3, #0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80016a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	61bb      	str	r3, [r7, #24]
    }
 80016b2:	bf00      	nop
 80016b4:	e7fe      	b.n	80016b4 <xQueueSemaphoreTake+0x7e>
        taskENTER_CRITICAL();
 80016b6:	f008 fd8f 	bl	800a1d8 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d024      	beq.n	8001710 <xQueueSemaphoreTake+0xda>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <xQueueSemaphoreTake+0xaa>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80016d6:	f003 fe61 	bl	800539c <pvTaskIncrementMutexHeldCount>
 80016da:	4602      	mov	r2, r0
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00f      	beq.n	8001708 <xQueueSemaphoreTake+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	3310      	adds	r3, #16
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fb27 	bl	8004d40 <xTaskRemoveFromEventList>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <xQueueSemaphoreTake+0xd2>
                        queueYIELD_IF_USING_PREEMPTION();
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <xQueueSemaphoreTake+0x212>)
 80016fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001708:	f008 fd84 	bl	800a214 <vPortExitCritical>
                return pdPASS;
 800170c:	2301      	movs	r3, #1
 800170e:	e097      	b.n	8001840 <xQueueSemaphoreTake+0x20a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d111      	bne.n	800173a <xQueueSemaphoreTake+0x104>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	617b      	str	r3, [r7, #20]
    }
 800172e:	bf00      	nop
 8001730:	e7fe      	b.n	8001730 <xQueueSemaphoreTake+0xfa>
                    taskEXIT_CRITICAL();
 8001732:	f008 fd6f 	bl	800a214 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8001736:	2300      	movs	r3, #0
 8001738:	e082      	b.n	8001840 <xQueueSemaphoreTake+0x20a>
                else if( xEntryTimeSet == pdFALSE )
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <xQueueSemaphoreTake+0x118>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fe3d 	bl	80053c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800174a:	2301      	movs	r3, #1
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
        taskEXIT_CRITICAL();
 800174e:	f008 fd61 	bl	800a214 <vPortExitCritical>
        vTaskSuspendAll();
 8001752:	f002 fa97 	bl	8003c84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001756:	f008 fd3f 	bl	800a1d8 <vPortEnterCritical>
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001760:	b25b      	sxtb	r3, r3
 8001762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001766:	d103      	bne.n	8001770 <xQueueSemaphoreTake+0x13a>
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d103      	bne.n	8001786 <xQueueSemaphoreTake+0x150>
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001786:	f008 fd45 	bl	800a214 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800178a:	463a      	mov	r2, r7
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f8f2 	bl	800497c <xTaskCheckForTimeOut>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d132      	bne.n	8001804 <xQueueSemaphoreTake+0x1ce>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800179e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017a0:	f000 fbb3 	bl	8001f0a <prvIsQueueEmpty>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d026      	beq.n	80017f8 <xQueueSemaphoreTake+0x1c2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <xQueueSemaphoreTake+0x190>
                            taskENTER_CRITICAL();
 80017b2:	f008 fd11 	bl	800a1d8 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fc70 	bl	80050a0 <xTaskPriorityInherit>
 80017c0:	6338      	str	r0, [r7, #48]	; 0x30
                            taskEXIT_CRITICAL();
 80017c2:	f008 fd27 	bl	800a214 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	3324      	adds	r3, #36	; 0x24
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fa2a 	bl	8004c28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80017d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017d6:	f000 fb39 	bl	8001e4c <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80017da:	f002 fa61 	bl	8003ca0 <xTaskResumeAll>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f af68 	bne.w	80016b6 <xQueueSemaphoreTake+0x80>
                    portYIELD_WITHIN_API();
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <xQueueSemaphoreTake+0x212>)
 80017e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	e75e      	b.n	80016b6 <xQueueSemaphoreTake+0x80>
                prvUnlockQueue( pxQueue );
 80017f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017fa:	f000 fb27 	bl	8001e4c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017fe:	f002 fa4f 	bl	8003ca0 <xTaskResumeAll>
 8001802:	e758      	b.n	80016b6 <xQueueSemaphoreTake+0x80>
            prvUnlockQueue( pxQueue );
 8001804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001806:	f000 fb21 	bl	8001e4c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800180a:	f002 fa49 	bl	8003ca0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800180e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001810:	f000 fb7b 	bl	8001f0a <prvIsQueueEmpty>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f43f af4d 	beq.w	80016b6 <xQueueSemaphoreTake+0x80>
                        if( xInheritanceOccurred != pdFALSE )
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <xQueueSemaphoreTake+0x208>
                            taskENTER_CRITICAL();
 8001822:	f008 fcd9 	bl	800a1d8 <vPortEnterCritical>
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001828:	f000 fcd1 	bl	80021ce <prvGetDisinheritPriorityAfterTimeout>
 800182c:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fd23 	bl	8005280 <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 800183a:	f008 fceb 	bl	800a214 <vPortExitCritical>
                return errQUEUE_EMPTY;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	e000ed04 	.word	0xe000ed04

0800184c <xQueueGetMutexHolder>:
    {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60bb      	str	r3, [r7, #8]
        taskENTER_CRITICAL();
 8001858:	f008 fcbe 	bl	800a1d8 <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <xQueueGetMutexHolder+0x20>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e001      	b.n	8001870 <xQueueGetMutexHolder+0x24>
                pxReturn = NULL;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
        taskEXIT_CRITICAL();
 8001870:	f008 fcd0 	bl	800a214 <vPortExitCritical>
        return pxReturn;
 8001874:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <xQueueGetMutexHolderFromISR>:
    {
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10a      	bne.n	80018a2 <xQueueGetMutexHolderFromISR+0x24>
        __asm volatile
 800188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	60bb      	str	r3, [r7, #8]
    }
 800189e:	bf00      	nop
 80018a0:	e7fe      	b.n	80018a0 <xQueueGetMutexHolderFromISR+0x22>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <xQueueGetMutexHolderFromISR+0x34>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e001      	b.n	80018b6 <xQueueGetMutexHolderFromISR+0x38>
            pxReturn = NULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 80018b6:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <xQueueTakeMutexRecursive>:
    {
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b087      	sub	sp, #28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <xQueueTakeMutexRecursive+0x2a>
        __asm volatile
 80018d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	60fb      	str	r3, [r7, #12]
    }
 80018e8:	bf00      	nop
 80018ea:	e7fe      	b.n	80018ea <xQueueTakeMutexRecursive+0x28>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	689c      	ldr	r4, [r3, #8]
 80018f0:	f003 fb9e 	bl	8005030 <xTaskGetCurrentTaskHandle>
 80018f4:	4603      	mov	r3, r0
 80018f6:	429c      	cmp	r4, r3
 80018f8:	d107      	bne.n	800190a <xQueueTakeMutexRecursive+0x48>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00c      	b.n	8001924 <xQueueTakeMutexRecursive+0x62>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	6938      	ldr	r0, [r7, #16]
 800190e:	f7ff fe92 	bl	8001636 <xQueueSemaphoreTake>
 8001912:	6178      	str	r0, [r7, #20]
            if( xReturn != pdFAIL )
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <xQueueTakeMutexRecursive+0x62>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	60da      	str	r2, [r3, #12]
        return xReturn;
 8001924:	697b      	ldr	r3, [r7, #20]
    }
 8001926:	4618      	mov	r0, r3
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}

0800192e <xQueueGiveMutexRecursive>:
    {
 800192e:	b590      	push	{r4, r7, lr}
 8001930:	b087      	sub	sp, #28
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <xQueueGiveMutexRecursive+0x28>
        __asm volatile
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	60fb      	str	r3, [r7, #12]
    }
 8001952:	bf00      	nop
 8001954:	e7fe      	b.n	8001954 <xQueueGiveMutexRecursive+0x26>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	689c      	ldr	r4, [r3, #8]
 800195a:	f003 fb69 	bl	8005030 <xTaskGetCurrentTaskHandle>
 800195e:	4603      	mov	r3, r0
 8001960:	429c      	cmp	r4, r3
 8001962:	d111      	bne.n	8001988 <xQueueGiveMutexRecursive+0x5a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <xQueueGiveMutexRecursive+0x54>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001976:	2300      	movs	r3, #0
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	6938      	ldr	r0, [r7, #16]
 800197e:	f7fe ffb3 	bl	80008e8 <xQueueGenericSend>
            xReturn = pdPASS;
 8001982:	2301      	movs	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e001      	b.n	800198c <xQueueGiveMutexRecursive+0x5e>
            xReturn = pdFAIL;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
        return xReturn;
 800198c:	697b      	ldr	r3, [r7, #20]
    }
 800198e:	4618      	mov	r0, r3
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e014      	b.n	80019d0 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <vQueueAddToRegistry+0x4e>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <vQueueAddToRegistry+0x4e>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <vQueueAddToRegistry+0x4e>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80019c8:	e006      	b.n	80019d8 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d9e7      	bls.n	80019a6 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000

080019e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e016      	b.n	8001a24 <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <vQueueUnregisterQueue+0x50>)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10b      	bne.n	8001a1e <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <vQueueUnregisterQueue+0x50>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <vQueueUnregisterQueue+0x50>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
                break;
 8001a1c:	e006      	b.n	8001a2c <vQueueUnregisterQueue+0x44>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d9e5      	bls.n	80019f6 <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000

08001a3c <pcQueueGetName>:
    {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e010      	b.n	8001a70 <pcQueueGetName+0x34>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <pcQueueGetName+0x48>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d105      	bne.n	8001a6a <pcQueueGetName+0x2e>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <pcQueueGetName+0x48>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a66:	60bb      	str	r3, [r7, #8]
                break;
 8001a68:	e005      	b.n	8001a76 <pcQueueGetName+0x3a>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d9eb      	bls.n	8001a4e <pcQueueGetName+0x12>
        return pcReturn;
 8001a76:	68bb      	ldr	r3, [r7, #8]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <xQueueGenericCreate>:
    {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71fb      	strb	r3, [r7, #7]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	61bb      	str	r3, [r7, #24]
    }
 8001aae:	bf00      	nop
 8001ab0:	e7fe      	b.n	8001ab0 <xQueueGenericCreate+0x28>
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <xQueueGenericCreate+0x48>
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d101      	bne.n	8001ad4 <xQueueGenericCreate+0x4c>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <xQueueGenericCreate+0x4e>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <xQueueGenericCreate+0x68>
        __asm volatile
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	617b      	str	r3, [r7, #20]
    }
 8001aec:	bf00      	nop
 8001aee:	e7fe      	b.n	8001aee <xQueueGenericCreate+0x66>
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	334c      	adds	r3, #76	; 0x4c
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 ffa3 	bl	8006a40 <pvPortMalloc>
 8001afa:	6238      	str	r0, [r7, #32]
        if( pxNewQueue != NULL )
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <xQueueGenericCreate+0x9e>
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	334c      	adds	r3, #76	; 0x4c
 8001b0a:	61fb      	str	r3, [r7, #28]
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fb18 	bl	8002156 <prvInitialiseNewQueue>
        return pxNewQueue;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
    }
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <xQueueGenericCreateStatic>:
    {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001b56:	bf00      	nop
 8001b58:	e7fe      	b.n	8001b58 <xQueueGenericCreateStatic+0x28>
        configASSERT( pxStaticQueue != NULL );
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8001b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001b72:	bf00      	nop
 8001b74:	e7fe      	b.n	8001b74 <xQueueGenericCreateStatic+0x44>
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <xQueueGenericCreateStatic+0x52>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <xQueueGenericCreateStatic+0x56>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <xQueueGenericCreateStatic+0x58>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8001b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b90:	f383 8811 	msr	BASEPRI, r3
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	623b      	str	r3, [r7, #32]
    }
 8001b9e:	bf00      	nop
 8001ba0:	e7fe      	b.n	8001ba0 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <xQueueGenericCreateStatic+0x7e>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <xQueueGenericCreateStatic+0x82>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <xQueueGenericCreateStatic+0x84>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	61fb      	str	r3, [r7, #28]
    }
 8001bca:	bf00      	nop
 8001bcc:	e7fe      	b.n	8001bcc <xQueueGenericCreateStatic+0x9c>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8001bce:	234c      	movs	r3, #76	; 0x4c
 8001bd0:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b4c      	cmp	r3, #76	; 0x4c
 8001bd6:	d00a      	beq.n	8001bee <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	61bb      	str	r3, [r7, #24]
    }
 8001bea:	bf00      	nop
 8001bec:	e7fe      	b.n	8001bec <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001bee:	697b      	ldr	r3, [r7, #20]
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if( pxNewQueue != NULL )
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00d      	beq.n	8001c16 <xQueueGenericCreateStatic+0xe6>
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 faa0 	bl	8002156 <prvInitialiseNewQueue>
        return pxNewQueue;
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
        QueueSetHandle_t pxQueue;

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff2b 	bl	8001a88 <xQueueGenericCreate>
 8001c32:	60f8      	str	r0, [r7, #12]

        return pxQueue;
 8001c34:	68fb      	ldr	r3, [r7, #12]
    }
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        taskENTER_CRITICAL();
 8001c48:	f008 fac6 	bl	800a1d8 <vPortEnterCritical>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <xQueueAddToSet+0x1c>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e00b      	b.n	8001c72 <xQueueAddToSet+0x34>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <xQueueAddToSet+0x2a>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e004      	b.n	8001c72 <xQueueAddToSet+0x34>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	649a      	str	r2, [r3, #72]	; 0x48
                xReturn = pdPASS;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 8001c72:	f008 facf 	bl	800a214 <vPortExitCritical>

        return xReturn;
 8001c76:	68fb      	ldr	r3, [r7, #12]
    }
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <xQueueRemoveFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                    QueueSetHandle_t xQueueSet )
    {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60bb      	str	r3, [r7, #8]

        if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d002      	beq.n	8001c9e <xQueueRemoveFromSet+0x1e>
        {
            /* The queue was not a member of the set. */
            xReturn = pdFAIL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e00f      	b.n	8001cbe <xQueueRemoveFromSet+0x3e>
        }
        else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <xQueueRemoveFromSet+0x2c>
        {
            /* It is dangerous to remove a queue from a set when the queue is
             * not empty because the queue set will still hold pending events for
             * the queue. */
            xReturn = pdFAIL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e008      	b.n	8001cbe <xQueueRemoveFromSet+0x3e>
        }
        else
        {
            taskENTER_CRITICAL();
 8001cac:	f008 fa94 	bl	800a1d8 <vPortEnterCritical>
            {
                /* The queue is no longer contained in the set. */
                pxQueueOrSemaphore->pxQueueSetContainer = NULL;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	649a      	str	r2, [r3, #72]	; 0x48
            }
            taskEXIT_CRITICAL();
 8001cb6:	f008 faad 	bl	800a214 <vPortExitCritical>
            xReturn = pdPASS;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
        QueueSetMemberHandle_t xReturn = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff f867 	bl	8000db2 <xQueueReceive>
        return xReturn;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <xQueueSelectFromSetFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
    {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
        QueueSetMemberHandle_t xReturn = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]

        ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fb06 	bl	8001314 <xQueueReceiveFromISR>
        return xReturn;
 8001d08:	68fb      	ldr	r3, [r7, #12]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <vQueueWaitForMessageRestricted>:
    {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	617b      	str	r3, [r7, #20]
        prvLockQueue( pxQueue );
 8001d22:	f008 fa59 	bl	800a1d8 <vPortEnterCritical>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d103      	bne.n	8001d3c <vQueueWaitForMessageRestricted+0x2a>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d103      	bne.n	8001d52 <vQueueWaitForMessageRestricted+0x40>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d52:	f008 fa5f 	bl	800a214 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <vQueueWaitForMessageRestricted+0x5a>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3324      	adds	r3, #36	; 0x24
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 ffbe 	bl	8004ce8 <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
 8001d6c:	6978      	ldr	r0, [r7, #20]
 8001d6e:	f000 f86d 	bl	8001e4c <prvUnlockQueue>
    }
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <xQueueGenericReset>:
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
    configASSERT( pxQueue );
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <xQueueGenericReset+0x2a>
        __asm volatile
 8001d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	60bb      	str	r3, [r7, #8]
    }
 8001da0:	bf00      	nop
 8001da2:	e7fe      	b.n	8001da2 <xQueueGenericReset+0x28>
    taskENTER_CRITICAL();
 8001da4:	f008 fa18 	bl	800a1d8 <vPortEnterCritical>
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	441a      	add	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	441a      	add	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	22ff      	movs	r2, #255	; 0xff
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	22ff      	movs	r2, #255	; 0xff
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        if( xNewQueue == pdFALSE )
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d114      	bne.n	8001e24 <xQueueGenericReset+0xaa>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <xQueueGenericReset+0xbe>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3310      	adds	r3, #16
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 ff9a 	bl	8004d40 <xTaskRemoveFromEventList>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d012      	beq.n	8001e38 <xQueueGenericReset+0xbe>
                    queueYIELD_IF_USING_PREEMPTION();
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <xQueueGenericReset+0xce>)
 8001e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	e009      	b.n	8001e38 <xQueueGenericReset+0xbe>
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3310      	adds	r3, #16
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fcad 	bl	8000788 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3324      	adds	r3, #36	; 0x24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fca8 	bl	8000788 <vListInitialise>
    taskEXIT_CRITICAL();
 8001e38:	f008 f9ec 	bl	800a214 <vPortExitCritical>
    return pdPASS;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000ed04 	.word	0xe000ed04

08001e4c <prvUnlockQueue>:
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001e54:	f008 f9c0 	bl	800a1d8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e5e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e60:	e01e      	b.n	8001ea0 <prvUnlockQueue+0x54>
                    if( pxQueue->pxQueueSetContainer != NULL )
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <prvUnlockQueue+0x30>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f90b 	bl	8002086 <prvNotifyQueueSetContainer>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <prvUnlockQueue+0x4c>
                            vTaskMissedYield();
 8001e76:	f003 f8e9 	bl	800504c <vTaskMissedYield>
 8001e7a:	e00d      	b.n	8001e98 <prvUnlockQueue+0x4c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <prvUnlockQueue+0x5e>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3324      	adds	r3, #36	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 ff59 	bl	8004d40 <xTaskRemoveFromEventList>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <prvUnlockQueue+0x4c>
                                vTaskMissedYield();
 8001e94:	f003 f8da 	bl	800504c <vTaskMissedYield>
            --cTxLock;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dcdc      	bgt.n	8001e62 <prvUnlockQueue+0x16>
 8001ea8:	e000      	b.n	8001eac <prvUnlockQueue+0x60>
                            break;
 8001eaa:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	22ff      	movs	r2, #255	; 0xff
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001eb4:	f008 f9ae 	bl	800a214 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001eb8:	f008 f98e 	bl	800a1d8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ec2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ec4:	e011      	b.n	8001eea <prvUnlockQueue+0x9e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <prvUnlockQueue+0xa8>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 ff34 	bl	8004d40 <xTaskRemoveFromEventList>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <prvUnlockQueue+0x96>
                    vTaskMissedYield();
 8001ede:	f003 f8b5 	bl	800504c <vTaskMissedYield>
                --cRxLock;
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dce9      	bgt.n	8001ec6 <prvUnlockQueue+0x7a>
 8001ef2:	e000      	b.n	8001ef6 <prvUnlockQueue+0xaa>
                break;
 8001ef4:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 8001efe:	f008 f989 	bl	800a214 <vPortExitCritical>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <prvIsQueueEmpty>:
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001f12:	f008 f961 	bl	800a1d8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e001      	b.n	8001f28 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 8001f28:	f008 f974 	bl	800a214 <vPortExitCritical>
    return xReturn;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <prvIsQueueFull>:
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001f3e:	f008 f94b 	bl	800a1d8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d102      	bne.n	8001f54 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e001      	b.n	8001f58 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 8001f58:	f008 f95c 	bl	800a214 <vPortExitCritical>
    return xReturn;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <prvCopyDataToQueue>:
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <prvCopyDataToQueue+0x3a>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d14d      	bne.n	8002028 <prvCopyDataToQueue+0xc2>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f8fb 	bl	800518c <xTaskPriorityDisinherit>
 8001f96:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e043      	b.n	8002028 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6858      	ldr	r0, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	f00e fa09 	bl	80103c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	441a      	add	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d32b      	bcc.n	8002028 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	e026      	b.n	8002028 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68d8      	ldr	r0, [r3, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	f00e f9ef 	bl	80103c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	441a      	add	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d207      	bcs.n	8002016 <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	425b      	negs	r3, r3
 8002010:	441a      	add	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d105      	bne.n	8002028 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	3b01      	subs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 8002030:	697b      	ldr	r3, [r7, #20]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <prvCopyDataFromQueue>:
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d018      	beq.n	800207e <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	441a      	add	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d303      	bcc.n	800206e <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	461a      	mov	r2, r3
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	f00e f9a5 	bl	80103c8 <memcpy>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002086:	b580      	push	{r7, lr}
 8002088:	b088      	sub	sp, #32
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	613b      	str	r3, [r7, #16]
    }
 80020b0:	bf00      	nop
 80020b2:	e7fe      	b.n	80020b2 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	429a      	cmp	r2, r3
 80020be:	d30a      	bcc.n	80020d6 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	60fb      	str	r3, [r7, #12]
    }
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	429a      	cmp	r2, r3
 80020e0:	d234      	bcs.n	800214c <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e8:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	69b8      	ldr	r0, [r7, #24]
 80020f2:	f7ff ff38 	bl	8001f66 <prvCopyDataToQueue>
 80020f6:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 80020f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d10e      	bne.n	8002120 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	3324      	adds	r3, #36	; 0x24
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fe16 	bl	8004d40 <xTaskRemoveFromEventList>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d018      	beq.n	800214c <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e015      	b.n	800214c <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8002120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002124:	2b7f      	cmp	r3, #127	; 0x7f
 8002126:	d10a      	bne.n	800213e <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60bb      	str	r3, [r7, #8]
    }
 800213a:	bf00      	nop
 800213c:	e7fe      	b.n	800213c <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	3301      	adds	r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	b25a      	sxtb	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800214c:	69fb      	ldr	r3, [r7, #28]
    }
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <prvInitialiseNewQueue>:
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e002      	b.n	8002178 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002184:	2101      	movs	r1, #1
 8002186:	69b8      	ldr	r0, [r7, #24]
 8002188:	f7ff fdf7 	bl	8001d7a <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2200      	movs	r2, #0
 8002190:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <prvInitialiseMutex>:
    {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80021ba:	2300      	movs	r3, #0
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fb91 	bl	80008e8 <xQueueGenericSend>
    }
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <prvGetDisinheritPriorityAfterTimeout>:
    {
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1c3 0305 	rsb	r3, r3, #5
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e001      	b.n	80021f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80021f0:	68fb      	ldr	r3, [r7, #12]
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b092      	sub	sp, #72	; 0x48
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	3b01      	subs	r3, #1
 800221c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <xStreamBufferSend+0x3e>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <xStreamBufferSend+0x3c>
    configASSERT( pxStreamBuffer );
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xStreamBufferSend+0x5a>
        __asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xStreamBufferSend+0x58>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <xStreamBufferSend+0x98>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	3304      	adds	r3, #4
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d80a      	bhi.n	8002286 <xStreamBufferSend+0x8a>
        __asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	623b      	str	r3, [r7, #32]
    }
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <xStreamBufferSend+0x88>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 8002286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	429a      	cmp	r2, r3
 800228c:	d908      	bls.n	80022a0 <xStreamBufferSend+0xa4>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 800228e:	2300      	movs	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	e005      	b.n	80022a0 <xStreamBufferSend+0xa4>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 8002294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	429a      	cmp	r2, r3
 800229a:	d901      	bls.n	80022a0 <xStreamBufferSend+0xa4>
        {
            xRequiredSpace = xMaxReportedSpace;
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d041      	beq.n	800232a <xStreamBufferSend+0x12e>
    {
        vTaskSetTimeOutState( &xTimeOut );
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fb40 	bl	8004930 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 80022b0:	f007 ff92 	bl	800a1d8 <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80022b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022b6:	f000 fa9e 	bl	80027f6 <xStreamBufferSpacesAvailable>
 80022ba:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 80022bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d218      	bcs.n	80022f6 <xStreamBufferSend+0xfa>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 80022c4:	2100      	movs	r1, #0
 80022c6:	2000      	movs	r0, #0
 80022c8:	f002 faca 	bl	8004860 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <xStreamBufferSend+0xee>
        __asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	61fb      	str	r3, [r7, #28]
    }
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xStreamBufferSend+0xec>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80022ea:	f002 fea1 	bl	8005030 <xTaskGetCurrentTaskHandle>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	e002      	b.n	80022fc <xStreamBufferSend+0x100>
                }
                else
                {
                    taskEXIT_CRITICAL();
 80022f6:	f007 ff8d 	bl	800a214 <vPortExitCritical>
                    break;
 80022fa:	e016      	b.n	800232a <xStreamBufferSend+0x12e>
                }
            }
            taskEXIT_CRITICAL();
 80022fc:	f007 ff8a 	bl	800a214 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2000      	movs	r0, #0
 800230c:	f002 f914 	bl	8004538 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	2200      	movs	r2, #0
 8002314:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8002316:	463a      	mov	r2, r7
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fb2c 	bl	800497c <xTaskCheckForTimeOut>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0c2      	beq.n	80022b0 <xStreamBufferSend+0xb4>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <xStreamBufferSend+0x13c>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002330:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002332:	f000 fa60 	bl	80027f6 <xStreamBufferSpacesAvailable>
 8002336:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002344:	f000 fd45 	bl	8002dd2 <prvWriteMessageToBuffer>
 8002348:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <xStreamBufferSend+0x18c>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002352:	f000 fc7b 	bl	8002c4c <prvBytesInBuffer>
 8002356:	4602      	mov	r2, r0
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d313      	bcc.n	8002388 <xStreamBufferSend+0x18c>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8002360:	f001 fc90 	bl	8003c84 <vTaskSuspendAll>
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <xStreamBufferSend+0x188>
 800236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236e:	6918      	ldr	r0, [r3, #16]
 8002370:	2300      	movs	r3, #0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	f001 fefb 	bl	8004174 <xTaskGenericNotify>
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	f001 fc8c 	bl	8003ca0 <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800238a:	4618      	mov	r0, r3
 800238c:	3740      	adds	r7, #64	; 0x40
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b090      	sub	sp, #64	; 0x40
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <xStreamBufferSendFromISR+0x32>
        __asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	623b      	str	r3, [r7, #32]
    }
 80023c0:	bf00      	nop
 80023c2:	e7fe      	b.n	80023c2 <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xStreamBufferSendFromISR+0x4e>
        __asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	61fb      	str	r3, [r7, #28]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	7f1b      	ldrb	r3, [r3, #28]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	3304      	adds	r3, #4
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80023f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023f4:	f000 f9ff 	bl	80027f6 <xStreamBufferSpacesAvailable>
 80023f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002406:	f000 fce4 	bl	8002dd2 <prvWriteMessageToBuffer>
 800240a:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d02d      	beq.n	800246e <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002414:	f000 fc1a 	bl	8002c4c <prvBytesInBuffer>
 8002418:	4602      	mov	r2, r0
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	429a      	cmp	r2, r3
 8002420:	d325      	bcc.n	800246e <xStreamBufferSendFromISR+0xdc>
        __asm volatile
 8002422:	f3ef 8211 	mrs	r2, BASEPRI
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	61ba      	str	r2, [r7, #24]
 8002438:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800243a:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <xStreamBufferSendFromISR+0xd0>
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6918      	ldr	r0, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2300      	movs	r3, #0
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	f001 ff6c 	bl	8004334 <xTaskGenericNotifyFromISR>
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f383 8811 	msr	BASEPRI, r3
    }
 800246c:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002470:	4618      	mov	r0, r3
 8002472:	3738      	adds	r7, #56	; 0x38
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xStreamBufferReceive+0x32>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	61fb      	str	r3, [r7, #28]
    }
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <xStreamBufferReceive+0x4e>
        __asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	61bb      	str	r3, [r7, #24]
    }
 80024c2:	bf00      	nop
 80024c4:	e7fe      	b.n	80024c4 <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	7f1b      	ldrb	r3, [r3, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80024d2:	2304      	movs	r3, #4
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e001      	b.n	80024dc <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d037      	beq.n	8002552 <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 80024e2:	f007 fe79 	bl	800a1d8 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80024e6:	6a38      	ldr	r0, [r7, #32]
 80024e8:	f000 fbb0 	bl	8002c4c <prvBytesInBuffer>
 80024ec:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80024ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d817      	bhi.n	8002526 <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f002 f9b1 	bl	8004860 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <xStreamBufferReceive+0xa4>
        __asm volatile
 8002506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250a:	f383 8811 	msr	BASEPRI, r3
 800250e:	f3bf 8f6f 	isb	sy
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	617b      	str	r3, [r7, #20]
    }
 8002518:	bf00      	nop
 800251a:	e7fe      	b.n	800251a <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800251c:	f002 fd88 	bl	8005030 <xTaskGetCurrentTaskHandle>
 8002520:	4602      	mov	r2, r0
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002526:	f007 fe75 	bl	800a214 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 800252a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	429a      	cmp	r2, r3
 8002530:	d813      	bhi.n	800255a <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2000      	movs	r0, #0
 800253e:	f001 fffb 	bl	8004538 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002548:	6a38      	ldr	r0, [r7, #32]
 800254a:	f000 fb7f 	bl	8002c4c <prvBytesInBuffer>
 800254e:	62b8      	str	r0, [r7, #40]	; 0x28
 8002550:	e003      	b.n	800255a <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002552:	6a38      	ldr	r0, [r7, #32]
 8002554:	f000 fb7a 	bl	8002c4c <prvBytesInBuffer>
 8002558:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	429a      	cmp	r2, r3
 8002560:	d91f      	bls.n	80025a2 <xStreamBufferReceive+0x12a>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	6a38      	ldr	r0, [r7, #32]
 800256e:	f000 fbfe 	bl	8002d6e <prvReadMessageFromBuffer>
 8002572:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d013      	beq.n	80025a2 <xStreamBufferReceive+0x12a>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 800257a:	f001 fb83 	bl	8003c84 <vTaskSuspendAll>
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <xStreamBufferReceive+0x126>
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	6958      	ldr	r0, [r3, #20]
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	f001 fdee 	bl	8004174 <xTaskGenericNotify>
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
 800259e:	f001 fb7f 	bl	8003ca0 <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3730      	adds	r7, #48	; 0x30
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvRxData );
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xStreamBufferReceiveFromISR+0x32>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	623b      	str	r3, [r7, #32]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xStreamBufferReceiveFromISR+0x30>
    configASSERT( pxStreamBuffer );
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xStreamBufferReceiveFromISR+0x4e>
        __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
    }
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xStreamBufferReceiveFromISR+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <xStreamBufferReceiveFromISR+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002606:	2304      	movs	r3, #4
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	e001      	b.n	8002610 <xStreamBufferReceiveFromISR+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002612:	f000 fb1b 	bl	8002c4c <prvBytesInBuffer>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	429a      	cmp	r2, r3
 800261e:	d931      	bls.n	8002684 <xStreamBufferReceiveFromISR+0xd8>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800262c:	f000 fb9f 	bl	8002d6e <prvReadMessageFromBuffer>
 8002630:	6378      	str	r0, [r7, #52]	; 0x34

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	2b00      	cmp	r3, #0
 8002636:	d025      	beq.n	8002684 <xStreamBufferReceiveFromISR+0xd8>
        __asm volatile
 8002638:	f3ef 8211 	mrs	r2, BASEPRI
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	61ba      	str	r2, [r7, #24]
 800264e:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8002650:	69bb      	ldr	r3, [r7, #24]
        {
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <xStreamBufferReceiveFromISR+0xcc>
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	6958      	ldr	r0, [r3, #20]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	f001 fe61 	bl	8004334 <xTaskGenericNotifyFromISR>
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f383 8811 	msr	BASEPRI, r3
    }
 8002682:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002686:	4618      	mov	r0, r3
 8002688:	3738      	adds	r7, #56	; 0x38
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <vStreamBufferDelete>:
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]
    configASSERT( pxStreamBuffer );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <vStreamBufferDelete+0x28>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	60bb      	str	r3, [r7, #8]
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <vStreamBufferDelete+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	7f1b      	ldrb	r3, [r3, #28]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <vStreamBufferDelete+0x3c>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f004 fa8c 	bl	8006be0 <vPortFree>
}
 80026c8:	e004      	b.n	80026d4 <vStreamBufferDelete+0x46>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 80026ca:	2220      	movs	r2, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f00d fe88 	bl	80103e4 <memset>
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <xStreamBufferIsFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

    configASSERT( pxStreamBuffer );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xStreamBufferIsFull+0x28>
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	60bb      	str	r3, [r7, #8]
    }
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xStreamBufferIsFull+0x26>

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	7f1b      	ldrb	r3, [r3, #28]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <xStreamBufferIsFull+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002710:	2304      	movs	r3, #4
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	e001      	b.n	800271a <xStreamBufferIsFull+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f86b 	bl	80027f6 <xStreamBufferSpacesAvailable>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4293      	cmp	r3, r2
 8002726:	d302      	bcc.n	800272e <xStreamBufferIsFull+0x52>
    {
        xReturn = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e001      	b.n	8002732 <xStreamBufferIsFull+0x56>
    }
    else
    {
        xReturn = pdFALSE;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002732:	697b      	ldr	r3, [r7, #20]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <xStreamBufferIsEmpty>:
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xStreamBufferIsEmpty+0x28>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	60bb      	str	r3, [r7, #8]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xStreamBufferIsEmpty+0x26>
    xTail = pxStreamBuffer->xTail;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
    if( pxStreamBuffer->xHead == xTail )
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d102      	bne.n	800277a <xStreamBufferIsEmpty+0x3e>
        xReturn = pdTRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e001      	b.n	800277e <xStreamBufferIsEmpty+0x42>
        xReturn = pdFALSE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
    return xReturn;
 800277e:	697b      	ldr	r3, [r7, #20]
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <xStreamBufferReset>:
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af02      	add	r7, sp, #8
 8002790:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFAIL;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xStreamBufferReset+0x2c>
        __asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	60fb      	str	r3, [r7, #12]
    }
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xStreamBufferReset+0x2a>
    taskENTER_CRITICAL();
 80027b6:	f007 fd0f 	bl	800a1d8 <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <xStreamBufferReset+0x5e>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <xStreamBufferReset+0x5e>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6999      	ldr	r1, [r3, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	68d8      	ldr	r0, [r3, #12]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	7f1b      	ldrb	r3, [r3, #28]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	6938      	ldr	r0, [r7, #16]
 80027e0:	f000 fbae 	bl	8002f40 <prvInitialiseNewStreamBuffer>
                xReturn = pdPASS;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
    taskEXIT_CRITICAL();
 80027e8:	f007 fd14 	bl	800a214 <vPortExitCritical>
    return xReturn;
 80027ec:	697b      	ldr	r3, [r7, #20]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <xStreamBufferSpacesAvailable>:
{
 80027f6:	b480      	push	{r7}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	60fb      	str	r3, [r7, #12]
    }
 800281a:	bf00      	nop
 800281c:	e7fe      	b.n	800281c <xStreamBufferSpacesAvailable+0x26>
    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3b01      	subs	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
    if( xSpace >= pxStreamBuffer->xLength )
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d304      	bcc.n	800284e <xStreamBufferSpacesAvailable+0x58>
        xSpace -= pxStreamBuffer->xLength;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    return xSpace;
 800284e:	697b      	ldr	r3, [r7, #20]
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <xStreamBufferBytesAvailable>:
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xStreamBufferBytesAvailable+0x28>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	60fb      	str	r3, [r7, #12]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xStreamBufferBytesAvailable+0x26>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f000 f9e2 	bl	8002c4c <prvBytesInBuffer>
 8002888:	6138      	str	r0, [r7, #16]
    return xReturn;
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <xStreamBufferSetTriggerLevel>:
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xStreamBufferSetTriggerLevel+0x2a>
        __asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	60fb      	str	r3, [r7, #12]
    }
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xStreamBufferSetTriggerLevel+0x28>
    if( xTriggerLevel == ( size_t ) 0 )
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <xStreamBufferSetTriggerLevel+0x34>
        xTriggerLevel = ( size_t ) 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	603b      	str	r3, [r7, #0]
    if( xTriggerLevel <= pxStreamBuffer->xLength )
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d805      	bhi.n	80028de <xStreamBufferSetTriggerLevel+0x4a>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	60da      	str	r2, [r3, #12]
        xReturn = pdPASS;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e001      	b.n	80028e2 <xStreamBufferSetTriggerLevel+0x4e>
        xReturn = pdFALSE;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
    return xReturn;
 80028e2:	697b      	ldr	r3, [r7, #20]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b08c      	sub	sp, #48	; 0x30
 80028f2:	af02      	add	r7, sp, #8
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <xStreamBufferSendCompletedFromISR+0x2a>
        __asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	61bb      	str	r3, [r7, #24]
    }
 8002914:	bf00      	nop
 8002916:	e7fe      	b.n	8002916 <xStreamBufferSendCompletedFromISR+0x28>
        __asm volatile
 8002918:	f3ef 8211 	mrs	r2, BASEPRI
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	617a      	str	r2, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8002930:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002932:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <xStreamBufferSendCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	6918      	ldr	r0, [r3, #16]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	f001 fcf1 	bl	8004334 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
            xReturn = pdTRUE;
 8002958:	2301      	movs	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	e001      	b.n	8002962 <xStreamBufferSendCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f383 8811 	msr	BASEPRI, r3
    }
 800296c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af02      	add	r7, sp, #8
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xStreamBufferReceiveCompletedFromISR+0x2a>
        __asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	61bb      	str	r3, [r7, #24]
    }
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xStreamBufferReceiveCompletedFromISR+0x28>
        __asm volatile
 80029a2:	f3ef 8211 	mrs	r2, BASEPRI
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	617a      	str	r2, [r7, #20]
 80029b8:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80029ba:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 80029bc:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d010      	beq.n	80029e8 <xStreamBufferReceiveCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	6958      	ldr	r0, [r3, #20]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2300      	movs	r3, #0
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	f001 fcac 	bl	8004334 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
            xReturn = pdTRUE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e001      	b.n	80029ec <xStreamBufferReceiveCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f383 8811 	msr	BASEPRI, r3
    }
 80029f6:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <xStreamBufferGenericCreate>:
    {
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08c      	sub	sp, #48	; 0x30
 8002a06:	af02      	add	r7, sp, #8
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
        if( xIsMessageBuffer == pdTRUE )
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d110      	bne.n	8002a36 <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d81b      	bhi.n	8002a58 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61fb      	str	r3, [r7, #28]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xStreamBufferGenericCreate+0x32>
            ucFlags = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            configASSERT( xBufferSizeBytes > 0 );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	61bb      	str	r3, [r7, #24]
    }
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <xStreamBufferGenericCreate+0x54>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d90a      	bls.n	8002a76 <xStreamBufferGenericCreate+0x74>
        __asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	617b      	str	r3, [r7, #20]
    }
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xStreamBufferGenericCreate+0x72>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <xStreamBufferGenericCreate+0x7e>
            xTriggerLevelBytes = ( size_t ) 1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
        xBufferSizeBytes++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
        pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3320      	adds	r3, #32
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 ffd8 	bl	8006a40 <pvPortMalloc>
 8002a90:	6238      	str	r0, [r7, #32]
        if( pucAllocatedMemory != NULL )
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <xStreamBufferGenericCreate+0xac>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f103 0120 	add.w	r1, r3, #32
 8002a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6a38      	ldr	r0, [r7, #32]
 8002aaa:	f000 fa49 	bl	8002f40 <prvInitialiseNewStreamBuffer>
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002aae:	6a3b      	ldr	r3, [r7, #32]
    }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <xStreamBufferGenericCreateStatic>:
    {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( pucStreamBufferStorageArea );
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xStreamBufferGenericCreateStatic+0x2e>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xStreamBufferGenericCreateStatic+0x2c>
        configASSERT( pxStaticStreamBuffer );
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <xStreamBufferGenericCreateStatic+0x4a>
        __asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <xStreamBufferGenericCreateStatic+0x48>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90a      	bls.n	8002b20 <xStreamBufferGenericCreateStatic+0x68>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	623b      	str	r3, [r7, #32]
    }
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <xStreamBufferGenericCreateStatic+0x66>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <xStreamBufferGenericCreateStatic+0x72>
            xTriggerLevelBytes = ( size_t ) 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
        if( xIsMessageBuffer != pdFALSE )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <xStreamBufferGenericCreateStatic+0x80>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002b30:	2303      	movs	r3, #3
 8002b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002b36:	e002      	b.n	8002b3e <xStreamBufferGenericCreateStatic+0x86>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d80a      	bhi.n	8002b5a <xStreamBufferGenericCreateStatic+0xa2>
        __asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61fb      	str	r3, [r7, #28]
    }
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xStreamBufferGenericCreateStatic+0xa0>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d00a      	beq.n	8002b7a <xStreamBufferGenericCreateStatic+0xc2>
        __asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61bb      	str	r3, [r7, #24]
    }
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xStreamBufferGenericCreateStatic+0xc0>
        if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <xStreamBufferGenericCreateStatic+0xf4>
 8002b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <xStreamBufferGenericCreateStatic+0xf4>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b94:	f000 f9d4 	bl	8002f40 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	7f1b      	ldrb	r3, [r3, #28]
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	771a      	strb	r2, [r3, #28]
            xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8002baa:	e001      	b.n	8002bb0 <xStreamBufferGenericCreateStatic+0xf8>
            xReturn = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
        return xReturn;
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3738      	adds	r7, #56	; 0x38
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <xStreamBufferNextMessageLengthBytes>:
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b08a      	sub	sp, #40	; 0x28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	623b      	str	r3, [r7, #32]
    configASSERT( pxStreamBuffer );
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xStreamBufferNextMessageLengthBytes+0x28>
        __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	617b      	str	r3, [r7, #20]
    }
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xStreamBufferNextMessageLengthBytes+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	7f1b      	ldrb	r3, [r3, #28]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d027      	beq.n	8002c3e <xStreamBufferNextMessageLengthBytes+0x84>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002bee:	6a38      	ldr	r0, [r7, #32]
 8002bf0:	f000 f82c 	bl	8002c4c <prvBytesInBuffer>
 8002bf4:	61f8      	str	r0, [r7, #28]
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d90f      	bls.n	8002c1c <xStreamBufferNextMessageLengthBytes+0x62>
            xOriginalTail = pxStreamBuffer->xTail;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 8002c02:	f107 010c 	add.w	r1, r7, #12
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	6a38      	ldr	r0, [r7, #32]
 8002c0c:	f000 f91e 	bl	8002e4c <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
            pxStreamBuffer->xTail = xOriginalTail;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e012      	b.n	8002c42 <xStreamBufferNextMessageLengthBytes+0x88>
            configASSERT( xBytesAvailable == 0 );
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <xStreamBufferNextMessageLengthBytes+0x7e>
        __asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	613b      	str	r3, [r7, #16]
    }
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <xStreamBufferNextMessageLengthBytes+0x7c>
            xReturn = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e001      	b.n	8002c42 <xStreamBufferNextMessageLengthBytes+0x88>
        xReturn = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    return xReturn;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvBytesInBuffer>:
    return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d304      	bcc.n	8002c7e <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <prvWriteBytesToBuffer>:
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b08a      	sub	sp, #40	; 0x28
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
    configASSERT( xCount > ( size_t ) 0 );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <prvWriteBytesToBuffer+0x28>
        __asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	61fb      	str	r3, [r7, #28]
    }
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <prvWriteBytesToBuffer+0x26>
    xNextHead = pxStreamBuffer->xHead;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bf28      	it	cs
 8002cc6:	4613      	movcs	r3, r2
 8002cc8:	623b      	str	r3, [r7, #32]
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d90a      	bls.n	8002cee <prvWriteBytesToBuffer+0x64>
        __asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	61bb      	str	r3, [r7, #24]
    }
 8002cea:	bf00      	nop
 8002cec:	e7fe      	b.n	8002cec <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	4413      	add	r3, r2
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f00d fb64 	bl	80103c8 <memcpy>
    if( xCount > xFirstLength )
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d91c      	bls.n	8002d42 <prvWriteBytesToBuffer+0xb8>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	1ad2      	subs	r2, r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d90a      	bls.n	8002d2c <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	617b      	str	r3, [r7, #20]
    }
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6998      	ldr	r0, [r3, #24]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	18d1      	adds	r1, r2, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f00d fb43 	bl	80103c8 <memcpy>
    xNextHead += xCount;
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    if( xNextHead >= pxStreamBuffer->xLength )
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d304      	bcc.n	8002d5e <prvWriteBytesToBuffer+0xd4>
        xNextHead -= pxStreamBuffer->xLength;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pxStreamBuffer->xHead = xNextHead;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	605a      	str	r2, [r3, #4]
    return xCount;
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <prvReadMessageFromBuffer>:
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b088      	sub	sp, #32
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d019      	beq.n	8002db6 <prvReadMessageFromBuffer+0x48>
        xOriginalTail = pxStreamBuffer->xTail;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8002d88:	f107 0110 	add.w	r1, r7, #16
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f85b 	bl	8002e4c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	61fb      	str	r3, [r7, #28]
        xBytesAvailable -= xBytesToStoreMessageLength;
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	603b      	str	r3, [r7, #0]
        if( xNextMessageLength > xBufferLengthBytes )
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d907      	bls.n	8002dba <prvReadMessageFromBuffer+0x4c>
            pxStreamBuffer->xTail = xOriginalTail;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e001      	b.n	8002dba <prvReadMessageFromBuffer+0x4c>
        xNextMessageLength = xBufferLengthBytes;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	61fb      	str	r3, [r7, #28]
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f843 	bl	8002e4c <prvReadBytesFromBuffer>
 8002dc6:	6178      	str	r0, [r7, #20]
    return xReceivedLength;
 8002dc8:	697b      	ldr	r3, [r7, #20]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <prvWriteMessageToBuffer>:
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
    if( xSpace == ( size_t ) 0 )
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <prvWriteMessageToBuffer+0x1a>
        xShouldWrite = pdFALSE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e01d      	b.n	8002e28 <prvWriteMessageToBuffer+0x56>
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	7f1b      	ldrb	r3, [r3, #28]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <prvWriteMessageToBuffer+0x38>
        xShouldWrite = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf28      	it	cs
 8002e04:	4613      	movcs	r3, r2
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	e00e      	b.n	8002e28 <prvWriteMessageToBuffer+0x56>
    else if( xSpace >= xRequiredSpace )
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d308      	bcc.n	8002e24 <prvWriteMessageToBuffer+0x52>
        xShouldWrite = pdTRUE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2204      	movs	r2, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff ff34 	bl	8002c8a <prvWriteBytesToBuffer>
 8002e22:	e001      	b.n	8002e28 <prvWriteMessageToBuffer+0x56>
        xShouldWrite = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
    if( xShouldWrite != pdFALSE )
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <prvWriteMessageToBuffer+0x6c>
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff ff28 	bl	8002c8a <prvWriteBytesToBuffer>
 8002e3a:	6138      	str	r0, [r7, #16]
 8002e3c:	e001      	b.n	8002e42 <prvWriteMessageToBuffer+0x70>
        xReturn = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
    return xReturn;
 8002e42:	693b      	ldr	r3, [r7, #16]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <prvReadBytesFromBuffer>:
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	bf28      	it	cs
 8002e62:	4613      	movcs	r3, r2
 8002e64:	623b      	str	r3, [r7, #32]
    if( xCount > ( size_t ) 0 )
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d064      	beq.n	8002f36 <prvReadBytesFromBuffer+0xea>
        xNextTail = pxStreamBuffer->xTail;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf28      	it	cs
 8002e80:	4613      	movcs	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
        configASSERT( xFirstLength <= xMaxCount );
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d90a      	bls.n	8002ea2 <prvReadBytesFromBuffer+0x56>
        __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	61bb      	str	r3, [r7, #24]
    }
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d90a      	bls.n	8002ec6 <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	617b      	str	r3, [r7, #20]
    }
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	4413      	add	r3, r2
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f00d fa78 	bl	80103c8 <memcpy>
        if( xCount > xFirstLength )
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d919      	bls.n	8002f14 <prvReadBytesFromBuffer+0xc8>
            configASSERT( xCount <= xMaxCount );
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d90a      	bls.n	8002efe <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	613b      	str	r3, [r7, #16]
    }
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	18d0      	adds	r0, r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6999      	ldr	r1, [r3, #24]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f00d fa5a 	bl	80103c8 <memcpy>
        xNextTail += xCount;
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	4413      	add	r3, r2
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
        if( xNextTail >= pxStreamBuffer->xLength )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d304      	bcc.n	8002f30 <prvReadBytesFromBuffer+0xe4>
            xNextTail -= pxStreamBuffer->xLength;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
        pxStreamBuffer->xTail = xNextTail;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	601a      	str	r2, [r3, #0]
    return xCount;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 8002f4e:	2355      	movs	r3, #85	; 0x55
 8002f50:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6979      	ldr	r1, [r7, #20]
 8002f56:	68b8      	ldr	r0, [r7, #8]
 8002f58:	f00d fa44 	bl	80103e4 <memset>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00a      	beq.n	8002f7a <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	613b      	str	r3, [r7, #16]
    }
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f00d fa30 	bl	80103e4 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f9c:	771a      	strb	r2, [r3, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	; 0x30
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fd3f 	bl	8006a40 <pvPortMalloc>
 8002fc2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fca:	2080      	movs	r0, #128	; 0x80
 8002fcc:	f003 fd38 	bl	8006a40 <pvPortMalloc>
 8002fd0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8002fde:	e005      	b.n	8002fec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f003 fdfd 	bl	8006be0 <vPortFree>
 8002fe6:	e001      	b.n	8002fec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			#if ( configUSE_DMA_CONTAINER == 1 )
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, NULL );
			#else
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9303      	str	r3, [sp, #12]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	9302      	str	r3, [sp, #8]
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f002 fbe5 	bl	80057e0 <prvInitialiseNewTask>
			#endif
            prvAddNewTaskToReadyList( pxNewTCB );
 8003016:	69f8      	ldr	r0, [r7, #28]
 8003018:	f002 fc9e 	bl	8005958 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e002      	b.n	8003028 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003028:	69bb      	ldr	r3, [r7, #24]
    }
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <xTaskCreateStatic>:
    {
 8003032:	b580      	push	{r7, lr}
 8003034:	b08e      	sub	sp, #56	; 0x38
 8003036:	af04      	add	r7, sp, #16
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
        configASSERT( puxStackBuffer != NULL );
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <xTaskCreateStatic+0x2a>
        __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	623b      	str	r3, [r7, #32]
    }
 8003058:	bf00      	nop
 800305a:	e7fe      	b.n	800305a <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <xTaskCreateStatic+0x46>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	61fb      	str	r3, [r7, #28]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xTaskCreateStatic+0x44>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d00a      	beq.n	8003098 <xTaskCreateStatic+0x66>
        __asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	61bb      	str	r3, [r7, #24]
    }
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003098:	693b      	ldr	r3, [r7, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01e      	beq.n	80030de <xTaskCreateStatic+0xac>
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01b      	beq.n	80030de <xTaskCreateStatic+0xac>
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 80030b8:	2300      	movs	r3, #0
 80030ba:	9303      	str	r3, [sp, #12]
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	9302      	str	r3, [sp, #8]
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f002 fb85 	bl	80057e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030d8:	f002 fc3e 	bl	8005958 <prvAddNewTaskToReadyList>
 80030dc:	e001      	b.n	80030e2 <xTaskCreateStatic+0xb0>
            xReturn = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
        return xReturn;
 80030e2:	697b      	ldr	r3, [r7, #20]
    }
 80030e4:	4618      	mov	r0, r3
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <xTaskCreateRestricted>:
    {
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xTaskCreateRestricted+0x2e>
        __asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	60fb      	str	r3, [r7, #12]
    }
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xTaskCreateRestricted+0x2c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02a      	beq.n	8003178 <xTaskCreateRestricted+0x8c>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003122:	2080      	movs	r0, #128	; 0x80
 8003124:	f003 fc8c 	bl	8006a40 <pvPortMalloc>
 8003128:	6138      	str	r0, [r7, #16]
            if( pxNewTCB != NULL )
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d023      	beq.n	8003178 <xTaskCreateRestricted+0x8c>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	651a      	str	r2, [r3, #80]	; 0x50
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800314c:	461d      	mov	r5, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68dc      	ldr	r4, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	9202      	str	r2, [sp, #8]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	9201      	str	r2, [sp, #4]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	4623      	mov	r3, r4
 8003168:	462a      	mov	r2, r5
 800316a:	f002 fb39 	bl	80057e0 <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 800316e:	6938      	ldr	r0, [r7, #16]
 8003170:	f002 fbf2 	bl	8005958 <prvAddNewTaskToReadyList>
				xReturn = pdPASS;
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
        return xReturn;
 8003178:	697b      	ldr	r3, [r7, #20]
    }
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bdb0      	pop	{r4, r5, r7, pc}

08003182 <xTaskCreateRestrictedStatic>:
    {
 8003182:	b5b0      	push	{r4, r5, r7, lr}
 8003184:	b08a      	sub	sp, #40	; 0x28
 8003186:	af04      	add	r7, sp, #16
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <xTaskCreateRestrictedStatic+0x2e>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60fb      	str	r3, [r7, #12]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <xTaskCreateRestrictedStatic+0x2c>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xTaskCreateRestrictedStatic+0x4c>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60bb      	str	r3, [r7, #8]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xTaskCreateRestrictedStatic+0x4a>
        if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02a      	beq.n	800322c <xTaskCreateRestrictedStatic+0xaa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d026      	beq.n	800322c <xTaskCreateRestrictedStatic+0xaa>
            pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	651a      	str	r2, [r3, #80]	; 0x50
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
                                  ( uint32_t ) pxTaskDefinition->usStackDepth,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	891b      	ldrh	r3, [r3, #8]
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003200:	461d      	mov	r5, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68dc      	ldr	r4, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
                                  pxTaskDefinition->xRegions
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	3218      	adds	r2, #24
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	9202      	str	r2, [sp, #8]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	9201      	str	r2, [sp, #4]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4623      	mov	r3, r4
 800321c:	462a      	mov	r2, r5
 800321e:	f002 fadf 	bl	80057e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003222:	6938      	ldr	r0, [r7, #16]
 8003224:	f002 fb98 	bl	8005958 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
        return xReturn;
 800322c:	697b      	ldr	r3, [r7, #20]
    }
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bdb0      	pop	{r4, r5, r7, pc}

08003236 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <vTaskAllocateMPURegions+0x16>
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <vTaskAllocateMPURegions+0x32>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e000      	b.n	800324e <vTaskAllocateMPURegions+0x18>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1d18      	adds	r0, r3, #4
 8003254:	2300      	movs	r3, #0
 8003256:	2200      	movs	r2, #0
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	f003 f9c7 	bl	80065ec <vPortStoreTaskMPUSettings>
    }
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000028 	.word	0x20000028

0800326c <vTaskDelete>:
    {
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003274:	f006 ffb0 	bl	800a1d8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <vTaskDelete+0x18>
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <vTaskDelete+0xf8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e000      	b.n	8003286 <vTaskDelete+0x1a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fb01 	bl	8000894 <uxListRemove>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d115      	bne.n	80032c4 <vTaskDelete+0x58>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800329c:	4932      	ldr	r1, [pc, #200]	; (8003368 <vTaskDelete+0xfc>)
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <vTaskDelete+0x58>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	2201      	movs	r2, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43da      	mvns	r2, r3
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <vTaskDelete+0x100>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4013      	ands	r3, r2
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <vTaskDelete+0x100>)
 80032c2:	6013      	str	r3, [r2, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <vTaskDelete+0x6a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3338      	adds	r3, #56	; 0x38
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fadf 	bl	8000894 <uxListRemove>
            uxTaskNumber++;
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <vTaskDelete+0x104>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <vTaskDelete+0x104>)
 80032de:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <vTaskDelete+0xf8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d10b      	bne.n	8003302 <vTaskDelete+0x96>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3324      	adds	r3, #36	; 0x24
 80032ee:	4619      	mov	r1, r3
 80032f0:	4820      	ldr	r0, [pc, #128]	; (8003374 <vTaskDelete+0x108>)
 80032f2:	f7fd faac 	bl	800084e <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <vTaskDelete+0x10c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <vTaskDelete+0x10c>)
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e009      	b.n	8003316 <vTaskDelete+0xaa>
                --uxCurrentNumberOfTasks;
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <vTaskDelete+0x110>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <vTaskDelete+0x110>)
 800330a:	6013      	str	r3, [r2, #0]
                prvDeleteTCB( pxTCB );
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f002 f8ed 	bl	80054ec <prvDeleteTCB>
                prvResetNextTaskUnblockTime();
 8003312:	f002 fa4b 	bl	80057ac <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 8003316:	f006 ff7d 	bl	800a214 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <vTaskDelete+0x114>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01b      	beq.n	800335a <vTaskDelete+0xee>
            if( pxTCB == pxCurrentTCB )
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <vTaskDelete+0xf8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d116      	bne.n	800335a <vTaskDelete+0xee>
                configASSERT( uxSchedulerSuspended == 0 );
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <vTaskDelete+0x118>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <vTaskDelete+0xde>
        __asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	60bb      	str	r3, [r7, #8]
    }
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <vTaskDelete+0xdc>
                portYIELD_WITHIN_API();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <vTaskDelete+0x11c>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
    }
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000028 	.word	0x20000028
 8003368:	2000002c 	.word	0x2000002c
 800336c:	20000108 	.word	0x20000108
 8003370:	2000011c 	.word	0x2000011c
 8003374:	200000d4 	.word	0x200000d4
 8003378:	200000e8 	.word	0x200000e8
 800337c:	20000100 	.word	0x20000100
 8003380:	2000010c 	.word	0x2000010c
 8003384:	20000128 	.word	0x20000128
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <vTaskDelay>:
    {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <vTaskDelay+0x42>
            configASSERT( uxSchedulerSuspended == 0 );
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <vTaskDelay+0x60>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <vTaskDelay+0x30>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60bb      	str	r3, [r7, #8]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80033bc:	f000 fc62 	bl	8003c84 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033c0:	2100      	movs	r1, #0
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f002 f8ee 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80033c8:	f000 fc6a 	bl	8003ca0 <xTaskResumeAll>
 80033cc:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <vTaskDelay+0x58>
            portYIELD_WITHIN_API();
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <vTaskDelay+0x64>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
    }
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000128 	.word	0x20000128
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <xTaskDelayUntil>:
    {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxPreviousWakeTime );
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <xTaskDelayUntil+0x2a>
        __asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	617b      	str	r3, [r7, #20]
    }
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xTaskDelayUntil+0x46>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	613b      	str	r3, [r7, #16]
    }
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <xTaskDelayUntil+0xf0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <xTaskDelayUntil+0x64>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	60fb      	str	r3, [r7, #12]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 8003458:	f000 fc14 	bl	8003c84 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <xTaskDelayUntil+0xf4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	623b      	str	r3, [r7, #32]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4413      	add	r3, r2
 800346a:	61fb      	str	r3, [r7, #28]
            if( xConstTickCount < *pxPreviousWakeTime )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20b      	bcs.n	800348e <xTaskDelayUntil+0x9a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d211      	bcs.n	80034a4 <xTaskDelayUntil+0xb0>
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	429a      	cmp	r2, r3
 8003486:	d90d      	bls.n	80034a4 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e00a      	b.n	80034a4 <xTaskDelayUntil+0xb0>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d303      	bcc.n	80034a0 <xTaskDelayUntil+0xac>
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	429a      	cmp	r2, r3
 800349e:	d901      	bls.n	80034a4 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
            *pxPreviousWakeTime = xTimeToWake;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <xTaskDelayUntil+0xca>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 f873 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80034be:	f000 fbef 	bl	8003ca0 <xTaskResumeAll>
 80034c2:	61b8      	str	r0, [r7, #24]
        if( xAlreadyYielded == pdFALSE )
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <xTaskDelayUntil+0xe6>
            portYIELD_WITHIN_API();
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <xTaskDelayUntil+0xf8>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
        return xShouldDelay;
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000128 	.word	0x20000128
 80034e8:	20000104 	.word	0x20000104
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <xTaskAbortDelay>:
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB = xTask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	613b      	str	r3, [r7, #16]
        configASSERT( pxTCB );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <xTaskAbortDelay+0x28>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
    }
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xTaskAbortDelay+0x26>
        vTaskSuspendAll();
 8003518:	f000 fbb4 	bl	8003c84 <vTaskSuspendAll>
            if( eTaskGetState( xTask ) == eBlocked )
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f895 	bl	800364c <eTaskGetState>
 8003522:	4603      	mov	r3, r0
 8003524:	2b02      	cmp	r3, #2
 8003526:	d139      	bne.n	800359c <xTaskAbortDelay+0xac>
                xReturn = pdPASS;
 8003528:	2301      	movs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f9af 	bl	8000894 <uxListRemove>
                taskENTER_CRITICAL();
 8003536:	f006 fe4f 	bl	800a1d8 <vPortEnterCritical>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <xTaskAbortDelay+0x64>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3338      	adds	r3, #56	; 0x38
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd f9a4 	bl	8000894 <uxListRemove>
                        pxTCB->ucDelayAborted = pdTRUE;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                taskEXIT_CRITICAL();
 8003554:	f006 fe5e 	bl	800a214 <vPortExitCritical>
                prvAddTaskToReadyList( pxTCB );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	2201      	movs	r2, #1
 800355e:	409a      	lsls	r2, r3
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <xTaskAbortDelay+0xc0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4313      	orrs	r3, r2
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <xTaskAbortDelay+0xc0>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <xTaskAbortDelay+0xc4>)
 8003578:	441a      	add	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3324      	adds	r3, #36	; 0x24
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7fd f964 	bl	800084e <vListInsertEnd>
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <xTaskAbortDelay+0xc8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003590:	429a      	cmp	r2, r3
 8003592:	d905      	bls.n	80035a0 <xTaskAbortDelay+0xb0>
                            xYieldPending = pdTRUE;
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <xTaskAbortDelay+0xcc>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e001      	b.n	80035a0 <xTaskAbortDelay+0xb0>
                xReturn = pdFAIL;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
        ( void ) xTaskResumeAll();
 80035a0:	f000 fb7e 	bl	8003ca0 <xTaskResumeAll>
        return xReturn;
 80035a4:	697b      	ldr	r3, [r7, #20]
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000108 	.word	0x20000108
 80035b4:	2000002c 	.word	0x2000002c
 80035b8:	20000028 	.word	0x20000028
 80035bc:	20000114 	.word	0x20000114

080035c0 <uxTaskPriorityGet>:
    {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80035c8:	f006 fe06 	bl	800a1d8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <uxTaskPriorityGet+0x18>
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <uxTaskPriorityGet+0x30>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e000      	b.n	80035da <uxTaskPriorityGet+0x1a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 80035e2:	f006 fe17 	bl	800a214 <vPortExitCritical>
        return uxReturn;
 80035e6:	68bb      	ldr	r3, [r7, #8]
    }
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000028 	.word	0x20000028

080035f4 <uxTaskPriorityGetFromISR>:
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035fc:	f006 fe6a 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 8003600:	f3ef 8211 	mrs	r2, BASEPRI
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	613a      	str	r2, [r7, #16]
 8003616:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8003618:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800361a:	61fb      	str	r3, [r7, #28]
            pxTCB = prvGetTCBFromHandle( xTask );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <uxTaskPriorityGetFromISR+0x34>
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <uxTaskPriorityGetFromISR+0x54>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e000      	b.n	800362a <uxTaskPriorityGetFromISR+0x36>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	61bb      	str	r3, [r7, #24]
            uxReturn = pxTCB->uxPriority;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f383 8811 	msr	BASEPRI, r3
    }
 800363c:	bf00      	nop
        return uxReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
    }
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000028 	.word	0x20000028

0800364c <eTaskGetState>:
    {
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB );
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <eTaskGetState+0x28>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60fb      	str	r3, [r7, #12]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <eTaskGetState+0x26>
        if( pxTCB == pxCurrentTCB )
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <eTaskGetState+0xe0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	429a      	cmp	r2, r3
 800367c:	d103      	bne.n	8003686 <eTaskGetState+0x3a>
            eReturn = eRunning;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003684:	e04b      	b.n	800371e <eTaskGetState+0xd2>
            taskENTER_CRITICAL();
 8003686:	f006 fda7 	bl	800a1d8 <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <eTaskGetState+0xe4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <eTaskGetState+0xe8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	613b      	str	r3, [r7, #16]
            taskEXIT_CRITICAL();
 800369c:	f006 fdba 	bl	800a214 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d003      	beq.n	80036b0 <eTaskGetState+0x64>
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d103      	bne.n	80036b8 <eTaskGetState+0x6c>
                eReturn = eBlocked;
 80036b0:	2302      	movs	r3, #2
 80036b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036b6:	e032      	b.n	800371e <eTaskGetState+0xd2>
                else if( pxStateList == &xSuspendedTaskList )
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <eTaskGetState+0xec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d120      	bne.n	8003702 <eTaskGetState+0xb6>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d118      	bne.n	80036fa <eTaskGetState+0xae>
                                eReturn = eSuspended;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	e00e      	b.n	80036f2 <eTaskGetState+0xa6>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	4413      	add	r3, r2
 80036da:	337c      	adds	r3, #124	; 0x7c
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d103      	bne.n	80036ec <eTaskGetState+0xa0>
                                        eReturn = eBlocked;
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        break;
 80036ea:	e018      	b.n	800371e <eTaskGetState+0xd2>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3301      	adds	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dded      	ble.n	80036d4 <eTaskGetState+0x88>
 80036f8:	e011      	b.n	800371e <eTaskGetState+0xd2>
                        eReturn = eBlocked;
 80036fa:	2302      	movs	r3, #2
 80036fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003700:	e00d      	b.n	800371e <eTaskGetState+0xd2>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <eTaskGetState+0xf0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d002      	beq.n	8003710 <eTaskGetState+0xc4>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <eTaskGetState+0xcc>
                    eReturn = eDeleted;
 8003710:	2304      	movs	r3, #4
 8003712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003716:	e002      	b.n	800371e <eTaskGetState+0xd2>
                eReturn = eReady;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return eReturn;
 800371e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003722:	4618      	mov	r0, r3
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000028 	.word	0x20000028
 8003730:	200000b8 	.word	0x200000b8
 8003734:	200000bc 	.word	0x200000bc
 8003738:	200000ec 	.word	0x200000ec
 800373c:	200000d4 	.word	0x200000d4

08003740 <vTaskPrioritySet>:
    {
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d90a      	bls.n	800376a <vTaskPrioritySet+0x2a>
        __asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60fb      	str	r3, [r7, #12]
    }
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <vTaskPrioritySet+0x28>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d901      	bls.n	8003774 <vTaskPrioritySet+0x34>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003770:	2304      	movs	r3, #4
 8003772:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8003774:	f006 fd30 	bl	800a1d8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <vTaskPrioritySet+0x44>
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <vTaskPrioritySet+0x144>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e000      	b.n	8003786 <vTaskPrioritySet+0x46>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	61bb      	str	r3, [r7, #24]
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d06f      	beq.n	8003876 <vTaskPrioritySet+0x136>
                if( uxNewPriority > uxCurrentBasePriority )
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90d      	bls.n	80037ba <vTaskPrioritySet+0x7a>
                    if( pxTCB != pxCurrentTCB )
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <vTaskPrioritySet+0x144>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d00f      	beq.n	80037c8 <vTaskPrioritySet+0x88>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <vTaskPrioritySet+0x144>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d309      	bcc.n	80037c8 <vTaskPrioritySet+0x88>
                            xYieldRequired = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e006      	b.n	80037c8 <vTaskPrioritySet+0x88>
                else if( pxTCB == pxCurrentTCB )
 80037ba:	4b32      	ldr	r3, [pc, #200]	; (8003884 <vTaskPrioritySet+0x144>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d101      	bne.n	80037c8 <vTaskPrioritySet+0x88>
                    xYieldRequired = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	613b      	str	r3, [r7, #16]
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d102      	bne.n	80037e0 <vTaskPrioritySet+0xa0>
                            pxTCB->uxPriority = uxNewPriority;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c
                        pxTCB->uxBasePriority = uxNewPriority;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db04      	blt.n	80037f8 <vTaskPrioritySet+0xb8>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1c3 0205 	rsb	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a20      	ldr	r2, [pc, #128]	; (8003888 <vTaskPrioritySet+0x148>)
 8003808:	4413      	add	r3, r2
 800380a:	4299      	cmp	r1, r3
 800380c:	d128      	bne.n	8003860 <vTaskPrioritySet+0x120>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd f83e 	bl	8000894 <uxListRemove>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <vTaskPrioritySet+0xf2>
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800381e:	2201      	movs	r2, #1
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <vTaskPrioritySet+0x14c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4013      	ands	r3, r2
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <vTaskPrioritySet+0x14c>)
 8003830:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <vTaskPrioritySet+0x14c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	4a12      	ldr	r2, [pc, #72]	; (800388c <vTaskPrioritySet+0x14c>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <vTaskPrioritySet+0x148>)
 8003852:	441a      	add	r2, r3
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fc fff7 	bl	800084e <vListInsertEnd>
                if( xYieldRequired != pdFALSE )
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <vTaskPrioritySet+0x136>
                    taskYIELD_IF_USING_PREEMPTION();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <vTaskPrioritySet+0x150>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003876:	f006 fccd 	bl	800a214 <vPortExitCritical>
    }
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000028 	.word	0x20000028
 8003888:	2000002c 	.word	0x2000002c
 800388c:	20000108 	.word	0x20000108
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskSuspend>:
    {
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 800389c:	f006 fc9c 	bl	800a1d8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <vTaskSuspend+0x18>
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <vTaskSuspend+0x120>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	e000      	b.n	80038ae <vTaskSuspend+0x1a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	613b      	str	r3, [r7, #16]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc ffed 	bl	8000894 <uxListRemove>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d115      	bne.n	80038ec <vTaskSuspend+0x58>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c4:	493c      	ldr	r1, [pc, #240]	; (80039b8 <vTaskSuspend+0x124>)
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <vTaskSuspend+0x58>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43da      	mvns	r2, r3
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <vTaskSuspend+0x128>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4013      	ands	r3, r2
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <vTaskSuspend+0x128>)
 80038ea:	6013      	str	r3, [r2, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <vTaskSuspend+0x6a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3338      	adds	r3, #56	; 0x38
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc ffcb 	bl	8000894 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3324      	adds	r3, #36	; 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	482e      	ldr	r0, [pc, #184]	; (80039c0 <vTaskSuspend+0x12c>)
 8003906:	f7fc ffa2 	bl	800084e <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e010      	b.n	8003932 <vTaskSuspend+0x9e>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4413      	add	r3, r2
 8003916:	337c      	adds	r3, #124	; 0x7c
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <vTaskSuspend+0x98>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	4413      	add	r3, r2
 8003926:	337c      	adds	r3, #124	; 0x7c
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3301      	adds	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	ddeb      	ble.n	8003910 <vTaskSuspend+0x7c>
        taskEXIT_CRITICAL();
 8003938:	f006 fc6c 	bl	800a214 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <vTaskSuspend+0x130>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <vTaskSuspend+0xbc>
            taskENTER_CRITICAL();
 8003944:	f006 fc48 	bl	800a1d8 <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003948:	f001 ff30 	bl	80057ac <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 800394c:	f006 fc62 	bl	800a214 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <vTaskSuspend+0x120>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d127      	bne.n	80039aa <vTaskSuspend+0x116>
            if( xSchedulerRunning != pdFALSE )
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <vTaskSuspend+0x130>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <vTaskSuspend+0xfe>
                configASSERT( uxSchedulerSuspended == 0 );
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <vTaskSuspend+0x134>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <vTaskSuspend+0xec>
        __asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
    }
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <vTaskSuspend+0x138>)
 8003982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
    }
 8003990:	e00b      	b.n	80039aa <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <vTaskSuspend+0x12c>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <vTaskSuspend+0x13c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d103      	bne.n	80039a6 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <vTaskSuspend+0x120>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
    }
 80039a4:	e001      	b.n	80039aa <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 80039a6:	f001 fa8f 	bl	8004ec8 <vTaskSwitchContext>
    }
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000028 	.word	0x20000028
 80039b8:	2000002c 	.word	0x2000002c
 80039bc:	20000108 	.word	0x20000108
 80039c0:	200000ec 	.word	0x200000ec
 80039c4:	2000010c 	.word	0x2000010c
 80039c8:	20000128 	.word	0x20000128
 80039cc:	e000ed04 	.word	0xe000ed04
 80039d0:	20000100 	.word	0x20000100

080039d4 <vTaskResume>:
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60fb      	str	r3, [r7, #12]
        configASSERT( xTaskToResume );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <vTaskResume+0x28>
        __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60bb      	str	r3, [r7, #8]
    }
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <vTaskResume+0x26>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <vTaskResume+0xac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d037      	beq.n	8003a76 <vTaskResume+0xa2>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d034      	beq.n	8003a76 <vTaskResume+0xa2>
            taskENTER_CRITICAL();
 8003a0c:	f006 fbe4 	bl	800a1d8 <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f001 fced 	bl	80053f0 <prvTaskIsTaskSuspended>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02a      	beq.n	8003a72 <vTaskResume+0x9e>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3324      	adds	r3, #36	; 0x24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc ff37 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <vTaskResume+0xb0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <vTaskResume+0xb0>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <vTaskResume+0xb4>)
 8003a46:	441a      	add	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fc fefd 	bl	800084e <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <vTaskResume+0xac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d307      	bcc.n	8003a72 <vTaskResume+0x9e>
                        taskYIELD_IF_USING_PREEMPTION();
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <vTaskResume+0xb8>)
 8003a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
 8003a72:	f006 fbcf 	bl	800a214 <vPortExitCritical>
    }
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000028 	.word	0x20000028
 8003a84:	20000108 	.word	0x20000108
 8003a88:	2000002c 	.word	0x2000002c
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <xTaskResumeFromISR>:
    {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	623b      	str	r3, [r7, #32]
        configASSERT( xTaskToResume );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskResumeFromISR+0x2c>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	61bb      	str	r3, [r7, #24]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xTaskResumeFromISR+0x2a>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003abc:	f006 fc0a 	bl	800a2d4 <vPortValidateInterruptPriority>
        __asm volatile
 8003ac0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	617a      	str	r2, [r7, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8003ad8:	697b      	ldr	r3, [r7, #20]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ada:	61fb      	str	r3, [r7, #28]
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003adc:	6a38      	ldr	r0, [r7, #32]
 8003ade:	f001 fc87 	bl	80053f0 <prvTaskIsTaskSuspended>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d032      	beq.n	8003b4e <xTaskResumeFromISR+0xbe>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <xTaskResumeFromISR+0xd4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d128      	bne.n	8003b42 <xTaskResumeFromISR+0xb2>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003af4:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <xTaskResumeFromISR+0xd8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d304      	bcc.n	8003b08 <xTaskResumeFromISR+0x78>
                        xYieldRequired = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
                        xYieldPending = pdTRUE;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <xTaskResumeFromISR+0xdc>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fec1 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <xTaskResumeFromISR+0xe0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <xTaskResumeFromISR+0xe0>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <xTaskResumeFromISR+0xe4>)
 8003b32:	441a      	add	r2, r3
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	3324      	adds	r3, #36	; 0x24
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fc fe87 	bl	800084e <vListInsertEnd>
 8003b40:	e005      	b.n	8003b4e <xTaskResumeFromISR+0xbe>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	3338      	adds	r3, #56	; 0x38
 8003b46:	4619      	mov	r1, r3
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <xTaskResumeFromISR+0xe8>)
 8003b4a:	f7fc fe80 	bl	800084e <vListInsertEnd>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f383 8811 	msr	BASEPRI, r3
    }
 8003b58:	bf00      	nop
        return xYieldRequired;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000128 	.word	0x20000128
 8003b68:	20000028 	.word	0x20000028
 8003b6c:	20000114 	.word	0x20000114
 8003b70:	20000108 	.word	0x20000108
 8003b74:	2000002c 	.word	0x2000002c
 8003b78:	200000c0 	.word	0x200000c0

08003b7c <vTaskStartScheduler>:
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af04      	add	r7, sp, #16
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b8a:	463a      	mov	r2, r7
 8003b8c:	1d39      	adds	r1, r7, #4
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	4618      	mov	r0, r3
 8003b94:	f006 f810 	bl	8009bb8 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	9202      	str	r2, [sp, #8]
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	460a      	mov	r2, r1
 8003bac:	4922      	ldr	r1, [pc, #136]	; (8003c38 <vTaskStartScheduler+0xbc>)
 8003bae:	4823      	ldr	r0, [pc, #140]	; (8003c3c <vTaskStartScheduler+0xc0>)
 8003bb0:	f7ff fa3f 	bl	8003032 <xTaskCreateStatic>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <vTaskStartScheduler+0xc4>)
 8003bb8:	6013      	str	r3, [r2, #0]
            if( xIdleTaskHandle != NULL )
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <vTaskStartScheduler+0xc4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <vTaskStartScheduler+0x4c>
                xReturn = pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e001      	b.n	8003bcc <vTaskStartScheduler+0x50>
                xReturn = pdFAIL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
            if( xReturn == pdPASS )
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d102      	bne.n	8003bd8 <vTaskStartScheduler+0x5c>
                xReturn = xTimerCreateTimerTask();
 8003bd2:	f002 f8be 	bl	8005d52 <xTimerCreateTimerTask>
 8003bd6:	6178      	str	r0, [r7, #20]
    if( xReturn == pdPASS )
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d116      	bne.n	8003c0c <vTaskStartScheduler+0x90>
        __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	613b      	str	r3, [r7, #16]
    }
 8003bf0:	bf00      	nop
        xNextTaskUnblockTime = portMAX_DELAY;
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <vTaskStartScheduler+0xc8>)
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <vTaskStartScheduler+0xcc>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <vTaskStartScheduler+0xd0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8003c06:	f002 fc49 	bl	800649c <xPortStartScheduler>
 8003c0a:	e00e      	b.n	8003c2a <vTaskStartScheduler+0xae>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d10a      	bne.n	8003c2a <vTaskStartScheduler+0xae>
        __asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
    }
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskStartScheduler+0xac>
    ( void ) uxTopUsedPriority;
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <vTaskStartScheduler+0xd4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	080104b0 	.word	0x080104b0
 8003c3c:	080054d1 	.word	0x080054d1
 8003c40:	20000124 	.word	0x20000124
 8003c44:	20000120 	.word	0x20000120
 8003c48:	2000010c 	.word	0x2000010c
 8003c4c:	20000104 	.word	0x20000104
 8003c50:	20008000 	.word	0x20008000

08003c54 <vTaskEndScheduler>:
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
        __asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	607b      	str	r3, [r7, #4]
    }
 8003c6c:	bf00      	nop
    xSchedulerRunning = pdFALSE;
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <vTaskEndScheduler+0x2c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8003c74:	f002 fca0 	bl	80065b8 <vPortEndScheduler>
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000010c 	.word	0x2000010c

08003c84 <vTaskSuspendAll>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <vTaskSuspendAll+0x18>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <vTaskSuspendAll+0x18>)
 8003c90:	6013      	str	r3, [r2, #0]
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000128 	.word	0x20000128

08003ca0 <xTaskResumeAll>:
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
    configASSERT( uxSchedulerSuspended );
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <xTaskResumeAll+0x114>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <xTaskResumeAll+0x2c>
        __asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	603b      	str	r3, [r7, #0]
    }
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <xTaskResumeAll+0x2a>
    taskENTER_CRITICAL();
 8003ccc:	f006 fa84 	bl	800a1d8 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <xTaskResumeAll+0x114>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <xTaskResumeAll+0x114>)
 8003cd8:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <xTaskResumeAll+0x114>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d161      	bne.n	8003da6 <xTaskResumeAll+0x106>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ce2:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <xTaskResumeAll+0x118>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d05d      	beq.n	8003da6 <xTaskResumeAll+0x106>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cea:	e02e      	b.n	8003d4a <xTaskResumeAll+0xaa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cec:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <xTaskResumeAll+0x11c>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3338      	adds	r3, #56	; 0x38
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fdcb 	bl	8000894 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3324      	adds	r3, #36	; 0x24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fdc6 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <xTaskResumeAll+0x120>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <xTaskResumeAll+0x120>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <xTaskResumeAll+0x124>)
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3324      	adds	r3, #36	; 0x24
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fc fd8c 	bl	800084e <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <xTaskResumeAll+0x128>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <xTaskResumeAll+0xaa>
                        xYieldPending = pdTRUE;
 8003d44:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <xTaskResumeAll+0x12c>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <xTaskResumeAll+0x11c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1cc      	bne.n	8003cec <xTaskResumeAll+0x4c>
                if( pxTCB != NULL )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <xTaskResumeAll+0xbc>
                    prvResetNextTaskUnblockTime();
 8003d58:	f001 fd28 	bl	80057ac <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <xTaskResumeAll+0x130>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	607b      	str	r3, [r7, #4]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <xTaskResumeAll+0xea>
                            if( xTaskIncrementTick() != pdFALSE )
 8003d68:	f000 fea6 	bl	8004ab8 <xTaskIncrementTick>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <xTaskResumeAll+0xd8>
                                xYieldPending = pdTRUE;
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <xTaskResumeAll+0x12c>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f1      	bne.n	8003d68 <xTaskResumeAll+0xc8>
                        xPendedTicks = 0;
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <xTaskResumeAll+0x130>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <xTaskResumeAll+0x12c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <xTaskResumeAll+0x106>
                            xAlreadyYielded = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	60bb      	str	r3, [r7, #8]
                    taskYIELD_IF_USING_PREEMPTION();
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xTaskResumeAll+0x134>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
 8003da6:	f006 fa35 	bl	800a214 <vPortExitCritical>
    return xAlreadyYielded;
 8003daa:	68bb      	ldr	r3, [r7, #8]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000128 	.word	0x20000128
 8003db8:	20000100 	.word	0x20000100
 8003dbc:	200000c0 	.word	0x200000c0
 8003dc0:	20000108 	.word	0x20000108
 8003dc4:	2000002c 	.word	0x2000002c
 8003dc8:	20000028 	.word	0x20000028
 8003dcc:	20000114 	.word	0x20000114
 8003dd0:	20000110 	.word	0x20000110
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <xTaskGetTickCount>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <xTaskGetTickCount+0x18>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	607b      	str	r3, [r7, #4]
    return xTicks;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000104 	.word	0x20000104

08003df4 <xTaskGetTickCountFromISR>:
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dfa:	f006 fa6b 	bl	800a2d4 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <xTaskGetTickCountFromISR+0x20>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	603b      	str	r3, [r7, #0]
    return xReturn;
 8003e08:	683b      	ldr	r3, [r7, #0]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000104 	.word	0x20000104

08003e18 <uxTaskGetNumberOfTasks>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <uxTaskGetNumberOfTasks+0x10>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	20000100 	.word	0x20000100

08003e2c <pcTaskGetName>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <pcTaskGetName+0x14>
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <pcTaskGetName+0x44>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	e000      	b.n	8003e42 <pcTaskGetName+0x16>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <pcTaskGetName+0x34>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3354      	adds	r3, #84	; 0x54
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000028 	.word	0x20000028

08003e74 <xTaskGetHandle>:
    {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003e7c:	2305      	movs	r3, #5
 8003e7e:	617b      	str	r3, [r7, #20]
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f005 f867 	bl	8008f54 <strlen>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d90a      	bls.n	8003ea2 <xTaskGetHandle+0x2e>
        __asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60fb      	str	r3, [r7, #12]
    }
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTaskGetHandle+0x2c>
        vTaskSuspendAll();
 8003ea2:	f7ff feef 	bl	8003c84 <vTaskSuspendAll>
                uxQueue--;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <xTaskGetHandle+0xb8>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fbdb 	bl	8005678 <prvSearchForNameWithinSingleList>
 8003ec2:	6138      	str	r0, [r7, #16]
                if( pxTCB != NULL )
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <xTaskGetHandle+0x5e>
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ea      	bne.n	8003ea6 <xTaskGetHandle+0x32>
 8003ed0:	e000      	b.n	8003ed4 <xTaskGetHandle+0x60>
                    break;
 8003ed2:	bf00      	nop
            if( pxTCB == NULL )
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <xTaskGetHandle+0x74>
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <xTaskGetHandle+0xbc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fbc9 	bl	8005678 <prvSearchForNameWithinSingleList>
 8003ee6:	6138      	str	r0, [r7, #16]
            if( pxTCB == NULL )
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <xTaskGetHandle+0x88>
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <xTaskGetHandle+0xc0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fbbf 	bl	8005678 <prvSearchForNameWithinSingleList>
 8003efa:	6138      	str	r0, [r7, #16]
                    if( pxTCB == NULL )
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <xTaskGetHandle+0x98>
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	480c      	ldr	r0, [pc, #48]	; (8003f38 <xTaskGetHandle+0xc4>)
 8003f06:	f001 fbb7 	bl	8005678 <prvSearchForNameWithinSingleList>
 8003f0a:	6138      	str	r0, [r7, #16]
                    if( pxTCB == NULL )
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <xTaskGetHandle+0xa8>
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4809      	ldr	r0, [pc, #36]	; (8003f3c <xTaskGetHandle+0xc8>)
 8003f16:	f001 fbaf 	bl	8005678 <prvSearchForNameWithinSingleList>
 8003f1a:	6138      	str	r0, [r7, #16]
        ( void ) xTaskResumeAll();
 8003f1c:	f7ff fec0 	bl	8003ca0 <xTaskResumeAll>
        return pxTCB;
 8003f20:	693b      	ldr	r3, [r7, #16]
    }
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	2000002c 	.word	0x2000002c
 8003f30:	200000b8 	.word	0x200000b8
 8003f34:	200000bc 	.word	0x200000bc
 8003f38:	200000ec 	.word	0x200000ec
 8003f3c:	200000d4 	.word	0x200000d4

08003f40 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <uxTaskGetStackHighWaterMark+0x14>
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <uxTaskGetStackHighWaterMark+0x34>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	e000      	b.n	8003f56 <uxTaskGetStackHighWaterMark+0x16>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003f5e:	6938      	ldr	r0, [r7, #16]
 8003f60:	f001 fbf7 	bl	8005752 <prvTaskCheckFreeStackSpace>
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8003f68:	68fb      	ldr	r3, [r7, #12]
    }
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000028 	.word	0x20000028

08003f78 <vTaskSetApplicationTaskTag>:
    {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
        if( xTask == NULL )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <vTaskSetApplicationTaskTag+0x18>
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <vTaskSetApplicationTaskTag+0x34>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e001      	b.n	8003f94 <vTaskSetApplicationTaskTag+0x1c>
            xTCB = xTask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
        taskENTER_CRITICAL();
 8003f94:	f006 f920 	bl	800a1d8 <vPortEnterCritical>
            xTCB->pxTaskTag = pxHookFunction;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	669a      	str	r2, [r3, #104]	; 0x68
        taskEXIT_CRITICAL();
 8003f9e:	f006 f939 	bl	800a214 <vPortExitCritical>
    }
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000028 	.word	0x20000028

08003fb0 <xTaskGetApplicationTaskTag>:
    {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <xTaskGetApplicationTaskTag+0x14>
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <xTaskGetApplicationTaskTag+0x30>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	e000      	b.n	8003fc6 <xTaskGetApplicationTaskTag+0x16>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
        taskENTER_CRITICAL();
 8003fc8:	f006 f906 	bl	800a1d8 <vPortEnterCritical>
            xReturn = pxTCB->pxTaskTag;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd0:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 8003fd2:	f006 f91f 	bl	800a214 <vPortExitCritical>
        return xReturn;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
    }
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000028 	.word	0x20000028

08003fe4 <xTaskGetApplicationTaskTagFromISR>:
    {
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <xTaskGetApplicationTaskTagFromISR+0x14>
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <xTaskGetApplicationTaskTagFromISR+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	e000      	b.n	8003ffa <xTaskGetApplicationTaskTagFromISR+0x16>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8003ffc:	f3ef 8211 	mrs	r2, BASEPRI
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fa      	str	r2, [r7, #12]
 8004012:	60bb      	str	r3, [r7, #8]
        return ulOriginalBASEPRI;
 8004014:	68fb      	ldr	r3, [r7, #12]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004016:	61bb      	str	r3, [r7, #24]
            xReturn = pxTCB->pxTaskTag;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f383 8811 	msr	BASEPRI, r3
    }
 8004028:	bf00      	nop
        return xReturn;
 800402a:	697b      	ldr	r3, [r7, #20]
    }
 800402c:	4618      	mov	r0, r3
 800402e:	3724      	adds	r7, #36	; 0x24
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000028 	.word	0x20000028

0800403c <vTaskSetThreadLocalStoragePointer>:
    {
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
        if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b01      	cmp	r3, #1
 800404c:	dc1c      	bgt.n	8004088 <vTaskSetThreadLocalStoragePointer+0x4c>
            pxTCB = prvGetTCBFromHandle( xTaskToSet );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <vTaskSetThreadLocalStoragePointer+0x1e>
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <vTaskSetThreadLocalStoragePointer+0x58>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	e000      	b.n	800405c <vTaskSetThreadLocalStoragePointer+0x20>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <vTaskSetThreadLocalStoragePointer+0x3e>
        __asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	613b      	str	r3, [r7, #16]
    }
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <vTaskSetThreadLocalStoragePointer+0x3c>
            pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	331a      	adds	r3, #26
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]
    }
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000028 	.word	0x20000028

08004098 <pvTaskGetThreadLocalStoragePointer>:
    {
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
        void * pvReturn = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
        if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	dc0f      	bgt.n	80040cc <pvTaskGetThreadLocalStoragePointer+0x34>
            pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <pvTaskGetThreadLocalStoragePointer+0x20>
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <pvTaskGetThreadLocalStoragePointer+0x44>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	e000      	b.n	80040ba <pvTaskGetThreadLocalStoragePointer+0x22>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60bb      	str	r3, [r7, #8]
            pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	331a      	adds	r3, #26
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e001      	b.n	80040d0 <pvTaskGetThreadLocalStoragePointer+0x38>
            pvReturn = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
        return pvReturn;
 80040d0:	68fb      	ldr	r3, [r7, #12]
    }
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	20000028 	.word	0x20000028

080040e0 <xTaskCallApplicationTaskHook>:
    {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
        if( xTask == NULL )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <xTaskCallApplicationTaskHook+0x18>
            xTCB = pxCurrentTCB;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <xTaskCallApplicationTaskHook+0x40>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e001      	b.n	80040fc <xTaskCallApplicationTaskHook+0x1c>
            xTCB = xTask;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60fb      	str	r3, [r7, #12]
        if( xTCB->pxTaskTag != NULL )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <xTaskCallApplicationTaskHook+0x30>
            xReturn = xTCB->pxTaskTag( pvParameter );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004108:	6838      	ldr	r0, [r7, #0]
 800410a:	4798      	blx	r3
 800410c:	60b8      	str	r0, [r7, #8]
 800410e:	e001      	b.n	8004114 <xTaskCallApplicationTaskHook+0x34>
            xReturn = pdFAIL;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
        return xReturn;
 8004114:	68bb      	ldr	r3, [r7, #8]
    }
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000028 	.word	0x20000028

08004124 <xTaskGetIdleTaskHandle>:
    {
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
        configASSERT( ( xIdleTaskHandle != NULL ) );
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <xTaskGetIdleTaskHandle+0x34>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xTaskGetIdleTaskHandle+0x24>
        __asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
    }
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xTaskGetIdleTaskHandle+0x22>
        return xIdleTaskHandle;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <xTaskGetIdleTaskHandle+0x34>)
 800414a:	681b      	ldr	r3, [r3, #0]
    }
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000124 	.word	0x20000124

0800415c <ulTaskGetIdleRunTimeCounter>:
/*-----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )

    uint32_t ulTaskGetIdleRunTimeCounter( void )
    {
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
        return xIdleTaskHandle->ulRunTimeCounter;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <ulTaskGetIdleRunTimeCounter+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    }
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000124 	.word	0x20000124

08004174 <xTaskGenericNotify>:
    {
 8004174:	b580      	push	{r7, lr}
 8004176:	b08c      	sub	sp, #48	; 0x30
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdPASS;
 8004182:	2301      	movs	r3, #1
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <xTaskGenericNotify+0x2e>
        __asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
    }
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xTaskGenericNotify+0x4a>
        __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61fb      	str	r3, [r7, #28]
    }
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
        taskENTER_CRITICAL();
 80041c2:	f006 f809 	bl	800a1d8 <vPortEnterCritical>
            if( pulPreviousNotificationValue != NULL )
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d006      	beq.n	80041da <xTaskGenericNotify+0x66>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	321e      	adds	r2, #30
 80041d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	601a      	str	r2, [r3, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80041da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4413      	add	r3, r2
 80041e0:	337c      	adds	r3, #124	; 0x7c
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80041e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	337c      	adds	r3, #124	; 0x7c
 80041f0:	2202      	movs	r2, #2
 80041f2:	701a      	strb	r2, [r3, #0]
            switch( eAction )
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d83b      	bhi.n	8004272 <xTaskGenericNotify+0xfe>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <xTaskGenericNotify+0x8c>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004291 	.word	0x08004291
 8004204:	08004215 	.word	0x08004215
 8004208:	08004231 	.word	0x08004231
 800420c:	08004249 	.word	0x08004249
 8004210:	08004257 	.word	0x08004257
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	321e      	adds	r2, #30
 800421a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	ea42 0103 	orr.w	r1, r2, r3
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	321e      	adds	r2, #30
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800422e:	e032      	b.n	8004296 <xTaskGenericNotify+0x122>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	321e      	adds	r2, #30
 8004236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	321e      	adds	r2, #30
 8004242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004246:	e026      	b.n	8004296 <xTaskGenericNotify+0x122>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	321e      	adds	r2, #30
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004254:	e01f      	b.n	8004296 <xTaskGenericNotify+0x122>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800425a:	2b02      	cmp	r3, #2
 800425c:	d006      	beq.n	800426c <xTaskGenericNotify+0xf8>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	321e      	adds	r2, #30
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800426a:	e014      	b.n	8004296 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800426c:	2300      	movs	r3, #0
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004270:	e011      	b.n	8004296 <xTaskGenericNotify+0x122>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <xTaskGenericNotify+0x1ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <xTaskGenericNotify+0x120>
        __asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61bb      	str	r3, [r7, #24]
    }
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <xTaskGenericNotify+0x11a>
                    break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <xTaskGenericNotify+0x122>
                    break;
 8004294:	bf00      	nop
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429a:	2b01      	cmp	r3, #1
 800429c:	d139      	bne.n	8004312 <xTaskGenericNotify+0x19e>
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	3324      	adds	r3, #36	; 0x24
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc faf6 	bl	8000894 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xTaskGenericNotify+0x1b0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <xTaskGenericNotify+0x1b0>)
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <xTaskGenericNotify+0x1b4>)
 80042c8:	441a      	add	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	3324      	adds	r3, #36	; 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7fc fabc 	bl	800084e <vListInsertEnd>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <xTaskGenericNotify+0x180>
        __asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	617b      	str	r3, [r7, #20]
    }
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xTaskGenericNotify+0x17e>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xTaskGenericNotify+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d907      	bls.n	8004312 <xTaskGenericNotify+0x19e>
                    taskYIELD_IF_USING_PREEMPTION();
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <xTaskGenericNotify+0x1bc>)
 8004304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004312:	f005 ff7f 	bl	800a214 <vPortExitCritical>
        return xReturn;
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004318:	4618      	mov	r0, r3
 800431a:	3730      	adds	r7, #48	; 0x30
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000104 	.word	0x20000104
 8004324:	20000108 	.word	0x20000108
 8004328:	2000002c 	.word	0x2000002c
 800432c:	20000028 	.word	0x20000028
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <xTaskGenericNotifyFromISR>:
    {
 8004334:	b580      	push	{r7, lr}
 8004336:	b090      	sub	sp, #64	; 0x40
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdPASS;
 8004342:	2301      	movs	r3, #1
 8004344:	63fb      	str	r3, [r7, #60]	; 0x3c
        configASSERT( xTaskToNotify );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTaskGenericNotifyFromISR+0x48>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437e:	f005 ffa9 	bl	800a2d4 <vPortValidateInterruptPriority>
        pxTCB = xTaskToNotify;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004386:	f3ef 8211 	mrs	r2, BASEPRI
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	627a      	str	r2, [r7, #36]	; 0x24
 800439c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
            if( pulPreviousNotificationValue != NULL )
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <xTaskGenericNotifyFromISR+0x82>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	321e      	adds	r2, #30
 80043ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	601a      	str	r2, [r3, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80043b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	337c      	adds	r3, #124	; 0x7c
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80043c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4413      	add	r3, r2
 80043ca:	337c      	adds	r3, #124	; 0x7c
 80043cc:	2202      	movs	r2, #2
 80043ce:	701a      	strb	r2, [r3, #0]
            switch( eAction )
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d83b      	bhi.n	800444e <xTaskGenericNotifyFromISR+0x11a>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <xTaskGenericNotifyFromISR+0xa8>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	0800446d 	.word	0x0800446d
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004425 	.word	0x08004425
 80043ec:	08004433 	.word	0x08004433
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	321e      	adds	r2, #30
 80043f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	321e      	adds	r2, #30
 8004406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800440a:	e032      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	321e      	adds	r2, #30
 8004412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004416:	1c59      	adds	r1, r3, #1
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	321e      	adds	r2, #30
 800441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004422:	e026      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	321e      	adds	r2, #30
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004430:	e01f      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004432:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004436:	2b02      	cmp	r3, #2
 8004438:	d006      	beq.n	8004448 <xTaskGenericNotifyFromISR+0x114>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	321e      	adds	r2, #30
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004446:	e014      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004448:	2300      	movs	r3, #0
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800444c:	e011      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <xTaskGenericNotifyFromISR+0x1e8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
    }
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800446c:	bf00      	nop
 800446e:	e000      	b.n	8004472 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004470:	bf00      	nop
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004476:	2b01      	cmp	r3, #1
 8004478:	d145      	bne.n	8004506 <xTaskGenericNotifyFromISR+0x1d2>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	61bb      	str	r3, [r7, #24]
    }
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <xTaskGenericNotifyFromISR+0x162>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <xTaskGenericNotifyFromISR+0x1ec>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11c      	bne.n	80044da <xTaskGenericNotifyFromISR+0x1a6>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc f9f5 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	2201      	movs	r2, #1
 80044b0:	409a      	lsls	r2, r3
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTaskGenericNotifyFromISR+0x1f0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <xTaskGenericNotifyFromISR+0x1f0>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <xTaskGenericNotifyFromISR+0x1f4>)
 80044ca:	441a      	add	r2, r3
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	3324      	adds	r3, #36	; 0x24
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f7fc f9bb 	bl	800084e <vListInsertEnd>
 80044d8:	e005      	b.n	80044e6 <xTaskGenericNotifyFromISR+0x1b2>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	3338      	adds	r3, #56	; 0x38
 80044de:	4619      	mov	r1, r3
 80044e0:	4812      	ldr	r0, [pc, #72]	; (800452c <xTaskGenericNotifyFromISR+0x1f8>)
 80044e2:	f7fc f9b4 	bl	800084e <vListInsertEnd>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <xTaskGenericNotifyFromISR+0x1fc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d908      	bls.n	8004506 <xTaskGenericNotifyFromISR+0x1d2>
                    if( pxHigherPriorityTaskWoken != NULL )
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <xTaskGenericNotifyFromISR+0x1cc>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80044fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
                    xYieldPending = pdTRUE;
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <xTaskGenericNotifyFromISR+0x200>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	617b      	str	r3, [r7, #20]
        __asm volatile
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f383 8811 	msr	BASEPRI, r3
    }
 8004510:	bf00      	nop
        return xReturn;
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004514:	4618      	mov	r0, r3
 8004516:	3740      	adds	r7, #64	; 0x40
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000104 	.word	0x20000104
 8004520:	20000128 	.word	0x20000128
 8004524:	20000108 	.word	0x20000108
 8004528:	2000002c 	.word	0x2000002c
 800452c:	200000c0 	.word	0x200000c0
 8004530:	20000028 	.word	0x20000028
 8004534:	20000114 	.word	0x20000114

08004538 <xTaskGenericNotifyWait>:
    {
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	613b      	str	r3, [r7, #16]
    }
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xTaskGenericNotifyWait+0x28>
        taskENTER_CRITICAL();
 8004562:	f005 fe39 	bl	800a1d8 <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	337c      	adds	r3, #124	; 0x7c
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d022      	beq.n	80045be <xTaskGenericNotifyWait+0x86>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	321e      	adds	r2, #30
 8004580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	43d2      	mvns	r2, r2
 8004588:	4011      	ands	r1, r2
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	321e      	adds	r2, #30
 800458e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	337c      	adds	r3, #124	; 0x7c
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <xTaskGenericNotifyWait+0x86>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045a6:	2101      	movs	r1, #1
 80045a8:	6a38      	ldr	r0, [r7, #32]
 80045aa:	f000 fffb 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <xTaskGenericNotifyWait+0xfc>)
 80045b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80045be:	f005 fe29 	bl	800a214 <vPortExitCritical>
        taskENTER_CRITICAL();
 80045c2:	f005 fe09 	bl	800a1d8 <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <xTaskGenericNotifyWait+0xa4>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	321e      	adds	r2, #30
 80045d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	337c      	adds	r3, #124	; 0x7c
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d002      	beq.n	80045f4 <xTaskGenericNotifyWait+0xbc>
                xReturn = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e00e      	b.n	8004612 <xTaskGenericNotifyWait+0xda>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	321e      	adds	r2, #30
 80045fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	43d2      	mvns	r2, r2
 8004604:	4011      	ands	r1, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	321e      	adds	r2, #30
 800460a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <xTaskGenericNotifyWait+0xf8>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	337c      	adds	r3, #124	; 0x7c
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004620:	f005 fdf8 	bl	800a214 <vPortExitCritical>
        return xReturn;
 8004624:	697b      	ldr	r3, [r7, #20]
    }
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000028 	.word	0x20000028
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <vTaskGenericNotifyGiveFromISR>:
    {
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
        configASSERT( xTaskToNotify );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskGenericNotifyGiveFromISR+0x42>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800467c:	f005 fe2a 	bl	800a2d4 <vPortValidateInterruptPriority>
        pxTCB = xTaskToNotify;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 8004684:	f3ef 8211 	mrs	r2, BASEPRI
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	623a      	str	r2, [r7, #32]
 800469a:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800469c:	6a3b      	ldr	r3, [r7, #32]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80046a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	337c      	adds	r3, #124	; 0x7c
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80046ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4413      	add	r3, r2
 80046b4:	337c      	adds	r3, #124	; 0x7c
 80046b6:	2202      	movs	r2, #2
 80046b8:	701a      	strb	r2, [r3, #0]
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	321e      	adds	r2, #30
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	1c59      	adds	r1, r3, #1
 80046c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	321e      	adds	r2, #30
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d145      	bne.n	8004764 <vTaskGenericNotifyGiveFromISR+0x12c>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <vTaskGenericNotifyGiveFromISR+0xbe>
        __asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61bb      	str	r3, [r7, #24]
    }
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <vTaskGenericNotifyGiveFromISR+0xbc>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <vTaskGenericNotifyGiveFromISR+0x140>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11c      	bne.n	8004738 <vTaskGenericNotifyGiveFromISR+0x100>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	3324      	adds	r3, #36	; 0x24
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc f8c6 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <vTaskGenericNotifyGiveFromISR+0x144>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a19      	ldr	r2, [pc, #100]	; (800477c <vTaskGenericNotifyGiveFromISR+0x144>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <vTaskGenericNotifyGiveFromISR+0x148>)
 8004728:	441a      	add	r2, r3
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fc f88c 	bl	800084e <vListInsertEnd>
 8004736:	e005      	b.n	8004744 <vTaskGenericNotifyGiveFromISR+0x10c>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	3338      	adds	r3, #56	; 0x38
 800473c:	4619      	mov	r1, r3
 800473e:	4811      	ldr	r0, [pc, #68]	; (8004784 <vTaskGenericNotifyGiveFromISR+0x14c>)
 8004740:	f7fc f885 	bl	800084e <vListInsertEnd>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <vTaskGenericNotifyGiveFromISR+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474e:	429a      	cmp	r2, r3
 8004750:	d908      	bls.n	8004764 <vTaskGenericNotifyGiveFromISR+0x12c>
                    if( pxHigherPriorityTaskWoken != NULL )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <vTaskGenericNotifyGiveFromISR+0x126>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
                    xYieldPending = pdTRUE;
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <vTaskGenericNotifyGiveFromISR+0x154>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f383 8811 	msr	BASEPRI, r3
    }
 800476e:	bf00      	nop
    }
 8004770:	bf00      	nop
 8004772:	3738      	adds	r7, #56	; 0x38
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000128 	.word	0x20000128
 800477c:	20000108 	.word	0x20000108
 8004780:	2000002c 	.word	0x2000002c
 8004784:	200000c0 	.word	0x200000c0
 8004788:	20000028 	.word	0x20000028
 800478c:	20000114 	.word	0x20000114

08004790 <ulTaskGenericNotifyTake>:
    {
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	613b      	str	r3, [r7, #16]
    }
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <ulTaskGenericNotifyTake+0x26>
        taskENTER_CRITICAL();
 80047b8:	f005 fd0e 	bl	800a1d8 <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80047bc:	4b26      	ldr	r3, [pc, #152]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	321e      	adds	r2, #30
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d115      	bne.n	80047f8 <ulTaskGenericNotifyTake+0x68>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	337c      	adds	r3, #124	; 0x7c
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <ulTaskGenericNotifyTake+0x68>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047e0:	2101      	movs	r1, #1
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fede 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <ulTaskGenericNotifyTake+0xcc>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80047f8:	f005 fd0c 	bl	800a214 <vPortExitCritical>
        taskENTER_CRITICAL();
 80047fc:	f005 fcec 	bl	800a1d8 <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	321e      	adds	r2, #30
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <ulTaskGenericNotifyTake+0xaa>
                if( xClearCountOnExit != pdFALSE )
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <ulTaskGenericNotifyTake+0x9a>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	321e      	adds	r2, #30
 8004822:	2100      	movs	r1, #0
 8004824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004828:	e007      	b.n	800483a <ulTaskGenericNotifyTake+0xaa>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	1e51      	subs	r1, r2, #1
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	321e      	adds	r2, #30
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <ulTaskGenericNotifyTake+0xc8>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	337c      	adds	r3, #124	; 0x7c
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004848:	f005 fce4 	bl	800a214 <vPortExitCritical>
        return ulReturn;
 800484c:	697b      	ldr	r3, [r7, #20]
    }
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000028 	.word	0x20000028
 800485c:	e000ed04 	.word	0xe000ed04

08004860 <xTaskGenericNotifyStateClear>:
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
    }
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xTaskGenericNotifyStateClear+0x24>
        pxTCB = prvGetTCBFromHandle( xTask );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <xTaskGenericNotifyStateClear+0x32>
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xTaskGenericNotifyStateClear+0x70>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	e000      	b.n	8004894 <xTaskGenericNotifyStateClear+0x34>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	613b      	str	r3, [r7, #16]
        taskENTER_CRITICAL();
 8004896:	f005 fc9f 	bl	800a1d8 <vPortEnterCritical>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	337c      	adds	r3, #124	; 0x7c
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d108      	bne.n	80048bc <xTaskGenericNotifyStateClear+0x5c>
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	337c      	adds	r3, #124	; 0x7c
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e001      	b.n	80048c0 <xTaskGenericNotifyStateClear+0x60>
                xReturn = pdFAIL;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 80048c0:	f005 fca8 	bl	800a214 <vPortExitCritical>
        return xReturn;
 80048c4:	697b      	ldr	r3, [r7, #20]
    }
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000028 	.word	0x20000028

080048d4 <ulTaskGenericNotifyValueClear>:
    {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <ulTaskGenericNotifyValueClear+0x18>
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <ulTaskGenericNotifyValueClear+0x58>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e000      	b.n	80048ee <ulTaskGenericNotifyValueClear+0x1a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	617b      	str	r3, [r7, #20]
        taskENTER_CRITICAL();
 80048f0:	f005 fc72 	bl	800a1d8 <vPortEnterCritical>
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	321e      	adds	r2, #30
 80048fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fe:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	321e      	adds	r2, #30
 8004906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	43db      	mvns	r3, r3
 800490e:	ea02 0103 	and.w	r1, r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	321e      	adds	r2, #30
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        taskEXIT_CRITICAL();
 800491c:	f005 fc7a 	bl	800a214 <vPortExitCritical>
        return ulReturn;
 8004920:	693b      	ldr	r3, [r7, #16]
    }
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000028 	.word	0x20000028

08004930 <vTaskSetTimeOutState>:
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <vTaskSetTimeOutState+0x24>
        __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60fb      	str	r3, [r7, #12]
    }
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8004954:	f005 fc40 	bl	800a1d8 <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <vTaskSetTimeOutState+0x44>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <vTaskSetTimeOutState+0x48>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8004968:	f005 fc54 	bl	800a214 <vPortExitCritical>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000118 	.word	0x20000118
 8004978:	20000104 	.word	0x20000104

0800497c <xTaskCheckForTimeOut>:
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	613b      	str	r3, [r7, #16]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTaskCheckForTimeOut+0x40>
    taskENTER_CRITICAL();
 80049be:	f005 fc0b 	bl	800a1d8 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <xTaskCheckForTimeOut+0xe0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <xTaskCheckForTimeOut+0xe4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <xTaskCheckForTimeOut+0x72>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <xTaskCheckForTimeOut+0xe4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e02e      	b.n	8004a4c <xTaskCheckForTimeOut+0xd0>
            if( *pxTicksToWait == portMAX_DELAY )
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d102      	bne.n	80049fe <xTaskCheckForTimeOut+0x82>
                xReturn = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e026      	b.n	8004a4c <xTaskCheckForTimeOut+0xd0>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <xTaskCheckForTimeOut+0xe8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d00a      	beq.n	8004a20 <xTaskCheckForTimeOut+0xa4>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d305      	bcc.n	8004a20 <xTaskCheckForTimeOut+0xa4>
            xReturn = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e015      	b.n	8004a4c <xTaskCheckForTimeOut+0xd0>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20b      	bcs.n	8004a42 <xTaskCheckForTimeOut+0xc6>
            *pxTicksToWait -= xElapsedTime;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fcc4 	bl	80053c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	e004      	b.n	8004a4c <xTaskCheckForTimeOut+0xd0>
            *pxTicksToWait = ( TickType_t ) 0;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
    taskEXIT_CRITICAL();
 8004a4c:	f005 fbe2 	bl	800a214 <vPortExitCritical>
    return xReturn;
 8004a50:	69fb      	ldr	r3, [r7, #28]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000104 	.word	0x20000104
 8004a60:	20000028 	.word	0x20000028
 8004a64:	20000118 	.word	0x20000118

08004a68 <xTaskCatchUpTicks>:
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <xTaskCatchUpTicks+0x48>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <xTaskCatchUpTicks+0x26>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60bb      	str	r3, [r7, #8]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xTaskCatchUpTicks+0x24>
    vTaskSuspendAll();
 8004a8e:	f7ff f8f9 	bl	8003c84 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <xTaskCatchUpTicks+0x4c>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <xTaskCatchUpTicks+0x4c>)
 8004a9c:	6013      	str	r3, [r2, #0]
    xYieldOccurred = xTaskResumeAll();
 8004a9e:	f7ff f8ff 	bl	8003ca0 <xTaskResumeAll>
 8004aa2:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000128 	.word	0x20000128
 8004ab4:	20000110 	.word	0x20000110

08004ab8 <xTaskIncrementTick>:
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	; (8004bfc <xTaskIncrementTick+0x144>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 808e 	bne.w	8004be8 <xTaskIncrementTick+0x130>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004acc:	4b4c      	ldr	r3, [pc, #304]	; (8004c00 <xTaskIncrementTick+0x148>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
        xTickCount = xConstTickCount;
 8004ad4:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <xTaskIncrementTick+0x148>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d120      	bne.n	8004b22 <xTaskIncrementTick+0x6a>
            taskSWITCH_DELAYED_LISTS();
 8004ae0:	4b48      	ldr	r3, [pc, #288]	; (8004c04 <xTaskIncrementTick+0x14c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <xTaskIncrementTick+0x48>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	603b      	str	r3, [r7, #0]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <xTaskIncrementTick+0x46>
 8004b00:	4b40      	ldr	r3, [pc, #256]	; (8004c04 <xTaskIncrementTick+0x14c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <xTaskIncrementTick+0x150>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <xTaskIncrementTick+0x14c>)
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4a3e      	ldr	r2, [pc, #248]	; (8004c08 <xTaskIncrementTick+0x150>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <xTaskIncrementTick+0x154>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <xTaskIncrementTick+0x154>)
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	f000 fe45 	bl	80057ac <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <xTaskIncrementTick+0x158>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d348      	bcc.n	8004bbe <xTaskIncrementTick+0x106>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <xTaskIncrementTick+0x14c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <xTaskIncrementTick+0x88>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <xTaskIncrementTick+0x158>)
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	601a      	str	r2, [r3, #0]
                    break;
 8004b3e:	e03e      	b.n	8004bbe <xTaskIncrementTick+0x106>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b40:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <xTaskIncrementTick+0x14c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	607b      	str	r3, [r7, #4]
                    if( xConstTickCount < xItemValue )
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d203      	bcs.n	8004b60 <xTaskIncrementTick+0xa8>
                        xNextTaskUnblockTime = xItemValue;
 8004b58:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <xTaskIncrementTick+0x158>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b5e:	e02e      	b.n	8004bbe <xTaskIncrementTick+0x106>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3324      	adds	r3, #36	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fb fe95 	bl	8000894 <uxListRemove>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <xTaskIncrementTick+0xc4>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3338      	adds	r3, #56	; 0x38
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fe8c 	bl	8000894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	2201      	movs	r2, #1
 8004b82:	409a      	lsls	r2, r3
 8004b84:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <xTaskIncrementTick+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <xTaskIncrementTick+0x15c>)
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <xTaskIncrementTick+0x160>)
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fb fe52 	bl	800084e <vListInsertEnd>
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <xTaskIncrementTick+0x164>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3b9      	bcc.n	8004b2c <xTaskIncrementTick+0x74>
                                xSwitchRequired = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bbc:	e7b6      	b.n	8004b2c <xTaskIncrementTick+0x74>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bbe:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <xTaskIncrementTick+0x164>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc4:	4914      	ldr	r1, [pc, #80]	; (8004c18 <xTaskIncrementTick+0x160>)
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d901      	bls.n	8004bda <xTaskIncrementTick+0x122>
                    xSwitchRequired = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
                if( xYieldPending != pdFALSE )
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <xTaskIncrementTick+0x168>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <xTaskIncrementTick+0x13a>
                    xSwitchRequired = pdTRUE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e004      	b.n	8004bf2 <xTaskIncrementTick+0x13a>
        ++xPendedTicks;
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <xTaskIncrementTick+0x16c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <xTaskIncrementTick+0x16c>)
 8004bf0:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000128 	.word	0x20000128
 8004c00:	20000104 	.word	0x20000104
 8004c04:	200000b8 	.word	0x200000b8
 8004c08:	200000bc 	.word	0x200000bc
 8004c0c:	20000118 	.word	0x20000118
 8004c10:	20000120 	.word	0x20000120
 8004c14:	20000108 	.word	0x20000108
 8004c18:	2000002c 	.word	0x2000002c
 8004c1c:	20000028 	.word	0x20000028
 8004c20:	20000114 	.word	0x20000114
 8004c24:	20000110 	.word	0x20000110

08004c28 <vTaskPlaceOnEventList>:
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vTaskPlaceOnEventList+0x24>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <vTaskPlaceOnEventList+0x44>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3338      	adds	r3, #56	; 0x38
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb fdc1 	bl	80007de <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	6838      	ldr	r0, [r7, #0]
 8004c60:	f000 fca0 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000028 	.word	0x20000028

08004c70 <vTaskPlaceOnUnorderedEventList>:
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vTaskPlaceOnUnorderedEventList+0x28>
        __asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	617b      	str	r3, [r7, #20]
    }
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vTaskPlaceOnUnorderedEventList+0x26>
    configASSERT( uxSchedulerSuspended != 0 );
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <vTaskPlaceOnUnorderedEventList+0x46>
        __asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
    }
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <vTaskPlaceOnUnorderedEventList+0x44>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3338      	adds	r3, #56	; 0x38
 8004cc8:	4619      	mov	r1, r3
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7fb fdbf 	bl	800084e <vListInsertEnd>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fc66 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000128 	.word	0x20000128
 8004ce4:	20000028 	.word	0x20000028

08004ce8 <vTaskPlaceOnEventListRestricted>:
    {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	617b      	str	r3, [r7, #20]
    }
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vTaskPlaceOnEventListRestricted+0x26>
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <vTaskPlaceOnEventListRestricted+0x54>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3338      	adds	r3, #56	; 0x38
 8004d16:	4619      	mov	r1, r3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7fb fd98 	bl	800084e <vListInsertEnd>
        if( xWaitIndefinitely != pdFALSE )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <vTaskPlaceOnEventListRestricted+0x42>
            xTicksToWait = portMAX_DELAY;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f000 fc39 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
    }
 8004d32:	bf00      	nop
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000028 	.word	0x20000028

08004d40 <xTaskRemoveFromEventList>:
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60fb      	str	r3, [r7, #12]
    }
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	3338      	adds	r3, #56	; 0x38
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fd8f 	bl	8000894 <uxListRemove>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <xTaskRemoveFromEventList+0xac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11c      	bne.n	8004db8 <xTaskRemoveFromEventList+0x78>
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fd86 	bl	8000894 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <xTaskRemoveFromEventList+0xb0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <xTaskRemoveFromEventList+0xb0>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <xTaskRemoveFromEventList+0xb4>)
 8004da8:	441a      	add	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fb fd4c 	bl	800084e <vListInsertEnd>
 8004db6:	e005      	b.n	8004dc4 <xTaskRemoveFromEventList+0x84>
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	3338      	adds	r3, #56	; 0x38
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	480e      	ldr	r0, [pc, #56]	; (8004df8 <xTaskRemoveFromEventList+0xb8>)
 8004dc0:	f7fb fd45 	bl	800084e <vListInsertEnd>
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <xTaskRemoveFromEventList+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d905      	bls.n	8004dde <xTaskRemoveFromEventList+0x9e>
        xReturn = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
        xYieldPending = pdTRUE;
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <xTaskRemoveFromEventList+0xc0>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e001      	b.n	8004de2 <xTaskRemoveFromEventList+0xa2>
        xReturn = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
    return xReturn;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000128 	.word	0x20000128
 8004df0:	20000108 	.word	0x20000108
 8004df4:	2000002c 	.word	0x2000002c
 8004df8:	200000c0 	.word	0x200000c0
 8004dfc:	20000028 	.word	0x20000028
 8004e00:	20000114 	.word	0x20000114

08004e04 <vTaskRemoveFromUnorderedEventList>:
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8004e0e:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	613b      	str	r3, [r7, #16]
    }
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <vTaskRemoveFromUnorderedEventList+0x26>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60fb      	str	r3, [r7, #12]
    }
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vTaskRemoveFromUnorderedEventList+0x52>
    ( void ) uxListRemove( pxEventListItem );
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fb fd1b 	bl	8000894 <uxListRemove>
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	3324      	adds	r3, #36	; 0x24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fd16 	bl	8000894 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004e88:	441a      	add	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fb fcdc 	bl	800084e <vListInsertEnd>
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d902      	bls.n	8004eaa <vTaskRemoveFromUnorderedEventList+0xa6>
        xYieldPending = pdTRUE;
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000128 	.word	0x20000128
 8004eb8:	20000108 	.word	0x20000108
 8004ebc:	2000002c 	.word	0x2000002c
 8004ec0:	20000028 	.word	0x20000028
 8004ec4:	20000114 	.word	0x20000114

08004ec8 <vTaskSwitchContext>:
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ece:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <vTaskSwitchContext+0x11c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 8004ed6:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <vTaskSwitchContext+0x120>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
}
 8004edc:	e07d      	b.n	8004fda <vTaskSwitchContext+0x112>
        xYieldPending = pdFALSE;
 8004ede:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <vTaskSwitchContext+0x120>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004ee4:	4b41      	ldr	r3, [pc, #260]	; (8004fec <vTaskSwitchContext+0x124>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <vTaskSwitchContext+0x124>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <vTaskSwitchContext+0x128>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d909      	bls.n	8004f0a <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <vTaskSwitchContext+0x124>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <vTaskSwitchContext+0x128>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1ad1      	subs	r1, r2, r3
 8004f00:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <vTaskSwitchContext+0x12c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f06:	440a      	add	r2, r1
 8004f08:	675a      	str	r2, [r3, #116]	; 0x74
                ulTaskSwitchedInTime = ulTotalRunTime;
 8004f0a:	4b38      	ldr	r3, [pc, #224]	; (8004fec <vTaskSwitchContext+0x124>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <vTaskSwitchContext+0x128>)
 8004f10:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8004f12:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <vTaskSwitchContext+0x12c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d111      	bne.n	8004f4e <vTaskSwitchContext+0x86>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d10b      	bne.n	8004f4e <vTaskSwitchContext+0x86>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d105      	bne.n	8004f4e <vTaskSwitchContext+0x86>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	330c      	adds	r3, #12
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d008      	beq.n	8004f60 <vTaskSwitchContext+0x98>
 8004f4e:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <vTaskSwitchContext+0x12c>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <vTaskSwitchContext+0x12c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3354      	adds	r3, #84	; 0x54
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f004 fe23 	bl	8009ba6 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <vTaskSwitchContext+0x130>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	f1c3 031f 	rsb	r3, r3, #31
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	4921      	ldr	r1, [pc, #132]	; (8004ffc <vTaskSwitchContext+0x134>)
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <vTaskSwitchContext+0xd8>
        __asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	607b      	str	r3, [r7, #4]
    }
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vTaskSwitchContext+0xd6>
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <vTaskSwitchContext+0x134>)
 8004fac:	4413      	add	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d104      	bne.n	8004fd0 <vTaskSwitchContext+0x108>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <vTaskSwitchContext+0x12c>)
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000128 	.word	0x20000128
 8004fe8:	20000114 	.word	0x20000114
 8004fec:	20000130 	.word	0x20000130
 8004ff0:	2000012c 	.word	0x2000012c
 8004ff4:	20000028 	.word	0x20000028
 8004ff8:	20000108 	.word	0x20000108
 8004ffc:	2000002c 	.word	0x2000002c

08005000 <uxTaskResetEventItemValue>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <uxTaskResetEventItemValue+0x2c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <uxTaskResetEventItemValue+0x2c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <uxTaskResetEventItemValue+0x2c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1c2 0205 	rsb	r2, r2, #5
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
    return uxReturn;
 800501e:	687b      	ldr	r3, [r7, #4]
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000028 	.word	0x20000028

08005030 <xTaskGetCurrentTaskHandle>:
    {
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <xTaskGetCurrentTaskHandle+0x18>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	607b      	str	r3, [r7, #4]
        return xReturn;
 800503c:	687b      	ldr	r3, [r7, #4]
    }
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	20000028 	.word	0x20000028

0800504c <vTaskMissedYield>:
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <vTaskMissedYield+0x14>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000114 	.word	0x20000114

08005064 <xTaskGetSchedulerState>:
    {
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <xTaskGetSchedulerState+0x34>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005072:	2301      	movs	r3, #1
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e008      	b.n	800508a <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <xTaskGetSchedulerState+0x38>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 8005080:	2302      	movs	r3, #2
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	e001      	b.n	800508a <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
        return xReturn;
 800508a:	687b      	ldr	r3, [r7, #4]
    }
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000010c 	.word	0x2000010c
 800509c:	20000128 	.word	0x20000128

080050a0 <xTaskPriorityInherit>:
    {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
        if( pxMutexHolder != NULL )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d05e      	beq.n	8005174 <xTaskPriorityInherit+0xd4>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <xTaskPriorityInherit+0xe0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d24e      	bcs.n	8005162 <xTaskPriorityInherit+0xc2>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db06      	blt.n	80050da <xTaskPriorityInherit+0x3a>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050cc:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <xTaskPriorityInherit+0xe0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	f1c3 0205 	rsb	r2, r3, #5
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <xTaskPriorityInherit+0xe4>)
 80050ec:	4413      	add	r3, r2
 80050ee:	4299      	cmp	r1, r3
 80050f0:	d12f      	bne.n	8005152 <xTaskPriorityInherit+0xb2>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fbcc 	bl	8000894 <uxListRemove>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <xTaskPriorityInherit+0x78>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	2201      	movs	r2, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43da      	mvns	r2, r3
 800510e:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <xTaskPriorityInherit+0xe8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4013      	ands	r3, r2
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <xTaskPriorityInherit+0xe8>)
 8005116:	6013      	str	r3, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <xTaskPriorityInherit+0xe0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	64da      	str	r2, [r3, #76]	; 0x4c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <xTaskPriorityInherit+0xe8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4313      	orrs	r3, r2
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <xTaskPriorityInherit+0xe8>)
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a10      	ldr	r2, [pc, #64]	; (8005184 <xTaskPriorityInherit+0xe4>)
 8005142:	441a      	add	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7fb fb7f 	bl	800084e <vListInsertEnd>
 8005150:	e004      	b.n	800515c <xTaskPriorityInherit+0xbc>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <xTaskPriorityInherit+0xe0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	64da      	str	r2, [r3, #76]	; 0x4c
                xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e008      	b.n	8005174 <xTaskPriorityInherit+0xd4>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <xTaskPriorityInherit+0xe0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	429a      	cmp	r2, r3
 800516e:	d201      	bcs.n	8005174 <xTaskPriorityInherit+0xd4>
                    xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
        return xReturn;
 8005174:	68fb      	ldr	r3, [r7, #12]
    }
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000028 	.word	0x20000028
 8005184:	2000002c 	.word	0x2000002c
 8005188:	20000108 	.word	0x20000108

0800518c <xTaskPriorityDisinherit>:
    {
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <xTaskPriorityDisinherit+0xde>
            configASSERT( pxTCB == pxCurrentTCB );
 80051a2:	4b34      	ldr	r3, [pc, #208]	; (8005274 <xTaskPriorityDisinherit+0xe8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d00a      	beq.n	80051c2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60fb      	str	r3, [r7, #12]
    }
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60bb      	str	r3, [r7, #8]
    }
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e4:	1e5a      	subs	r2, r3, #1
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	665a      	str	r2, [r3, #100]	; 0x64
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d039      	beq.n	800526a <xTaskPriorityDisinherit+0xde>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d135      	bne.n	800526a <xTaskPriorityDisinherit+0xde>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb fb46 	bl	8000894 <uxListRemove>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xTaskPriorityDisinherit+0x98>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	2201      	movs	r2, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43da      	mvns	r2, r3
 800521a:	4b17      	ldr	r3, [pc, #92]	; (8005278 <xTaskPriorityDisinherit+0xec>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4013      	ands	r3, r2
 8005220:	4a15      	ldr	r2, [pc, #84]	; (8005278 <xTaskPriorityDisinherit+0xec>)
 8005222:	6013      	str	r3, [r2, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	64da      	str	r2, [r3, #76]	; 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	f1c3 0205 	rsb	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
                    prvAddTaskToReadyList( pxTCB );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523c:	2201      	movs	r2, #1
 800523e:	409a      	lsls	r2, r3
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <xTaskPriorityDisinherit+0xec>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4313      	orrs	r3, r2
 8005246:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <xTaskPriorityDisinherit+0xec>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <xTaskPriorityDisinherit+0xf0>)
 8005258:	441a      	add	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3324      	adds	r3, #36	; 0x24
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fb faf4 	bl	800084e <vListInsertEnd>
                    xReturn = pdTRUE;
 8005266:	2301      	movs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
        return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
    }
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000028 	.word	0x20000028
 8005278:	20000108 	.word	0x20000108
 800527c:	2000002c 	.word	0x2000002c

08005280 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	61bb      	str	r3, [r7, #24]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800528e:	2301      	movs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d077      	beq.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0x108>
            configASSERT( pxTCB->uxMutexesHeld );
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
    }
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <vTaskPriorityDisinheritAfterTimeout+0x34>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d902      	bls.n	80052c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e002      	b.n	80052cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
                uxPriorityToUse = pxTCB->uxBasePriority;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ca:	61fb      	str	r3, [r7, #28]
            if( pxTCB->uxPriority != uxPriorityToUse )
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d058      	beq.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0x108>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d153      	bne.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    configASSERT( pxTCB != pxCurrentTCB );
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d10a      	bne.n	8005300 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60bb      	str	r3, [r7, #8]
    }
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <vTaskPriorityDisinheritAfterTimeout+0x7e>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	64da      	str	r2, [r3, #76]	; 0x4c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	db04      	blt.n	800531e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0205 	rsb	r2, r3, #5
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800532e:	4413      	add	r3, r2
 8005330:	4299      	cmp	r1, r3
 8005332:	d129      	bne.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0x108>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb faab 	bl	8000894 <uxListRemove>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <vTaskPriorityDisinheritAfterTimeout+0xda>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005348:	2201      	movs	r2, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43da      	mvns	r2, r3
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4013      	ands	r3, r2
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005358:	6013      	str	r3, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	2201      	movs	r2, #1
 8005360:	409a      	lsls	r2, r3
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4a06      	ldr	r2, [pc, #24]	; (8005394 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800537a:	441a      	add	r2, r3
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3324      	adds	r3, #36	; 0x24
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7fb fa63 	bl	800084e <vListInsertEnd>
    }
 8005388:	bf00      	nop
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000028 	.word	0x20000028
 8005394:	2000002c 	.word	0x2000002c
 8005398:	20000108 	.word	0x20000108

0800539c <pvTaskIncrementMutexHeldCount>:
    {
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <pvTaskIncrementMutexHeldCount+0x16>
            ( pxCurrentTCB->uxMutexesHeld )++;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053ae:	3201      	adds	r2, #1
 80053b0:	665a      	str	r2, [r3, #100]	; 0x64
        return pxCurrentTCB;
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80053b4:	681b      	ldr	r3, [r3, #0]
    }
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000028 	.word	0x20000028

080053c4 <vTaskInternalSetTimeOutState>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <vTaskInternalSetTimeOutState+0x24>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <vTaskInternalSetTimeOutState+0x28>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	605a      	str	r2, [r3, #4]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000118 	.word	0x20000118
 80053ec:	20000104 	.word	0x20000104

080053f0 <prvTaskIsTaskSuspended>:
    {
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	613b      	str	r3, [r7, #16]
        configASSERT( xTask );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
    }
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <prvTaskIsTaskSuspended+0x2a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	4a09      	ldr	r2, [pc, #36]	; (8005448 <prvTaskIsTaskSuspended+0x58>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10a      	bne.n	800543c <prvTaskIsTaskSuspended+0x4c>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <prvTaskIsTaskSuspended+0x5c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d005      	beq.n	800543c <prvTaskIsTaskSuspended+0x4c>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <prvTaskIsTaskSuspended+0x4c>
                    xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
        return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	200000ec 	.word	0x200000ec
 800544c:	200000c0 	.word	0x200000c0

08005450 <prvInitialiseTaskLists>:
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	e00c      	b.n	8005476 <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <prvInitialiseTaskLists+0x60>)
 8005468:	4413      	add	r3, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb f98c 	bl	8000788 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3301      	adds	r3, #1
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d9ef      	bls.n	800545c <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 800547c:	480d      	ldr	r0, [pc, #52]	; (80054b4 <prvInitialiseTaskLists+0x64>)
 800547e:	f7fb f983 	bl	8000788 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005482:	480d      	ldr	r0, [pc, #52]	; (80054b8 <prvInitialiseTaskLists+0x68>)
 8005484:	f7fb f980 	bl	8000788 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005488:	480c      	ldr	r0, [pc, #48]	; (80054bc <prvInitialiseTaskLists+0x6c>)
 800548a:	f7fb f97d 	bl	8000788 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 800548e:	480c      	ldr	r0, [pc, #48]	; (80054c0 <prvInitialiseTaskLists+0x70>)
 8005490:	f7fb f97a 	bl	8000788 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8005494:	480b      	ldr	r0, [pc, #44]	; (80054c4 <prvInitialiseTaskLists+0x74>)
 8005496:	f7fb f977 	bl	8000788 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <prvInitialiseTaskLists+0x78>)
 800549c:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <prvInitialiseTaskLists+0x64>)
 800549e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <prvInitialiseTaskLists+0x7c>)
 80054a2:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <prvInitialiseTaskLists+0x68>)
 80054a4:	601a      	str	r2, [r3, #0]
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	2000002c 	.word	0x2000002c
 80054b4:	20000090 	.word	0x20000090
 80054b8:	200000a4 	.word	0x200000a4
 80054bc:	200000c0 	.word	0x200000c0
 80054c0:	200000d4 	.word	0x200000d4
 80054c4:	200000ec 	.word	0x200000ec
 80054c8:	200000b8 	.word	0x200000b8
 80054cc:	200000bc 	.word	0x200000bc

080054d0 <prvIdleTask>:
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 80054d8:	f000 f837 	bl	800554a <prvCheckTasksWaitingTermination>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <prvIdleTask+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d9f9      	bls.n	80054d8 <prvIdleTask+0x8>
                    taskYIELD();
 80054e4:	df01      	svc	1
        prvCheckTasksWaitingTermination();
 80054e6:	e7f7      	b.n	80054d8 <prvIdleTask+0x8>
 80054e8:	2000002c 	.word	0x2000002c

080054ec <prvDeleteTCB>:
    {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <prvDeleteTCB+0x24>
                    vPortFree( pxTCB->pxStack );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fb6c 	bl	8006be0 <vPortFree>
                    vPortFree( pxTCB );
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fb69 	bl	8006be0 <vPortFree>
    }
 800550e:	e018      	b.n	8005542 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005516:	2b01      	cmp	r3, #1
 8005518:	d103      	bne.n	8005522 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fb60 	bl	8006be0 <vPortFree>
    }
 8005520:	e00f      	b.n	8005542 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005528:	2b02      	cmp	r3, #2
 800552a:	d00a      	beq.n	8005542 <prvDeleteTCB+0x56>
        __asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	60fb      	str	r3, [r7, #12]
    }
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <prvDeleteTCB+0x54>
    }
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <prvCheckTasksWaitingTermination>:
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005550:	e019      	b.n	8005586 <prvCheckTasksWaitingTermination+0x3c>
                taskENTER_CRITICAL();
 8005552:	f004 fe41 	bl	800a1d8 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <prvCheckTasksWaitingTermination+0x4e>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb f996 	bl	8000894 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <prvCheckTasksWaitingTermination+0x52>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	4a0b      	ldr	r2, [pc, #44]	; (800559c <prvCheckTasksWaitingTermination+0x52>)
 8005570:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <prvCheckTasksWaitingTermination+0x56>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <prvCheckTasksWaitingTermination+0x56>)
 800557a:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 800557c:	f004 fe4a 	bl	800a214 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff ffb3 	bl	80054ec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <prvCheckTasksWaitingTermination+0x56>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e1      	bne.n	8005552 <prvCheckTasksWaitingTermination+0x8>
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200000d4 	.word	0x200000d4
 800559c:	20000100 	.word	0x20000100
 80055a0:	200000e8 	.word	0x200000e8

080055a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 80055b4:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055be:	4b28      	ldr	r3, [pc, #160]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3324      	adds	r3, #36	; 0x24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fb f965 	bl	8000894 <uxListRemove>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	2201      	movs	r2, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43da      	mvns	r2, r3
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4013      	ands	r3, r2
 80055e4:	4a1f      	ldr	r2, [pc, #124]	; (8005664 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055e6:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d10a      	bne.n	8005606 <prvAddCurrentTaskToDelayedList+0x62>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3324      	adds	r3, #36	; 0x24
 80055fc:	4619      	mov	r1, r3
 80055fe:	481a      	ldr	r0, [pc, #104]	; (8005668 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005600:	f7fb f925 	bl	800084e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005604:	e026      	b.n	8005654 <prvAddCurrentTaskToDelayedList+0xb0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
                if( xTimeToWake < xConstTickCount )
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	429a      	cmp	r2, r3
 800561c:	d209      	bcs.n	8005632 <prvAddCurrentTaskToDelayedList+0x8e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fb f8d7 	bl	80007de <vListInsert>
}
 8005630:	e010      	b.n	8005654 <prvAddCurrentTaskToDelayedList+0xb0>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fb f8cd 	bl	80007de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d202      	bcs.n	8005654 <prvAddCurrentTaskToDelayedList+0xb0>
                        xNextTaskUnblockTime = xTimeToWake;
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6013      	str	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000104 	.word	0x20000104
 8005660:	20000028 	.word	0x20000028
 8005664:	20000108 	.word	0x20000108
 8005668:	200000ec 	.word	0x200000ec
 800566c:	200000bc 	.word	0x200000bc
 8005670:	200000b8 	.word	0x200000b8
 8005674:	20000120 	.word	0x20000120

08005678 <prvSearchForNameWithinSingleList>:
    {
 8005678:	b480      	push	{r7}
 800567a:	b08b      	sub	sp, #44	; 0x2c
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d05b      	beq.n	8005746 <prvSearchForNameWithinSingleList+0xce>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	3308      	adds	r3, #8
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d104      	bne.n	80056b2 <prvSearchForNameWithinSingleList+0x3a>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	617b      	str	r3, [r7, #20]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3308      	adds	r3, #8
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d104      	bne.n	80056de <prvSearchForNameWithinSingleList+0x66>
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60fb      	str	r3, [r7, #12]
                xBreakLoop = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ea:	2300      	movs	r3, #0
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e01c      	b.n	800572a <prvSearchForNameWithinSingleList+0xb2>
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	4413      	add	r3, r2
 80056f6:	3354      	adds	r3, #84	; 0x54
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	72fb      	strb	r3, [r7, #11]
                    if( cNextChar != pcNameToQuery[ x ] )
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	4413      	add	r3, r2
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	7afa      	ldrb	r2, [r7, #11]
 8005706:	429a      	cmp	r2, r3
 8005708:	d002      	beq.n	8005710 <prvSearchForNameWithinSingleList+0x98>
                        xBreakLoop = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e006      	b.n	800571e <prvSearchForNameWithinSingleList+0xa6>
                    else if( cNextChar == ( char ) 0x00 )
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <prvSearchForNameWithinSingleList+0xa6>
                        pxReturn = pxNextTCB;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
                    if( xBreakLoop != pdFALSE )
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	3301      	adds	r3, #1
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b09      	cmp	r3, #9
 800572e:	d9df      	bls.n	80056f0 <prvSearchForNameWithinSingleList+0x78>
 8005730:	e000      	b.n	8005734 <prvSearchForNameWithinSingleList+0xbc>
                        break;
 8005732:	bf00      	nop
                if( pxReturn != NULL )
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <prvSearchForNameWithinSingleList+0xcc>
            } while( pxNextTCB != pxFirstTCB );
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d1bb      	bne.n	80056ba <prvSearchForNameWithinSingleList+0x42>
 8005742:	e000      	b.n	8005746 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8005744:	bf00      	nop
        return pxReturn;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005748:	4618      	mov	r0, r3
 800574a:	372c      	adds	r7, #44	; 0x2c
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <prvTaskCheckFreeStackSpace>:
    {
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800575a:	e012      	b.n	8005782 <prvTaskCheckFreeStackSpace+0x30>
            pucStackByte -= portSTACK_GROWTH;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3301      	adds	r3, #1
 8005760:	607b      	str	r3, [r7, #4]
            ulCount++;
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 800576a:	6013      	str	r3, [r2, #0]
            if(ulCount ==1204){
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005774:	4293      	cmp	r3, r2
 8005776:	d104      	bne.n	8005782 <prvTaskCheckFreeStackSpace+0x30>
            	ulCount2+=1;
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <prvTaskCheckFreeStackSpace+0x56>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <prvTaskCheckFreeStackSpace+0x56>)
 8005780:	6013      	str	r3, [r2, #0]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2ba5      	cmp	r3, #165	; 0xa5
 8005788:	d0e8      	beq.n	800575c <prvTaskCheckFreeStackSpace+0xa>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 8005792:	6013      	str	r3, [r2, #0]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <prvTaskCheckFreeStackSpace+0x52>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
    }
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	20009c00 	.word	0x20009c00
 80057a8:	20009c04 	.word	0x20009c04

080057ac <prvResetNextTaskUnblockTime>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <prvResetNextTaskUnblockTime+0x2c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <prvResetNextTaskUnblockTime+0x30>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	e005      	b.n	80057d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <prvResetNextTaskUnblockTime+0x2c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <prvResetNextTaskUnblockTime+0x30>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	200000b8 	.word	0x200000b8
 80057dc:	20000120 	.word	0x20000120

080057e0 <prvInitialiseNewTask>:
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da02      	bge.n	80057fa <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e001      	b.n	80057fe <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
        uxPriority &= ~portPRIVILEGE_BIT;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	461a      	mov	r2, r3
 8005810:	21a5      	movs	r1, #165	; 0xa5
 8005812:	f00a fde7 	bl	80103e4 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005820:	3b01      	subs	r3, #1
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0307 	bic.w	r3, r3, #7
 800582e:	617b      	str	r3, [r7, #20]
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <prvInitialiseNewTask+0x70>
        __asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	613b      	str	r3, [r7, #16]
    }
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <prvInitialiseNewTask+0x6e>
    if( pcName != NULL )
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <prvInitialiseNewTask+0xb6>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e012      	b.n	8005882 <prvInitialiseNewTask+0xa2>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	7819      	ldrb	r1, [r3, #0]
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	3354      	adds	r3, #84	; 0x54
 800586c:	460a      	mov	r2, r1
 800586e:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <prvInitialiseNewTask+0xaa>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3301      	adds	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b09      	cmp	r3, #9
 8005886:	d9e9      	bls.n	800585c <prvInitialiseNewTask+0x7c>
 8005888:	e000      	b.n	800588c <prvInitialiseNewTask+0xac>
                break;
 800588a:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005894:	e003      	b.n	800589e <prvInitialiseNewTask+0xbe>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d901      	bls.n	80058a8 <prvInitialiseNewTask+0xc8>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058a4:	2304      	movs	r3, #4
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
    pxNewTCB->uxPriority = uxPriority;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ac:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxBasePriority = uxPriority;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
            pxNewTCB->uxMutexesHeld = 0;
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	2200      	movs	r2, #0
 80058b8:	665a      	str	r2, [r3, #100]	; 0x64
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	3324      	adds	r3, #36	; 0x24
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fa ff81 	bl	80007c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3338      	adds	r3, #56	; 0x38
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fa ff7c 	bl	80007c6 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	f1c3 0205 	rsb	r2, r3, #5
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->pxTaskTag = NULL;
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2200      	movs	r2, #0
 80058e8:	669a      	str	r2, [r3, #104]	; 0x68
            pxNewTCB->ulRunTimeCounter = 0UL;
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2200      	movs	r2, #0
 80058ee:	675a      	str	r2, [r3, #116]	; 0x74
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	1d18      	adds	r0, r3, #4
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058fc:	f000 fe76 	bl	80065ec <vPortStoreTaskMPUSettings>
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	336c      	adds	r3, #108	; 0x6c
 8005904:	2208      	movs	r2, #8
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f00a fd6b 	bl	80103e4 <memset>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	3378      	adds	r3, #120	; 0x78
 8005912:	2204      	movs	r2, #4
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f00a fd64 	bl	80103e4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	337c      	adds	r3, #124	; 0x7c
 8005920:	2201      	movs	r2, #1
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f00a fd5d 	bl	80103e4 <memset>
            pxNewTCB->ucDelayAborted = pdFALSE;
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f000 fd79 	bl	8006430 <pxPortInitialiseStack>
 800593e:	4602      	mov	r2, r0
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <prvInitialiseNewTask+0x170>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	601a      	str	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvAddNewTaskToReadyList>:
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8005960:	f004 fc3a 	bl	800a1d8 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8005964:	4b2a      	ldr	r3, [pc, #168]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 800596c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8005976:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <prvAddNewTaskToReadyList+0xb8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
                prvInitialiseTaskLists();
 8005984:	f7ff fd64 	bl	8005450 <prvInitialiseTaskLists>
 8005988:	e00d      	b.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
            if( xSchedulerRunning == pdFALSE )
 800598a:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <prvAddNewTaskToReadyList+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599c:	429a      	cmp	r2, r3
 800599e:	d802      	bhi.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 80059ae:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <prvAddNewTaskToReadyList+0xcc>)
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3324      	adds	r3, #36	; 0x24
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fa ff38 	bl	800084e <vListInsertEnd>
    taskEXIT_CRITICAL();
 80059de:	f004 fc19 	bl	800a214 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvAddNewTaskToReadyList+0xc0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00e      	beq.n	8005a08 <prvAddNewTaskToReadyList+0xb0>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <prvAddNewTaskToReadyList+0xbc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d207      	bcs.n	8005a08 <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvAddNewTaskToReadyList+0xd0>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000100 	.word	0x20000100
 8005a14:	20000028 	.word	0x20000028
 8005a18:	2000010c 	.word	0x2000010c
 8005a1c:	2000011c 	.word	0x2000011c
 8005a20:	20000108 	.word	0x20000108
 8005a24:	2000002c 	.word	0x2000002c
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a3a:	2028      	movs	r0, #40	; 0x28
 8005a3c:	f001 f800 	bl	8006a40 <pvPortMalloc>
 8005a40:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fcaa 	bl	80063b8 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005a64:	697b      	ldr	r3, [r7, #20]
        }
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08a      	sub	sp, #40	; 0x28
 8005a72:	af02      	add	r7, sp, #8
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticTimer_t equals the size of the real timer
                     * structure. */
                    volatile size_t xSize = sizeof( StaticTimer_t );
 8005a7c:	2328      	movs	r3, #40	; 0x28
 8005a7e:	613b      	str	r3, [r7, #16]
                    configASSERT( xSize == sizeof( Timer_t ) );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b28      	cmp	r3, #40	; 0x28
 8005a84:	d00a      	beq.n	8005a9c <xTimerCreateStatic+0x2e>
        __asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61bb      	str	r3, [r7, #24]
    }
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTimerCreateStatic+0x2c>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a9c:	693b      	ldr	r3, [r7, #16]
                }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <xTimerCreateStatic+0x4c>
        __asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	617b      	str	r3, [r7, #20]
    }
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTimerCreateStatic+0x4a>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fc6c 	bl	80063b8 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
        }
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <pvTimerGetTimerID+0x28>
        __asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
    }
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8005b12:	f004 fb61 	bl	800a1d8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8005b1c:	f004 fb7a 	bl	800a214 <vPortExitCritical>

        return pvReturn;
 8005b20:	693b      	ldr	r3, [r7, #16]
    }
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <vTimerSetTimerID+0x2a>
        __asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60bb      	str	r3, [r7, #8]
    }
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 8005b54:	f004 fb40 	bl	800a1d8 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 8005b5e:	f004 fb59 	bl	800a214 <vPortExitCritical>
    }
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <xTimerIsTimerActive>:
    {
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTimerIsTimerActive+0x28>
        __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
    }
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTimerIsTimerActive+0x26>
        taskENTER_CRITICAL();
 8005b92:	f004 fb21 	bl	800a1d8 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <xTimerIsTimerActive+0x40>
                xReturn = pdFALSE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e001      	b.n	8005bae <xTimerIsTimerActive+0x44>
                xReturn = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8005bae:	f004 fb31 	bl	800a214 <vPortExitCritical>
        return xReturn;
 8005bb2:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <xTimerGetTimerDaemonTaskHandle>:
    {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xTimerGetTimerDaemonTaskHandle+0x24>
        __asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	607b      	str	r3, [r7, #4]
    }
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xTimerGetTimerDaemonTaskHandle+0x22>
        return xTimerTaskHandle;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8005be2:	681b      	ldr	r3, [r3, #0]
    }
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000168 	.word	0x20000168

08005bf4 <pcTimerGetName>:
    {
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <pcTimerGetName+0x28>
        __asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
    }
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <pcTimerGetName+0x26>
        return pxTimer->pcTimerName;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
    }
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <vTimerSetReloadMode>:
    {
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <vTimerSetReloadMode+0x2a>
        __asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60bb      	str	r3, [r7, #8]
    }
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 8005c54:	f004 fac0 	bl	800a1d8 <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <vTimerSetReloadMode+0x48>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c70:	e008      	b.n	8005c84 <vTimerSetReloadMode+0x5a>
                pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c78:	f023 0304 	bic.w	r3, r3, #4
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        taskEXIT_CRITICAL();
 8005c84:	f004 fac6 	bl	800a214 <vPortExitCritical>
    }
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <uxTimerGetReloadMode>:
    {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <uxTimerGetReloadMode+0x28>
        __asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60fb      	str	r3, [r7, #12]
    }
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <uxTimerGetReloadMode+0x26>
        taskENTER_CRITICAL();
 8005cb8:	f004 fa8e 	bl	800a1d8 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <uxTimerGetReloadMode+0x40>
                uxReturn = ( UBaseType_t ) pdFALSE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e001      	b.n	8005cd4 <uxTimerGetReloadMode+0x44>
                uxReturn = ( UBaseType_t ) pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8005cd4:	f004 fa9e 	bl	800a214 <vPortExitCritical>
        return uxReturn;
 8005cd8:	697b      	ldr	r3, [r7, #20]
    }
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <xTimerGetPeriod>:
    {
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTimerGetPeriod+0x28>
        __asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60bb      	str	r3, [r7, #8]
    }
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xTimerGetPeriod+0x26>
        return pxTimer->xTimerPeriodInTicks;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
    }
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <xTimerGetExpiryTime>:
    {
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
        configASSERT( xTimer );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <xTimerGetExpiryTime+0x28>
        __asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
    }
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]
        return xReturn;
 8005d46:	693b      	ldr	r3, [r7, #16]
    }
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <xTimerCreateTimerTask>:
    {
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	; 0x28
 8005d56:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
        prvCheckForValidListAndQueue();
 8005d5c:	f000 f892 	bl	8005e84 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <xTimerCreateTimerTask+0x82>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d021      	beq.n	8005dac <xTimerCreateTimerTask+0x5a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d70:	1d3a      	adds	r2, r7, #4
 8005d72:	f107 0108 	add.w	r1, r7, #8
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 ff36 	bl	8009bec <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <xTimerCreateTimerTask+0x86>)
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	460a      	mov	r2, r1
 8005d92:	4912      	ldr	r1, [pc, #72]	; (8005ddc <xTimerCreateTimerTask+0x8a>)
 8005d94:	4812      	ldr	r0, [pc, #72]	; (8005de0 <xTimerCreateTimerTask+0x8e>)
 8005d96:	f7fd f94c 	bl	8003032 <xTaskCreateStatic>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <xTimerCreateTimerTask+0x92>)
 8005d9e:	6013      	str	r3, [r2, #0]
                    if( xTimerTaskHandle != NULL )
 8005da0:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <xTimerCreateTimerTask+0x92>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <xTimerCreateTimerTask+0x5a>
                        xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
        configASSERT( xReturn );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <xTimerCreateTimerTask+0x76>
        __asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	613b      	str	r3, [r7, #16]
    }
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <xTimerCreateTimerTask+0x74>
        return xReturn;
 8005dc8:	697b      	ldr	r3, [r7, #20]
    }
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000164 	.word	0x20000164
 8005dd8:	80000002 	.word	0x80000002
 8005ddc:	080104b8 	.word	0x080104b8
 8005de0:	08005f05 	.word	0x08005f05
 8005de4:	20000168 	.word	0x20000168

08005de8 <xTimerGenericCommand>:
    {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	623b      	str	r3, [r7, #32]
    }
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTimerGenericCommand+0x2c>
        if( xTimerQueue != NULL )
 8005e16:	4b1a      	ldr	r3, [pc, #104]	; (8005e80 <xTimerGenericCommand+0x98>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02a      	beq.n	8005e74 <xTimerGenericCommand+0x8c>
            xMessage.xMessageID = xCommandID;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	61fb      	str	r3, [r7, #28]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	dc18      	bgt.n	8005e62 <xTimerGenericCommand+0x7a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e30:	f7ff f918 	bl	8005064 <xTaskGetSchedulerState>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d109      	bne.n	8005e4e <xTimerGenericCommand+0x66>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <xTimerGenericCommand+0x98>)
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f107 0114 	add.w	r1, r7, #20
 8005e42:	2300      	movs	r3, #0
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	f7fa fd4f 	bl	80008e8 <xQueueGenericSend>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e4c:	e012      	b.n	8005e74 <xTimerGenericCommand+0x8c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <xTimerGenericCommand+0x98>)
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	f107 0114 	add.w	r1, r7, #20
 8005e56:	2300      	movs	r3, #0
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f7fa fd45 	bl	80008e8 <xQueueGenericSend>
 8005e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e60:	e008      	b.n	8005e74 <xTimerGenericCommand+0x8c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <xTimerGenericCommand+0x98>)
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f107 0114 	add.w	r1, r7, #20
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	f7fb f8e3 	bl	8001038 <xQueueGenericSendFromISR>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3728      	adds	r7, #40	; 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000164 	.word	0x20000164

08005e84 <prvCheckForValidListAndQueue>:
    {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af02      	add	r7, sp, #8
        taskENTER_CRITICAL();
 8005e8a:	f004 f9a5 	bl	800a1d8 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8005e8e:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <prvCheckForValidListAndQueue+0x60>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d120      	bne.n	8005ed8 <prvCheckForValidListAndQueue+0x54>
                vListInitialise( &xActiveTimerList1 );
 8005e96:	4814      	ldr	r0, [pc, #80]	; (8005ee8 <prvCheckForValidListAndQueue+0x64>)
 8005e98:	f7fa fc76 	bl	8000788 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005e9c:	4813      	ldr	r0, [pc, #76]	; (8005eec <prvCheckForValidListAndQueue+0x68>)
 8005e9e:	f7fa fc73 	bl	8000788 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvCheckForValidListAndQueue+0x6c>)
 8005ea4:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <prvCheckForValidListAndQueue+0x64>)
 8005ea6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <prvCheckForValidListAndQueue+0x70>)
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <prvCheckForValidListAndQueue+0x68>)
 8005eac:	601a      	str	r2, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <prvCheckForValidListAndQueue+0x74>)
 8005eb4:	4a11      	ldr	r2, [pc, #68]	; (8005efc <prvCheckForValidListAndQueue+0x78>)
 8005eb6:	210c      	movs	r1, #12
 8005eb8:	2005      	movs	r0, #5
 8005eba:	f7fb fe39 	bl	8001b30 <xQueueGenericCreateStatic>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <prvCheckForValidListAndQueue+0x60>)
 8005ec2:	6013      	str	r3, [r2, #0]
                        if( xTimerQueue != NULL )
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <prvCheckForValidListAndQueue+0x60>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <prvCheckForValidListAndQueue+0x54>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <prvCheckForValidListAndQueue+0x60>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	490b      	ldr	r1, [pc, #44]	; (8005f00 <prvCheckForValidListAndQueue+0x7c>)
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fb fd5f 	bl	8001996 <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 8005ed8:	f004 f99c 	bl	800a214 <vPortExitCritical>
    }
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000164 	.word	0x20000164
 8005ee8:	20000134 	.word	0x20000134
 8005eec:	20000148 	.word	0x20000148
 8005ef0:	2000015c 	.word	0x2000015c
 8005ef4:	20000160 	.word	0x20000160
 8005ef8:	20000170 	.word	0x20000170
 8005efc:	200001bc 	.word	0x200001bc
 8005f00:	080104c0 	.word	0x080104c0

08005f04 <prvTimerTask>:
    {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f0c:	f107 0308 	add.w	r3, r7, #8
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f9e1 	bl	80062d8 <prvGetNextExpireTime>
 8005f16:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f9fd 	bl	800631c <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 8005f22:	f000 f801 	bl	8005f28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f26:	e7f1      	b.n	8005f0c <prvTimerTask+0x8>

08005f28 <prvProcessReceivedCommands>:
    {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af02      	add	r7, sp, #8
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f2e:	e0ae      	b.n	800608e <prvProcessReceivedCommands+0x166>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f2c0 80aa 	blt.w	800608c <prvProcessReceivedCommands+0x164>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <prvProcessReceivedCommands+0x26>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	3304      	adds	r3, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fca3 	bl	8000894 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f9a1 	bl	8006298 <prvSampleTimeNow>
 8005f56:	6238      	str	r0, [r7, #32]
                switch( xMessage.xMessageID )
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	f200 8097 	bhi.w	800608e <prvProcessReceivedCommands+0x166>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <prvProcessReceivedCommands+0x40>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f91 	.word	0x08005f91
 8005f74:	08006005 	.word	0x08006005
 8005f78:	08006019 	.word	0x08006019
 8005f7c:	08006063 	.word	0x08006063
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005f91 	.word	0x08005f91
 8005f88:	08006005 	.word	0x08006005
 8005f8c:	08006019 	.word	0x08006019
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	18d1      	adds	r1, r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fb0:	f000 f880 	bl	80060b4 <prvInsertTimerInActiveList>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d069      	beq.n	800608e <prvProcessReceivedCommands+0x166>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fc0:	4798      	blx	r3
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05e      	beq.n	800608e <prvProcessReceivedCommands+0x166>
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	441a      	add	r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe2:	f7ff ff01 	bl	8005de8 <xTimerGenericCommand>
 8005fe6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d14f      	bne.n	800608e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	61bb      	str	r3, [r7, #24]
    }
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <prvProcessReceivedCommands+0xda>
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8006016:	e03a      	b.n	800608e <prvProcessReceivedCommands+0x166>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	617b      	str	r3, [r7, #20]
    }
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <prvProcessReceivedCommands+0x124>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	18d1      	adds	r1, r2, r3
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800605c:	f000 f82a 	bl	80060b4 <prvInsertTimerInActiveList>
                        break;
 8006060:	e015      	b.n	800608e <prvProcessReceivedCommands+0x166>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <prvProcessReceivedCommands+0x150>
                                    vPortFree( pxTimer );
 8006070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006072:	f000 fdb5 	bl	8006be0 <vPortFree>
 8006076:	e00a      	b.n	800608e <prvProcessReceivedCommands+0x166>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 800608a:	e000      	b.n	800608e <prvProcessReceivedCommands+0x166>
            }
 800608c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800608e:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <prvProcessReceivedCommands+0x188>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f107 0108 	add.w	r1, r7, #8
 8006096:	2200      	movs	r2, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa fe8a 	bl	8000db2 <xQueueReceive>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f47f af45 	bne.w	8005f30 <prvProcessReceivedCommands+0x8>
    }
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	3728      	adds	r7, #40	; 0x28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000164 	.word	0x20000164

080060b4 <prvInsertTimerInActiveList>:
    {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d812      	bhi.n	8006100 <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d302      	bcc.n	80060ee <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e01b      	b.n	8006126 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <prvInsertTimerInActiveList+0x7c>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fa fb70 	bl	80007de <vListInsert>
 80060fe:	e012      	b.n	8006126 <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d206      	bcs.n	8006116 <prvInsertTimerInActiveList+0x62>
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e007      	b.n	8006126 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <prvInsertTimerInActiveList+0x80>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fa fb5c 	bl	80007de <vListInsert>
        return xProcessTimerNow;
 8006126:	697b      	ldr	r3, [r7, #20]
    }
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000160 	.word	0x20000160
 8006134:	2000015c 	.word	0x2000015c

08006138 <prvProcessExpiredTimer>:
    {
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006142:	4b22      	ldr	r3, [pc, #136]	; (80061cc <prvProcessExpiredTimer+0x94>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	617b      	str	r3, [r7, #20]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3304      	adds	r3, #4
 8006150:	4618      	mov	r0, r3
 8006152:	f7fa fb9f 	bl	8000894 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d022      	beq.n	80061aa <prvProcessExpiredTimer+0x72>
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	18d1      	adds	r1, r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	6978      	ldr	r0, [r7, #20]
 8006172:	f7ff ff9f 	bl	80060b4 <prvInsertTimerInActiveList>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01f      	beq.n	80061bc <prvProcessExpiredTimer+0x84>
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	2100      	movs	r1, #0
 8006186:	6978      	ldr	r0, [r7, #20]
 8006188:	f7ff fe2e 	bl	8005de8 <xTimerGenericCommand>
 800618c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d113      	bne.n	80061bc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60fb      	str	r3, [r7, #12]
    }
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <prvProcessExpiredTimer+0x70>
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061b0:	f023 0301 	bic.w	r3, r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	4798      	blx	r3
    }
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	2000015c 	.word	0x2000015c

080061d0 <prvSwitchTimerLists>:
    {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d6:	e048      	b.n	800626a <prvSwitchTimerLists+0x9a>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <prvSwitchTimerLists+0xc0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	613b      	str	r3, [r7, #16]
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e2:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <prvSwitchTimerLists+0xc0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa fb4f 	bl	8000894 <uxListRemove>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	4798      	blx	r3
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02e      	beq.n	800626a <prvSwitchTimerLists+0x9a>
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]
                if( xReloadTime > xNextExpireTime )
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d90e      	bls.n	800623c <prvSwitchTimerLists+0x6c>
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <prvSwitchTimerLists+0xc0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fa fad2 	bl	80007de <vListInsert>
 800623a:	e016      	b.n	800626a <prvSwitchTimerLists+0x9a>
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	2100      	movs	r1, #0
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fdce 	bl	8005de8 <xTimerGenericCommand>
 800624c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	603b      	str	r3, [r7, #0]
    }
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <prvSwitchTimerLists+0xc0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1b1      	bne.n	80061d8 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <prvSwitchTimerLists+0xc0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <prvSwitchTimerLists+0xc4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <prvSwitchTimerLists+0xc0>)
 8006280:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <prvSwitchTimerLists+0xc4>)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6013      	str	r3, [r2, #0]
    }
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	2000015c 	.word	0x2000015c
 8006294:	20000160 	.word	0x20000160

08006298 <prvSampleTimeNow>:
    {
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 80062a0:	f7fd fd9a 	bl	8003dd8 <xTaskGetTickCount>
 80062a4:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <prvSampleTimeNow+0x3c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d205      	bcs.n	80062bc <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 80062b0:	f7ff ff8e 	bl	80061d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 80062c2:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSampleTimeNow+0x3c>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 80062c8:	68fb      	ldr	r3, [r7, #12]
    }
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000016c 	.word	0x2000016c

080062d8 <prvGetNextExpireTime>:
    {
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <prvGetNextExpireTime+0x40>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <prvGetNextExpireTime+0x16>
 80062ea:	2201      	movs	r2, #1
 80062ec:	e000      	b.n	80062f0 <prvGetNextExpireTime+0x18>
 80062ee:	2200      	movs	r2, #0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <prvGetNextExpireTime+0x40>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e001      	b.n	800630c <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 800630c:	68fb      	ldr	r3, [r7, #12]
    }
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	2000015c 	.word	0x2000015c

0800631c <prvProcessTimerOrBlockTask>:
    {
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8006326:	f7fd fcad 	bl	8003c84 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ffb2 	bl	8006298 <prvSampleTimeNow>
 8006334:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d130      	bne.n	800639e <prvProcessTimerOrBlockTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <prvProcessTimerOrBlockTask+0x3c>
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	429a      	cmp	r2, r3
 8006348:	d806      	bhi.n	8006358 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 800634a:	f7fd fca9 	bl	8003ca0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fef1 	bl	8006138 <prvProcessExpiredTimer>
    }
 8006356:	e024      	b.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <prvProcessTimerOrBlockTask+0x90>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <prvProcessTimerOrBlockTask+0x50>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <prvProcessTimerOrBlockTask+0x52>
 800636c:	2300      	movs	r3, #0
 800636e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <prvProcessTimerOrBlockTask+0x94>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4619      	mov	r1, r3
 800637e:	f7fb fcc8 	bl	8001d12 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006382:	f7fd fc8d 	bl	8003ca0 <xTaskResumeAll>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <prvProcessTimerOrBlockTask+0x98>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
    }
 800639c:	e001      	b.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800639e:	f7fd fc7f 	bl	8003ca0 <xTaskResumeAll>
    }
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000160 	.word	0x20000160
 80063b0:	20000164 	.word	0x20000164
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <prvInitialiseNewTimer>:
    {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	617b      	str	r3, [r7, #20]
    }
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <prvInitialiseNewTimer+0x28>
        if( pxNewTimer != NULL )
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01e      	beq.n	8006426 <prvInitialiseNewTimer+0x6e>
            prvCheckForValidListAndQueue();
 80063e8:	f7ff fd4c 	bl	8005e84 <prvCheckForValidListAndQueue>
            pxNewTimer->pcTimerName = pcTimerName;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fa f9dc 	bl	80007c6 <vListInitialiseItem>
            if( uxAutoReload != pdFALSE )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <prvInitialiseNewTimer+0x6e>
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800641a:	f043 0304 	orr.w	r3, r3, #4
 800641e:	b2da      	uxtb	r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8006426:	bf00      	nop
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <pxPortInitialiseStack>:
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters,
                                     BaseType_t xRunPrivileged )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3b04      	subs	r3, #4
 8006442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800644a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3b04      	subs	r3, #4
 8006450:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f023 0201 	bic.w	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3b04      	subs	r3, #4
 8006460:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = 0;                                                   /* LR */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3b14      	subs	r3, #20
 800646c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 9;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b24      	subs	r3, #36	; 0x24
 8006478:	60fb      	str	r3, [r7, #12]

    if( xRunPrivileged == pdTRUE )
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d103      	bne.n	8006488 <pxPortInitialiseStack+0x58>
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_PRIVILEGED;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2202      	movs	r2, #2
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e002      	b.n	800648e <pxPortInitialiseStack+0x5e>
    }
    else
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2203      	movs	r2, #3
 800648c:	601a      	str	r2, [r3, #0]
    }

    return pxTopOfStack;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop

0800649c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
    configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064a2:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <xPortStartScheduler+0x108>)
 80064a4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions
             * to ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	22ff      	movs	r2, #255	; 0xff
 80064b2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <xPortStartScheduler+0x10c>)
 80064c8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <xPortStartScheduler+0x110>)
 80064cc:	2207      	movs	r2, #7
 80064ce:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064d0:	e009      	b.n	80064e6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80064d2:	4b36      	ldr	r3, [pc, #216]	; (80065ac <xPortStartScheduler+0x110>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4a34      	ldr	r2, [pc, #208]	; (80065ac <xPortStartScheduler+0x110>)
 80064da:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d0ef      	beq.n	80064d2 <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <xPortStartScheduler+0x110>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1c3 0307 	rsb	r3, r3, #7
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d00a      	beq.n	8006514 <xPortStartScheduler+0x78>
        __asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	613b      	str	r3, [r7, #16]
    }
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <xPortStartScheduler+0x110>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f1c3 0307 	rsb	r3, r3, #7
 800651c:	2b04      	cmp	r3, #4
 800651e:	d00a      	beq.n	8006536 <xPortStartScheduler+0x9a>
        __asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
    }
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xPortStartScheduler+0x98>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <xPortStartScheduler+0x110>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <xPortStartScheduler+0x110>)
 800653e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <xPortStartScheduler+0x110>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <xPortStartScheduler+0x110>)
 800654a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	701a      	strb	r2, [r3, #0]
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the same priority as the kernel, and the SVC
     * handler higher priority so it can be used to exit a critical section (where
     * lower priorities are masked). */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006554:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <xPortStartScheduler+0x114>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a15      	ldr	r2, [pc, #84]	; (80065b0 <xPortStartScheduler+0x114>)
 800655a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800655e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <xPortStartScheduler+0x114>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <xPortStartScheduler+0x114>)
 8006566:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800656a:	6013      	str	r3, [r2, #0]

    /* Configure the regions in the MPU that are common to all tasks. */
    prvSetupMPU();
 800656c:	f000 f8fc 	bl	8006768 <prvSetupMPU>

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006570:	f003 fe7e 	bl	800a270 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <xPortStartScheduler+0x118>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    __asm volatile (
 800657a:	4806      	ldr	r0, [pc, #24]	; (8006594 <xPortStartScheduler+0xf8>)
 800657c:	6800      	ldr	r0, [r0, #0]
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	f380 8808 	msr	MSP, r0
 8006584:	b662      	cpsie	i
 8006586:	b661      	cpsie	f
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	df00      	svc	0
 8006592:	bf00      	nop
 8006594:	e000ed08 	.word	0xe000ed08
        " nop					\n"
        " .ltorg				\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory" );

    /* Should not get here! */
    return 0;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	e000e400 	.word	0xe000e400
 80065a8:	20009c08 	.word	0x20009c08
 80065ac:	20009c0c 	.word	0x20009c0c
 80065b0:	e000ed20 	.word	0xe000ed20
 80065b4:	20008004 	.word	0x20008004

080065b8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortEndScheduler+0x30>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c6:	d00a      	beq.n	80065de <vPortEndScheduler+0x26>
        __asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	607b      	str	r3, [r7, #4]
    }
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <vPortEndScheduler+0x24>
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr
 80065e8:	20008004 	.word	0x20008004

080065ec <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]

    int32_t lIndex;

    uint32_t ul;

    if( xRegions == NULL )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d139      	bne.n	8006674 <vPortStoreTaskMPUSettings+0x88>
    {
        /* No MPU regions are specified so allow access to all RAM including task stack. */
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8006600:	4b54      	ldr	r3, [pc, #336]	; (8006754 <vPortStoreTaskMPUSettings+0x168>)
            ( portMPU_REGION_VALID ) |
 8006602:	f043 0214 	orr.w	r2, r3, #20
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]
            ( portSTACK_REGION );

        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
            ( portMPU_REGION_READ_WRITE ) |
            ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 800660a:	4a53      	ldr	r2, [pc, #332]	; (8006758 <vPortStoreTaskMPUSettings+0x16c>)
 800660c:	4b51      	ldr	r3, [pc, #324]	; (8006754 <vPortStoreTaskMPUSettings+0x168>)
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f91b 	bl	800684c <prvGetMPURegionSizeSetting>
 8006616:	4602      	mov	r2, r0
 8006618:	4b50      	ldr	r3, [pc, #320]	; (800675c <vPortStoreTaskMPUSettings+0x170>)
 800661a:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	6053      	str	r3, [r2, #4]
            ( portMPU_REGION_ENABLE );
		#else
        		/* Re-instate the privileged only RAM region as xRegion[ 0 ] will have
                * just removed the privileged only parameters. */
               xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
                   ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 8006620:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <vPortStoreTaskMPUSettings+0x174>)
                   ( portMPU_REGION_VALID ) |
 8006622:	f043 0215 	orr.w	r2, r3, #21
               xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	609a      	str	r2, [r3, #8]
                   ( portSTACK_REGION + 1 );

               xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
                   ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
                   ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
                   prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 800662a:	4a4e      	ldr	r2, [pc, #312]	; (8006764 <vPortStoreTaskMPUSettings+0x178>)
 800662c:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <vPortStoreTaskMPUSettings+0x174>)
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f90b 	bl	800684c <prvGetMPURegionSizeSetting>
 8006636:	4603      	mov	r3, r0
 8006638:	f043 7383 	orr.w	r3, r3, #17170432	; 0x1060000
 800663c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
               xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	60d3      	str	r3, [r2, #12]

		#endif


        /* Invalidate all other regions. */
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006644:	2302      	movs	r3, #2
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	e010      	b.n	800666c <vPortStoreTaskMPUSettings+0x80>
        {
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3304      	adds	r3, #4
 800664e:	f043 0110 	orr.w	r1, r3, #16
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	2200      	movs	r2, #0
 8006664:	605a      	str	r2, [r3, #4]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	3301      	adds	r3, #1
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d9eb      	bls.n	800664a <vPortStoreTaskMPUSettings+0x5e>

    	            lIndex++;
    	        }

    }
}
 8006672:	e06a      	b.n	800674a <vPortStoreTaskMPUSettings+0x15e>
    	        if( ulStackDepth > 0 )
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <vPortStoreTaskMPUSettings+0xac>
    	                ( ( uint32_t ) pxBottomOfStack ) |
 800667a:	687b      	ldr	r3, [r7, #4]
    	                ( portMPU_REGION_VALID ) |
 800667c:	f043 0214 	orr.w	r2, r3, #20
    	            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]
    	                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f8df 	bl	800684c <prvGetMPURegionSizeSetting>
 800668e:	4602      	mov	r2, r0
    	                ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
 8006690:	4b32      	ldr	r3, [pc, #200]	; (800675c <vPortStoreTaskMPUSettings+0x170>)
 8006692:	4313      	orrs	r3, r2
    	            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6053      	str	r3, [r2, #4]
    	        lIndex = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
    	        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800669c:	2301      	movs	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e050      	b.n	8006744 <vPortStoreTaskMPUSettings+0x158>
    	            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	461a      	mov	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4413      	add	r3, r2
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d031      	beq.n	800671c <vPortStoreTaskMPUSettings+0x130>
    							( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) |
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4413      	add	r3, r2
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
    							( portSTACK_REGION + ul ); /* Region number. */
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3304      	adds	r3, #4
    							( portMPU_REGION_VALID ) |
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f043 0110 	orr.w	r1, r3, #16
    						xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    							( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4613      	mov	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f8ab 	bl	800684c <prvGetMPURegionSizeSetting>
 80066f6:	4601      	mov	r1, r0
    							( xRegions[ lIndex ].ulParameters ) |
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4613      	mov	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	461a      	mov	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4413      	add	r3, r2
 8006708:	689b      	ldr	r3, [r3, #8]
    							( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 800670a:	430b      	orrs	r3, r1
    							( xRegions[ lIndex ].ulParameters ) |
 800670c:	f043 0201 	orr.w	r2, r3, #1
    						xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8006710:	68f9      	ldr	r1, [r7, #12]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	440b      	add	r3, r1
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	e00d      	b.n	8006738 <vPortStoreTaskMPUSettings+0x14c>
    	                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3304      	adds	r3, #4
 8006720:	f043 0110 	orr.w	r1, r3, #16
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    	                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	2200      	movs	r2, #0
 8006736:	605a      	str	r2, [r3, #4]
    	            lIndex++;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3301      	adds	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
    	        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d9ab      	bls.n	80066a2 <vPortStoreTaskMPUSettings+0xb6>
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000000 	.word	0x20000000
 8006758:	20010000 	.word	0x20010000
 800675c:	03070001 	.word	0x03070001
 8006760:	20000000 	.word	0x20000000
 8006764:	20008000 	.word	0x20008000

08006768 <prvSetupMPU>:
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <prvSetupMPU+0xac>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006774:	d14b      	bne.n	800680e <prvSetupMPU+0xa6>
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8006776:	4b28      	ldr	r3, [pc, #160]	; (8006818 <prvSetupMPU+0xb0>)
 8006778:	4a28      	ldr	r2, [pc, #160]	; (800681c <prvSetupMPU+0xb4>)
                                                   ( portMPU_REGION_VALID ) |
 800677a:	f043 0310 	orr.w	r3, r3, #16
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 800677e:	6013      	str	r3, [r2, #0]
                                                ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 8006780:	4a27      	ldr	r2, [pc, #156]	; (8006820 <prvSetupMPU+0xb8>)
 8006782:	4b25      	ldr	r3, [pc, #148]	; (8006818 <prvSetupMPU+0xb0>)
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f860 	bl	800684c <prvGetMPURegionSizeSetting>
 800678c:	4602      	mov	r2, r0
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 800678e:	4925      	ldr	r1, [pc, #148]	; (8006824 <prvSetupMPU+0xbc>)
                                                ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <prvSetupMPU+0xc0>)
 8006792:	4313      	orrs	r3, r2
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 8006794:	600b      	str	r3, [r1, #0]
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 8006796:	4b25      	ldr	r3, [pc, #148]	; (800682c <prvSetupMPU+0xc4>)
 8006798:	4a20      	ldr	r2, [pc, #128]	; (800681c <prvSetupMPU+0xb4>)
                                                   ( portMPU_REGION_VALID ) |
 800679a:	f043 0311 	orr.w	r3, r3, #17
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 800679e:	6013      	str	r3, [r2, #0]
                                                ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <prvSetupMPU+0xc8>)
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <prvSetupMPU+0xc4>)
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f850 	bl	800684c <prvGetMPURegionSizeSetting>
 80067ac:	4602      	mov	r2, r0
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80067ae:	491d      	ldr	r1, [pc, #116]	; (8006824 <prvSetupMPU+0xbc>)
                                                ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80067b0:	4b20      	ldr	r3, [pc, #128]	; (8006834 <prvSetupMPU+0xcc>)
 80067b2:	4313      	orrs	r3, r2
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80067b4:	600b      	str	r3, [r1, #0]
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <prvSetupMPU+0xd0>)
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <prvSetupMPU+0xb4>)
                                                   ( portMPU_REGION_VALID ) |
 80067ba:	f043 0312 	orr.w	r3, r3, #18
                 portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80067be:	6013      	str	r3, [r2, #0]
                                                prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80067c0:	4a1e      	ldr	r2, [pc, #120]	; (800683c <prvSetupMPU+0xd4>)
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <prvSetupMPU+0xd0>)
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f840 	bl	800684c <prvGetMPURegionSizeSetting>
 80067cc:	4603      	mov	r3, r0
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <prvSetupMPU+0xbc>)
                                                prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80067d0:	f043 7383 	orr.w	r3, r3, #17170432	; 0x1060000
 80067d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
                 portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80067d8:	6013      	str	r3, [r2, #0]
              portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <prvSetupMPU+0xb4>)
 80067dc:	4a18      	ldr	r2, [pc, #96]	; (8006840 <prvSetupMPU+0xd8>)
 80067de:	601a      	str	r2, [r3, #0]
                                              ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80067e0:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80067e4:	f000 f832 	bl	800684c <prvGetMPURegionSizeSetting>
 80067e8:	4603      	mov	r3, r0
               portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 80067ea:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <prvSetupMPU+0xbc>)
                                              ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80067ec:	f043 5398 	orr.w	r3, r3, #318767104	; 0x13000000
 80067f0:	f043 0301 	orr.w	r3, r3, #1
               portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 80067f4:	6013      	str	r3, [r2, #0]
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <prvSetupMPU+0xdc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a12      	ldr	r2, [pc, #72]	; (8006844 <prvSetupMPU+0xdc>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006800:	6013      	str	r3, [r2, #0]
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <prvSetupMPU+0xe0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <prvSetupMPU+0xe0>)
 8006808:	f043 0305 	orr.w	r3, r3, #5
 800680c:	6013      	str	r3, [r2, #0]
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	e000ed90 	.word	0xe000ed90
 8006818:	08000000 	.word	0x08000000
 800681c:	e000ed9c 	.word	0xe000ed9c
 8006820:	08080000 	.word	0x08080000
 8006824:	e000eda0 	.word	0xe000eda0
 8006828:	06070001 	.word	0x06070001
 800682c:	08000000 	.word	0x08000000
 8006830:	08008000 	.word	0x08008000
 8006834:	05070001 	.word	0x05070001
 8006838:	20000000 	.word	0x20000000
 800683c:	20008000 	.word	0x20008000
 8006840:	40000013 	.word	0x40000013
 8006844:	e000ed24 	.word	0xe000ed24
 8006848:	e000ed94 	.word	0xe000ed94

0800684c <prvGetMPURegionSizeSetting>:
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
    uint32_t ulRegionSize, ulReturnValue = 4;
 8006854:	2304      	movs	r3, #4
 8006856:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8006858:	2320      	movs	r3, #32
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e009      	b.n	8006872 <prvGetMPURegionSizeSetting+0x26>
        if( ulActualSizeInBytes <= ulRegionSize )
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	429a      	cmp	r2, r3
 8006864:	d909      	bls.n	800687a <prvGetMPURegionSizeSetting+0x2e>
            ulReturnValue++;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b1e      	cmp	r3, #30
 8006876:	d9f2      	bls.n	800685e <prvGetMPURegionSizeSetting+0x12>
 8006878:	e000      	b.n	800687c <prvGetMPURegionSizeSetting+0x30>
            break;
 800687a:	bf00      	nop
    return( ulReturnValue << 1UL );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	005b      	lsls	r3, r3, #1
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop

0800688c <PendSV_Handler>:
    __asm volatile
 800688c:	f3ef 8009 	mrs	r0, PSP
 8006890:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <pxCurrentTCBConst>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	f3ef 8114 	mrs	r1, CONTROL
 8006898:	e920 0ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp}
 800689c:	6010      	str	r0, [r2, #0]
 800689e:	e92d 4008 	stmdb	sp!, {r3, lr}
 80068a2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f7fe fb09 	bl	8004ec8 <vTaskSwitchContext>
 80068b6:	f04f 0000 	mov.w	r0, #0
 80068ba:	f380 8811 	msr	BASEPRI, r0
 80068be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	f101 0104 	add.w	r1, r1, #4
 80068ca:	f3bf 8f5f 	dmb	sy
 80068ce:	4a59      	ldr	r2, [pc, #356]	; (8006a34 <prvSVCHandler+0x8c>)
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	4a57      	ldr	r2, [pc, #348]	; (8006a38 <prvSVCHandler+0x90>)
 80068da:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068de:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068e2:	4a54      	ldr	r2, [pc, #336]	; (8006a34 <prvSVCHandler+0x8c>)
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	e8b0 0ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80068f4:	f383 8814 	msr	CONTROL, r3
 80068f8:	f380 8809 	msr	PSP, r0
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <pxCurrentTCBConst>:
 8006900:	20000028 	.word	0x20000028
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <SysTick_Handler>:
{
 8006908:	b510      	push	{r4, lr}
        __asm volatile
 800690a:	f3ef 8411 	mrs	r4, BASEPRI
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 800691e:	f7fe f8cb 	bl	8004ab8 <xTaskIncrementTick>
 8006922:	b118      	cbz	r0, 800692c <SysTick_Handler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <SysTick_Handler+0x2c>)
 800692a:	601a      	str	r2, [r3, #0]
        __asm volatile
 800692c:	f384 8811 	msr	BASEPRI, r4
}
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <SVC_Handler>:
    __asm volatile
 8006938:	f01e 0f04 	tst.w	lr, #4
 800693c:	bf0c      	ite	eq
 800693e:	f3ef 8008 	mrseq	r0, MSP
 8006942:	f3ef 8009 	mrsne	r0, PSP
 8006946:	e02f      	b.n	80069a8 <prvSVCHandler>
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop

0800694c <prvRestoreContextOfFirstTask>:
    __asm volatile
 800694c:	483b      	ldr	r0, [pc, #236]	; (8006a3c <prvSVCHandler+0x94>)
 800694e:	6800      	ldr	r0, [r0, #0]
 8006950:	6800      	ldr	r0, [r0, #0]
 8006952:	f380 8808 	msr	MSP, r0
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <pxCurrentTCBConst2>)
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	6808      	ldr	r0, [r1, #0]
 800695c:	f101 0104 	add.w	r1, r1, #4
 8006960:	f3bf 8f5f 	dmb	sy
 8006964:	4a33      	ldr	r2, [pc, #204]	; (8006a34 <prvSVCHandler+0x8c>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4a32      	ldr	r2, [pc, #200]	; (8006a38 <prvSVCHandler+0x90>)
 8006970:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006974:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <prvSVCHandler+0x8c>)
 800697a:	6813      	ldr	r3, [r2, #0]
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	e8b0 0ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800698a:	f383 8814 	msr	CONTROL, r3
 800698e:	f380 8809 	msr	PSP, r0
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	f06f 0e02 	mvn.w	lr, #2
 800699e:	4770      	bx	lr

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000028 	.word	0x20000028
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvSVCHandler>:
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
    ulPC = pulParam[ portOFFSET_TO_PC ];
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3b02      	subs	r3, #2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d018      	beq.n	80069f6 <prvSVCHandler+0x4e>
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	dc25      	bgt.n	8006a14 <prvSVCHandler+0x6c>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <prvSVCHandler+0x2a>
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d009      	beq.n	80069e4 <prvSVCHandler+0x3c>
                    break;
 80069d0:	e020      	b.n	8006a14 <prvSVCHandler+0x6c>
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <prvSVCHandler+0x7c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <prvSVCHandler+0x7c>)
 80069d8:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 80069dc:	6013      	str	r3, [r2, #0]
            prvRestoreContextOfFirstTask();
 80069de:	f7ff ffb5 	bl	800694c <prvRestoreContextOfFirstTask>
            break;
 80069e2:	e01a      	b.n	8006a1a <prvSVCHandler+0x72>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <prvSVCHandler+0x80>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
            __asm volatile ( "dsb" ::: "memory" );
 80069ec:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80069f0:	f3bf 8f6f 	isb	sy
            break;
 80069f4:	e011      	b.n	8006a1a <prvSVCHandler+0x72>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 80069f6:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <prvSVCHandler+0x84>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d30c      	bcc.n	8006a18 <prvSVCHandler+0x70>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 80069fe:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <prvSVCHandler+0x88>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d808      	bhi.n	8006a18 <prvSVCHandler+0x70>
                    	__asm volatile
 8006a06:	f3ef 8114 	mrs	r1, CONTROL
 8006a0a:	f021 0101 	bic.w	r1, r1, #1
 8006a0e:	f381 8814 	msr	CONTROL, r1
                    break;
 8006a12:	e001      	b.n	8006a18 <prvSVCHandler+0x70>
                    break;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <prvSVCHandler+0x72>
                    break;
 8006a18:	bf00      	nop
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	e000ed1c 	.word	0xe000ed1c
 8006a28:	e000ed04 	.word	0xe000ed04
 8006a2c:	08008000 	.word	0x08008000
 8006a30:	08008f14 	.word	0x08008f14
 8006a34:	e000ed94 	.word	0xe000ed94
 8006a38:	e000ed9c 	.word	0xe000ed9c
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006a4c:	f7fd f91a 	bl	8003c84 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006a50:	4b5d      	ldr	r3, [pc, #372]	; (8006bc8 <pvPortMalloc+0x188>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006a58:	f000 f996 	bl	8006d88 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a5c:	4b5b      	ldr	r3, [pc, #364]	; (8006bcc <pvPortMalloc+0x18c>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 8093 	bne.w	8006b90 <pvPortMalloc+0x150>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01d      	beq.n	8006aac <pvPortMalloc+0x6c>
            {
                xWantedSize += xHeapStructSize;
 8006a70:	2208      	movs	r2, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d014      	beq.n	8006aac <pvPortMalloc+0x6c>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f023 0307 	bic.w	r3, r3, #7
 8006a88:	3308      	adds	r3, #8
 8006a8a:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <pvPortMalloc+0x6c>
        __asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	617b      	str	r3, [r7, #20]
    }
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d06e      	beq.n	8006b90 <pvPortMalloc+0x150>
 8006ab2:	4b47      	ldr	r3, [pc, #284]	; (8006bd0 <pvPortMalloc+0x190>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d869      	bhi.n	8006b90 <pvPortMalloc+0x150>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006abc:	4b45      	ldr	r3, [pc, #276]	; (8006bd4 <pvPortMalloc+0x194>)
 8006abe:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006ac0:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <pvPortMalloc+0x194>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ac6:	e004      	b.n	8006ad2 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d903      	bls.n	8006ae4 <pvPortMalloc+0xa4>
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f1      	bne.n	8006ac8 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8006ae4:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <pvPortMalloc+0x188>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d050      	beq.n	8006b90 <pvPortMalloc+0x150>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2208      	movs	r2, #8
 8006af4:	4413      	add	r3, r2
 8006af6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	2308      	movs	r3, #8
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d91f      	bls.n	8006b50 <pvPortMalloc+0x110>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <pvPortMalloc+0xf8>
        __asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	613b      	str	r3, [r7, #16]
    }
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <pvPortMalloc+0xf6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b4a:	69b8      	ldr	r0, [r7, #24]
 8006b4c:	f000 f8c4 	bl	8006cd8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b50:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <pvPortMalloc+0x190>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <pvPortMalloc+0x190>)
 8006b5c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b5e:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <pvPortMalloc+0x190>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <pvPortMalloc+0x198>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d203      	bcs.n	8006b72 <pvPortMalloc+0x132>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <pvPortMalloc+0x190>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <pvPortMalloc+0x198>)
 8006b70:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <pvPortMalloc+0x18c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <pvPortMalloc+0x19c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <pvPortMalloc+0x19c>)
 8006b8e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006b90:	f7fd f886 	bl	8003ca0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <pvPortMalloc+0x15e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8006b9a:	f003 f80a 	bl	8009bb2 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <pvPortMalloc+0x17e>
        __asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
    }
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <pvPortMalloc+0x17c>
    return pvReturn;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	; 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20004200 	.word	0x20004200
 8006bcc:	20004214 	.word	0x20004214
 8006bd0:	20004204 	.word	0x20004204
 8006bd4:	200041f8 	.word	0x200041f8
 8006bd8:	20004208 	.word	0x20004208
 8006bdc:	2000420c 	.word	0x2000420c

08006be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04d      	beq.n	8006c8e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <vPortFree+0xb8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <vPortFree+0x44>
        __asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60fb      	str	r3, [r7, #12]
    }
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <vPortFree+0x62>
        __asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60bb      	str	r3, [r7, #8]
    }
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <vPortFree+0xb8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11a      	bne.n	8006c8e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <vPortFree+0xb8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006c68:	f7fd f80c 	bl	8003c84 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vPortFree+0xbc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <vPortFree+0xbc>)
 8006c78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 f82c 	bl	8006cd8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vPortFree+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <vPortFree+0xc0>)
 8006c88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006c8a:	f7fd f809 	bl	8003ca0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20004214 	.word	0x20004214
 8006c9c:	20004204 	.word	0x20004204
 8006ca0:	20004210 	.word	0x20004210

08006ca4 <vPortInitialiseBlocks>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
    /* This just exists to keep the linker quiet. */
}
 8006ca8:	bf00      	nop
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <xPortGetFreeHeapSize>:
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006cb4:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <xPortGetFreeHeapSize+0x10>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	20004204 	.word	0x20004204

08006cc4 <xPortGetMinimumEverFreeHeapSize>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006cc8:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <xPortGetMinimumEverFreeHeapSize+0x10>)
 8006cca:	681b      	ldr	r3, [r3, #0]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr
 8006cd4:	20004208 	.word	0x20004208

08006cd8 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce0:	4b27      	ldr	r3, [pc, #156]	; (8006d80 <prvInsertBlockIntoFreeList+0xa8>)
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e002      	b.n	8006cec <prvInsertBlockIntoFreeList+0x14>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d8f7      	bhi.n	8006ce6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d108      	bne.n	8006d1a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d118      	bne.n	8006d60 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <prvInsertBlockIntoFreeList+0xac>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d00d      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e008      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <prvInsertBlockIntoFreeList+0xac>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e003      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d002      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	200041f8 	.word	0x200041f8
 8006d84:	20004200 	.word	0x20004200

08006d88 <prvHeapInit>:
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d92:	60bb      	str	r3, [r7, #8]
    uxAddress = ( size_t ) ucHeap;
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <prvHeapInit+0xac>)
 8006d96:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3307      	adds	r3, #7
 8006da6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <prvHeapInit+0xac>)
 8006db8:	4413      	add	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <prvHeapInit+0xb0>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <prvHeapInit+0xb0>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0307 	bic.w	r3, r3, #7
 8006de2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <prvHeapInit+0xb4>)
 8006de8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <prvHeapInit+0xb4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <prvHeapInit+0xb4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <prvHeapInit+0xb4>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a0a      	ldr	r2, [pc, #40]	; (8006e40 <prvHeapInit+0xb8>)
 8006e16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a09      	ldr	r2, [pc, #36]	; (8006e44 <prvHeapInit+0xbc>)
 8006e1e:	6013      	str	r3, [r2, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <prvHeapInit+0xc0>)
 8006e22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	200001f8 	.word	0x200001f8
 8006e38:	200041f8 	.word	0x200041f8
 8006e3c:	20004200 	.word	0x20004200
 8006e40:	20004208 	.word	0x20004208
 8006e44:	20004204 	.word	0x20004204
 8006e48:	20004214 	.word	0x20004214
 8006e4c:	addeadde 	.word	0xaddeadde
 8006e50:	addeadde 	.word	0xaddeadde
 8006e54:	addeadde 	.word	0xaddeadde
 8006e58:	addeadde 	.word	0xaddeadde
 8006e5c:	addeadde 	.word	0xaddeadde
 8006e60:	addeadde 	.word	0xaddeadde
 8006e64:	addeadde 	.word	0xaddeadde
 8006e68:	addeadde 	.word	0xaddeadde
 8006e6c:	addeadde 	.word	0xaddeadde
 8006e70:	addeadde 	.word	0xaddeadde
 8006e74:	addeadde 	.word	0xaddeadde
 8006e78:	addeadde 	.word	0xaddeadde
 8006e7c:	addeadde 	.word	0xaddeadde
 8006e80:	addeadde 	.word	0xaddeadde
 8006e84:	addeadde 	.word	0xaddeadde
 8006e88:	addeadde 	.word	0xaddeadde
 8006e8c:	addeadde 	.word	0xaddeadde
 8006e90:	addeadde 	.word	0xaddeadde
 8006e94:	addeadde 	.word	0xaddeadde
 8006e98:	addeadde 	.word	0xaddeadde
 8006e9c:	addeadde 	.word	0xaddeadde
 8006ea0:	addeadde 	.word	0xaddeadde
 8006ea4:	addeadde 	.word	0xaddeadde
 8006ea8:	addeadde 	.word	0xaddeadde
 8006eac:	addeadde 	.word	0xaddeadde
 8006eb0:	addeadde 	.word	0xaddeadde
 8006eb4:	addeadde 	.word	0xaddeadde
 8006eb8:	addeadde 	.word	0xaddeadde
 8006ebc:	addeadde 	.word	0xaddeadde
 8006ec0:	addeadde 	.word	0xaddeadde
 8006ec4:	addeadde 	.word	0xaddeadde
 8006ec8:	addeadde 	.word	0xaddeadde
 8006ecc:	addeadde 	.word	0xaddeadde
 8006ed0:	addeadde 	.word	0xaddeadde
 8006ed4:	addeadde 	.word	0xaddeadde
 8006ed8:	addeadde 	.word	0xaddeadde
 8006edc:	addeadde 	.word	0xaddeadde
 8006ee0:	addeadde 	.word	0xaddeadde
 8006ee4:	addeadde 	.word	0xaddeadde
 8006ee8:	addeadde 	.word	0xaddeadde
 8006eec:	addeadde 	.word	0xaddeadde
 8006ef0:	addeadde 	.word	0xaddeadde
 8006ef4:	addeadde 	.word	0xaddeadde
 8006ef8:	addeadde 	.word	0xaddeadde
 8006efc:	addeadde 	.word	0xaddeadde
 8006f00:	addeadde 	.word	0xaddeadde
 8006f04:	addeadde 	.word	0xaddeadde
 8006f08:	addeadde 	.word	0xaddeadde
 8006f0c:	addeadde 	.word	0xaddeadde
 8006f10:	addeadde 	.word	0xaddeadde
 8006f14:	addeadde 	.word	0xaddeadde
 8006f18:	addeadde 	.word	0xaddeadde
 8006f1c:	addeadde 	.word	0xaddeadde
 8006f20:	addeadde 	.word	0xaddeadde
 8006f24:	addeadde 	.word	0xaddeadde
 8006f28:	addeadde 	.word	0xaddeadde
 8006f2c:	addeadde 	.word	0xaddeadde
 8006f30:	addeadde 	.word	0xaddeadde
 8006f34:	addeadde 	.word	0xaddeadde
 8006f38:	addeadde 	.word	0xaddeadde
 8006f3c:	addeadde 	.word	0xaddeadde
 8006f40:	addeadde 	.word	0xaddeadde
 8006f44:	addeadde 	.word	0xaddeadde
 8006f48:	addeadde 	.word	0xaddeadde
 8006f4c:	addeadde 	.word	0xaddeadde
 8006f50:	addeadde 	.word	0xaddeadde
 8006f54:	addeadde 	.word	0xaddeadde
 8006f58:	addeadde 	.word	0xaddeadde
 8006f5c:	addeadde 	.word	0xaddeadde
 8006f60:	addeadde 	.word	0xaddeadde
 8006f64:	addeadde 	.word	0xaddeadde
 8006f68:	addeadde 	.word	0xaddeadde
 8006f6c:	addeadde 	.word	0xaddeadde
 8006f70:	addeadde 	.word	0xaddeadde
 8006f74:	addeadde 	.word	0xaddeadde
 8006f78:	addeadde 	.word	0xaddeadde
 8006f7c:	addeadde 	.word	0xaddeadde
 8006f80:	addeadde 	.word	0xaddeadde
 8006f84:	addeadde 	.word	0xaddeadde
 8006f88:	addeadde 	.word	0xaddeadde
 8006f8c:	addeadde 	.word	0xaddeadde
 8006f90:	addeadde 	.word	0xaddeadde
 8006f94:	addeadde 	.word	0xaddeadde
 8006f98:	addeadde 	.word	0xaddeadde
 8006f9c:	addeadde 	.word	0xaddeadde
 8006fa0:	addeadde 	.word	0xaddeadde
 8006fa4:	addeadde 	.word	0xaddeadde
 8006fa8:	addeadde 	.word	0xaddeadde
 8006fac:	addeadde 	.word	0xaddeadde
 8006fb0:	addeadde 	.word	0xaddeadde
 8006fb4:	addeadde 	.word	0xaddeadde
 8006fb8:	addeadde 	.word	0xaddeadde
 8006fbc:	addeadde 	.word	0xaddeadde
 8006fc0:	addeadde 	.word	0xaddeadde
 8006fc4:	addeadde 	.word	0xaddeadde
 8006fc8:	addeadde 	.word	0xaddeadde
 8006fcc:	addeadde 	.word	0xaddeadde
 8006fd0:	addeadde 	.word	0xaddeadde
 8006fd4:	addeadde 	.word	0xaddeadde
 8006fd8:	addeadde 	.word	0xaddeadde
 8006fdc:	addeadde 	.word	0xaddeadde
 8006fe0:	addeadde 	.word	0xaddeadde
 8006fe4:	addeadde 	.word	0xaddeadde
 8006fe8:	addeadde 	.word	0xaddeadde
 8006fec:	addeadde 	.word	0xaddeadde
 8006ff0:	addeadde 	.word	0xaddeadde
 8006ff4:	addeadde 	.word	0xaddeadde
 8006ff8:	addeadde 	.word	0xaddeadde
 8006ffc:	addeadde 	.word	0xaddeadde
 8007000:	addeadde 	.word	0xaddeadde
 8007004:	addeadde 	.word	0xaddeadde
 8007008:	addeadde 	.word	0xaddeadde
 800700c:	addeadde 	.word	0xaddeadde
 8007010:	addeadde 	.word	0xaddeadde
 8007014:	addeadde 	.word	0xaddeadde
 8007018:	addeadde 	.word	0xaddeadde
 800701c:	addeadde 	.word	0xaddeadde
 8007020:	addeadde 	.word	0xaddeadde
 8007024:	addeadde 	.word	0xaddeadde
 8007028:	addeadde 	.word	0xaddeadde
 800702c:	addeadde 	.word	0xaddeadde
 8007030:	addeadde 	.word	0xaddeadde
 8007034:	addeadde 	.word	0xaddeadde
 8007038:	addeadde 	.word	0xaddeadde
 800703c:	addeadde 	.word	0xaddeadde
 8007040:	addeadde 	.word	0xaddeadde
 8007044:	addeadde 	.word	0xaddeadde
 8007048:	addeadde 	.word	0xaddeadde
 800704c:	addeadde 	.word	0xaddeadde
 8007050:	addeadde 	.word	0xaddeadde
 8007054:	addeadde 	.word	0xaddeadde
 8007058:	addeadde 	.word	0xaddeadde
 800705c:	addeadde 	.word	0xaddeadde
 8007060:	addeadde 	.word	0xaddeadde
 8007064:	addeadde 	.word	0xaddeadde
 8007068:	addeadde 	.word	0xaddeadde
 800706c:	addeadde 	.word	0xaddeadde
 8007070:	addeadde 	.word	0xaddeadde
 8007074:	addeadde 	.word	0xaddeadde
 8007078:	addeadde 	.word	0xaddeadde
 800707c:	addeadde 	.word	0xaddeadde
 8007080:	addeadde 	.word	0xaddeadde
 8007084:	addeadde 	.word	0xaddeadde
 8007088:	addeadde 	.word	0xaddeadde
 800708c:	addeadde 	.word	0xaddeadde
 8007090:	addeadde 	.word	0xaddeadde
 8007094:	addeadde 	.word	0xaddeadde
 8007098:	addeadde 	.word	0xaddeadde
 800709c:	addeadde 	.word	0xaddeadde
 80070a0:	addeadde 	.word	0xaddeadde
 80070a4:	addeadde 	.word	0xaddeadde
 80070a8:	addeadde 	.word	0xaddeadde
 80070ac:	addeadde 	.word	0xaddeadde
 80070b0:	addeadde 	.word	0xaddeadde
 80070b4:	addeadde 	.word	0xaddeadde
 80070b8:	addeadde 	.word	0xaddeadde
 80070bc:	addeadde 	.word	0xaddeadde
 80070c0:	addeadde 	.word	0xaddeadde
 80070c4:	addeadde 	.word	0xaddeadde
 80070c8:	addeadde 	.word	0xaddeadde
 80070cc:	addeadde 	.word	0xaddeadde
 80070d0:	addeadde 	.word	0xaddeadde
 80070d4:	addeadde 	.word	0xaddeadde
 80070d8:	addeadde 	.word	0xaddeadde
 80070dc:	addeadde 	.word	0xaddeadde
 80070e0:	addeadde 	.word	0xaddeadde
 80070e4:	addeadde 	.word	0xaddeadde
 80070e8:	addeadde 	.word	0xaddeadde
 80070ec:	addeadde 	.word	0xaddeadde
 80070f0:	addeadde 	.word	0xaddeadde
 80070f4:	addeadde 	.word	0xaddeadde
 80070f8:	addeadde 	.word	0xaddeadde
 80070fc:	addeadde 	.word	0xaddeadde
 8007100:	addeadde 	.word	0xaddeadde
 8007104:	addeadde 	.word	0xaddeadde
 8007108:	addeadde 	.word	0xaddeadde
 800710c:	addeadde 	.word	0xaddeadde
 8007110:	addeadde 	.word	0xaddeadde
 8007114:	addeadde 	.word	0xaddeadde
 8007118:	addeadde 	.word	0xaddeadde
 800711c:	addeadde 	.word	0xaddeadde
 8007120:	addeadde 	.word	0xaddeadde
 8007124:	addeadde 	.word	0xaddeadde
 8007128:	addeadde 	.word	0xaddeadde
 800712c:	addeadde 	.word	0xaddeadde
 8007130:	addeadde 	.word	0xaddeadde
 8007134:	addeadde 	.word	0xaddeadde
 8007138:	addeadde 	.word	0xaddeadde
 800713c:	addeadde 	.word	0xaddeadde
 8007140:	addeadde 	.word	0xaddeadde
 8007144:	addeadde 	.word	0xaddeadde
 8007148:	addeadde 	.word	0xaddeadde
 800714c:	addeadde 	.word	0xaddeadde
 8007150:	addeadde 	.word	0xaddeadde
 8007154:	addeadde 	.word	0xaddeadde
 8007158:	addeadde 	.word	0xaddeadde
 800715c:	addeadde 	.word	0xaddeadde
 8007160:	addeadde 	.word	0xaddeadde
 8007164:	addeadde 	.word	0xaddeadde
 8007168:	addeadde 	.word	0xaddeadde
 800716c:	addeadde 	.word	0xaddeadde
 8007170:	addeadde 	.word	0xaddeadde
 8007174:	addeadde 	.word	0xaddeadde
 8007178:	addeadde 	.word	0xaddeadde
 800717c:	addeadde 	.word	0xaddeadde
 8007180:	addeadde 	.word	0xaddeadde
 8007184:	addeadde 	.word	0xaddeadde
 8007188:	addeadde 	.word	0xaddeadde
 800718c:	addeadde 	.word	0xaddeadde
 8007190:	addeadde 	.word	0xaddeadde
 8007194:	addeadde 	.word	0xaddeadde
 8007198:	addeadde 	.word	0xaddeadde
 800719c:	addeadde 	.word	0xaddeadde
 80071a0:	addeadde 	.word	0xaddeadde
 80071a4:	addeadde 	.word	0xaddeadde
 80071a8:	addeadde 	.word	0xaddeadde
 80071ac:	addeadde 	.word	0xaddeadde
 80071b0:	addeadde 	.word	0xaddeadde
 80071b4:	addeadde 	.word	0xaddeadde
 80071b8:	addeadde 	.word	0xaddeadde
 80071bc:	addeadde 	.word	0xaddeadde
 80071c0:	addeadde 	.word	0xaddeadde
 80071c4:	addeadde 	.word	0xaddeadde
 80071c8:	addeadde 	.word	0xaddeadde
 80071cc:	addeadde 	.word	0xaddeadde
 80071d0:	addeadde 	.word	0xaddeadde
 80071d4:	addeadde 	.word	0xaddeadde
 80071d8:	addeadde 	.word	0xaddeadde
 80071dc:	addeadde 	.word	0xaddeadde
 80071e0:	addeadde 	.word	0xaddeadde
 80071e4:	addeadde 	.word	0xaddeadde
 80071e8:	addeadde 	.word	0xaddeadde
 80071ec:	addeadde 	.word	0xaddeadde
 80071f0:	addeadde 	.word	0xaddeadde
 80071f4:	addeadde 	.word	0xaddeadde
 80071f8:	addeadde 	.word	0xaddeadde
 80071fc:	addeadde 	.word	0xaddeadde
 8007200:	addeadde 	.word	0xaddeadde
 8007204:	addeadde 	.word	0xaddeadde
 8007208:	addeadde 	.word	0xaddeadde
 800720c:	addeadde 	.word	0xaddeadde
 8007210:	addeadde 	.word	0xaddeadde
 8007214:	addeadde 	.word	0xaddeadde
 8007218:	addeadde 	.word	0xaddeadde
 800721c:	addeadde 	.word	0xaddeadde
 8007220:	addeadde 	.word	0xaddeadde
 8007224:	addeadde 	.word	0xaddeadde
 8007228:	addeadde 	.word	0xaddeadde
 800722c:	addeadde 	.word	0xaddeadde
 8007230:	addeadde 	.word	0xaddeadde
 8007234:	addeadde 	.word	0xaddeadde
 8007238:	addeadde 	.word	0xaddeadde
 800723c:	addeadde 	.word	0xaddeadde
 8007240:	addeadde 	.word	0xaddeadde
 8007244:	addeadde 	.word	0xaddeadde
 8007248:	addeadde 	.word	0xaddeadde
 800724c:	addeadde 	.word	0xaddeadde
 8007250:	addeadde 	.word	0xaddeadde
 8007254:	addeadde 	.word	0xaddeadde
 8007258:	addeadde 	.word	0xaddeadde
 800725c:	addeadde 	.word	0xaddeadde
 8007260:	addeadde 	.word	0xaddeadde
 8007264:	addeadde 	.word	0xaddeadde
 8007268:	addeadde 	.word	0xaddeadde
 800726c:	addeadde 	.word	0xaddeadde
 8007270:	addeadde 	.word	0xaddeadde
 8007274:	addeadde 	.word	0xaddeadde
 8007278:	addeadde 	.word	0xaddeadde
 800727c:	addeadde 	.word	0xaddeadde
 8007280:	addeadde 	.word	0xaddeadde
 8007284:	addeadde 	.word	0xaddeadde
 8007288:	addeadde 	.word	0xaddeadde
 800728c:	addeadde 	.word	0xaddeadde
 8007290:	addeadde 	.word	0xaddeadde
 8007294:	addeadde 	.word	0xaddeadde
 8007298:	addeadde 	.word	0xaddeadde
 800729c:	addeadde 	.word	0xaddeadde
 80072a0:	addeadde 	.word	0xaddeadde
 80072a4:	addeadde 	.word	0xaddeadde
 80072a8:	addeadde 	.word	0xaddeadde
 80072ac:	addeadde 	.word	0xaddeadde
 80072b0:	addeadde 	.word	0xaddeadde
 80072b4:	addeadde 	.word	0xaddeadde
 80072b8:	addeadde 	.word	0xaddeadde
 80072bc:	addeadde 	.word	0xaddeadde
 80072c0:	addeadde 	.word	0xaddeadde
 80072c4:	addeadde 	.word	0xaddeadde
 80072c8:	addeadde 	.word	0xaddeadde
 80072cc:	addeadde 	.word	0xaddeadde
 80072d0:	addeadde 	.word	0xaddeadde
 80072d4:	addeadde 	.word	0xaddeadde
 80072d8:	addeadde 	.word	0xaddeadde
 80072dc:	addeadde 	.word	0xaddeadde
 80072e0:	addeadde 	.word	0xaddeadde
 80072e4:	addeadde 	.word	0xaddeadde
 80072e8:	addeadde 	.word	0xaddeadde
 80072ec:	addeadde 	.word	0xaddeadde
 80072f0:	addeadde 	.word	0xaddeadde
 80072f4:	addeadde 	.word	0xaddeadde
 80072f8:	addeadde 	.word	0xaddeadde
 80072fc:	addeadde 	.word	0xaddeadde
 8007300:	addeadde 	.word	0xaddeadde
 8007304:	addeadde 	.word	0xaddeadde
 8007308:	addeadde 	.word	0xaddeadde
 800730c:	addeadde 	.word	0xaddeadde
 8007310:	addeadde 	.word	0xaddeadde
 8007314:	addeadde 	.word	0xaddeadde
 8007318:	addeadde 	.word	0xaddeadde
 800731c:	addeadde 	.word	0xaddeadde
 8007320:	addeadde 	.word	0xaddeadde
 8007324:	addeadde 	.word	0xaddeadde
 8007328:	addeadde 	.word	0xaddeadde
 800732c:	addeadde 	.word	0xaddeadde
 8007330:	addeadde 	.word	0xaddeadde
 8007334:	addeadde 	.word	0xaddeadde
 8007338:	addeadde 	.word	0xaddeadde
 800733c:	addeadde 	.word	0xaddeadde
 8007340:	addeadde 	.word	0xaddeadde
 8007344:	addeadde 	.word	0xaddeadde
 8007348:	addeadde 	.word	0xaddeadde
 800734c:	addeadde 	.word	0xaddeadde
 8007350:	addeadde 	.word	0xaddeadde
 8007354:	addeadde 	.word	0xaddeadde
 8007358:	addeadde 	.word	0xaddeadde
 800735c:	addeadde 	.word	0xaddeadde
 8007360:	addeadde 	.word	0xaddeadde
 8007364:	addeadde 	.word	0xaddeadde
 8007368:	addeadde 	.word	0xaddeadde
 800736c:	addeadde 	.word	0xaddeadde
 8007370:	addeadde 	.word	0xaddeadde
 8007374:	addeadde 	.word	0xaddeadde
 8007378:	addeadde 	.word	0xaddeadde
 800737c:	addeadde 	.word	0xaddeadde
 8007380:	addeadde 	.word	0xaddeadde
 8007384:	addeadde 	.word	0xaddeadde
 8007388:	addeadde 	.word	0xaddeadde
 800738c:	addeadde 	.word	0xaddeadde
 8007390:	addeadde 	.word	0xaddeadde
 8007394:	addeadde 	.word	0xaddeadde
 8007398:	addeadde 	.word	0xaddeadde
 800739c:	addeadde 	.word	0xaddeadde
 80073a0:	addeadde 	.word	0xaddeadde
 80073a4:	addeadde 	.word	0xaddeadde
 80073a8:	addeadde 	.word	0xaddeadde
 80073ac:	addeadde 	.word	0xaddeadde
 80073b0:	addeadde 	.word	0xaddeadde
 80073b4:	addeadde 	.word	0xaddeadde
 80073b8:	addeadde 	.word	0xaddeadde
 80073bc:	addeadde 	.word	0xaddeadde
 80073c0:	addeadde 	.word	0xaddeadde
 80073c4:	addeadde 	.word	0xaddeadde
 80073c8:	addeadde 	.word	0xaddeadde
 80073cc:	addeadde 	.word	0xaddeadde
 80073d0:	addeadde 	.word	0xaddeadde
 80073d4:	addeadde 	.word	0xaddeadde
 80073d8:	addeadde 	.word	0xaddeadde
 80073dc:	addeadde 	.word	0xaddeadde
 80073e0:	addeadde 	.word	0xaddeadde
 80073e4:	addeadde 	.word	0xaddeadde
 80073e8:	addeadde 	.word	0xaddeadde
 80073ec:	addeadde 	.word	0xaddeadde
 80073f0:	addeadde 	.word	0xaddeadde
 80073f4:	addeadde 	.word	0xaddeadde
 80073f8:	addeadde 	.word	0xaddeadde
 80073fc:	addeadde 	.word	0xaddeadde
 8007400:	addeadde 	.word	0xaddeadde
 8007404:	addeadde 	.word	0xaddeadde
 8007408:	addeadde 	.word	0xaddeadde
 800740c:	addeadde 	.word	0xaddeadde
 8007410:	addeadde 	.word	0xaddeadde
 8007414:	addeadde 	.word	0xaddeadde
 8007418:	addeadde 	.word	0xaddeadde
 800741c:	addeadde 	.word	0xaddeadde
 8007420:	addeadde 	.word	0xaddeadde
 8007424:	addeadde 	.word	0xaddeadde
 8007428:	addeadde 	.word	0xaddeadde
 800742c:	addeadde 	.word	0xaddeadde
 8007430:	addeadde 	.word	0xaddeadde
 8007434:	addeadde 	.word	0xaddeadde
 8007438:	addeadde 	.word	0xaddeadde
 800743c:	addeadde 	.word	0xaddeadde
 8007440:	addeadde 	.word	0xaddeadde
 8007444:	addeadde 	.word	0xaddeadde
 8007448:	addeadde 	.word	0xaddeadde
 800744c:	addeadde 	.word	0xaddeadde
 8007450:	addeadde 	.word	0xaddeadde
 8007454:	addeadde 	.word	0xaddeadde
 8007458:	addeadde 	.word	0xaddeadde
 800745c:	addeadde 	.word	0xaddeadde
 8007460:	addeadde 	.word	0xaddeadde
 8007464:	addeadde 	.word	0xaddeadde
 8007468:	addeadde 	.word	0xaddeadde
 800746c:	addeadde 	.word	0xaddeadde
 8007470:	addeadde 	.word	0xaddeadde
 8007474:	addeadde 	.word	0xaddeadde
 8007478:	addeadde 	.word	0xaddeadde
 800747c:	addeadde 	.word	0xaddeadde
 8007480:	addeadde 	.word	0xaddeadde
 8007484:	addeadde 	.word	0xaddeadde
 8007488:	addeadde 	.word	0xaddeadde
 800748c:	addeadde 	.word	0xaddeadde
 8007490:	addeadde 	.word	0xaddeadde
 8007494:	addeadde 	.word	0xaddeadde
 8007498:	addeadde 	.word	0xaddeadde
 800749c:	addeadde 	.word	0xaddeadde
 80074a0:	addeadde 	.word	0xaddeadde
 80074a4:	addeadde 	.word	0xaddeadde
 80074a8:	addeadde 	.word	0xaddeadde
 80074ac:	addeadde 	.word	0xaddeadde
 80074b0:	addeadde 	.word	0xaddeadde
 80074b4:	addeadde 	.word	0xaddeadde
 80074b8:	addeadde 	.word	0xaddeadde
 80074bc:	addeadde 	.word	0xaddeadde
 80074c0:	addeadde 	.word	0xaddeadde
 80074c4:	addeadde 	.word	0xaddeadde
 80074c8:	addeadde 	.word	0xaddeadde
 80074cc:	addeadde 	.word	0xaddeadde
 80074d0:	addeadde 	.word	0xaddeadde
 80074d4:	addeadde 	.word	0xaddeadde
 80074d8:	addeadde 	.word	0xaddeadde
 80074dc:	addeadde 	.word	0xaddeadde
 80074e0:	addeadde 	.word	0xaddeadde
 80074e4:	addeadde 	.word	0xaddeadde
 80074e8:	addeadde 	.word	0xaddeadde
 80074ec:	addeadde 	.word	0xaddeadde
 80074f0:	addeadde 	.word	0xaddeadde
 80074f4:	addeadde 	.word	0xaddeadde
 80074f8:	addeadde 	.word	0xaddeadde
 80074fc:	addeadde 	.word	0xaddeadde
 8007500:	addeadde 	.word	0xaddeadde
 8007504:	addeadde 	.word	0xaddeadde
 8007508:	addeadde 	.word	0xaddeadde
 800750c:	addeadde 	.word	0xaddeadde
 8007510:	addeadde 	.word	0xaddeadde
 8007514:	addeadde 	.word	0xaddeadde
 8007518:	addeadde 	.word	0xaddeadde
 800751c:	addeadde 	.word	0xaddeadde
 8007520:	addeadde 	.word	0xaddeadde
 8007524:	addeadde 	.word	0xaddeadde
 8007528:	addeadde 	.word	0xaddeadde
 800752c:	addeadde 	.word	0xaddeadde
 8007530:	addeadde 	.word	0xaddeadde
 8007534:	addeadde 	.word	0xaddeadde
 8007538:	addeadde 	.word	0xaddeadde
 800753c:	addeadde 	.word	0xaddeadde
 8007540:	addeadde 	.word	0xaddeadde
 8007544:	addeadde 	.word	0xaddeadde
 8007548:	addeadde 	.word	0xaddeadde
 800754c:	addeadde 	.word	0xaddeadde
 8007550:	addeadde 	.word	0xaddeadde
 8007554:	addeadde 	.word	0xaddeadde
 8007558:	addeadde 	.word	0xaddeadde
 800755c:	addeadde 	.word	0xaddeadde
 8007560:	addeadde 	.word	0xaddeadde
 8007564:	addeadde 	.word	0xaddeadde
 8007568:	addeadde 	.word	0xaddeadde
 800756c:	addeadde 	.word	0xaddeadde
 8007570:	addeadde 	.word	0xaddeadde
 8007574:	addeadde 	.word	0xaddeadde
 8007578:	addeadde 	.word	0xaddeadde
 800757c:	addeadde 	.word	0xaddeadde
 8007580:	addeadde 	.word	0xaddeadde
 8007584:	addeadde 	.word	0xaddeadde
 8007588:	addeadde 	.word	0xaddeadde
 800758c:	addeadde 	.word	0xaddeadde
 8007590:	addeadde 	.word	0xaddeadde
 8007594:	addeadde 	.word	0xaddeadde
 8007598:	addeadde 	.word	0xaddeadde
 800759c:	addeadde 	.word	0xaddeadde
 80075a0:	addeadde 	.word	0xaddeadde
 80075a4:	addeadde 	.word	0xaddeadde
 80075a8:	addeadde 	.word	0xaddeadde
 80075ac:	addeadde 	.word	0xaddeadde
 80075b0:	addeadde 	.word	0xaddeadde
 80075b4:	addeadde 	.word	0xaddeadde
 80075b8:	addeadde 	.word	0xaddeadde
 80075bc:	addeadde 	.word	0xaddeadde
 80075c0:	addeadde 	.word	0xaddeadde
 80075c4:	addeadde 	.word	0xaddeadde
 80075c8:	addeadde 	.word	0xaddeadde
 80075cc:	addeadde 	.word	0xaddeadde
 80075d0:	addeadde 	.word	0xaddeadde
 80075d4:	addeadde 	.word	0xaddeadde
 80075d8:	addeadde 	.word	0xaddeadde
 80075dc:	addeadde 	.word	0xaddeadde
 80075e0:	addeadde 	.word	0xaddeadde
 80075e4:	addeadde 	.word	0xaddeadde
 80075e8:	addeadde 	.word	0xaddeadde
 80075ec:	addeadde 	.word	0xaddeadde
 80075f0:	addeadde 	.word	0xaddeadde
 80075f4:	addeadde 	.word	0xaddeadde
 80075f8:	addeadde 	.word	0xaddeadde
 80075fc:	addeadde 	.word	0xaddeadde
 8007600:	addeadde 	.word	0xaddeadde
 8007604:	addeadde 	.word	0xaddeadde
 8007608:	addeadde 	.word	0xaddeadde
 800760c:	addeadde 	.word	0xaddeadde
 8007610:	addeadde 	.word	0xaddeadde
 8007614:	addeadde 	.word	0xaddeadde
 8007618:	addeadde 	.word	0xaddeadde
 800761c:	addeadde 	.word	0xaddeadde
 8007620:	addeadde 	.word	0xaddeadde
 8007624:	addeadde 	.word	0xaddeadde
 8007628:	addeadde 	.word	0xaddeadde
 800762c:	addeadde 	.word	0xaddeadde
 8007630:	addeadde 	.word	0xaddeadde
 8007634:	addeadde 	.word	0xaddeadde
 8007638:	addeadde 	.word	0xaddeadde
 800763c:	addeadde 	.word	0xaddeadde
 8007640:	addeadde 	.word	0xaddeadde
 8007644:	addeadde 	.word	0xaddeadde
 8007648:	addeadde 	.word	0xaddeadde
 800764c:	addeadde 	.word	0xaddeadde
 8007650:	addeadde 	.word	0xaddeadde
 8007654:	addeadde 	.word	0xaddeadde
 8007658:	addeadde 	.word	0xaddeadde
 800765c:	addeadde 	.word	0xaddeadde
 8007660:	addeadde 	.word	0xaddeadde
 8007664:	addeadde 	.word	0xaddeadde
 8007668:	addeadde 	.word	0xaddeadde
 800766c:	addeadde 	.word	0xaddeadde
 8007670:	addeadde 	.word	0xaddeadde
 8007674:	addeadde 	.word	0xaddeadde
 8007678:	addeadde 	.word	0xaddeadde
 800767c:	addeadde 	.word	0xaddeadde
 8007680:	addeadde 	.word	0xaddeadde
 8007684:	addeadde 	.word	0xaddeadde
 8007688:	addeadde 	.word	0xaddeadde
 800768c:	addeadde 	.word	0xaddeadde
 8007690:	addeadde 	.word	0xaddeadde
 8007694:	addeadde 	.word	0xaddeadde
 8007698:	addeadde 	.word	0xaddeadde
 800769c:	addeadde 	.word	0xaddeadde
 80076a0:	addeadde 	.word	0xaddeadde
 80076a4:	addeadde 	.word	0xaddeadde
 80076a8:	addeadde 	.word	0xaddeadde
 80076ac:	addeadde 	.word	0xaddeadde
 80076b0:	addeadde 	.word	0xaddeadde
 80076b4:	addeadde 	.word	0xaddeadde
 80076b8:	addeadde 	.word	0xaddeadde
 80076bc:	addeadde 	.word	0xaddeadde
 80076c0:	addeadde 	.word	0xaddeadde
 80076c4:	addeadde 	.word	0xaddeadde
 80076c8:	addeadde 	.word	0xaddeadde
 80076cc:	addeadde 	.word	0xaddeadde
 80076d0:	addeadde 	.word	0xaddeadde
 80076d4:	addeadde 	.word	0xaddeadde
 80076d8:	addeadde 	.word	0xaddeadde
 80076dc:	addeadde 	.word	0xaddeadde
 80076e0:	addeadde 	.word	0xaddeadde
 80076e4:	addeadde 	.word	0xaddeadde
 80076e8:	addeadde 	.word	0xaddeadde
 80076ec:	addeadde 	.word	0xaddeadde
 80076f0:	addeadde 	.word	0xaddeadde
 80076f4:	addeadde 	.word	0xaddeadde
 80076f8:	addeadde 	.word	0xaddeadde
 80076fc:	addeadde 	.word	0xaddeadde
 8007700:	addeadde 	.word	0xaddeadde
 8007704:	addeadde 	.word	0xaddeadde
 8007708:	addeadde 	.word	0xaddeadde
 800770c:	addeadde 	.word	0xaddeadde
 8007710:	addeadde 	.word	0xaddeadde
 8007714:	addeadde 	.word	0xaddeadde
 8007718:	addeadde 	.word	0xaddeadde
 800771c:	addeadde 	.word	0xaddeadde
 8007720:	addeadde 	.word	0xaddeadde
 8007724:	addeadde 	.word	0xaddeadde
 8007728:	addeadde 	.word	0xaddeadde
 800772c:	addeadde 	.word	0xaddeadde
 8007730:	addeadde 	.word	0xaddeadde
 8007734:	addeadde 	.word	0xaddeadde
 8007738:	addeadde 	.word	0xaddeadde
 800773c:	addeadde 	.word	0xaddeadde
 8007740:	addeadde 	.word	0xaddeadde
 8007744:	addeadde 	.word	0xaddeadde
 8007748:	addeadde 	.word	0xaddeadde
 800774c:	addeadde 	.word	0xaddeadde
 8007750:	addeadde 	.word	0xaddeadde
 8007754:	addeadde 	.word	0xaddeadde
 8007758:	addeadde 	.word	0xaddeadde
 800775c:	addeadde 	.word	0xaddeadde
 8007760:	addeadde 	.word	0xaddeadde
 8007764:	addeadde 	.word	0xaddeadde
 8007768:	addeadde 	.word	0xaddeadde
 800776c:	addeadde 	.word	0xaddeadde
 8007770:	addeadde 	.word	0xaddeadde
 8007774:	addeadde 	.word	0xaddeadde
 8007778:	addeadde 	.word	0xaddeadde
 800777c:	addeadde 	.word	0xaddeadde
 8007780:	addeadde 	.word	0xaddeadde
 8007784:	addeadde 	.word	0xaddeadde
 8007788:	addeadde 	.word	0xaddeadde
 800778c:	addeadde 	.word	0xaddeadde
 8007790:	addeadde 	.word	0xaddeadde
 8007794:	addeadde 	.word	0xaddeadde
 8007798:	addeadde 	.word	0xaddeadde
 800779c:	addeadde 	.word	0xaddeadde
 80077a0:	addeadde 	.word	0xaddeadde
 80077a4:	addeadde 	.word	0xaddeadde
 80077a8:	addeadde 	.word	0xaddeadde
 80077ac:	addeadde 	.word	0xaddeadde
 80077b0:	addeadde 	.word	0xaddeadde
 80077b4:	addeadde 	.word	0xaddeadde
 80077b8:	addeadde 	.word	0xaddeadde
 80077bc:	addeadde 	.word	0xaddeadde
 80077c0:	addeadde 	.word	0xaddeadde
 80077c4:	addeadde 	.word	0xaddeadde
 80077c8:	addeadde 	.word	0xaddeadde
 80077cc:	addeadde 	.word	0xaddeadde
 80077d0:	addeadde 	.word	0xaddeadde
 80077d4:	addeadde 	.word	0xaddeadde
 80077d8:	addeadde 	.word	0xaddeadde
 80077dc:	addeadde 	.word	0xaddeadde
 80077e0:	addeadde 	.word	0xaddeadde
 80077e4:	addeadde 	.word	0xaddeadde
 80077e8:	addeadde 	.word	0xaddeadde
 80077ec:	addeadde 	.word	0xaddeadde
 80077f0:	addeadde 	.word	0xaddeadde
 80077f4:	addeadde 	.word	0xaddeadde
 80077f8:	addeadde 	.word	0xaddeadde
 80077fc:	addeadde 	.word	0xaddeadde
 8007800:	addeadde 	.word	0xaddeadde
 8007804:	addeadde 	.word	0xaddeadde
 8007808:	addeadde 	.word	0xaddeadde
 800780c:	addeadde 	.word	0xaddeadde
 8007810:	addeadde 	.word	0xaddeadde
 8007814:	addeadde 	.word	0xaddeadde
 8007818:	addeadde 	.word	0xaddeadde
 800781c:	addeadde 	.word	0xaddeadde
 8007820:	addeadde 	.word	0xaddeadde
 8007824:	addeadde 	.word	0xaddeadde
 8007828:	addeadde 	.word	0xaddeadde
 800782c:	addeadde 	.word	0xaddeadde
 8007830:	addeadde 	.word	0xaddeadde
 8007834:	addeadde 	.word	0xaddeadde
 8007838:	addeadde 	.word	0xaddeadde
 800783c:	addeadde 	.word	0xaddeadde
 8007840:	addeadde 	.word	0xaddeadde
 8007844:	addeadde 	.word	0xaddeadde
 8007848:	addeadde 	.word	0xaddeadde
 800784c:	addeadde 	.word	0xaddeadde
 8007850:	addeadde 	.word	0xaddeadde
 8007854:	addeadde 	.word	0xaddeadde
 8007858:	addeadde 	.word	0xaddeadde
 800785c:	addeadde 	.word	0xaddeadde
 8007860:	addeadde 	.word	0xaddeadde
 8007864:	addeadde 	.word	0xaddeadde
 8007868:	addeadde 	.word	0xaddeadde
 800786c:	addeadde 	.word	0xaddeadde
 8007870:	addeadde 	.word	0xaddeadde
 8007874:	addeadde 	.word	0xaddeadde
 8007878:	addeadde 	.word	0xaddeadde
 800787c:	addeadde 	.word	0xaddeadde
 8007880:	addeadde 	.word	0xaddeadde
 8007884:	addeadde 	.word	0xaddeadde
 8007888:	addeadde 	.word	0xaddeadde
 800788c:	addeadde 	.word	0xaddeadde
 8007890:	addeadde 	.word	0xaddeadde
 8007894:	addeadde 	.word	0xaddeadde
 8007898:	addeadde 	.word	0xaddeadde
 800789c:	addeadde 	.word	0xaddeadde
 80078a0:	addeadde 	.word	0xaddeadde
 80078a4:	addeadde 	.word	0xaddeadde
 80078a8:	addeadde 	.word	0xaddeadde
 80078ac:	addeadde 	.word	0xaddeadde
 80078b0:	addeadde 	.word	0xaddeadde
 80078b4:	addeadde 	.word	0xaddeadde
 80078b8:	addeadde 	.word	0xaddeadde
 80078bc:	addeadde 	.word	0xaddeadde
 80078c0:	addeadde 	.word	0xaddeadde
 80078c4:	addeadde 	.word	0xaddeadde
 80078c8:	addeadde 	.word	0xaddeadde
 80078cc:	addeadde 	.word	0xaddeadde
 80078d0:	addeadde 	.word	0xaddeadde
 80078d4:	addeadde 	.word	0xaddeadde
 80078d8:	addeadde 	.word	0xaddeadde
 80078dc:	addeadde 	.word	0xaddeadde
 80078e0:	addeadde 	.word	0xaddeadde
 80078e4:	addeadde 	.word	0xaddeadde
 80078e8:	addeadde 	.word	0xaddeadde
 80078ec:	addeadde 	.word	0xaddeadde
 80078f0:	addeadde 	.word	0xaddeadde
 80078f4:	addeadde 	.word	0xaddeadde
 80078f8:	addeadde 	.word	0xaddeadde
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008010:	f000 ff71 	bl	8008ef6 <xPortRaisePrivilege>
 8008014:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fa ffbf 	bl	8002fa8 <xTaskCreate>
 800802a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800802c:	6978      	ldr	r0, [r7, #20]
 800802e:	f002 f89b 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008032:	693b      	ldr	r3, [r7, #16]
    }
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	; 0x28
 8008040:	af04      	add	r7, sp, #16
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800804a:	f000 ff54 	bl	8008ef6 <xPortRaisePrivilege>
 800804e:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7fa ffe5 	bl	8003032 <xTaskCreateStatic>
 8008068:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f002 f87c 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008070:	693b      	ldr	r3, [r7, #16]
    }
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <MPU_xTaskCreateRestricted>:
    {
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008084:	f000 ff37 	bl	8008ef6 <xPortRaisePrivilege>
 8008088:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCreateRestricted( pxTaskDefinition, pxCreatedTask );
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fb f82d 	bl	80030ec <xTaskCreateRestricted>
 8008092:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f002 f867 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800809a:	68bb      	ldr	r3, [r7, #8]
    }
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <MPU_xTaskCreateRestrictedStatic>:
    {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080ae:	f000 ff22 	bl	8008ef6 <xPortRaisePrivilege>
 80080b2:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCreateRestrictedStatic( pxTaskDefinition, pxCreatedTask );
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fb f863 	bl	8003182 <xTaskCreateRestrictedStatic>
 80080bc:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f002 f852 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80080c4:	68bb      	ldr	r3, [r7, #8]
    }
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <MPU_vTaskAllocateMPURegions>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask,
                                  const MemoryRegion_t * const xRegions ) /* FREERTOS_SYSTEM_CALL */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080d8:	f000 ff0d 	bl	8008ef6 <xPortRaisePrivilege>
 80080dc:	60f8      	str	r0, [r7, #12]

    vTaskAllocateMPURegions( xTask, xRegions );
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fb f8a8 	bl	8003236 <vTaskAllocateMPURegions>
    vPortResetPrivilege( xRunningPrivileged );
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f002 f83e 	bl	800a168 <vPortResetPrivilege>
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <MPU_vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080fc:	f000 fefb 	bl	8008ef6 <xPortRaisePrivilege>
 8008100:	60f8      	str	r0, [r7, #12]

        vTaskDelete( pxTaskToDelete );
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fb f8b2 	bl	800326c <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f002 f82d 	bl	800a168 <vPortResetPrivilege>
    }
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
    	//*(uint32_t *)0xE0001004 = 0;
    	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800811e:	f000 feea 	bl	8008ef6 <xPortRaisePrivilege>
 8008122:	60f8      	str	r0, [r7, #12]

        vTaskDelay( xTicksToDelay );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fb f931 	bl	800338c <vTaskDelay>
        //*(uint32_t *)0xE0001004 = 0;
        vPortResetPrivilege( xRunningPrivileged );
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f002 f81c 	bl	800a168 <vPortResetPrivilege>
    }
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <MPU_xTaskDelayUntil>:
    {
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008142:	f000 fed8 	bl	8008ef6 <xPortRaisePrivilege>
 8008146:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fb f952 	bl	80033f4 <xTaskDelayUntil>
 8008150:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f002 f808 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008158:	68bb      	ldr	r3, [r7, #8]
    }
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <MPU_xTaskAbortDelay>:
    {
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800816a:	f000 fec4 	bl	8008ef6 <xPortRaisePrivilege>
 800816e:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskAbortDelay( xTask );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fb f9bd 	bl	80034f0 <xTaskAbortDelay>
 8008176:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f001 fff5 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800817e:	68bb      	ldr	r3, [r7, #8]
    }
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008190:	f000 feb1 	bl	8008ef6 <xPortRaisePrivilege>
 8008194:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskPriorityGet( pxTask );
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fb fa12 	bl	80035c0 <uxTaskPriorityGet>
 800819c:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f001 ffe2 	bl	800a168 <vPortResetPrivilege>
        return uxReturn;
 80081a4:	68bb      	ldr	r3, [r7, #8]
    }
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081b6:	f000 fe9e 	bl	8008ef6 <xPortRaisePrivilege>
 80081ba:	60f8      	str	r0, [r7, #12]
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fb fa45 	bl	800364c <eTaskGetState>
 80081c2:	4603      	mov	r3, r0
 80081c4:	72fb      	strb	r3, [r7, #11]
        vPortResetPrivilege( xRunningPrivileged );
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f001 ffce 	bl	800a168 <vPortResetPrivilege>
        return eReturn;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
    }
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <MPU_vTaskPrioritySet>:
    {
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081e0:	f000 fe89 	bl	8008ef6 <xPortRaisePrivilege>
 80081e4:	60f8      	str	r0, [r7, #12]
        vTaskPrioritySet( pxTask, uxNewPriority );
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fb faa9 	bl	8003740 <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f001 ffba 	bl	800a168 <vPortResetPrivilege>
    }
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008204:	f000 fe77 	bl	8008ef6 <xPortRaisePrivilege>
 8008208:	60f8      	str	r0, [r7, #12]

        vTaskSuspend( pxTaskToSuspend );
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fb fb42 	bl	8003894 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f001 ffa9 	bl	800a168 <vPortResetPrivilege>
    }
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008226:	f000 fe66 	bl	8008ef6 <xPortRaisePrivilege>
 800822a:	60f8      	str	r0, [r7, #12]

        vTaskResume( pxTaskToResume );
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fb fbd1 	bl	80039d4 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 ff98 	bl	800a168 <vPortResetPrivilege>
    }
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008246:	f000 fe56 	bl	8008ef6 <xPortRaisePrivilege>
 800824a:	6078      	str	r0, [r7, #4]

    vTaskSuspendAll();
 800824c:	f7fb fd1a 	bl	8003c84 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 ff89 	bl	800a168 <vPortResetPrivilege>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008264:	f000 fe47 	bl	8008ef6 <xPortRaisePrivilege>
 8008268:	6078      	str	r0, [r7, #4]

    xReturn = xTaskResumeAll();
 800826a:	f7fb fd19 	bl	8003ca0 <xTaskResumeAll>
 800826e:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 ff79 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008276:	683b      	ldr	r3, [r7, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008286:	f000 fe36 	bl	8008ef6 <xPortRaisePrivilege>
 800828a:	6078      	str	r0, [r7, #4]

    xReturn = xTaskGetTickCount();
 800828c:	f7fb fda4 	bl	8003dd8 <xTaskGetTickCount>
 8008290:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 ff68 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008298:	683b      	ldr	r3, [r7, #0]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082a8:	f000 fe25 	bl	8008ef6 <xPortRaisePrivilege>
 80082ac:	6078      	str	r0, [r7, #4]

    uxReturn = uxTaskGetNumberOfTasks();
 80082ae:	f7fb fdb3 	bl	8003e18 <uxTaskGetNumberOfTasks>
 80082b2:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 ff57 	bl	800a168 <vPortResetPrivilege>
    return uxReturn;
 80082ba:	683b      	ldr	r3, [r7, #0]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082cc:	f000 fe13 	bl	8008ef6 <xPortRaisePrivilege>
 80082d0:	60f8      	str	r0, [r7, #12]

    pcReturn = pcTaskGetName( xTaskToQuery );
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fb fdaa 	bl	8003e2c <pcTaskGetName>
 80082d8:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f001 ff44 	bl	800a168 <vPortResetPrivilege>
    return pcReturn;
 80082e0:	68bb      	ldr	r3, [r7, #8]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <MPU_xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )
    TaskHandle_t MPU_xTaskGetHandle( const char * pcNameToQuery ) /* FREERTOS_SYSTEM_CALL */
    {
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082f2:	f000 fe00 	bl	8008ef6 <xPortRaisePrivilege>
 80082f6:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGetHandle( pcNameToQuery );
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fb fdbb 	bl	8003e74 <xTaskGetHandle>
 80082fe:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 ff31 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008306:	68bb      	ldr	r3, [r7, #8]
    }
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008318:	f000 fded 	bl	8008ef6 <xPortRaisePrivilege>
 800831c:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fb fe0e 	bl	8003f40 <uxTaskGetStackHighWaterMark>
 8008324:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f001 ff1e 	bl	800a168 <vPortResetPrivilege>
        return uxReturn;
 800832c:	68bb      	ldr	r3, [r7, #8]
    }
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <MPU_vTaskSetApplicationTaskTag>:
    {
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008340:	f000 fdd9 	bl	8008ef6 <xPortRaisePrivilege>
 8008344:	60f8      	str	r0, [r7, #12]
        vTaskSetApplicationTaskTag( xTask, pxTagValue );
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fb fe15 	bl	8003f78 <vTaskSetApplicationTaskTag>
        vPortResetPrivilege( xRunningPrivileged );
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f001 ff0a 	bl	800a168 <vPortResetPrivilege>
    }
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <MPU_xTaskGetApplicationTaskTag>:
    {
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008364:	f000 fdc7 	bl	8008ef6 <xPortRaisePrivilege>
 8008368:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskGetApplicationTaskTag( xTask );
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fb fe20 	bl	8003fb0 <xTaskGetApplicationTaskTag>
 8008370:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 fef8 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008378:	68bb      	ldr	r3, [r7, #8]
    }
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <MPU_vTaskSetThreadLocalStoragePointer>:
    {
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800838e:	f000 fdb2 	bl	8008ef6 <xPortRaisePrivilege>
 8008392:	6178      	str	r0, [r7, #20]
        vTaskSetThreadLocalStoragePointer( xTaskToSet, xIndex, pvValue );
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7fb fe4f 	bl	800403c <vTaskSetThreadLocalStoragePointer>
        vPortResetPrivilege( xRunningPrivileged );
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f001 fee2 	bl	800a168 <vPortResetPrivilege>
    }
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <MPU_pvTaskGetThreadLocalStoragePointer>:
    {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083b6:	f000 fd9e 	bl	8008ef6 <xPortRaisePrivilege>
 80083ba:	60f8      	str	r0, [r7, #12]
        pvReturn = pvTaskGetThreadLocalStoragePointer( xTaskToQuery, xIndex );
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fb fe6a 	bl	8004098 <pvTaskGetThreadLocalStoragePointer>
 80083c4:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f001 fece 	bl	800a168 <vPortResetPrivilege>
        return pvReturn;
 80083cc:	68bb      	ldr	r3, [r7, #8]
    }
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <MPU_xTaskCallApplicationTaskHook>:
    {
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083e0:	f000 fd89 	bl	8008ef6 <xPortRaisePrivilege>
 80083e4:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCallApplicationTaskHook( xTask, pvParameter );
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7fb fe79 	bl	80040e0 <xTaskCallApplicationTaskHook>
 80083ee:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f001 feb9 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80083f6:	68bb      	ldr	r3, [r7, #8]
    }
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <MPU_xTaskGetIdleTaskHandle>:
    {
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008406:	f000 fd76 	bl	8008ef6 <xPortRaisePrivilege>
 800840a:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetIdleTaskHandle();
 800840c:	f7fb fe8a 	bl	8004124 <xTaskGetIdleTaskHandle>
 8008410:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fea8 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008418:	683b      	ldr	r3, [r7, #0]
    }
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <MPU_ulTaskGetIdleRunTimeCounter>:
    {
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008428:	f000 fd65 	bl	8008ef6 <xPortRaisePrivilege>
 800842c:	6078      	str	r0, [r7, #4]
        xReturn = ulTaskGetIdleRunTimeCounter();
 800842e:	f7fb fe95 	bl	800415c <ulTaskGetIdleRunTimeCounter>
 8008432:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fe97 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800843a:	683b      	ldr	r3, [r7, #0]
    }
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008452:	f000 fd50 	bl	8008ef6 <xPortRaisePrivilege>
 8008456:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7fb fe85 	bl	8004174 <xTaskGenericNotify>
 800846a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800846c:	6978      	ldr	r0, [r7, #20]
 800846e:	f001 fe7b 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008472:	693b      	ldr	r3, [r7, #16]
    }
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800848a:	f000 fd34 	bl	8008ef6 <xPortRaisePrivilege>
 800848e:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7fc f84c 	bl	8004538 <xTaskGenericNotifyWait>
 80084a0:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80084a2:	6978      	ldr	r0, [r7, #20]
 80084a4:	f001 fe60 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80084a8:	693b      	ldr	r3, [r7, #16]
    }
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084be:	f000 fd1a 	bl	8008ef6 <xPortRaisePrivilege>
 80084c2:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7fc f961 	bl	8004790 <ulTaskGenericNotifyTake>
 80084ce:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f001 fe49 	bl	800a168 <vPortResetPrivilege>
        return ulReturn;
 80084d6:	693b      	ldr	r3, [r7, #16]
    }
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084ea:	f000 fd04 	bl	8008ef6 <xPortRaisePrivilege>
 80084ee:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fc f9b4 	bl	8004860 <xTaskGenericNotifyStateClear>
 80084f8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f001 fe34 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008500:	68bb      	ldr	r3, [r7, #8]
    }
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008516:	f000 fcee 	bl	8008ef6 <xPortRaisePrivilege>
 800851a:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fc f9d7 	bl	80048d4 <ulTaskGenericNotifyValueClear>
 8008526:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008528:	6978      	ldr	r0, [r7, #20]
 800852a:	f001 fe1d 	bl	800a168 <vPortResetPrivilege>
        return ulReturn;
 800852e:	693b      	ldr	r3, [r7, #16]
    }
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <MPU_xTaskGetCurrentTaskHandle>:
    {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800853e:	f000 fcda 	bl	8008ef6 <xPortRaisePrivilege>
 8008542:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetCurrentTaskHandle();
 8008544:	f7fc fd74 	bl	8005030 <xTaskGetCurrentTaskHandle>
 8008548:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fe0c 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008550:	683b      	ldr	r3, [r7, #0]
    }
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <MPU_vTaskSetTimeOutState>:
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008562:	f000 fcc8 	bl	8008ef6 <xPortRaisePrivilege>
 8008566:	60f8      	str	r0, [r7, #12]
    vTaskSetTimeOutState( pxTimeOut );
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fc f9e1 	bl	8004930 <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 fdfa 	bl	800a168 <vPortResetPrivilege>
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <MPU_xTaskCheckForTimeOut>:
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008586:	f000 fcb6 	bl	8008ef6 <xPortRaisePrivilege>
 800858a:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fc f9f4 	bl	800497c <xTaskCheckForTimeOut>
 8008594:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f001 fde6 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 800859c:	68bb      	ldr	r3, [r7, #8]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <MPU_xTaskGetSchedulerState>:
    {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085ac:	f000 fca3 	bl	8008ef6 <xPortRaisePrivilege>
 80085b0:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetSchedulerState();
 80085b2:	f7fc fd57 	bl	8005064 <xTaskGetSchedulerState>
 80085b6:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 fdd5 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80085be:	683b      	ldr	r3, [r7, #0]
    }
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <MPU_xTaskCatchUpTicks>:
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d0:	f000 fc91 	bl	8008ef6 <xPortRaisePrivilege>
 80085d4:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fc fa46 	bl	8004a68 <xTaskCatchUpTicks>
 80085dc:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 fdc2 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 80085e4:	68bb      	ldr	r3, [r7, #8]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085fc:	f000 fc7b 	bl	8008ef6 <xPortRaisePrivilege>
 8008600:	6178      	str	r0, [r7, #20]

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7f8 f96d 	bl	80008e8 <xQueueGenericSend>
 800860e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f001 fda9 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008616:	693b      	ldr	r3, [r7, #16]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800862c:	f000 fc63 	bl	8008ef6 <xPortRaisePrivilege>
 8008630:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f8 fbbb 	bl	8000db2 <xQueueReceive>
 800863c:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f001 fd92 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008644:	693b      	ldr	r3, [r7, #16]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800865a:	f000 fc4c 	bl	8008ef6 <xPortRaisePrivilege>
 800865e:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7f8 fa59 	bl	8000b1c <xQueuePeek>
 800866a:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 800866c:	6978      	ldr	r0, [r7, #20]
 800866e:	f001 fd7b 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008672:	693b      	ldr	r3, [r7, #16]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008686:	f000 fc36 	bl	8008ef6 <xPortRaisePrivilege>
 800868a:	60f8      	str	r0, [r7, #12]
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f8 ffd1 	bl	8001636 <xQueueSemaphoreTake>
 8008694:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f001 fd66 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 800869c:	68bb      	ldr	r3, [r7, #8]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <MPU_uxQueueMessagesWaiting>:
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086ae:	f000 fc22 	bl	8008ef6 <xPortRaisePrivilege>
 80086b2:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7f8 fc5b 	bl	8000f70 <uxQueueMessagesWaiting>
 80086ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f001 fd53 	bl	800a168 <vPortResetPrivilege>
    return uxReturn;
 80086c2:	68bb      	ldr	r3, [r7, #8]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <MPU_uxQueueSpacesAvailable>:
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086d4:	f000 fc0f 	bl	8008ef6 <xPortRaisePrivilege>
 80086d8:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7f8 fc66 	bl	8000fac <uxQueueSpacesAvailable>
 80086e0:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 fd40 	bl	800a168 <vPortResetPrivilege>
    return uxReturn;
 80086e8:	68bb      	ldr	r3, [r7, #8]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086fa:	f000 fbfc 	bl	8008ef6 <xPortRaisePrivilege>
 80086fe:	60f8      	str	r0, [r7, #12]

    vQueueDelete( xQueue );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f8 fc76 	bl	8000ff2 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f001 fd2e 	bl	800a168 <vPortResetPrivilege>
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <MPU_xQueueCreateMutex>:
    {
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800871e:	f000 fbea 	bl	8008ef6 <xPortRaisePrivilege>
 8008722:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutex( ucQueueType );
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	4618      	mov	r0, r3
 8008728:	f7f8 fee8 	bl	80014fc <xQueueCreateMutex>
 800872c:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f001 fd1a 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008734:	68bb      	ldr	r3, [r7, #8]
    }
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <MPU_xQueueCreateMutexStatic>:
    {
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	4603      	mov	r3, r0
 8008746:	6039      	str	r1, [r7, #0]
 8008748:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800874a:	f000 fbd4 	bl	8008ef6 <xPortRaisePrivilege>
 800874e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f7f8 fee9 	bl	800152c <xQueueCreateMutexStatic>
 800875a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f001 fd03 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008762:	68bb      	ldr	r3, [r7, #8]
    }
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <MPU_xQueueCreateCountingSemaphore>:
    {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008776:	f000 fbbe 	bl	8008ef6 <xPortRaisePrivilege>
 800877a:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7f8 feef 	bl	8001562 <xQueueCreateCountingSemaphore>
 8008784:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 fcee 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800878c:	68bb      	ldr	r3, [r7, #8]
    }
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087a2:	f000 fba8 	bl	8008ef6 <xPortRaisePrivilege>
 80087a6:	6178      	str	r0, [r7, #20]
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7f8 ff0b 	bl	80015c8 <xQueueCreateCountingSemaphoreStatic>
 80087b2:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f001 fcd7 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80087ba:	693b      	ldr	r3, [r7, #16]
    }
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <MPU_xQueueGetMutexHolder>:
    {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087cc:	f000 fb93 	bl	8008ef6 <xPortRaisePrivilege>
 80087d0:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f9 f83a 	bl	800184c <xQueueGetMutexHolder>
 80087d8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f001 fcc4 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80087e0:	68bb      	ldr	r3, [r7, #8]
    }
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <MPU_xQueueTakeMutexRecursive>:
    {
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087f4:	f000 fb7f 	bl	8008ef6 <xPortRaisePrivilege>
 80087f8:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7f9 f860 	bl	80018c2 <xQueueTakeMutexRecursive>
 8008802:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f001 fcaf 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800880a:	68bb      	ldr	r3, [r7, #8]
    }
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <MPU_xQueueGiveMutexRecursive>:
    {
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800881c:	f000 fb6b 	bl	8008ef6 <xPortRaisePrivilege>
 8008820:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7f9 f883 	bl	800192e <xQueueGiveMutexRecursive>
 8008828:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 fc9c 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008830:	68bb      	ldr	r3, [r7, #8]
    }
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <MPU_vQueueAddToRegistry>:
    {
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008844:	f000 fb57 	bl	8008ef6 <xPortRaisePrivilege>
 8008848:	60f8      	str	r0, [r7, #12]
        vQueueAddToRegistry( xQueue, pcName );
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7f9 f8a2 	bl	8001996 <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 fc88 	bl	800a168 <vPortResetPrivilege>
    }
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <MPU_vQueueUnregisterQueue>:
    {
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008868:	f000 fb45 	bl	8008ef6 <xPortRaisePrivilege>
 800886c:	60f8      	str	r0, [r7, #12]
        vQueueUnregisterQueue( xQueue );
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7f9 f8ba 	bl	80019e8 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f001 fc77 	bl	800a168 <vPortResetPrivilege>
    }
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <MPU_pcQueueGetName>:
    {
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800888a:	f000 fb34 	bl	8008ef6 <xPortRaisePrivilege>
 800888e:	60f8      	str	r0, [r7, #12]
        pcReturn = pcQueueGetName( xQueue );
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7f9 f8d3 	bl	8001a3c <pcQueueGetName>
 8008896:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f001 fc65 	bl	800a168 <vPortResetPrivilege>
        return pcReturn;
 800889e:	68bb      	ldr	r3, [r7, #8]
    }
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <MPU_xQueueGenericCreate>:
    {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088b6:	f000 fb1e 	bl	8008ef6 <xPortRaisePrivilege>
 80088ba:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	461a      	mov	r2, r3
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7f9 f8e0 	bl	8001a88 <xQueueGenericCreate>
 80088c8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f001 fc4c 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80088d0:	693b      	ldr	r3, [r7, #16]
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <MPU_xQueueGenericCreateStatic>:
    {
 80088da:	b580      	push	{r7, lr}
 80088dc:	b088      	sub	sp, #32
 80088de:	af02      	add	r7, sp, #8
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088e8:	f000 fb05 	bl	8008ef6 <xPortRaisePrivilege>
 80088ec:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 80088ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7f9 f918 	bl	8001b30 <xQueueGenericCreateStatic>
 8008900:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	f001 fc30 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008908:	693b      	ldr	r3, [r7, #16]
    }
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <MPU_xQueueCreateSet>:
    {
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800891a:	f000 faec 	bl	8008ef6 <xPortRaisePrivilege>
 800891e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateSet( uxEventQueueLength );
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f9 f97d 	bl	8001c20 <xQueueCreateSet>
 8008926:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fc1d 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 800892e:	68bb      	ldr	r3, [r7, #8]
    }
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <MPU_xQueueAddToSet>:
    {
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008942:	f000 fad8 	bl	8008ef6 <xPortRaisePrivilege>
 8008946:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueAddToSet( xQueueOrSemaphore, xQueueSet );
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7f9 f977 	bl	8001c3e <xQueueAddToSet>
 8008950:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f001 fc08 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008958:	68bb      	ldr	r3, [r7, #8]
    }
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <MPU_xQueueRemoveFromSet>:
    {
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800896c:	f000 fac3 	bl	8008ef6 <xPortRaisePrivilege>
 8008970:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueRemoveFromSet( xQueueOrSemaphore, xQueueSet );
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7f9 f983 	bl	8001c80 <xQueueRemoveFromSet>
 800897a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f001 fbf3 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 8008982:	68bb      	ldr	r3, [r7, #8]
    }
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <MPU_xQueueSelectFromSet>:
    {
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008996:	f000 faae 	bl	8008ef6 <xPortRaisePrivilege>
 800899a:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueSelectFromSet( xQueueSet, xBlockTimeTicks );
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f9 f992 	bl	8001cc8 <xQueueSelectFromSet>
 80089a4:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f001 fbde 	bl	800a168 <vPortResetPrivilege>
        return xReturn;
 80089ac:	68bb      	ldr	r3, [r7, #8]
    }
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <MPU_xQueueGenericReset>:
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089c0:	f000 fa99 	bl	8008ef6 <xPortRaisePrivilege>
 80089c4:	60f8      	str	r0, [r7, #12]
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7f9 f9d6 	bl	8001d7a <xQueueGenericReset>
 80089ce:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f001 fbc9 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 80089d6:	68bb      	ldr	r3, [r7, #8]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ee:	f000 fa82 	bl	8008ef6 <xPortRaisePrivilege>
 80089f2:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7fd f814 	bl	8005a2c <xTimerCreate>
 8008a04:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f001 fbae 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008a0c:	693b      	ldr	r3, [r7, #16]
    }
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af02      	add	r7, sp, #8
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a24:	f000 fa67 	bl	8008ef6 <xPortRaisePrivilege>
 8008a28:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7fd f818 	bl	8005a6e <xTimerCreateStatic>
 8008a3e:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f001 fb91 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008a46:	693b      	ldr	r3, [r7, #16]
    }
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a58:	f000 fa4d 	bl	8008ef6 <xPortRaisePrivilege>
 8008a5c:	60f8      	str	r0, [r7, #12]

        pvReturn = pvTimerGetTimerID( xTimer );
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fd f843 	bl	8005aea <pvTimerGetTimerID>
 8008a64:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f001 fb7e 	bl	800a168 <vPortResetPrivilege>

        return pvReturn;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
    }
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a80:	f000 fa39 	bl	8008ef6 <xPortRaisePrivilege>
 8008a84:	60f8      	str	r0, [r7, #12]

        vTimerSetTimerID( xTimer, pvNewID );
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fd f84e 	bl	8005b2a <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 fb6a 	bl	800a168 <vPortResetPrivilege>
    }
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008aa4:	f000 fa27 	bl	8008ef6 <xPortRaisePrivilege>
 8008aa8:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerIsTimerActive( xTimer );
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fd f85d 	bl	8005b6a <xTimerIsTimerActive>
 8008ab0:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f001 fb58 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
    }
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ac8:	f000 fa15 	bl	8008ef6 <xPortRaisePrivilege>
 8008acc:	6078      	str	r0, [r7, #4]

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008ace:	f7fd f875 	bl	8005bbc <xTimerGetTimerDaemonTaskHandle>
 8008ad2:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fb47 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008ada:	683b      	ldr	r3, [r7, #0]
    }
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008aec:	f000 fa03 	bl	8008ef6 <xPortRaisePrivilege>
 8008af0:	60f8      	str	r0, [r7, #12]

        pcReturn = pcTimerGetName( xTimer );
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fd f87e 	bl	8005bf4 <pcTimerGetName>
 8008af8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f001 fb34 	bl	800a168 <vPortResetPrivilege>

        return pcReturn;
 8008b00:	68bb      	ldr	r3, [r7, #8]
    }
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <MPU_vTimerSetReloadMode>:
    {
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b14:	f000 f9ef 	bl	8008ef6 <xPortRaisePrivilege>
 8008b18:	60f8      	str	r0, [r7, #12]
        vTimerSetReloadMode( xTimer, uxAutoReload );
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fd f884 	bl	8005c2a <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f001 fb20 	bl	800a168 <vPortResetPrivilege>
    }
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <MPU_uxTimerGetReloadMode>:
    {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b38:	f000 f9dd 	bl	8008ef6 <xPortRaisePrivilege>
 8008b3c:	60f8      	str	r0, [r7, #12]
        uxReturn = uxTimerGetReloadMode( xTimer );
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fd f8a6 	bl	8005c90 <uxTimerGetReloadMode>
 8008b44:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f001 fb0e 	bl	800a168 <vPortResetPrivilege>
        return uxReturn;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
    }
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b5e:	f000 f9ca 	bl	8008ef6 <xPortRaisePrivilege>
 8008b62:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetPeriod( xTimer );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fd f8bc 	bl	8005ce2 <xTimerGetPeriod>
 8008b6a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fafb 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008b72:	68bb      	ldr	r3, [r7, #8]
    }
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b84:	f000 f9b7 	bl	8008ef6 <xPortRaisePrivilege>
 8008b88:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetExpiryTime( xTimer );
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fd f8c4 	bl	8005d18 <xTimerGetExpiryTime>
 8008b90:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f001 fae8 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008b98:	68bb      	ldr	r3, [r7, #8]
    }
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b088      	sub	sp, #32
 8008ba6:	af02      	add	r7, sp, #8
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bb0:	f000 f9a1 	bl	8008ef6 <xPortRaisePrivilege>
 8008bb4:	6178      	str	r0, [r7, #20]

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fd f911 	bl	8005de8 <xTimerGenericCommand>
 8008bc6:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f001 facd 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008bce:	693b      	ldr	r3, [r7, #16]
    }
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bde:	f000 f98a 	bl	8008ef6 <xPortRaisePrivilege>
 8008be2:	6078      	str	r0, [r7, #4]

        xReturn = xEventGroupCreate();
 8008be4:	f7f7 faaa 	bl	800013c <xEventGroupCreate>
 8008be8:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fabc 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008bf0:	683b      	ldr	r3, [r7, #0]
    }
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c02:	f000 f978 	bl	8008ef6 <xPortRaisePrivilege>
 8008c06:	60f8      	str	r0, [r7, #12]

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7f7 fab1 	bl	8000170 <xEventGroupCreateStatic>
 8008c0e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f001 faa9 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008c16:	68bb      	ldr	r3, [r7, #8]
    }
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c2e:	f000 f962 	bl	8008ef6 <xPortRaisePrivilege>
 8008c32:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7f7 facd 	bl	80001de <xEventGroupWaitBits>
 8008c44:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f001 fa8e 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008c4c:	693b      	ldr	r3, [r7, #16]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c60:	f000 f949 	bl	8008ef6 <xPortRaisePrivilege>
 8008c64:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f7 fb87 	bl	800037c <xEventGroupClearBits>
 8008c6e:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f001 fa79 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008c76:	68bb      	ldr	r3, [r7, #8]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c8a:	f000 f934 	bl	8008ef6 <xPortRaisePrivilege>
 8008c8e:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f7 fbaa 	bl	80003ec <xEventGroupSetBits>
 8008c98:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 fa64 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cb8:	f000 f91d 	bl	8008ef6 <xPortRaisePrivilege>
 8008cbc:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7f7 fc1c 	bl	8000502 <xEventGroupSync>
 8008cca:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008ccc:	6978      	ldr	r0, [r7, #20]
 8008cce:	f001 fa4b 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008cd2:	693b      	ldr	r3, [r7, #16]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ce4:	f000 f907 	bl	8008ef6 <xPortRaisePrivilege>
 8008ce8:	60f8      	str	r0, [r7, #12]

    vEventGroupDelete( xEventGroup );
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f7 fcdb 	bl	80006a6 <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f001 fa39 	bl	800a168 <vPortResetPrivilege>
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d0c:	f000 f8f3 	bl	8008ef6 <xPortRaisePrivilege>
 8008d10:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7f9 fa6f 	bl	80021fc <xStreamBufferSend>
 8008d1e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008d20:	6978      	ldr	r0, [r7, #20]
 8008d22:	f001 fa21 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008d26:	693b      	ldr	r3, [r7, #16]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d3e:	f000 f8da 	bl	8008ef6 <xPortRaisePrivilege>
 8008d42:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7f9 fb94 	bl	8002478 <xStreamBufferReceive>
 8008d50:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f001 fa08 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008d58:	693b      	ldr	r3, [r7, #16]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d6a:	f000 f8c4 	bl	8008ef6 <xPortRaisePrivilege>
 8008d6e:	60f8      	str	r0, [r7, #12]
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7f9 ff22 	bl	8002bba <xStreamBufferNextMessageLengthBytes>
 8008d76:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f001 f9f5 	bl	800a168 <vPortResetPrivilege>
    return xReturn;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d90:	f000 f8b1 	bl	8008ef6 <xPortRaisePrivilege>
 8008d94:	60f8      	str	r0, [r7, #12]

    vStreamBufferDelete( xStreamBuffer );
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f9 fc79 	bl	800268e <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f001 f9e3 	bl	800a168 <vPortResetPrivilege>
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008db2:	f000 f8a0 	bl	8008ef6 <xPortRaisePrivilege>
 8008db6:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7f9 fc8f 	bl	80026dc <xStreamBufferIsFull>
 8008dbe:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f001 f9d1 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dd8:	f000 f88d 	bl	8008ef6 <xPortRaisePrivilege>
 8008ddc:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f9 fcac 	bl	800273c <xStreamBufferIsEmpty>
 8008de4:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f001 f9be 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008dec:	68bb      	ldr	r3, [r7, #8]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dfe:	f000 f87a 	bl	8008ef6 <xPortRaisePrivilege>
 8008e02:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7f9 fcc0 	bl	800278a <xStreamBufferReset>
 8008e0a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f001 f9ab 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008e12:	68bb      	ldr	r3, [r7, #8]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e24:	f000 f867 	bl	8008ef6 <xPortRaisePrivilege>
 8008e28:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7f9 fce3 	bl	80027f6 <xStreamBufferSpacesAvailable>
 8008e30:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f001 f998 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008e38:	68bb      	ldr	r3, [r7, #8]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e4a:	f000 f854 	bl	8008ef6 <xPortRaisePrivilege>
 8008e4e:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7f9 fd02 	bl	800285a <xStreamBufferBytesAvailable>
 8008e56:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f001 f985 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e72:	f000 f840 	bl	8008ef6 <xPortRaisePrivilege>
 8008e76:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7f9 fd0a 	bl	8002894 <xStreamBufferSetTriggerLevel>
 8008e80:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 f970 	bl	800a168 <vPortResetPrivilege>

    return xReturn;
 8008e88:	68bb      	ldr	r3, [r7, #8]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e9e:	f000 f82a 	bl	8008ef6 <xPortRaisePrivilege>
 8008ea2:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7f9 fdaa 	bl	8002a02 <xStreamBufferGenericCreate>
 8008eae:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008eb0:	6978      	ldr	r0, [r7, #20]
 8008eb2:	f001 f959 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008eb6:	693b      	ldr	r3, [r7, #16]
    }
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ece:	f000 f812 	bl	8008ef6 <xPortRaisePrivilege>
 8008ed2:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7f9 fdea 	bl	8002ab8 <xStreamBufferGenericCreateStatic>
 8008ee4:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f001 f93e 	bl	800a168 <vPortResetPrivilege>

        return xReturn;
 8008eec:	693b      	ldr	r3, [r7, #16]
    }
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <xPortRaisePrivilege>:
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008efc:	f001 f9d8 	bl	800a2b0 <xIsPrivileged>
 8008f00:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d100      	bne.n	8008f0a <xPortRaisePrivilege+0x14>
        portRAISE_PRIVILEGE();
 8008f08:	df02      	svc	2
    return xRunningPrivileged;
 8008f0a:	687b      	ldr	r3, [r7, #4]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <__do_global_dtors_aux>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	4c05      	ldr	r4, [pc, #20]	; (8008f2c <__do_global_dtors_aux+0x18>)
 8008f18:	7823      	ldrb	r3, [r4, #0]
 8008f1a:	b933      	cbnz	r3, 8008f2a <__do_global_dtors_aux+0x16>
 8008f1c:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <__do_global_dtors_aux+0x1c>)
 8008f1e:	b113      	cbz	r3, 8008f26 <__do_global_dtors_aux+0x12>
 8008f20:	4804      	ldr	r0, [pc, #16]	; (8008f34 <__do_global_dtors_aux+0x20>)
 8008f22:	f3af 8000 	nop.w
 8008f26:	2301      	movs	r3, #1
 8008f28:	7023      	strb	r3, [r4, #0]
 8008f2a:	bd10      	pop	{r4, pc}
 8008f2c:	20008400 	.word	0x20008400
 8008f30:	00000000 	.word	0x00000000
 8008f34:	080103f4 	.word	0x080103f4

08008f38 <frame_dummy>:
 8008f38:	b508      	push	{r3, lr}
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <frame_dummy+0x10>)
 8008f3c:	b11b      	cbz	r3, 8008f46 <frame_dummy+0xe>
 8008f3e:	4903      	ldr	r1, [pc, #12]	; (8008f4c <frame_dummy+0x14>)
 8008f40:	4803      	ldr	r0, [pc, #12]	; (8008f50 <frame_dummy+0x18>)
 8008f42:	f3af 8000 	nop.w
 8008f46:	bd08      	pop	{r3, pc}
 8008f48:	00000000 	.word	0x00000000
 8008f4c:	20008404 	.word	0x20008404
 8008f50:	080103f4 	.word	0x080103f4

08008f54 <strlen>:
 8008f54:	4603      	mov	r3, r0
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1fb      	bne.n	8008f56 <strlen+0x2>
 8008f5e:	1a18      	subs	r0, r3, r0
 8008f60:	3801      	subs	r0, #1
 8008f62:	4770      	bx	lr

08008f64 <__aeabi_drsub>:
 8008f64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008f68:	e002      	b.n	8008f70 <__adddf3>
 8008f6a:	bf00      	nop

08008f6c <__aeabi_dsub>:
 8008f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008f70 <__adddf3>:
 8008f70:	b530      	push	{r4, r5, lr}
 8008f72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008f76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008f7a:	ea94 0f05 	teq	r4, r5
 8008f7e:	bf08      	it	eq
 8008f80:	ea90 0f02 	teqeq	r0, r2
 8008f84:	bf1f      	itttt	ne
 8008f86:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008f8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008f8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008f92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008f96:	f000 80e2 	beq.w	800915e <__adddf3+0x1ee>
 8008f9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008f9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008fa2:	bfb8      	it	lt
 8008fa4:	426d      	neglt	r5, r5
 8008fa6:	dd0c      	ble.n	8008fc2 <__adddf3+0x52>
 8008fa8:	442c      	add	r4, r5
 8008faa:	ea80 0202 	eor.w	r2, r0, r2
 8008fae:	ea81 0303 	eor.w	r3, r1, r3
 8008fb2:	ea82 0000 	eor.w	r0, r2, r0
 8008fb6:	ea83 0101 	eor.w	r1, r3, r1
 8008fba:	ea80 0202 	eor.w	r2, r0, r2
 8008fbe:	ea81 0303 	eor.w	r3, r1, r3
 8008fc2:	2d36      	cmp	r5, #54	; 0x36
 8008fc4:	bf88      	it	hi
 8008fc6:	bd30      	pophi	{r4, r5, pc}
 8008fc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008fd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008fd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008fd8:	d002      	beq.n	8008fe0 <__adddf3+0x70>
 8008fda:	4240      	negs	r0, r0
 8008fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008fe0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008fe8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008fec:	d002      	beq.n	8008ff4 <__adddf3+0x84>
 8008fee:	4252      	negs	r2, r2
 8008ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008ff4:	ea94 0f05 	teq	r4, r5
 8008ff8:	f000 80a7 	beq.w	800914a <__adddf3+0x1da>
 8008ffc:	f1a4 0401 	sub.w	r4, r4, #1
 8009000:	f1d5 0e20 	rsbs	lr, r5, #32
 8009004:	db0d      	blt.n	8009022 <__adddf3+0xb2>
 8009006:	fa02 fc0e 	lsl.w	ip, r2, lr
 800900a:	fa22 f205 	lsr.w	r2, r2, r5
 800900e:	1880      	adds	r0, r0, r2
 8009010:	f141 0100 	adc.w	r1, r1, #0
 8009014:	fa03 f20e 	lsl.w	r2, r3, lr
 8009018:	1880      	adds	r0, r0, r2
 800901a:	fa43 f305 	asr.w	r3, r3, r5
 800901e:	4159      	adcs	r1, r3
 8009020:	e00e      	b.n	8009040 <__adddf3+0xd0>
 8009022:	f1a5 0520 	sub.w	r5, r5, #32
 8009026:	f10e 0e20 	add.w	lr, lr, #32
 800902a:	2a01      	cmp	r2, #1
 800902c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009030:	bf28      	it	cs
 8009032:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009036:	fa43 f305 	asr.w	r3, r3, r5
 800903a:	18c0      	adds	r0, r0, r3
 800903c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009044:	d507      	bpl.n	8009056 <__adddf3+0xe6>
 8009046:	f04f 0e00 	mov.w	lr, #0
 800904a:	f1dc 0c00 	rsbs	ip, ip, #0
 800904e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8009052:	eb6e 0101 	sbc.w	r1, lr, r1
 8009056:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800905a:	d31b      	bcc.n	8009094 <__adddf3+0x124>
 800905c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8009060:	d30c      	bcc.n	800907c <__adddf3+0x10c>
 8009062:	0849      	lsrs	r1, r1, #1
 8009064:	ea5f 0030 	movs.w	r0, r0, rrx
 8009068:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800906c:	f104 0401 	add.w	r4, r4, #1
 8009070:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009074:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8009078:	f080 809a 	bcs.w	80091b0 <__adddf3+0x240>
 800907c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009080:	bf08      	it	eq
 8009082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009086:	f150 0000 	adcs.w	r0, r0, #0
 800908a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800908e:	ea41 0105 	orr.w	r1, r1, r5
 8009092:	bd30      	pop	{r4, r5, pc}
 8009094:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8009098:	4140      	adcs	r0, r0
 800909a:	eb41 0101 	adc.w	r1, r1, r1
 800909e:	3c01      	subs	r4, #1
 80090a0:	bf28      	it	cs
 80090a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80090a6:	d2e9      	bcs.n	800907c <__adddf3+0x10c>
 80090a8:	f091 0f00 	teq	r1, #0
 80090ac:	bf04      	itt	eq
 80090ae:	4601      	moveq	r1, r0
 80090b0:	2000      	moveq	r0, #0
 80090b2:	fab1 f381 	clz	r3, r1
 80090b6:	bf08      	it	eq
 80090b8:	3320      	addeq	r3, #32
 80090ba:	f1a3 030b 	sub.w	r3, r3, #11
 80090be:	f1b3 0220 	subs.w	r2, r3, #32
 80090c2:	da0c      	bge.n	80090de <__adddf3+0x16e>
 80090c4:	320c      	adds	r2, #12
 80090c6:	dd08      	ble.n	80090da <__adddf3+0x16a>
 80090c8:	f102 0c14 	add.w	ip, r2, #20
 80090cc:	f1c2 020c 	rsb	r2, r2, #12
 80090d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80090d4:	fa21 f102 	lsr.w	r1, r1, r2
 80090d8:	e00c      	b.n	80090f4 <__adddf3+0x184>
 80090da:	f102 0214 	add.w	r2, r2, #20
 80090de:	bfd8      	it	le
 80090e0:	f1c2 0c20 	rsble	ip, r2, #32
 80090e4:	fa01 f102 	lsl.w	r1, r1, r2
 80090e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80090ec:	bfdc      	itt	le
 80090ee:	ea41 010c 	orrle.w	r1, r1, ip
 80090f2:	4090      	lslle	r0, r2
 80090f4:	1ae4      	subs	r4, r4, r3
 80090f6:	bfa2      	ittt	ge
 80090f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80090fc:	4329      	orrge	r1, r5
 80090fe:	bd30      	popge	{r4, r5, pc}
 8009100:	ea6f 0404 	mvn.w	r4, r4
 8009104:	3c1f      	subs	r4, #31
 8009106:	da1c      	bge.n	8009142 <__adddf3+0x1d2>
 8009108:	340c      	adds	r4, #12
 800910a:	dc0e      	bgt.n	800912a <__adddf3+0x1ba>
 800910c:	f104 0414 	add.w	r4, r4, #20
 8009110:	f1c4 0220 	rsb	r2, r4, #32
 8009114:	fa20 f004 	lsr.w	r0, r0, r4
 8009118:	fa01 f302 	lsl.w	r3, r1, r2
 800911c:	ea40 0003 	orr.w	r0, r0, r3
 8009120:	fa21 f304 	lsr.w	r3, r1, r4
 8009124:	ea45 0103 	orr.w	r1, r5, r3
 8009128:	bd30      	pop	{r4, r5, pc}
 800912a:	f1c4 040c 	rsb	r4, r4, #12
 800912e:	f1c4 0220 	rsb	r2, r4, #32
 8009132:	fa20 f002 	lsr.w	r0, r0, r2
 8009136:	fa01 f304 	lsl.w	r3, r1, r4
 800913a:	ea40 0003 	orr.w	r0, r0, r3
 800913e:	4629      	mov	r1, r5
 8009140:	bd30      	pop	{r4, r5, pc}
 8009142:	fa21 f004 	lsr.w	r0, r1, r4
 8009146:	4629      	mov	r1, r5
 8009148:	bd30      	pop	{r4, r5, pc}
 800914a:	f094 0f00 	teq	r4, #0
 800914e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8009152:	bf06      	itte	eq
 8009154:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8009158:	3401      	addeq	r4, #1
 800915a:	3d01      	subne	r5, #1
 800915c:	e74e      	b.n	8008ffc <__adddf3+0x8c>
 800915e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009162:	bf18      	it	ne
 8009164:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009168:	d029      	beq.n	80091be <__adddf3+0x24e>
 800916a:	ea94 0f05 	teq	r4, r5
 800916e:	bf08      	it	eq
 8009170:	ea90 0f02 	teqeq	r0, r2
 8009174:	d005      	beq.n	8009182 <__adddf3+0x212>
 8009176:	ea54 0c00 	orrs.w	ip, r4, r0
 800917a:	bf04      	itt	eq
 800917c:	4619      	moveq	r1, r3
 800917e:	4610      	moveq	r0, r2
 8009180:	bd30      	pop	{r4, r5, pc}
 8009182:	ea91 0f03 	teq	r1, r3
 8009186:	bf1e      	ittt	ne
 8009188:	2100      	movne	r1, #0
 800918a:	2000      	movne	r0, #0
 800918c:	bd30      	popne	{r4, r5, pc}
 800918e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8009192:	d105      	bne.n	80091a0 <__adddf3+0x230>
 8009194:	0040      	lsls	r0, r0, #1
 8009196:	4149      	adcs	r1, r1
 8009198:	bf28      	it	cs
 800919a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800919e:	bd30      	pop	{r4, r5, pc}
 80091a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80091a4:	bf3c      	itt	cc
 80091a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80091aa:	bd30      	popcc	{r4, r5, pc}
 80091ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80091b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80091b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091b8:	f04f 0000 	mov.w	r0, #0
 80091bc:	bd30      	pop	{r4, r5, pc}
 80091be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80091c2:	bf1a      	itte	ne
 80091c4:	4619      	movne	r1, r3
 80091c6:	4610      	movne	r0, r2
 80091c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80091cc:	bf1c      	itt	ne
 80091ce:	460b      	movne	r3, r1
 80091d0:	4602      	movne	r2, r0
 80091d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80091d6:	bf06      	itte	eq
 80091d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80091dc:	ea91 0f03 	teqeq	r1, r3
 80091e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80091e4:	bd30      	pop	{r4, r5, pc}
 80091e6:	bf00      	nop

080091e8 <__aeabi_ui2d>:
 80091e8:	f090 0f00 	teq	r0, #0
 80091ec:	bf04      	itt	eq
 80091ee:	2100      	moveq	r1, #0
 80091f0:	4770      	bxeq	lr
 80091f2:	b530      	push	{r4, r5, lr}
 80091f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80091f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80091fc:	f04f 0500 	mov.w	r5, #0
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	e750      	b.n	80090a8 <__adddf3+0x138>
 8009206:	bf00      	nop

08009208 <__aeabi_i2d>:
 8009208:	f090 0f00 	teq	r0, #0
 800920c:	bf04      	itt	eq
 800920e:	2100      	moveq	r1, #0
 8009210:	4770      	bxeq	lr
 8009212:	b530      	push	{r4, r5, lr}
 8009214:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009218:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800921c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8009220:	bf48      	it	mi
 8009222:	4240      	negmi	r0, r0
 8009224:	f04f 0100 	mov.w	r1, #0
 8009228:	e73e      	b.n	80090a8 <__adddf3+0x138>
 800922a:	bf00      	nop

0800922c <__aeabi_f2d>:
 800922c:	0042      	lsls	r2, r0, #1
 800922e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009232:	ea4f 0131 	mov.w	r1, r1, rrx
 8009236:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800923a:	bf1f      	itttt	ne
 800923c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8009240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009244:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009248:	4770      	bxne	lr
 800924a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800924e:	bf08      	it	eq
 8009250:	4770      	bxeq	lr
 8009252:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8009256:	bf04      	itt	eq
 8009258:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800925c:	4770      	bxeq	lr
 800925e:	b530      	push	{r4, r5, lr}
 8009260:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800926c:	e71c      	b.n	80090a8 <__adddf3+0x138>
 800926e:	bf00      	nop

08009270 <__aeabi_ul2d>:
 8009270:	ea50 0201 	orrs.w	r2, r0, r1
 8009274:	bf08      	it	eq
 8009276:	4770      	bxeq	lr
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	f04f 0500 	mov.w	r5, #0
 800927e:	e00a      	b.n	8009296 <__aeabi_l2d+0x16>

08009280 <__aeabi_l2d>:
 8009280:	ea50 0201 	orrs.w	r2, r0, r1
 8009284:	bf08      	it	eq
 8009286:	4770      	bxeq	lr
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800928e:	d502      	bpl.n	8009296 <__aeabi_l2d+0x16>
 8009290:	4240      	negs	r0, r0
 8009292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009296:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800929a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800929e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80092a2:	f43f aed8 	beq.w	8009056 <__adddf3+0xe6>
 80092a6:	f04f 0203 	mov.w	r2, #3
 80092aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092ae:	bf18      	it	ne
 80092b0:	3203      	addne	r2, #3
 80092b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092b6:	bf18      	it	ne
 80092b8:	3203      	addne	r2, #3
 80092ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80092be:	f1c2 0320 	rsb	r3, r2, #32
 80092c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80092c6:	fa20 f002 	lsr.w	r0, r0, r2
 80092ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80092ce:	ea40 000e 	orr.w	r0, r0, lr
 80092d2:	fa21 f102 	lsr.w	r1, r1, r2
 80092d6:	4414      	add	r4, r2
 80092d8:	e6bd      	b.n	8009056 <__adddf3+0xe6>
 80092da:	bf00      	nop

080092dc <__aeabi_dmul>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80092e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80092e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80092ea:	bf1d      	ittte	ne
 80092ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80092f0:	ea94 0f0c 	teqne	r4, ip
 80092f4:	ea95 0f0c 	teqne	r5, ip
 80092f8:	f000 f8de 	bleq	80094b8 <__aeabi_dmul+0x1dc>
 80092fc:	442c      	add	r4, r5
 80092fe:	ea81 0603 	eor.w	r6, r1, r3
 8009302:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8009306:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800930a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800930e:	bf18      	it	ne
 8009310:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8009314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800931c:	d038      	beq.n	8009390 <__aeabi_dmul+0xb4>
 800931e:	fba0 ce02 	umull	ip, lr, r0, r2
 8009322:	f04f 0500 	mov.w	r5, #0
 8009326:	fbe1 e502 	umlal	lr, r5, r1, r2
 800932a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800932e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8009332:	f04f 0600 	mov.w	r6, #0
 8009336:	fbe1 5603 	umlal	r5, r6, r1, r3
 800933a:	f09c 0f00 	teq	ip, #0
 800933e:	bf18      	it	ne
 8009340:	f04e 0e01 	orrne.w	lr, lr, #1
 8009344:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8009348:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800934c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8009350:	d204      	bcs.n	800935c <__aeabi_dmul+0x80>
 8009352:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8009356:	416d      	adcs	r5, r5
 8009358:	eb46 0606 	adc.w	r6, r6, r6
 800935c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8009360:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009364:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009368:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800936c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009370:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009374:	bf88      	it	hi
 8009376:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800937a:	d81e      	bhi.n	80093ba <__aeabi_dmul+0xde>
 800937c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009380:	bf08      	it	eq
 8009382:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009386:	f150 0000 	adcs.w	r0, r0, #0
 800938a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009394:	ea46 0101 	orr.w	r1, r6, r1
 8009398:	ea40 0002 	orr.w	r0, r0, r2
 800939c:	ea81 0103 	eor.w	r1, r1, r3
 80093a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80093a4:	bfc2      	ittt	gt
 80093a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80093aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80093ae:	bd70      	popgt	{r4, r5, r6, pc}
 80093b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80093b4:	f04f 0e00 	mov.w	lr, #0
 80093b8:	3c01      	subs	r4, #1
 80093ba:	f300 80ab 	bgt.w	8009514 <__aeabi_dmul+0x238>
 80093be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80093c2:	bfde      	ittt	le
 80093c4:	2000      	movle	r0, #0
 80093c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80093ca:	bd70      	pople	{r4, r5, r6, pc}
 80093cc:	f1c4 0400 	rsb	r4, r4, #0
 80093d0:	3c20      	subs	r4, #32
 80093d2:	da35      	bge.n	8009440 <__aeabi_dmul+0x164>
 80093d4:	340c      	adds	r4, #12
 80093d6:	dc1b      	bgt.n	8009410 <__aeabi_dmul+0x134>
 80093d8:	f104 0414 	add.w	r4, r4, #20
 80093dc:	f1c4 0520 	rsb	r5, r4, #32
 80093e0:	fa00 f305 	lsl.w	r3, r0, r5
 80093e4:	fa20 f004 	lsr.w	r0, r0, r4
 80093e8:	fa01 f205 	lsl.w	r2, r1, r5
 80093ec:	ea40 0002 	orr.w	r0, r0, r2
 80093f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80093f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80093fc:	fa21 f604 	lsr.w	r6, r1, r4
 8009400:	eb42 0106 	adc.w	r1, r2, r6
 8009404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009408:	bf08      	it	eq
 800940a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	f1c4 040c 	rsb	r4, r4, #12
 8009414:	f1c4 0520 	rsb	r5, r4, #32
 8009418:	fa00 f304 	lsl.w	r3, r0, r4
 800941c:	fa20 f005 	lsr.w	r0, r0, r5
 8009420:	fa01 f204 	lsl.w	r2, r1, r4
 8009424:	ea40 0002 	orr.w	r0, r0, r2
 8009428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800942c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009430:	f141 0100 	adc.w	r1, r1, #0
 8009434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009438:	bf08      	it	eq
 800943a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	f1c4 0520 	rsb	r5, r4, #32
 8009444:	fa00 f205 	lsl.w	r2, r0, r5
 8009448:	ea4e 0e02 	orr.w	lr, lr, r2
 800944c:	fa20 f304 	lsr.w	r3, r0, r4
 8009450:	fa01 f205 	lsl.w	r2, r1, r5
 8009454:	ea43 0302 	orr.w	r3, r3, r2
 8009458:	fa21 f004 	lsr.w	r0, r1, r4
 800945c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009460:	fa21 f204 	lsr.w	r2, r1, r4
 8009464:	ea20 0002 	bic.w	r0, r0, r2
 8009468:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800946c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009470:	bf08      	it	eq
 8009472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	f094 0f00 	teq	r4, #0
 800947c:	d10f      	bne.n	800949e <__aeabi_dmul+0x1c2>
 800947e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8009482:	0040      	lsls	r0, r0, #1
 8009484:	eb41 0101 	adc.w	r1, r1, r1
 8009488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800948c:	bf08      	it	eq
 800948e:	3c01      	subeq	r4, #1
 8009490:	d0f7      	beq.n	8009482 <__aeabi_dmul+0x1a6>
 8009492:	ea41 0106 	orr.w	r1, r1, r6
 8009496:	f095 0f00 	teq	r5, #0
 800949a:	bf18      	it	ne
 800949c:	4770      	bxne	lr
 800949e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80094a2:	0052      	lsls	r2, r2, #1
 80094a4:	eb43 0303 	adc.w	r3, r3, r3
 80094a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80094ac:	bf08      	it	eq
 80094ae:	3d01      	subeq	r5, #1
 80094b0:	d0f7      	beq.n	80094a2 <__aeabi_dmul+0x1c6>
 80094b2:	ea43 0306 	orr.w	r3, r3, r6
 80094b6:	4770      	bx	lr
 80094b8:	ea94 0f0c 	teq	r4, ip
 80094bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80094c0:	bf18      	it	ne
 80094c2:	ea95 0f0c 	teqne	r5, ip
 80094c6:	d00c      	beq.n	80094e2 <__aeabi_dmul+0x206>
 80094c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80094cc:	bf18      	it	ne
 80094ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80094d2:	d1d1      	bne.n	8009478 <__aeabi_dmul+0x19c>
 80094d4:	ea81 0103 	eor.w	r1, r1, r3
 80094d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80094dc:	f04f 0000 	mov.w	r0, #0
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80094e6:	bf06      	itte	eq
 80094e8:	4610      	moveq	r0, r2
 80094ea:	4619      	moveq	r1, r3
 80094ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80094f0:	d019      	beq.n	8009526 <__aeabi_dmul+0x24a>
 80094f2:	ea94 0f0c 	teq	r4, ip
 80094f6:	d102      	bne.n	80094fe <__aeabi_dmul+0x222>
 80094f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80094fc:	d113      	bne.n	8009526 <__aeabi_dmul+0x24a>
 80094fe:	ea95 0f0c 	teq	r5, ip
 8009502:	d105      	bne.n	8009510 <__aeabi_dmul+0x234>
 8009504:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009508:	bf1c      	itt	ne
 800950a:	4610      	movne	r0, r2
 800950c:	4619      	movne	r1, r3
 800950e:	d10a      	bne.n	8009526 <__aeabi_dmul+0x24a>
 8009510:	ea81 0103 	eor.w	r1, r1, r3
 8009514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009518:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800951c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009520:	f04f 0000 	mov.w	r0, #0
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800952a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800952e:	bd70      	pop	{r4, r5, r6, pc}

08009530 <__aeabi_ddiv>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009536:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800953a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800953e:	bf1d      	ittte	ne
 8009540:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009544:	ea94 0f0c 	teqne	r4, ip
 8009548:	ea95 0f0c 	teqne	r5, ip
 800954c:	f000 f8a7 	bleq	800969e <__aeabi_ddiv+0x16e>
 8009550:	eba4 0405 	sub.w	r4, r4, r5
 8009554:	ea81 0e03 	eor.w	lr, r1, r3
 8009558:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800955c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009560:	f000 8088 	beq.w	8009674 <__aeabi_ddiv+0x144>
 8009564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009568:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800956c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009570:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009574:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009578:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800957c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009580:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8009584:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009588:	429d      	cmp	r5, r3
 800958a:	bf08      	it	eq
 800958c:	4296      	cmpeq	r6, r2
 800958e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8009592:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8009596:	d202      	bcs.n	800959e <__aeabi_ddiv+0x6e>
 8009598:	085b      	lsrs	r3, r3, #1
 800959a:	ea4f 0232 	mov.w	r2, r2, rrx
 800959e:	1ab6      	subs	r6, r6, r2
 80095a0:	eb65 0503 	sbc.w	r5, r5, r3
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80095aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80095ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80095b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80095b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80095ba:	bf22      	ittt	cs
 80095bc:	1ab6      	subcs	r6, r6, r2
 80095be:	4675      	movcs	r5, lr
 80095c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80095c4:	085b      	lsrs	r3, r3, #1
 80095c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80095ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80095ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80095d2:	bf22      	ittt	cs
 80095d4:	1ab6      	subcs	r6, r6, r2
 80095d6:	4675      	movcs	r5, lr
 80095d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80095dc:	085b      	lsrs	r3, r3, #1
 80095de:	ea4f 0232 	mov.w	r2, r2, rrx
 80095e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80095e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80095ea:	bf22      	ittt	cs
 80095ec:	1ab6      	subcs	r6, r6, r2
 80095ee:	4675      	movcs	r5, lr
 80095f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80095fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80095fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009602:	bf22      	ittt	cs
 8009604:	1ab6      	subcs	r6, r6, r2
 8009606:	4675      	movcs	r5, lr
 8009608:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800960c:	ea55 0e06 	orrs.w	lr, r5, r6
 8009610:	d018      	beq.n	8009644 <__aeabi_ddiv+0x114>
 8009612:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8009616:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800961a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800961e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009622:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8009626:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800962a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800962e:	d1c0      	bne.n	80095b2 <__aeabi_ddiv+0x82>
 8009630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009634:	d10b      	bne.n	800964e <__aeabi_ddiv+0x11e>
 8009636:	ea41 0100 	orr.w	r1, r1, r0
 800963a:	f04f 0000 	mov.w	r0, #0
 800963e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009642:	e7b6      	b.n	80095b2 <__aeabi_ddiv+0x82>
 8009644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009648:	bf04      	itt	eq
 800964a:	4301      	orreq	r1, r0
 800964c:	2000      	moveq	r0, #0
 800964e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009652:	bf88      	it	hi
 8009654:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009658:	f63f aeaf 	bhi.w	80093ba <__aeabi_dmul+0xde>
 800965c:	ebb5 0c03 	subs.w	ip, r5, r3
 8009660:	bf04      	itt	eq
 8009662:	ebb6 0c02 	subseq.w	ip, r6, r2
 8009666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800966a:	f150 0000 	adcs.w	r0, r0, #0
 800966e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009678:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800967c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009680:	bfc2      	ittt	gt
 8009682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800968a:	bd70      	popgt	{r4, r5, r6, pc}
 800968c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009690:	f04f 0e00 	mov.w	lr, #0
 8009694:	3c01      	subs	r4, #1
 8009696:	e690      	b.n	80093ba <__aeabi_dmul+0xde>
 8009698:	ea45 0e06 	orr.w	lr, r5, r6
 800969c:	e68d      	b.n	80093ba <__aeabi_dmul+0xde>
 800969e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80096a2:	ea94 0f0c 	teq	r4, ip
 80096a6:	bf08      	it	eq
 80096a8:	ea95 0f0c 	teqeq	r5, ip
 80096ac:	f43f af3b 	beq.w	8009526 <__aeabi_dmul+0x24a>
 80096b0:	ea94 0f0c 	teq	r4, ip
 80096b4:	d10a      	bne.n	80096cc <__aeabi_ddiv+0x19c>
 80096b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80096ba:	f47f af34 	bne.w	8009526 <__aeabi_dmul+0x24a>
 80096be:	ea95 0f0c 	teq	r5, ip
 80096c2:	f47f af25 	bne.w	8009510 <__aeabi_dmul+0x234>
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	e72c      	b.n	8009526 <__aeabi_dmul+0x24a>
 80096cc:	ea95 0f0c 	teq	r5, ip
 80096d0:	d106      	bne.n	80096e0 <__aeabi_ddiv+0x1b0>
 80096d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80096d6:	f43f aefd 	beq.w	80094d4 <__aeabi_dmul+0x1f8>
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	e722      	b.n	8009526 <__aeabi_dmul+0x24a>
 80096e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80096e4:	bf18      	it	ne
 80096e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80096ea:	f47f aec5 	bne.w	8009478 <__aeabi_dmul+0x19c>
 80096ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80096f2:	f47f af0d 	bne.w	8009510 <__aeabi_dmul+0x234>
 80096f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80096fa:	f47f aeeb 	bne.w	80094d4 <__aeabi_dmul+0x1f8>
 80096fe:	e712      	b.n	8009526 <__aeabi_dmul+0x24a>

08009700 <__gedf2>:
 8009700:	f04f 3cff 	mov.w	ip, #4294967295
 8009704:	e006      	b.n	8009714 <__cmpdf2+0x4>
 8009706:	bf00      	nop

08009708 <__ledf2>:
 8009708:	f04f 0c01 	mov.w	ip, #1
 800970c:	e002      	b.n	8009714 <__cmpdf2+0x4>
 800970e:	bf00      	nop

08009710 <__cmpdf2>:
 8009710:	f04f 0c01 	mov.w	ip, #1
 8009714:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009718:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800971c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009724:	bf18      	it	ne
 8009726:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800972a:	d01b      	beq.n	8009764 <__cmpdf2+0x54>
 800972c:	b001      	add	sp, #4
 800972e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8009732:	bf0c      	ite	eq
 8009734:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8009738:	ea91 0f03 	teqne	r1, r3
 800973c:	bf02      	ittt	eq
 800973e:	ea90 0f02 	teqeq	r0, r2
 8009742:	2000      	moveq	r0, #0
 8009744:	4770      	bxeq	lr
 8009746:	f110 0f00 	cmn.w	r0, #0
 800974a:	ea91 0f03 	teq	r1, r3
 800974e:	bf58      	it	pl
 8009750:	4299      	cmppl	r1, r3
 8009752:	bf08      	it	eq
 8009754:	4290      	cmpeq	r0, r2
 8009756:	bf2c      	ite	cs
 8009758:	17d8      	asrcs	r0, r3, #31
 800975a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800975e:	f040 0001 	orr.w	r0, r0, #1
 8009762:	4770      	bx	lr
 8009764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800976c:	d102      	bne.n	8009774 <__cmpdf2+0x64>
 800976e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8009772:	d107      	bne.n	8009784 <__cmpdf2+0x74>
 8009774:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800977c:	d1d6      	bne.n	800972c <__cmpdf2+0x1c>
 800977e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8009782:	d0d3      	beq.n	800972c <__cmpdf2+0x1c>
 8009784:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop

0800978c <__aeabi_cdrcmple>:
 800978c:	4684      	mov	ip, r0
 800978e:	4610      	mov	r0, r2
 8009790:	4662      	mov	r2, ip
 8009792:	468c      	mov	ip, r1
 8009794:	4619      	mov	r1, r3
 8009796:	4663      	mov	r3, ip
 8009798:	e000      	b.n	800979c <__aeabi_cdcmpeq>
 800979a:	bf00      	nop

0800979c <__aeabi_cdcmpeq>:
 800979c:	b501      	push	{r0, lr}
 800979e:	f7ff ffb7 	bl	8009710 <__cmpdf2>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	bf48      	it	mi
 80097a6:	f110 0f00 	cmnmi.w	r0, #0
 80097aa:	bd01      	pop	{r0, pc}

080097ac <__aeabi_dcmpeq>:
 80097ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80097b0:	f7ff fff4 	bl	800979c <__aeabi_cdcmpeq>
 80097b4:	bf0c      	ite	eq
 80097b6:	2001      	moveq	r0, #1
 80097b8:	2000      	movne	r0, #0
 80097ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80097be:	bf00      	nop

080097c0 <__aeabi_dcmplt>:
 80097c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80097c4:	f7ff ffea 	bl	800979c <__aeabi_cdcmpeq>
 80097c8:	bf34      	ite	cc
 80097ca:	2001      	movcc	r0, #1
 80097cc:	2000      	movcs	r0, #0
 80097ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80097d2:	bf00      	nop

080097d4 <__aeabi_dcmple>:
 80097d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80097d8:	f7ff ffe0 	bl	800979c <__aeabi_cdcmpeq>
 80097dc:	bf94      	ite	ls
 80097de:	2001      	movls	r0, #1
 80097e0:	2000      	movhi	r0, #0
 80097e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80097e6:	bf00      	nop

080097e8 <__aeabi_dcmpge>:
 80097e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80097ec:	f7ff ffce 	bl	800978c <__aeabi_cdrcmple>
 80097f0:	bf94      	ite	ls
 80097f2:	2001      	movls	r0, #1
 80097f4:	2000      	movhi	r0, #0
 80097f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80097fa:	bf00      	nop

080097fc <__aeabi_dcmpgt>:
 80097fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009800:	f7ff ffc4 	bl	800978c <__aeabi_cdrcmple>
 8009804:	bf34      	ite	cc
 8009806:	2001      	movcc	r0, #1
 8009808:	2000      	movcs	r0, #0
 800980a:	f85d fb08 	ldr.w	pc, [sp], #8
 800980e:	bf00      	nop

08009810 <__aeabi_d2iz>:
 8009810:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009814:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009818:	d215      	bcs.n	8009846 <__aeabi_d2iz+0x36>
 800981a:	d511      	bpl.n	8009840 <__aeabi_d2iz+0x30>
 800981c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009820:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009824:	d912      	bls.n	800984c <__aeabi_d2iz+0x3c>
 8009826:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800982a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800982e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8009832:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009836:	fa23 f002 	lsr.w	r0, r3, r2
 800983a:	bf18      	it	ne
 800983c:	4240      	negne	r0, r0
 800983e:	4770      	bx	lr
 8009840:	f04f 0000 	mov.w	r0, #0
 8009844:	4770      	bx	lr
 8009846:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800984a:	d105      	bne.n	8009858 <__aeabi_d2iz+0x48>
 800984c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8009850:	bf08      	it	eq
 8009852:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009856:	4770      	bx	lr
 8009858:	f04f 0000 	mov.w	r0, #0
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <__aeabi_d2uiz>:
 8009860:	004a      	lsls	r2, r1, #1
 8009862:	d211      	bcs.n	8009888 <__aeabi_d2uiz+0x28>
 8009864:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009868:	d211      	bcs.n	800988e <__aeabi_d2uiz+0x2e>
 800986a:	d50d      	bpl.n	8009888 <__aeabi_d2uiz+0x28>
 800986c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009870:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009874:	d40e      	bmi.n	8009894 <__aeabi_d2uiz+0x34>
 8009876:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800987a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800987e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8009882:	fa23 f002 	lsr.w	r0, r3, r2
 8009886:	4770      	bx	lr
 8009888:	f04f 0000 	mov.w	r0, #0
 800988c:	4770      	bx	lr
 800988e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8009892:	d102      	bne.n	800989a <__aeabi_d2uiz+0x3a>
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	4770      	bx	lr
 800989a:	f04f 0000 	mov.w	r0, #0
 800989e:	4770      	bx	lr

080098a0 <__aeabi_uldivmod>:
 80098a0:	b953      	cbnz	r3, 80098b8 <__aeabi_uldivmod+0x18>
 80098a2:	b94a      	cbnz	r2, 80098b8 <__aeabi_uldivmod+0x18>
 80098a4:	2900      	cmp	r1, #0
 80098a6:	bf08      	it	eq
 80098a8:	2800      	cmpeq	r0, #0
 80098aa:	bf1c      	itt	ne
 80098ac:	f04f 31ff 	movne.w	r1, #4294967295
 80098b0:	f04f 30ff 	movne.w	r0, #4294967295
 80098b4:	f000 b96e 	b.w	8009b94 <__aeabi_idiv0>
 80098b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80098bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80098c0:	f000 f806 	bl	80098d0 <__udivmoddi4>
 80098c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80098c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098cc:	b004      	add	sp, #16
 80098ce:	4770      	bx	lr

080098d0 <__udivmoddi4>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	9e08      	ldr	r6, [sp, #32]
 80098d6:	460d      	mov	r5, r1
 80098d8:	4604      	mov	r4, r0
 80098da:	468e      	mov	lr, r1
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f040 8083 	bne.w	80099e8 <__udivmoddi4+0x118>
 80098e2:	428a      	cmp	r2, r1
 80098e4:	4617      	mov	r7, r2
 80098e6:	d947      	bls.n	8009978 <__udivmoddi4+0xa8>
 80098e8:	fab2 f382 	clz	r3, r2
 80098ec:	b14b      	cbz	r3, 8009902 <__udivmoddi4+0x32>
 80098ee:	f1c3 0120 	rsb	r1, r3, #32
 80098f2:	fa05 fe03 	lsl.w	lr, r5, r3
 80098f6:	fa20 f101 	lsr.w	r1, r0, r1
 80098fa:	409f      	lsls	r7, r3
 80098fc:	ea41 0e0e 	orr.w	lr, r1, lr
 8009900:	409c      	lsls	r4, r3
 8009902:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8009906:	fbbe fcf8 	udiv	ip, lr, r8
 800990a:	fa1f f987 	uxth.w	r9, r7
 800990e:	fb08 e21c 	mls	r2, r8, ip, lr
 8009912:	fb0c f009 	mul.w	r0, ip, r9
 8009916:	0c21      	lsrs	r1, r4, #16
 8009918:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800991c:	4290      	cmp	r0, r2
 800991e:	d90a      	bls.n	8009936 <__udivmoddi4+0x66>
 8009920:	18ba      	adds	r2, r7, r2
 8009922:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009926:	f080 8118 	bcs.w	8009b5a <__udivmoddi4+0x28a>
 800992a:	4290      	cmp	r0, r2
 800992c:	f240 8115 	bls.w	8009b5a <__udivmoddi4+0x28a>
 8009930:	f1ac 0c02 	sub.w	ip, ip, #2
 8009934:	443a      	add	r2, r7
 8009936:	1a12      	subs	r2, r2, r0
 8009938:	fbb2 f0f8 	udiv	r0, r2, r8
 800993c:	fb08 2210 	mls	r2, r8, r0, r2
 8009940:	fb00 f109 	mul.w	r1, r0, r9
 8009944:	b2a4      	uxth	r4, r4
 8009946:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800994a:	42a1      	cmp	r1, r4
 800994c:	d909      	bls.n	8009962 <__udivmoddi4+0x92>
 800994e:	193c      	adds	r4, r7, r4
 8009950:	f100 32ff 	add.w	r2, r0, #4294967295
 8009954:	f080 8103 	bcs.w	8009b5e <__udivmoddi4+0x28e>
 8009958:	42a1      	cmp	r1, r4
 800995a:	f240 8100 	bls.w	8009b5e <__udivmoddi4+0x28e>
 800995e:	3802      	subs	r0, #2
 8009960:	443c      	add	r4, r7
 8009962:	1a64      	subs	r4, r4, r1
 8009964:	2100      	movs	r1, #0
 8009966:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800996a:	b11e      	cbz	r6, 8009974 <__udivmoddi4+0xa4>
 800996c:	2200      	movs	r2, #0
 800996e:	40dc      	lsrs	r4, r3
 8009970:	e9c6 4200 	strd	r4, r2, [r6]
 8009974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009978:	b902      	cbnz	r2, 800997c <__udivmoddi4+0xac>
 800997a:	deff      	udf	#255	; 0xff
 800997c:	fab2 f382 	clz	r3, r2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d14f      	bne.n	8009a24 <__udivmoddi4+0x154>
 8009984:	1a8d      	subs	r5, r1, r2
 8009986:	2101      	movs	r1, #1
 8009988:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800998c:	fa1f f882 	uxth.w	r8, r2
 8009990:	fbb5 fcfe 	udiv	ip, r5, lr
 8009994:	fb0e 551c 	mls	r5, lr, ip, r5
 8009998:	fb08 f00c 	mul.w	r0, r8, ip
 800999c:	0c22      	lsrs	r2, r4, #16
 800999e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80099a2:	42a8      	cmp	r0, r5
 80099a4:	d907      	bls.n	80099b6 <__udivmoddi4+0xe6>
 80099a6:	197d      	adds	r5, r7, r5
 80099a8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80099ac:	d202      	bcs.n	80099b4 <__udivmoddi4+0xe4>
 80099ae:	42a8      	cmp	r0, r5
 80099b0:	f200 80e9 	bhi.w	8009b86 <__udivmoddi4+0x2b6>
 80099b4:	4694      	mov	ip, r2
 80099b6:	1a2d      	subs	r5, r5, r0
 80099b8:	fbb5 f0fe 	udiv	r0, r5, lr
 80099bc:	fb0e 5510 	mls	r5, lr, r0, r5
 80099c0:	fb08 f800 	mul.w	r8, r8, r0
 80099c4:	b2a4      	uxth	r4, r4
 80099c6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80099ca:	45a0      	cmp	r8, r4
 80099cc:	d907      	bls.n	80099de <__udivmoddi4+0x10e>
 80099ce:	193c      	adds	r4, r7, r4
 80099d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80099d4:	d202      	bcs.n	80099dc <__udivmoddi4+0x10c>
 80099d6:	45a0      	cmp	r8, r4
 80099d8:	f200 80d9 	bhi.w	8009b8e <__udivmoddi4+0x2be>
 80099dc:	4610      	mov	r0, r2
 80099de:	eba4 0408 	sub.w	r4, r4, r8
 80099e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80099e6:	e7c0      	b.n	800996a <__udivmoddi4+0x9a>
 80099e8:	428b      	cmp	r3, r1
 80099ea:	d908      	bls.n	80099fe <__udivmoddi4+0x12e>
 80099ec:	2e00      	cmp	r6, #0
 80099ee:	f000 80b1 	beq.w	8009b54 <__udivmoddi4+0x284>
 80099f2:	2100      	movs	r1, #0
 80099f4:	e9c6 0500 	strd	r0, r5, [r6]
 80099f8:	4608      	mov	r0, r1
 80099fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fe:	fab3 f183 	clz	r1, r3
 8009a02:	2900      	cmp	r1, #0
 8009a04:	d14b      	bne.n	8009a9e <__udivmoddi4+0x1ce>
 8009a06:	42ab      	cmp	r3, r5
 8009a08:	d302      	bcc.n	8009a10 <__udivmoddi4+0x140>
 8009a0a:	4282      	cmp	r2, r0
 8009a0c:	f200 80b9 	bhi.w	8009b82 <__udivmoddi4+0x2b2>
 8009a10:	1a84      	subs	r4, r0, r2
 8009a12:	eb65 0303 	sbc.w	r3, r5, r3
 8009a16:	2001      	movs	r0, #1
 8009a18:	469e      	mov	lr, r3
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	d0aa      	beq.n	8009974 <__udivmoddi4+0xa4>
 8009a1e:	e9c6 4e00 	strd	r4, lr, [r6]
 8009a22:	e7a7      	b.n	8009974 <__udivmoddi4+0xa4>
 8009a24:	409f      	lsls	r7, r3
 8009a26:	f1c3 0220 	rsb	r2, r3, #32
 8009a2a:	40d1      	lsrs	r1, r2
 8009a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8009a30:	fbb1 f0fe 	udiv	r0, r1, lr
 8009a34:	fa1f f887 	uxth.w	r8, r7
 8009a38:	fb0e 1110 	mls	r1, lr, r0, r1
 8009a3c:	fa24 f202 	lsr.w	r2, r4, r2
 8009a40:	409d      	lsls	r5, r3
 8009a42:	fb00 fc08 	mul.w	ip, r0, r8
 8009a46:	432a      	orrs	r2, r5
 8009a48:	0c15      	lsrs	r5, r2, #16
 8009a4a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8009a4e:	45ac      	cmp	ip, r5
 8009a50:	fa04 f403 	lsl.w	r4, r4, r3
 8009a54:	d909      	bls.n	8009a6a <__udivmoddi4+0x19a>
 8009a56:	197d      	adds	r5, r7, r5
 8009a58:	f100 31ff 	add.w	r1, r0, #4294967295
 8009a5c:	f080 808f 	bcs.w	8009b7e <__udivmoddi4+0x2ae>
 8009a60:	45ac      	cmp	ip, r5
 8009a62:	f240 808c 	bls.w	8009b7e <__udivmoddi4+0x2ae>
 8009a66:	3802      	subs	r0, #2
 8009a68:	443d      	add	r5, r7
 8009a6a:	eba5 050c 	sub.w	r5, r5, ip
 8009a6e:	fbb5 f1fe 	udiv	r1, r5, lr
 8009a72:	fb0e 5c11 	mls	ip, lr, r1, r5
 8009a76:	fb01 f908 	mul.w	r9, r1, r8
 8009a7a:	b295      	uxth	r5, r2
 8009a7c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8009a80:	45a9      	cmp	r9, r5
 8009a82:	d907      	bls.n	8009a94 <__udivmoddi4+0x1c4>
 8009a84:	197d      	adds	r5, r7, r5
 8009a86:	f101 32ff 	add.w	r2, r1, #4294967295
 8009a8a:	d274      	bcs.n	8009b76 <__udivmoddi4+0x2a6>
 8009a8c:	45a9      	cmp	r9, r5
 8009a8e:	d972      	bls.n	8009b76 <__udivmoddi4+0x2a6>
 8009a90:	3902      	subs	r1, #2
 8009a92:	443d      	add	r5, r7
 8009a94:	eba5 0509 	sub.w	r5, r5, r9
 8009a98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a9c:	e778      	b.n	8009990 <__udivmoddi4+0xc0>
 8009a9e:	f1c1 0720 	rsb	r7, r1, #32
 8009aa2:	408b      	lsls	r3, r1
 8009aa4:	fa22 fc07 	lsr.w	ip, r2, r7
 8009aa8:	ea4c 0c03 	orr.w	ip, ip, r3
 8009aac:	fa25 f407 	lsr.w	r4, r5, r7
 8009ab0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009ab4:	fbb4 f9fe 	udiv	r9, r4, lr
 8009ab8:	fa1f f88c 	uxth.w	r8, ip
 8009abc:	fb0e 4419 	mls	r4, lr, r9, r4
 8009ac0:	fa20 f307 	lsr.w	r3, r0, r7
 8009ac4:	fb09 fa08 	mul.w	sl, r9, r8
 8009ac8:	408d      	lsls	r5, r1
 8009aca:	431d      	orrs	r5, r3
 8009acc:	0c2b      	lsrs	r3, r5, #16
 8009ace:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009ad2:	45a2      	cmp	sl, r4
 8009ad4:	fa02 f201 	lsl.w	r2, r2, r1
 8009ad8:	fa00 f301 	lsl.w	r3, r0, r1
 8009adc:	d909      	bls.n	8009af2 <__udivmoddi4+0x222>
 8009ade:	eb1c 0404 	adds.w	r4, ip, r4
 8009ae2:	f109 30ff 	add.w	r0, r9, #4294967295
 8009ae6:	d248      	bcs.n	8009b7a <__udivmoddi4+0x2aa>
 8009ae8:	45a2      	cmp	sl, r4
 8009aea:	d946      	bls.n	8009b7a <__udivmoddi4+0x2aa>
 8009aec:	f1a9 0902 	sub.w	r9, r9, #2
 8009af0:	4464      	add	r4, ip
 8009af2:	eba4 040a 	sub.w	r4, r4, sl
 8009af6:	fbb4 f0fe 	udiv	r0, r4, lr
 8009afa:	fb0e 4410 	mls	r4, lr, r0, r4
 8009afe:	fb00 fa08 	mul.w	sl, r0, r8
 8009b02:	b2ad      	uxth	r5, r5
 8009b04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009b08:	45a2      	cmp	sl, r4
 8009b0a:	d908      	bls.n	8009b1e <__udivmoddi4+0x24e>
 8009b0c:	eb1c 0404 	adds.w	r4, ip, r4
 8009b10:	f100 35ff 	add.w	r5, r0, #4294967295
 8009b14:	d22d      	bcs.n	8009b72 <__udivmoddi4+0x2a2>
 8009b16:	45a2      	cmp	sl, r4
 8009b18:	d92b      	bls.n	8009b72 <__udivmoddi4+0x2a2>
 8009b1a:	3802      	subs	r0, #2
 8009b1c:	4464      	add	r4, ip
 8009b1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8009b22:	fba0 8902 	umull	r8, r9, r0, r2
 8009b26:	eba4 040a 	sub.w	r4, r4, sl
 8009b2a:	454c      	cmp	r4, r9
 8009b2c:	46c6      	mov	lr, r8
 8009b2e:	464d      	mov	r5, r9
 8009b30:	d319      	bcc.n	8009b66 <__udivmoddi4+0x296>
 8009b32:	d016      	beq.n	8009b62 <__udivmoddi4+0x292>
 8009b34:	b15e      	cbz	r6, 8009b4e <__udivmoddi4+0x27e>
 8009b36:	ebb3 020e 	subs.w	r2, r3, lr
 8009b3a:	eb64 0405 	sbc.w	r4, r4, r5
 8009b3e:	fa04 f707 	lsl.w	r7, r4, r7
 8009b42:	fa22 f301 	lsr.w	r3, r2, r1
 8009b46:	431f      	orrs	r7, r3
 8009b48:	40cc      	lsrs	r4, r1
 8009b4a:	e9c6 7400 	strd	r7, r4, [r6]
 8009b4e:	2100      	movs	r1, #0
 8009b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b54:	4631      	mov	r1, r6
 8009b56:	4630      	mov	r0, r6
 8009b58:	e70c      	b.n	8009974 <__udivmoddi4+0xa4>
 8009b5a:	468c      	mov	ip, r1
 8009b5c:	e6eb      	b.n	8009936 <__udivmoddi4+0x66>
 8009b5e:	4610      	mov	r0, r2
 8009b60:	e6ff      	b.n	8009962 <__udivmoddi4+0x92>
 8009b62:	4543      	cmp	r3, r8
 8009b64:	d2e6      	bcs.n	8009b34 <__udivmoddi4+0x264>
 8009b66:	ebb8 0e02 	subs.w	lr, r8, r2
 8009b6a:	eb69 050c 	sbc.w	r5, r9, ip
 8009b6e:	3801      	subs	r0, #1
 8009b70:	e7e0      	b.n	8009b34 <__udivmoddi4+0x264>
 8009b72:	4628      	mov	r0, r5
 8009b74:	e7d3      	b.n	8009b1e <__udivmoddi4+0x24e>
 8009b76:	4611      	mov	r1, r2
 8009b78:	e78c      	b.n	8009a94 <__udivmoddi4+0x1c4>
 8009b7a:	4681      	mov	r9, r0
 8009b7c:	e7b9      	b.n	8009af2 <__udivmoddi4+0x222>
 8009b7e:	4608      	mov	r0, r1
 8009b80:	e773      	b.n	8009a6a <__udivmoddi4+0x19a>
 8009b82:	4608      	mov	r0, r1
 8009b84:	e749      	b.n	8009a1a <__udivmoddi4+0x14a>
 8009b86:	f1ac 0c02 	sub.w	ip, ip, #2
 8009b8a:	443d      	add	r5, r7
 8009b8c:	e713      	b.n	80099b6 <__udivmoddi4+0xe6>
 8009b8e:	3802      	subs	r0, #2
 8009b90:	443c      	add	r4, r7
 8009b92:	e724      	b.n	80099de <__udivmoddi4+0x10e>

08009b94 <__aeabi_idiv0>:
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop

08009b98 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	/* Start the MPU demo. */
	vStartMPUDemo();
 8009b9c:	f000 f968 	bl	8009e70 <vStartMPUDemo>

	/* Start the scheduler. */
	vTaskStartScheduler();
 8009ba0:	f7f9 ffec 	bl	8003b7c <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009ba4:	e7fe      	b.n	8009ba4 <app_main+0xc>

08009ba6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009bb0:	e7fe      	b.n	8009bb0 <vApplicationStackOverflowHook+0xa>

08009bb2 <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009bb6:	e7fe      	b.n	8009bb6 <vApplicationMallocFailedHook+0x4>

08009bb8 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4a07      	ldr	r2, [pc, #28]	; (8009be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009bc8:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a06      	ldr	r2, [pc, #24]	; (8009be8 <vApplicationGetIdleTaskMemory+0x30>)
 8009bce:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bd6:	601a      	str	r2, [r3, #0]
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	2000841c 	.word	0x2000841c
 8009be8:	2000849c 	.word	0x2000849c

08009bec <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <vApplicationGetTimerTaskMemory+0x2c>)
 8009bfc:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	4a06      	ldr	r2, [pc, #24]	; (8009c1c <vApplicationGetTimerTaskMemory+0x30>)
 8009c02:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c0a:	601a      	str	r2, [r3, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bc80      	pop	{r7}
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	2000889c 	.word	0x2000889c
 8009c1c:	2000891c 	.word	0x2000891c

08009c20 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	bf0c      	ite	eq
 8009c34:	2301      	moveq	r3, #1
 8009c36:	2300      	movne	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	605a      	str	r2, [r3, #4]
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bc80      	pop	{r7}
 8009c5e:	4770      	bx	lr

08009c60 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	619a      	str	r2, [r3, #24]
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bc80      	pop	{r7}
 8009c78:	4770      	bx	lr

08009c7a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	629a      	str	r2, [r3, #40]	; 0x28
#else
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
#endif /* GPIO_BRR_BR_0 */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bc80      	pop	{r7}
 8009c92:	4770      	bx	lr

08009c94 <prvROAccessTask>:
static void prvRWAccessTask( void * pvParameters );

/*-----------------------------------------------------------*/

static void prvROAccessTask( void * pvParameters )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

	for( ; ; )
	{
		/* This task has RO access to ucSharedMemory and therefore it can read
		 * it but cannot modify it. */
		ucVal = ucSharedMemory[ 0 ];
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <prvROAccessTask+0x74>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	75fb      	strb	r3, [r7, #23]
		/* Since this task has Read Only access to the ucSharedMemory region,
		 * writing to it results in Memory Fault. Set ucROTaskFaultTracker[ 0 ]
		 * to 1 to tell the Memory Fault Handler that this is an expected fault.
		 * The handler will recover from this fault gracefully by jumping to the
		 * next instruction. */
		ucROTaskFaultTracker[ 0 ] = 1;
 8009ca2:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <prvROAccessTask+0x78>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]

		/* Illegal access to generate Memory Fault. */
		ucSharedMemory[ 0 ] = 0;
 8009ca8:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <prvROAccessTask+0x74>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]

		/* Ensure that the above line did generate MemFault and the fault
		 * handler did clear the  ucROTaskFaultTracker[ 0 ]. */
		configASSERT( ucROTaskFaultTracker[ 0 ] == 0 );
 8009cae:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <prvROAccessTask+0x78>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <prvROAccessTask+0x3a>
        __asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
    }
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <prvROAccessTask+0x38>
			/* Generate an SVC to raise the privilege. Since privilege
			 * escalation is only allowed from kernel code, this request must
			 * get rejected and the task must remain unprivileged. As a result,
			 * trying to write to ucSharedMemory will still result in Memory
			 * Fault. */
			portRAISE_PRIVILEGE();
 8009cce:	df02      	svc	2

			/* Set ucROTaskFaultTracker[ 0 ] to 1 to tell the Memory Fault
			 * Handler that this is an expected fault. The handler will then be
			 * able to recover from this fault gracefully by jumping to the
			 * next instruction.*/
			ucROTaskFaultTracker[ 0 ] = 1;
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <prvROAccessTask+0x78>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]

			/* The following must still result in Memory Fault since the task
			 * is still running unprivileged. */
			ucSharedMemory[ 0 ] = 0;
 8009cd6:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <prvROAccessTask+0x74>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]

			/* Ensure that the above line did generate MemFault and the fault
		 	 * handler did clear the  ucROTaskFaultTracker[ 0 ]. */
			configASSERT( ucROTaskFaultTracker[ 0 ] == 0 );
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <prvROAccessTask+0x78>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <prvROAccessTask+0x68>
        __asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	60fb      	str	r3, [r7, #12]
    }
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <prvROAccessTask+0x66>
			configASSERT( ucROTaskFaultTracker[ 0 ] == 0 );
		}
		#endif /* #if( configENFORCE_SYSTEM_CALLS_FROM_KERNEL_ONLY == 1 ) */

		/* Wait for a second. */
		vTaskDelay( pdMS_TO_TICKS( 1000 ) );
 8009cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d00:	f7fe fa09 	bl	8008116 <MPU_vTaskDelay>
		ucVal = ucSharedMemory[ 0 ];
 8009d04:	e7ca      	b.n	8009c9c <prvROAccessTask+0x8>
 8009d06:	bf00      	nop
 8009d08:	20008d20 	.word	0x20008d20
 8009d0c:	20008d40 	.word	0x20008d40

08009d10 <prvRWAccessTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRWAccessTask( void * pvParameters )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]

	for( ; ; )
	{
		/* This task has RW access to ucSharedMemory and therefore can write to
		 * it. */
		ucSharedMemory[ 0 ] = 0;
 8009d18:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <prvRWAccessTask+0x18>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]

		/* Wait for a second. */
		vTaskDelay( pdMS_TO_TICKS( 1000 ) );
 8009d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d22:	f7fe f9f8 	bl	8008116 <MPU_vTaskDelay>
		ucSharedMemory[ 0 ] = 0;
 8009d26:	e7f7      	b.n	8009d18 <prvRWAccessTask+0x8>
 8009d28:	20008d20 	.word	0x20008d20

08009d2c <prvTestTask>:
extern void MPU_xContainerEnableDWTcounter();
extern void MPU_xContainerSetDWTcounter(uint32_t val);
extern uint32_t MPU_xContainerGetDWTcounter();

static void prvTestTask( void * pvParameters )
{
 8009d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d2e:	b0a5      	sub	sp, #148	; 0x94
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]


   #if (ADCBENCHMARK == 1 || ADCBENCHMARK == 2)
	 uint16_t cStringTest[100];
    #else
	 uint8_t cStringTest[]="IxQxebhGMz4cI9JdRjsP9rCjGIvAMewsJqohA3KxyV4lmFzWuXVsSbnKA4LggQJKLCJW0ueyh0H4Z8ToLYaDvQ0SUK7vhWsfAySB";
 8009d34:	4a46      	ldr	r2, [pc, #280]	; (8009e50 <prvTestTask+0x124>)
 8009d36:	f107 030c 	add.w	r3, r7, #12
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	2265      	movs	r2, #101	; 0x65
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f006 fb42 	bl	80103c8 <memcpy>
    #endif

    uint8_t ucSize = 1;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    uint64_t uLTotalCycles = 0;
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	f04f 0300 	mov.w	r3, #0
 8009d52:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    uint8_t ucIterations = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	//BaseType_t xNotificationValue, xNumberOfBytes;

    //MB85R_Init( &xMB85, (uint32_t *)SPI1, CS_FRAM_ ); // FRAM initialization


    LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);   //signal the data capturing interface
 8009d5c:	2120      	movs	r1, #32
 8009d5e:	483d      	ldr	r0, [pc, #244]	; (8009e54 <prvTestTask+0x128>)
 8009d60:	f7ff ff7e 	bl	8009c60 <LL_GPIO_SetOutputPin>
    vTaskDelay(5);
 8009d64:	2005      	movs	r0, #5
 8009d66:	f7fe f9d6 	bl	8008116 <MPU_vTaskDelay>
    LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8009d6a:	2120      	movs	r1, #32
 8009d6c:	4839      	ldr	r0, [pc, #228]	; (8009e54 <prvTestTask+0x128>)
 8009d6e:	f7ff ff84 	bl	8009c7a <LL_GPIO_ResetOutputPin>

#if USARTBENCHMARK == 2

#if (configUSE_TRACE_FACILITY == 0)

		MPU_xContainerSetDWTcounter(0);
 8009d72:	2000      	movs	r0, #0
 8009d74:	f000 fa08 	bl	800a188 <MPU_xContainerSetDWTcounter>
#endif

				vTaskAllocateMPURegions( NULL, xAltRegions );
 8009d78:	4937      	ldr	r1, [pc, #220]	; (8009e58 <prvTestTask+0x12c>)
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	f7fe f9a7 	bl	80080ce <MPU_vTaskAllocateMPURegions>
				portYIELD();
 8009d80:	df01      	svc	1

				xTaskToNotify =  xTaskGetCurrentTaskHandle();
 8009d82:	4e36      	ldr	r6, [pc, #216]	; (8009e5c <prvTestTask+0x130>)
 8009d84:	f7fe fbd8 	bl	8008538 <MPU_xTaskGetCurrentTaskHandle>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	6033      	str	r3, [r6, #0]

				/* The following line is for TX */
				//HAL_UART_Transmit_IT(&huart2, cStringTest, ucSize);

				/* The following 2 lines are for RX */
				printf("*%d\n",ucSize);
 8009d8c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009d90:	4619      	mov	r1, r3
 8009d92:	4833      	ldr	r0, [pc, #204]	; (8009e60 <prvTestTask+0x134>)
 8009d94:	f006 faa4 	bl	80102e0 <printf_>
				HAL_UART_Receive_IT(&huart2, cStringTest, ucSize);
 8009d98:	4832      	ldr	r0, [pc, #200]	; (8009e64 <prvTestTask+0x138>)
 8009d9a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	4619      	mov	r1, r3
 8009da6:	f004 f90c 	bl	800dfc2 <HAL_UART_Receive_IT>



				ulNotificationValue = ulTaskNotifyTakeIndexed( 0, pdFALSE, 200 );
 8009daa:	22c8      	movs	r2, #200	; 0xc8
 8009dac:	2100      	movs	r1, #0
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7fe fb7f 	bl	80084b2 <MPU_ulTaskGenericNotifyTake>
 8009db4:	67b8      	str	r0, [r7, #120]	; 0x78

				if( ulNotificationValue == 1 )
 8009db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d000      	beq.n	8009dbe <prvTestTask+0x92>
				        // The transmission ended as expected.
				}
				else
				{
				        // The call to ulTaskNotifyTake() timed out.
					while(1);
 8009dbc:	e7fe      	b.n	8009dbc <prvTestTask+0x90>
				}

				vTaskAllocateMPURegions( NULL, xOriRegions );
 8009dbe:	492a      	ldr	r1, [pc, #168]	; (8009e68 <prvTestTask+0x13c>)
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f7fe f984 	bl	80080ce <MPU_vTaskAllocateMPURegions>
				portYIELD();
 8009dc6:	df01      	svc	1


#if (configUSE_TRACE_FACILITY == 0)
				ulCycles = MPU_xContainerGetDWTcounter();
 8009dc8:	f000 f9f2 	bl	800a1b0 <MPU_xContainerGetDWTcounter>
 8009dcc:	6778      	str	r0, [r7, #116]	; 0x74

#endif


				//ulCycles = ulCyclesEND - ulCycles;
				uLTotalCycles = uLTotalCycles + ulCycles;
 8009dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009dda:	1884      	adds	r4, r0, r2
 8009ddc:	eb41 0503 	adc.w	r5, r1, r3
 8009de0:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
 				ucIterations++;
 8009de4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009de8:	3301      	adds	r3, #1
 8009dea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

 				if(ucIterations == 10)
 8009dee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	d120      	bne.n	8009e38 <prvTestTask+0x10c>
 				{
 					uLTotalCycles = uLTotalCycles/10;
 8009df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009dfa:	f04f 020a 	mov.w	r2, #10
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	f7ff fd4d 	bl	80098a0 <__aeabi_uldivmod>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 					printf("%u, %llu \n", ucSize,   uLTotalCycles);
 8009e0e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8009e12:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009e16:	4815      	ldr	r0, [pc, #84]	; (8009e6c <prvTestTask+0x140>)
 8009e18:	f006 fa62 	bl	80102e0 <printf_>
 					uLTotalCycles = 0;
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 					ucSize++;
 8009e28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 					ucIterations = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 				}

 				if(ucSize>100)
 8009e38:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e3c:	2b64      	cmp	r3, #100	; 0x64
 8009e3e:	d902      	bls.n	8009e46 <prvTestTask+0x11a>
 				{

 					ucSize = 1;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 				}

				vTaskDelay(5);
 8009e46:	2005      	movs	r0, #5
 8009e48:	f7fe f965 	bl	8008116 <MPU_vTaskDelay>
		MPU_xContainerSetDWTcounter(0);
 8009e4c:	e791      	b.n	8009d72 <prvTestTask+0x46>
 8009e4e:	bf00      	nop
 8009e50:	08010424 	.word	0x08010424
 8009e54:	40020000 	.word	0x40020000
 8009e58:	080104e0 	.word	0x080104e0
 8009e5c:	20009e00 	.word	0x20009e00
 8009e60:	08010410 	.word	0x08010410
 8009e64:	20009e04 	.word	0x20009e04
 8009e68:	08010504 	.word	0x08010504
 8009e6c:	08010418 	.word	0x08010418

08009e70 <vStartMPUDemo>:




void vStartMPUDemo( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b0b0      	sub	sp, #192	; 0xc0
 8009e74:	af00      	add	r7, sp, #0
 */
static StackType_t xROAccessTaskStack[ configMINIMAL_STACK_SIZE ] __attribute__( ( aligned( configMINIMAL_STACK_SIZE * sizeof( StackType_t ) ) ) );
static StackType_t xRWAccessTaskStack[ configMINIMAL_STACK_SIZE ] __attribute__( ( aligned( configMINIMAL_STACK_SIZE * sizeof( StackType_t ) ) ) );
static StackType_t xTestTaskStack[ configMINIMAL_STACK_SIZE ] __attribute__( ( aligned( configMINIMAL_STACK_SIZE * sizeof( StackType_t ) ) ) );

TaskParameters_t xROAccessTaskParameters =
 8009e76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e7a:	2240      	movs	r2, #64	; 0x40
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f006 fab0 	bl	80103e4 <memset>
 8009e84:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <vStartMPUDemo+0xbc>)
 8009e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e8a:	4b29      	ldr	r3, [pc, #164]	; (8009f30 <vStartMPUDemo+0xc0>)
 8009e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e94:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8009e98:	4b26      	ldr	r3, [pc, #152]	; (8009f34 <vStartMPUDemo+0xc4>)
 8009e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e9e:	4b26      	ldr	r3, [pc, #152]	; (8009f38 <vStartMPUDemo+0xc8>)
 8009ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eaa:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8009eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009eb2:	4b22      	ldr	r3, [pc, #136]	; (8009f3c <vStartMPUDemo+0xcc>)
 8009eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eb8:	2320      	movs	r3, #32
 8009eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ebe:	f04f 5398 	mov.w	r3, #318767104	; 0x13000000
 8009ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
							{ ucSharedMemory,					SHARED_MEMORY_SIZE,	portMPU_REGION_PRIVILEGED_READ_WRITE_UNPRIV_READ_ONLY | portMPU_REGION_EXECUTE_NEVER	},
							{ ( void * ) ucROTaskFaultTracker,	SHARED_MEMORY_SIZE,	portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER								},
							{ 0,								0,					0																						},
						}
};
TaskParameters_t xRWAccessTaskParameters =
 8009ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009eca:	2240      	movs	r2, #64	; 0x40
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f006 fa88 	bl	80103e4 <memset>
 8009ed4:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <vStartMPUDemo+0xd0>)
 8009ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <vStartMPUDemo+0xd4>)
 8009eda:	647b      	str	r3, [r7, #68]	; 0x44
 8009edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ee0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ee4:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <vStartMPUDemo+0xd8>)
 8009ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <vStartMPUDemo+0xc8>)
 8009eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009eec:	2320      	movs	r3, #32
 8009eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef0:	f04f 5398 	mov.w	r3, #318767104	; 0x13000000
 8009ef4:	663b      	str	r3, [r7, #96]	; 0x60
							{ 0,				0,					0														},
						}
};


TaskParameters_t xTestTaskParameters =
 8009ef6:	463b      	mov	r3, r7
 8009ef8:	2240      	movs	r2, #64	; 0x40
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f006 fa71 	bl	80103e4 <memset>
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <vStartMPUDemo+0xdc>)
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <vStartMPUDemo+0xe0>)
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f0e:	813b      	strh	r3, [r7, #8]
 8009f10:	230a      	movs	r3, #10
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <vStartMPUDemo+0xe4>)
 8009f16:	617b      	str	r3, [r7, #20]
	//xTaskCreateRestricted( &( xROAccessTaskParameters ), NULL );

	/* Create an unprivileged task with RW access to ucSharedMemory. */
	//xTaskCreateRestricted( &( xRWAccessTaskParameters ), NULL );

    xTaskCreateRestricted( &( xTestTaskParameters ), NULL );
 8009f18:	463b      	mov	r3, r7
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe f8ac 	bl	800807a <MPU_xTaskCreateRestricted>
}
 8009f22:	bf00      	nop
 8009f24:	37c0      	adds	r7, #192	; 0xc0
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	08009c95 	.word	0x08009c95
 8009f30:	0801048c 	.word	0x0801048c
 8009f34:	20009000 	.word	0x20009000
 8009f38:	20008d20 	.word	0x20008d20
 8009f3c:	20008d40 	.word	0x20008d40
 8009f40:	08009d11 	.word	0x08009d11
 8009f44:	08010498 	.word	0x08010498
 8009f48:	20009400 	.word	0x20009400
 8009f4c:	08009d2d 	.word	0x08009d2d
 8009f50:	080104a4 	.word	0x080104a4
 8009f54:	20009800 	.word	0x20009800

08009f58 <vHandleMemoryFault>:
/*-----------------------------------------------------------*/

portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
uint32_t ulPC;
uint16_t usOffendingInstruction;

	/* Is this an expected fault? */
	if( ucROTaskFaultTracker[ 0 ] == 1 )
 8009f60:	4b18      	ldr	r3, [pc, #96]	; (8009fc4 <vHandleMemoryFault+0x6c>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d126      	bne.n	8009fb8 <vHandleMemoryFault+0x60>
	{
		/* Read program counter. */
		ulPC = pulFaultStackAddress[ 6 ];
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	60fb      	str	r3, [r7, #12]

		/* Read the offending instruction. */
		usOffendingInstruction = *( uint16_t * )ulPC;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	817b      	strh	r3, [r7, #10]
		 * - 0b11111.
		 * Otherwise, the halfword is a 16-bit instruction.
		 */

		/* Extract bits[15:11] of the offending instruction. */
		usOffendingInstruction = usOffendingInstruction & 0xF800;
 8009f76:	897b      	ldrh	r3, [r7, #10]
 8009f78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f7c:	f023 0307 	bic.w	r3, r3, #7
 8009f80:	817b      	strh	r3, [r7, #10]
		usOffendingInstruction = ( usOffendingInstruction >> 11 );
 8009f82:	897b      	ldrh	r3, [r7, #10]
 8009f84:	0adb      	lsrs	r3, r3, #11
 8009f86:	817b      	strh	r3, [r7, #10]

		/* Determine if the offending instruction is a 32-bit instruction or
		 * a 16-bit instruction. */
		if( usOffendingInstruction == 0x001F ||
 8009f88:	897b      	ldrh	r3, [r7, #10]
 8009f8a:	2b1f      	cmp	r3, #31
 8009f8c:	d005      	beq.n	8009f9a <vHandleMemoryFault+0x42>
 8009f8e:	897b      	ldrh	r3, [r7, #10]
 8009f90:	2b1e      	cmp	r3, #30
 8009f92:	d002      	beq.n	8009f9a <vHandleMemoryFault+0x42>
			usOffendingInstruction == 0x001E ||
 8009f94:	897b      	ldrh	r3, [r7, #10]
 8009f96:	2b1d      	cmp	r3, #29
 8009f98:	d103      	bne.n	8009fa2 <vHandleMemoryFault+0x4a>
			usOffendingInstruction == 0x001D )
		{
			/* Since the offending instruction is a 32-bit instruction,
			 * increment the program counter by 4 to move to the next
			 * instruction. */
			ulPC += 4;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	e002      	b.n	8009fa8 <vHandleMemoryFault+0x50>
		else
		{
			/* Since the offending instruction is a 16-bit instruction,
			 * increment the program counter by 2 to move to the next
			 * instruction. */
			ulPC += 2;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	60fb      	str	r3, [r7, #12]
		}

		/* Save the new program counter on the stack. */
		pulFaultStackAddress[ 6 ] = ulPC;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3318      	adds	r3, #24
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	601a      	str	r2, [r3, #0]

		/* Mark the fault as handled. */
		ucROTaskFaultTracker[ 0 ] = 0;
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <vHandleMemoryFault+0x6c>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]
		/* This is an unexpected fault - loop forever. */
		for( ; ; )
		{
		}
	}
}
 8009fb6:	e000      	b.n	8009fba <vHandleMemoryFault+0x62>
		for( ; ; )
 8009fb8:	e7fe      	b.n	8009fb8 <vHandleMemoryFault+0x60>
}
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20008d40 	.word	0x20008d40

08009fc8 <_putchar>:


void _putchar(char character)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	71fb      	strb	r3, [r7, #7]

LL_USART_TransmitData8(UART4, character);
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4807      	ldr	r0, [pc, #28]	; (8009ff4 <_putchar+0x2c>)
 8009fd8:	f7ff fe34 	bl	8009c44 <LL_USART_TransmitData8>
while(!LL_USART_IsActiveFlag_TXE(UART4));
 8009fdc:	bf00      	nop
 8009fde:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <_putchar+0x2c>)
 8009fe0:	f7ff fe1e 	bl	8009c20 <LL_USART_IsActiveFlag_TXE>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f9      	beq.n	8009fde <_putchar+0x16>
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40004c00 	.word	0x40004c00

08009ff8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(USARTHandle);
#endif

	if( huart == &huart2 )
 800a004:	4a0b      	ldr	r2, [pc, #44]	; (800a034 <HAL_UART_TxCpltCallback+0x3c>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4293      	cmp	r3, r2
 800a00a:	d107      	bne.n	800a01c <HAL_UART_TxCpltCallback+0x24>
	{

		vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <HAL_UART_TxCpltCallback+0x40>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f107 020c 	add.w	r2, r7, #12
 800a014:	2100      	movs	r1, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f7fa fb0e 	bl	8004638 <vTaskGenericNotifyGiveFromISR>

	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_UART_TxCpltCallback+0x32>
 800a022:	4b06      	ldr	r3, [pc, #24]	; (800a03c <HAL_UART_TxCpltCallback+0x44>)
 800a024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a028:	601a      	str	r2, [r3, #0]

#if (configUSE_TRACE_FACILITY ==1)
  vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20009e04 	.word	0x20009e04
 800a038:	20009e00 	.word	0x20009e00
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]

	if( huart == &huart2 )
 800a04c:	4a0b      	ldr	r2, [pc, #44]	; (800a07c <HAL_UART_RxCpltCallback+0x3c>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4293      	cmp	r3, r2
 800a052:	d107      	bne.n	800a064 <HAL_UART_RxCpltCallback+0x24>
	{

		vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <HAL_UART_RxCpltCallback+0x40>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f107 020c 	add.w	r2, r7, #12
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fa faea 	bl	8004638 <vTaskGenericNotifyGiveFromISR>

	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <HAL_UART_RxCpltCallback+0x32>
 800a06a:	4b06      	ldr	r3, [pc, #24]	; (800a084 <HAL_UART_RxCpltCallback+0x44>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]

}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20009e04 	.word	0x20009e04
 800a080:	20009e00 	.word	0x20009e00
 800a084:	e000ed04 	.word	0xe000ed04

0800a088 <HAL_I2C_MasterTxCpltCallback>:

}


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a090:	2300      	movs	r3, #0
 800a092:	60fb      	str	r3, [r7, #12]

		if( hi2c == &hi2c2 )
 800a094:	4a0b      	ldr	r2, [pc, #44]	; (800a0c4 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4293      	cmp	r3, r2
 800a09a:	d107      	bne.n	800a0ac <HAL_I2C_MasterTxCpltCallback+0x24>
		{

			vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
 800a09c:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <HAL_I2C_MasterTxCpltCallback+0x40>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f107 020c 	add.w	r2, r7, #12
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fa fac6 	bl	8004638 <vTaskGenericNotifyGiveFromISR>

		}

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_I2C_MasterTxCpltCallback+0x32>
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <HAL_I2C_MasterTxCpltCallback+0x44>)
 800a0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b8:	601a      	str	r2, [r3, #0]

}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20009e98 	.word	0x20009e98
 800a0c8:	20009e00 	.word	0x20009e00
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60fb      	str	r3, [r7, #12]

		if( hi2c == &hi2c2 )
 800a0dc:	4a0b      	ldr	r2, [pc, #44]	; (800a10c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d107      	bne.n	800a0f4 <HAL_I2C_MasterRxCpltCallback+0x24>
		{

			vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <HAL_I2C_MasterRxCpltCallback+0x40>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f107 020c 	add.w	r2, r7, #12
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fa faa2 	bl	8004638 <vTaskGenericNotifyGiveFromISR>

		}

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_I2C_MasterRxCpltCallback+0x32>
 800a0fa:	4b06      	ldr	r3, [pc, #24]	; (800a114 <HAL_I2C_MasterRxCpltCallback+0x44>)
 800a0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a100:	601a      	str	r2, [r3, #0]
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20009e98 	.word	0x20009e98
 800a110:	20009e00 	.word	0x20009e00
 800a114:	e000ed04 	.word	0xe000ed04

0800a118 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]

	if(xTaskToNotify)
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <HAL_ADC_ConvCpltCallback+0x44>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <HAL_ADC_ConvCpltCallback+0x2c>
	{
	   if( hadc == &hadc1 )
 800a12c:	4a0c      	ldr	r2, [pc, #48]	; (800a160 <HAL_ADC_ConvCpltCallback+0x48>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4293      	cmp	r3, r2
 800a132:	d107      	bne.n	800a144 <HAL_ADC_ConvCpltCallback+0x2c>
	   {
		  vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <HAL_ADC_ConvCpltCallback+0x44>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f107 020c 	add.w	r2, r7, #12
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fa fa7a 	bl	8004638 <vTaskGenericNotifyGiveFromISR>
	   }
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <HAL_ADC_ConvCpltCallback+0x3a>
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <HAL_ADC_ConvCpltCallback+0x4c>)
 800a14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a150:	601a      	str	r2, [r3, #0]

}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20009e00 	.word	0x20009e00
 800a160:	20009e44 	.word	0x20009e44
 800a164:	e000ed04 	.word	0xe000ed04

0800a168 <vPortResetPrivilege>:
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
BaseType_t uxRunPri = xRunningPrivileged;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	60fb      	str	r3, [r7, #12]
	if( uxRunPri == pdFALSE )
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <vPortResetPrivilege+0x16>
        portRESET_PRIVILEGE();
 800a17a:	f000 f8a3 	bl	800a2c4 <vResetPrivilege>
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <MPU_xContainerSetDWTcounter>:
    }

    #endif
    void MPU_xContainerSetDWTcounter(uint32_t val);
    void MPU_xContainerSetDWTcounter(uint32_t val)
    {
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
        	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800a190:	f7fe feb1 	bl	8008ef6 <xPortRaisePrivilege>
 800a194:	60f8      	str	r0, [r7, #12]
            DWT->CYCCNT = val;
 800a196:	4a05      	ldr	r2, [pc, #20]	; (800a1ac <MPU_xContainerSetDWTcounter+0x24>)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6053      	str	r3, [r2, #4]
        	vPortResetPrivilege( xRunningPrivileged);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff ffe3 	bl	800a168 <vPortResetPrivilege>
    }
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	e0001000 	.word	0xe0001000

0800a1b0 <MPU_xContainerGetDWTcounter>:

    uint32_t MPU_xContainerGetDWTcounter();
    uint32_t MPU_xContainerGetDWTcounter()
    {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
    	    uint32_t xReturn;
    	    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800a1b6:	f7fe fe9e 	bl	8008ef6 <xPortRaisePrivilege>
 800a1ba:	6078      	str	r0, [r7, #4]

           	xReturn = DWT->CYCCNT;
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <MPU_xContainerGetDWTcounter+0x24>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	603b      	str	r3, [r7, #0]

           	vPortResetPrivilege( xRunningPrivileged);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff ffd0 	bl	800a168 <vPortResetPrivilege>
           	return xReturn;
 800a1c8:	683b      	ldr	r3, [r7, #0]

    }
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	e0001000 	.word	0xe0001000

0800a1d8 <vPortEnterCritical>:
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800a1de:	f7fe fe8a 	bl	8008ef6 <xPortRaisePrivilege>
 800a1e2:	6078      	str	r0, [r7, #4]
        __asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	603b      	str	r3, [r7, #0]
    }
 800a1f6:	bf00      	nop
    uxCriticalNesting++;
 800a1f8:	4b05      	ldr	r3, [pc, #20]	; (800a210 <vPortEnterCritical+0x38>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	4a04      	ldr	r2, [pc, #16]	; (800a210 <vPortEnterCritical+0x38>)
 800a200:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff ffb0 	bl	800a168 <vPortResetPrivilege>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20008004 	.word	0x20008004

0800a214 <vPortExitCritical>:
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800a21a:	f7fe fe6c 	bl	8008ef6 <xPortRaisePrivilege>
 800a21e:	60f8      	str	r0, [r7, #12]
    configASSERT( uxCriticalNesting );
 800a220:	4b12      	ldr	r3, [pc, #72]	; (800a26c <vPortExitCritical+0x58>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <vPortExitCritical+0x2a>
        __asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	60bb      	str	r3, [r7, #8]
    }
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <vPortExitCritical+0x28>
    uxCriticalNesting--;
 800a23e:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <vPortExitCritical+0x58>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	4a09      	ldr	r2, [pc, #36]	; (800a26c <vPortExitCritical+0x58>)
 800a246:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800a248:	4b08      	ldr	r3, [pc, #32]	; (800a26c <vPortExitCritical+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <vPortExitCritical+0x48>
 800a250:	2300      	movs	r3, #0
 800a252:	607b      	str	r3, [r7, #4]
        __asm volatile
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f383 8811 	msr	BASEPRI, r3
    }
 800a25a:	bf00      	nop
    vPortResetPrivilege( xRunningPrivileged );
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff ff83 	bl	800a168 <vPortResetPrivilege>
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20008004 	.word	0x20008004

0800a270 <vPortSetupTimerInterrupt>:
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a274:	4b08      	ldr	r3, [pc, #32]	; (800a298 <vPortSetupTimerInterrupt+0x28>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <vPortSetupTimerInterrupt+0x2c>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a280:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <vPortSetupTimerInterrupt+0x30>)
 800a282:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800a286:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 800a288:	4b03      	ldr	r3, [pc, #12]	; (800a298 <vPortSetupTimerInterrupt+0x28>)
 800a28a:	2207      	movs	r2, #7
 800a28c:	601a      	str	r2, [r3, #0]
}
 800a28e:	bf00      	nop
 800a290:	46bd      	mov	sp, r7
 800a292:	bc80      	pop	{r7}
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	e000e010 	.word	0xe000e010
 800a29c:	e000e018 	.word	0xe000e018
 800a2a0:	e000e014 	.word	0xe000e014
	...

0800a2b0 <xIsPrivileged>:
    __asm volatile
 800a2b0:	f3ef 8014 	mrs	r0, CONTROL
 800a2b4:	f010 0f01 	tst.w	r0, #1
 800a2b8:	bf14      	ite	ne
 800a2ba:	2000      	movne	r0, #0
 800a2bc:	2001      	moveq	r0, #1
 800a2be:	4770      	bx	lr
}
 800a2c0:	bf00      	nop
 800a2c2:	4618      	mov	r0, r3

0800a2c4 <vResetPrivilege>:
		__asm volatile
 800a2c4:	f3ef 8014 	mrs	r0, CONTROL
 800a2c8:	f040 0001 	orr.w	r0, r0, #1
 800a2cc:	f380 8814 	msr	CONTROL, r0
 800a2d0:	4770      	bx	lr
}
 800a2d2:	bf00      	nop

0800a2d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800a2da:	f3ef 8305 	mrs	r3, IPSR
 800a2de:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b0f      	cmp	r3, #15
 800a2e4:	d914      	bls.n	800a310 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2e6:	4a16      	ldr	r2, [pc, #88]	; (800a340 <vPortValidateInterruptPriority+0x6c>)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2f0:	4b14      	ldr	r3, [pc, #80]	; (800a344 <vPortValidateInterruptPriority+0x70>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	7afa      	ldrb	r2, [r7, #11]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d20a      	bcs.n	800a310 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	607b      	str	r3, [r7, #4]
    }
 800a30c:	bf00      	nop
 800a30e:	e7fe      	b.n	800a30e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a310:	4b0d      	ldr	r3, [pc, #52]	; (800a348 <vPortValidateInterruptPriority+0x74>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <vPortValidateInterruptPriority+0x78>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d90a      	bls.n	800a336 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	603b      	str	r3, [r7, #0]
    }
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <vPortValidateInterruptPriority+0x60>
    }
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	e000e3f0 	.word	0xe000e3f0
 800a344:	20009c08 	.word	0x20009c08
 800a348:	e000ed0c 	.word	0xe000ed0c
 800a34c:	20009c0c 	.word	0x20009c0c

0800a350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a354:	4b04      	ldr	r3, [pc, #16]	; (800a368 <__NVIC_GetPriorityGrouping+0x18>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	f003 0307 	and.w	r3, r3, #7
}
 800a35e:	4618      	mov	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	e000ed00 	.word	0xe000ed00

0800a36c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	db0b      	blt.n	800a396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	f003 021f 	and.w	r2, r3, #31
 800a384:	4906      	ldr	r1, [pc, #24]	; (800a3a0 <__NVIC_EnableIRQ+0x34>)
 800a386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	2001      	movs	r0, #1
 800a38e:	fa00 f202 	lsl.w	r2, r0, r2
 800a392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr
 800a3a0:	e000e100 	.word	0xe000e100

0800a3a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	6039      	str	r1, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	db0a      	blt.n	800a3ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	490c      	ldr	r1, [pc, #48]	; (800a3f0 <__NVIC_SetPriority+0x4c>)
 800a3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c2:	0112      	lsls	r2, r2, #4
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a3cc:	e00a      	b.n	800a3e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	4908      	ldr	r1, [pc, #32]	; (800a3f4 <__NVIC_SetPriority+0x50>)
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	3b04      	subs	r3, #4
 800a3dc:	0112      	lsls	r2, r2, #4
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	761a      	strb	r2, [r3, #24]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	e000e100 	.word	0xe000e100
 800a3f4:	e000ed00 	.word	0xe000ed00

0800a3f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b089      	sub	sp, #36	; 0x24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f1c3 0307 	rsb	r3, r3, #7
 800a412:	2b04      	cmp	r3, #4
 800a414:	bf28      	it	cs
 800a416:	2304      	movcs	r3, #4
 800a418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	3304      	adds	r3, #4
 800a41e:	2b06      	cmp	r3, #6
 800a420:	d902      	bls.n	800a428 <NVIC_EncodePriority+0x30>
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	3b03      	subs	r3, #3
 800a426:	e000      	b.n	800a42a <NVIC_EncodePriority+0x32>
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a42c:	f04f 32ff 	mov.w	r2, #4294967295
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	fa02 f303 	lsl.w	r3, r2, r3
 800a436:	43da      	mvns	r2, r3
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	401a      	ands	r2, r3
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a440:	f04f 31ff 	mov.w	r1, #4294967295
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	fa01 f303 	lsl.w	r3, r1, r3
 800a44a:	43d9      	mvns	r1, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a450:	4313      	orrs	r3, r2
         );
}
 800a452:	4618      	mov	r0, r3
 800a454:	3724      	adds	r7, #36	; 0x24
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800a464:	4b08      	ldr	r3, [pc, #32]	; (800a488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a466:	69da      	ldr	r2, [r3, #28]
 800a468:	4907      	ldr	r1, [pc, #28]	; (800a488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800a470:	4b05      	ldr	r3, [pc, #20]	; (800a488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a472:	69da      	ldr	r2, [r3, #28]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4013      	ands	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a47a:	68fb      	ldr	r3, [r7, #12]
}
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	bc80      	pop	{r7}
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40023800 	.word	0x40023800

0800a48c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a498:	4907      	ldr	r1, [pc, #28]	; (800a4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a4a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	40023800 	.word	0x40023800

0800a4bc <LL_USART_Enable>:
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	60da      	str	r2, [r3, #12]
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <LL_USART_SetTransferDirection>:
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f023 020c 	bic.w	r2, r3, #12
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	60da      	str	r2, [r3, #12]
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr

0800a4fe <LL_USART_ConfigCharacter>:
{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
 800a50a:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f423 52b0 	bic.w	r2, r3, #5632	; 0x1600
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	430b      	orrs	r3, r1
 800a51a:	431a      	orrs	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	431a      	orrs	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	611a      	str	r2, [r3, #16]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr
	...

0800a53c <LL_USART_SetBaudRate>:
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a550:	d152      	bne.n	800a5f8 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009a      	lsls	r2, r3, #2
 800a55c:	441a      	add	r2, r3
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	fbb2 f3f3 	udiv	r3, r2, r3
 800a566:	4a4f      	ldr	r2, [pc, #316]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a568:	fba2 2303 	umull	r2, r3, r2, r3
 800a56c:	095b      	lsrs	r3, r3, #5
 800a56e:	b29b      	uxth	r3, r3
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	b299      	uxth	r1, r3
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009a      	lsls	r2, r3, #2
 800a57e:	441a      	add	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	fbb2 f2f3 	udiv	r2, r2, r3
 800a588:	4b46      	ldr	r3, [pc, #280]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a58a:	fba3 0302 	umull	r0, r3, r3, r2
 800a58e:	095b      	lsrs	r3, r3, #5
 800a590:	2064      	movs	r0, #100	; 0x64
 800a592:	fb00 f303 	mul.w	r3, r0, r3
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	00db      	lsls	r3, r3, #3
 800a59a:	3332      	adds	r3, #50	; 0x32
 800a59c:	4a41      	ldr	r2, [pc, #260]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a59e:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a2:	095b      	lsrs	r3, r3, #5
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	440b      	add	r3, r1
 800a5b2:	b299      	uxth	r1, r3
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009a      	lsls	r2, r3, #2
 800a5be:	441a      	add	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5c8:	4b36      	ldr	r3, [pc, #216]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a5ca:	fba3 0302 	umull	r0, r3, r3, r2
 800a5ce:	095b      	lsrs	r3, r3, #5
 800a5d0:	2064      	movs	r0, #100	; 0x64
 800a5d2:	fb00 f303 	mul.w	r3, r0, r3
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	00db      	lsls	r3, r3, #3
 800a5da:	3332      	adds	r3, #50	; 0x32
 800a5dc:	4a31      	ldr	r2, [pc, #196]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a5de:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e2:	095b      	lsrs	r3, r3, #5
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	440b      	add	r3, r1
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	609a      	str	r2, [r3, #8]
}
 800a5f6:	e04f      	b.n	800a698 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009a      	lsls	r2, r3, #2
 800a602:	441a      	add	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60c:	4a25      	ldr	r2, [pc, #148]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a60e:	fba2 2303 	umull	r2, r3, r2, r3
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	b29b      	uxth	r3, r3
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	b299      	uxth	r1, r3
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009a      	lsls	r2, r3, #2
 800a624:	441a      	add	r2, r3
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a62e:	4b1d      	ldr	r3, [pc, #116]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a630:	fba3 0302 	umull	r0, r3, r3, r2
 800a634:	095b      	lsrs	r3, r3, #5
 800a636:	2064      	movs	r0, #100	; 0x64
 800a638:	fb00 f303 	mul.w	r3, r0, r3
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	3332      	adds	r3, #50	; 0x32
 800a642:	4a18      	ldr	r2, [pc, #96]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a644:	fba2 2303 	umull	r2, r3, r2, r3
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a650:	b29b      	uxth	r3, r3
 800a652:	440b      	add	r3, r1
 800a654:	b299      	uxth	r1, r3
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009a      	lsls	r2, r3, #2
 800a660:	441a      	add	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	fbb2 f2f3 	udiv	r2, r2, r3
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a66c:	fba3 0302 	umull	r0, r3, r3, r2
 800a670:	095b      	lsrs	r3, r3, #5
 800a672:	2064      	movs	r0, #100	; 0x64
 800a674:	fb00 f303 	mul.w	r3, r0, r3
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	3332      	adds	r3, #50	; 0x32
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <LL_USART_SetBaudRate+0x168>)
 800a680:	fba2 2303 	umull	r2, r3, r2, r3
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	b29b      	uxth	r3, r3
 800a688:	f003 030f 	and.w	r3, r3, #15
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	440b      	add	r3, r1
 800a690:	b29b      	uxth	r3, r3
 800a692:	461a      	mov	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	609a      	str	r2, [r3, #8]
}
 800a698:	bf00      	nop
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	51eb851f 	.word	0x51eb851f

0800a6a8 <LL_USART_DisableIT_IDLE>:
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f023 0210 	bic.w	r2, r3, #16
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60da      	str	r2, [r3, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bc80      	pop	{r7}
 800a6c4:	4770      	bx	lr

0800a6c6 <LL_USART_DisableIT_TC>:
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60da      	str	r2, [r3, #12]
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr

0800a6e4 <LL_USART_DisableIT_TXE>:
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60da      	str	r2, [r3, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <LL_USART_DisableIT_ERROR>:
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f023 0201 	bic.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	615a      	str	r2, [r3, #20]
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bc80      	pop	{r7}
 800a71e:	4770      	bx	lr

0800a720 <LL_GPIO_SetAFPin_8_15>:
{
 800a720:	b480      	push	{r7}
 800a722:	b089      	sub	sp, #36	; 0x24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	0a1b      	lsrs	r3, r3, #8
 800a734:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	fa93 f3a3 	rbit	r3, r3
 800a73c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	fab3 f383 	clz	r3, r3
 800a744:	b2db      	uxtb	r3, r3
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	210f      	movs	r1, #15
 800a74a:	fa01 f303 	lsl.w	r3, r1, r3
 800a74e:	43db      	mvns	r3, r3
 800a750:	401a      	ands	r2, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	0a1b      	lsrs	r3, r3, #8
 800a756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	fa93 f3a3 	rbit	r3, r3
 800a75e:	61bb      	str	r3, [r7, #24]
  return result;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	fab3 f383 	clz	r3, r3
 800a766:	b2db      	uxtb	r3, r3
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	fa01 f303 	lsl.w	r3, r1, r3
 800a770:	431a      	orrs	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a776:	bf00      	nop
 800a778:	3724      	adds	r7, #36	; 0x24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a784:	f000 fac8 	bl	800ad18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a788:	f000 f814 	bl	800a7b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE BEGIN Init */
  DWT->CYCCNT = 0;
 800a78c:	4b08      	ldr	r3, [pc, #32]	; (800a7b0 <main+0x30>)
 800a78e:	2200      	movs	r2, #0
 800a790:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800a792:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <main+0x30>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a06      	ldr	r2, [pc, #24]	; (800a7b0 <main+0x30>)
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	6013      	str	r3, [r2, #0]

#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a79e:	f000 f893 	bl	800a8c8 <MX_GPIO_Init>

#if USARTBENCHMARK > 0
  MX_USART2_UART_Init();
 800a7a2:	f000 f855 	bl	800a850 <MX_USART2_UART_Init>
#endif



#if ( USARTBENCHMARK > 0  ||  SPIBENCHMARK > 0 || I2CBENCHMARK > 0  ||  ADCBENCHMARK > 0 )
  MX_UART4_UART_Init_ll();
 800a7a6:	f000 f909 	bl	800a9bc <MX_UART4_UART_Init_ll>
#endif


  /* USER CODE BEGIN 2 */
  /* Call our entry point. */
  app_main();
 800a7aa:	f7ff f9f5 	bl	8009b98 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a7ae:	e7fe      	b.n	800a7ae <main+0x2e>
 800a7b0:	e0001000 	.word	0xe0001000

0800a7b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b092      	sub	sp, #72	; 0x48
 800a7b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a7ba:	f107 0314 	add.w	r3, r7, #20
 800a7be:	2234      	movs	r2, #52	; 0x34
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f005 fe0e 	bl	80103e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7c8:	463b      	mov	r3, r7
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	605a      	str	r2, [r3, #4]
 800a7d0:	609a      	str	r2, [r3, #8]
 800a7d2:	60da      	str	r2, [r3, #12]
 800a7d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7d6:	4b1d      	ldr	r3, [pc, #116]	; (800a84c <SystemClock_Config+0x98>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a7de:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <SystemClock_Config+0x98>)
 800a7e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7e4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a7ee:	2310      	movs	r3, #16
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a7fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800a800:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a804:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a806:	f107 0314 	add.w	r3, r7, #20
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 fb26 	bl	800ce5c <HAL_RCC_OscConfig>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <SystemClock_Config+0x66>
  {
    Error_Handler();
 800a816:	f000 f92b 	bl	800aa70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a81a:	230f      	movs	r3, #15
 800a81c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a81e:	2303      	movs	r3, #3
 800a820:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a822:	2300      	movs	r3, #0
 800a824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a82a:	2300      	movs	r3, #0
 800a82c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a82e:	463b      	mov	r3, r7
 800a830:	2101      	movs	r1, #1
 800a832:	4618      	mov	r0, r3
 800a834:	f002 fe42 	bl	800d4bc <HAL_RCC_ClockConfig>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a83e:	f000 f917 	bl	800aa70 <Error_Handler>
  }
}
 800a842:	bf00      	nop
 800a844:	3748      	adds	r7, #72	; 0x48
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	40007000 	.word	0x40007000

0800a850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a854:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a856:	4a1a      	ldr	r2, [pc, #104]	; (800a8c0 <MX_USART2_UART_Init+0x70>)
 800a858:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 115200;
 800a85a:	4b18      	ldr	r3, [pc, #96]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a85c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a860:	609a      	str	r2, [r3, #8]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a864:	2200      	movs	r2, #0
 800a866:	60da      	str	r2, [r3, #12]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a868:	4b14      	ldr	r3, [pc, #80]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	611a      	str	r2, [r3, #16]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a870:	2200      	movs	r2, #0
 800a872:	615a      	str	r2, [r3, #20]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a874:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a876:	220c      	movs	r2, #12
 800a878:	619a      	str	r2, [r3, #24]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a87a:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	61da      	str	r2, [r3, #28]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a880:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <MX_USART2_UART_Init+0x6c>)
 800a882:	2200      	movs	r2, #0
 800a884:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <MX_USART2_UART_Init+0x74>)
 800a888:	4618      	mov	r0, r3
 800a88a:	f003 fb4d 	bl	800df28 <HAL_UART_Init>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800a894:	f000 f8ec 	bl	800aa70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
#if USARTBENCHMARK == 2
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 6, 0));
 800a898:	f7ff fd5a 	bl	800a350 <__NVIC_GetPriorityGrouping>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2106      	movs	r1, #6
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff fda8 	bl	800a3f8 <NVIC_EncodePriority>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	2026      	movs	r0, #38	; 0x26
 800a8ae:	f7ff fd79 	bl	800a3a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800a8b2:	2026      	movs	r0, #38	; 0x26
 800a8b4:	f7ff fd5a 	bl	800a36c <__NVIC_EnableIRQ>
#endif
  /* USER CODE END USART2_Init 2 */

}
 800a8b8:	bf00      	nop
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20009e00 	.word	0x20009e00
 800a8c0:	40004400 	.word	0x40004400
 800a8c4:	20009e04 	.word	0x20009e04

0800a8c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	; 0x28
 800a8cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8ce:	f107 0314 	add.w	r3, r7, #20
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	605a      	str	r2, [r3, #4]
 800a8d8:	609a      	str	r2, [r3, #8]
 800a8da:	60da      	str	r2, [r3, #12]
 800a8dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8de:	4b2a      	ldr	r3, [pc, #168]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	4a29      	ldr	r2, [pc, #164]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a8e4:	f043 0304 	orr.w	r3, r3, #4
 800a8e8:	61d3      	str	r3, [r2, #28]
 800a8ea:	4b27      	ldr	r3, [pc, #156]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8f6:	4b24      	ldr	r3, [pc, #144]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	4a23      	ldr	r2, [pc, #140]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a8fc:	f043 0320 	orr.w	r3, r3, #32
 800a900:	61d3      	str	r3, [r2, #28]
 800a902:	4b21      	ldr	r3, [pc, #132]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a90e:	4b1e      	ldr	r3, [pc, #120]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	4a1d      	ldr	r2, [pc, #116]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	61d3      	str	r3, [r2, #28]
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a926:	4b18      	ldr	r3, [pc, #96]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	61d3      	str	r3, [r2, #28]
 800a932:	4b15      	ldr	r3, [pc, #84]	; (800a988 <MX_GPIO_Init+0xc0>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a93e:	2200      	movs	r2, #0
 800a940:	2120      	movs	r1, #32
 800a942:	4812      	ldr	r0, [pc, #72]	; (800a98c <MX_GPIO_Init+0xc4>)
 800a944:	f000 fdfc 	bl	800b540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a94c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <MX_GPIO_Init+0xc8>)
 800a950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a952:	2300      	movs	r3, #0
 800a954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a956:	f107 0314 	add.w	r3, r7, #20
 800a95a:	4619      	mov	r1, r3
 800a95c:	480d      	ldr	r0, [pc, #52]	; (800a994 <MX_GPIO_Init+0xcc>)
 800a95e:	f000 fc5f 	bl	800b220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800a962:	2320      	movs	r3, #32
 800a964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a966:	2301      	movs	r3, #1
 800a968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a972:	f107 0314 	add.w	r3, r7, #20
 800a976:	4619      	mov	r1, r3
 800a978:	4804      	ldr	r0, [pc, #16]	; (800a98c <MX_GPIO_Init+0xc4>)
 800a97a:	f000 fc51 	bl	800b220 <HAL_GPIO_Init>

}
 800a97e:	bf00      	nop
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40023800 	.word	0x40023800
 800a98c:	40020000 	.word	0x40020000
 800a990:	10110000 	.word	0x10110000
 800a994:	40020800 	.word	0x40020800

0800a998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a04      	ldr	r2, [pc, #16]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d101      	bne.n	800a9ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a9aa:	f000 f9d5 	bl	800ad58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40001000 	.word	0x40001000

0800a9bc <MX_UART4_UART_Init_ll>:



static void MX_UART4_UART_Init_ll(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
	//LL_USART_InitTypeDef USART_InitStruct;
	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800a9c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a9c6:	f7ff fd61 	bl	800a48c <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a9ca:	2004      	movs	r0, #4
 800a9cc:	f7ff fd46 	bl	800a45c <LL_AHB1_GRP1_EnableClock>
     * USART2 GPIO Configuration
     *
     * PC10   ------> UART4_TX
     * PC11   ------> UART4_RX
     */
    GPIO_InitStruct.Pin = UART4_TX_Pin;
 800a9d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d4:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]

    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	481f      	ldr	r0, [pc, #124]	; (800aa64 <MX_UART4_UART_Init_ll+0xa8>)
 800a9e8:	f003 ffe9 	bl	800e9be <LL_GPIO_Init>
    LL_GPIO_SetAFPin_8_15(GPIOC, UART4_TX_Pin, UART4_TX_AF); //set AF to UART4_TX
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9f2:	481c      	ldr	r0, [pc, #112]	; (800aa64 <MX_UART4_UART_Init_ll+0xa8>)
 800a9f4:	f7ff fe94 	bl	800a720 <LL_GPIO_SetAFPin_8_15>

    GPIO_InitStruct.Pin = UART4_RX_Pin;
 800a9f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9fc:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	607b      	str	r3, [r7, #4]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa02:	463b      	mov	r3, r7
 800aa04:	4619      	mov	r1, r3
 800aa06:	4817      	ldr	r0, [pc, #92]	; (800aa64 <MX_UART4_UART_Init_ll+0xa8>)
 800aa08:	f003 ffd9 	bl	800e9be <LL_GPIO_Init>
    LL_GPIO_SetAFPin_8_15(GPIOC, UART4_RX_Pin, UART4_RX_AF); //set AF to UART4_RX
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa12:	4814      	ldr	r0, [pc, #80]	; (800aa64 <MX_UART4_UART_Init_ll+0xa8>)
 800aa14:	f7ff fe84 	bl	800a720 <LL_GPIO_SetAFPin_8_15>
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
    LL_USART_Init(UART4, &USART_InitStruct);
    */

    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX_RX);
 800aa18:	210c      	movs	r1, #12
 800aa1a:	4813      	ldr	r0, [pc, #76]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa1c:	f7ff fd5d 	bl	800a4da <LL_USART_SetTransferDirection>
    LL_USART_ConfigCharacter(UART4, LL_USART_DATAWIDTH_8B, LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 800aa20:	2300      	movs	r3, #0
 800aa22:	2200      	movs	r2, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	4810      	ldr	r0, [pc, #64]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa28:	f7ff fd69 	bl	800a4fe <LL_USART_ConfigCharacter>
    LL_USART_SetBaudRate(UART4, SystemCoreClock, LL_USART_OVERSAMPLING_16, 115200);
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <MX_UART4_UART_Init_ll+0xb0>)
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800aa34:	2200      	movs	r2, #0
 800aa36:	480c      	ldr	r0, [pc, #48]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa38:	f7ff fd80 	bl	800a53c <LL_USART_SetBaudRate>
    //LL_USART_ConfigAsyncMode(UART4);
    //NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
    //NVIC_EnableIRQ(UART4_IRQn);
    LL_USART_DisableIT_IDLE(UART4);
 800aa3c:	480a      	ldr	r0, [pc, #40]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa3e:	f7ff fe33 	bl	800a6a8 <LL_USART_DisableIT_IDLE>
    LL_USART_DisableIT_TXE(UART4);
 800aa42:	4809      	ldr	r0, [pc, #36]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa44:	f7ff fe4e 	bl	800a6e4 <LL_USART_DisableIT_TXE>
    LL_USART_DisableIT_TC(UART4);
 800aa48:	4807      	ldr	r0, [pc, #28]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa4a:	f7ff fe3c 	bl	800a6c6 <LL_USART_DisableIT_TC>
    LL_USART_DisableIT_ERROR(UART4);
 800aa4e:	4806      	ldr	r0, [pc, #24]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa50:	f7ff fe57 	bl	800a702 <LL_USART_DisableIT_ERROR>

    /* Enable USART*/
    LL_USART_Enable(UART4);
 800aa54:	4804      	ldr	r0, [pc, #16]	; (800aa68 <MX_UART4_UART_Init_ll+0xac>)
 800aa56:	f7ff fd31 	bl	800a4bc <LL_USART_Enable>

}
 800aa5a:	bf00      	nop
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40020800 	.word	0x40020800
 800aa68:	40004c00 	.word	0x40004c00
 800aa6c:	20008008 	.word	0x20008008

0800aa70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800aa74:	bf00      	nop
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <HAL_MspInit+0x58>)
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	4a13      	ldr	r2, [pc, #76]	; (800aad4 <HAL_MspInit+0x58>)
 800aa88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa8c:	6253      	str	r3, [r2, #36]	; 0x24
 800aa8e:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <HAL_MspInit+0x58>)
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa9a:	4b0e      	ldr	r3, [pc, #56]	; (800aad4 <HAL_MspInit+0x58>)
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	4a0d      	ldr	r2, [pc, #52]	; (800aad4 <HAL_MspInit+0x58>)
 800aaa0:	f043 0301 	orr.w	r3, r3, #1
 800aaa4:	6213      	str	r3, [r2, #32]
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <HAL_MspInit+0x58>)
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	60bb      	str	r3, [r7, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aab2:	4b08      	ldr	r3, [pc, #32]	; (800aad4 <HAL_MspInit+0x58>)
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	4a07      	ldr	r2, [pc, #28]	; (800aad4 <HAL_MspInit+0x58>)
 800aab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aabc:	6253      	str	r3, [r2, #36]	; 0x24
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <HAL_MspInit+0x58>)
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr
 800aad4:	40023800 	.word	0x40023800

0800aad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08a      	sub	sp, #40	; 0x28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aae0:	f107 0314 	add.w	r3, r7, #20
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	609a      	str	r2, [r3, #8]
 800aaec:	60da      	str	r2, [r3, #12]
 800aaee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a17      	ldr	r2, [pc, #92]	; (800ab54 <HAL_UART_MspInit+0x7c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d127      	bne.n	800ab4a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aafa:	4b17      	ldr	r3, [pc, #92]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	4a16      	ldr	r2, [pc, #88]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800ab00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab04:	6253      	str	r3, [r2, #36]	; 0x24
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab12:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	4a10      	ldr	r2, [pc, #64]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800ab18:	f043 0301 	orr.w	r3, r3, #1
 800ab1c:	61d3      	str	r3, [r2, #28]
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <HAL_UART_MspInit+0x80>)
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ab2a:	230c      	movs	r3, #12
 800ab2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab32:	2301      	movs	r3, #1
 800ab34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab36:	2303      	movs	r3, #3
 800ab38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ab3a:	2307      	movs	r3, #7
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab3e:	f107 0314 	add.w	r3, r7, #20
 800ab42:	4619      	mov	r1, r3
 800ab44:	4805      	ldr	r0, [pc, #20]	; (800ab5c <HAL_UART_MspInit+0x84>)
 800ab46:	f000 fb6b 	bl	800b220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ab4a:	bf00      	nop
 800ab4c:	3728      	adds	r7, #40	; 0x28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	40004400 	.word	0x40004400
 800ab58:	40023800 	.word	0x40023800
 800ab5c:	40020000 	.word	0x40020000

0800ab60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08c      	sub	sp, #48	; 0x30
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 800ab70:	2200      	movs	r2, #0
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	202b      	movs	r0, #43	; 0x2b
 800ab76:	f000 fada 	bl	800b12e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 800ab7a:	202b      	movs	r0, #43	; 0x2b
 800ab7c:	f000 faf3 	bl	800b166 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ab80:	4b1e      	ldr	r3, [pc, #120]	; (800abfc <HAL_InitTick+0x9c>)
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	4a1d      	ldr	r2, [pc, #116]	; (800abfc <HAL_InitTick+0x9c>)
 800ab86:	f043 0310 	orr.w	r3, r3, #16
 800ab8a:	6253      	str	r3, [r2, #36]	; 0x24
 800ab8c:	4b1b      	ldr	r3, [pc, #108]	; (800abfc <HAL_InitTick+0x9c>)
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab90:	f003 0310 	and.w	r3, r3, #16
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ab98:	f107 0210 	add.w	r2, r7, #16
 800ab9c:	f107 0314 	add.w	r3, r7, #20
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f002 fe4c 	bl	800d840 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800aba8:	f002 fe22 	bl	800d7f0 <HAL_RCC_GetPCLK1Freq>
 800abac:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	4a13      	ldr	r2, [pc, #76]	; (800ac00 <HAL_InitTick+0xa0>)
 800abb2:	fba2 2303 	umull	r2, r3, r2, r3
 800abb6:	0c9b      	lsrs	r3, r3, #18
 800abb8:	3b01      	subs	r3, #1
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800abbc:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <HAL_InitTick+0xa4>)
 800abbe:	4a12      	ldr	r2, [pc, #72]	; (800ac08 <HAL_InitTick+0xa8>)
 800abc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800abc2:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <HAL_InitTick+0xa4>)
 800abc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800abc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800abca:	4a0e      	ldr	r2, [pc, #56]	; (800ac04 <HAL_InitTick+0xa4>)
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800abd0:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <HAL_InitTick+0xa4>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <HAL_InitTick+0xa4>)
 800abd8:	2200      	movs	r2, #0
 800abda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800abdc:	4809      	ldr	r0, [pc, #36]	; (800ac04 <HAL_InitTick+0xa4>)
 800abde:	f002 ffdc 	bl	800db9a <HAL_TIM_Base_Init>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800abe8:	4806      	ldr	r0, [pc, #24]	; (800ac04 <HAL_InitTick+0xa4>)
 800abea:	f003 f80a 	bl	800dc02 <HAL_TIM_Base_Start_IT>
 800abee:	4603      	mov	r3, r0
 800abf0:	e000      	b.n	800abf4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3730      	adds	r7, #48	; 0x30
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	40023800 	.word	0x40023800
 800ac00:	431bde83 	.word	0x431bde83
 800ac04:	2000a000 	.word	0x2000a000
 800ac08:	40001000 	.word	0x40001000

0800ac0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ac10:	bf00      	nop
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bc80      	pop	{r7}
 800ac16:	4770      	bx	lr

0800ac18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac1c:	e7fe      	b.n	800ac1c <HardFault_Handler+0x4>

0800ac1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac22:	e7fe      	b.n	800ac22 <BusFault_Handler+0x4>

0800ac24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac24:	b480      	push	{r7}
 800ac26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac28:	e7fe      	b.n	800ac28 <UsageFault_Handler+0x4>

0800ac2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac2e:	bf00      	nop
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bc80      	pop	{r7}
 800ac34:	4770      	bx	lr
	...

0800ac38 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ac3c:	4802      	ldr	r0, [pc, #8]	; (800ac48 <TIM6_IRQHandler+0x10>)
 800ac3e:	f003 f803 	bl	800dc48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800ac42:	bf00      	nop
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	2000a000 	.word	0x2000a000

0800ac4c <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */

void USART2_IRQHandler(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(USARTHandle);
#endif
	 HAL_UART_IRQHandler(&huart2);
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <USART2_IRQHandler+0x10>)
 800ac52:	4618      	mov	r0, r3
 800ac54:	f003 fa0a 	bl	800e06c <HAL_UART_IRQHandler>

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800ac58:	bf00      	nop
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20009e04 	.word	0x20009e04

0800ac60 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(SPIHandle);
#endif
	 HAL_SPI_IRQHandler(&hspi1);
 800ac64:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <SPI1_IRQHandler+0x10>)
 800ac66:	4618      	mov	r0, r3
 800ac68:	f002 fe7a 	bl	800d960 <HAL_SPI_IRQHandler>

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800ac6c:	bf00      	nop
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20009eec 	.word	0x20009eec

0800ac74 <I2C2_EV_IRQHandler>:



void I2C2_EV_IRQHandler(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(I2CHandle);
#endif
	HAL_I2C_EV_IRQHandler(&hi2c2);
 800ac78:	4b02      	ldr	r3, [pc, #8]	; (800ac84 <I2C2_EV_IRQHandler+0x10>)
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fc78 	bl	800b570 <HAL_I2C_EV_IRQHandler>

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800ac80:	bf00      	nop
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20009e98 	.word	0x20009e98

0800ac88 <I2C2_ER_IRQHandler>:



void I2C2_ER_IRQHandler(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(I2CHandle);
#endif
	HAL_I2C_ER_IRQHandler(&hi2c2);
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <I2C2_ER_IRQHandler+0x10>)
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 fddb 	bl	800b84a <HAL_I2C_ER_IRQHandler>

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800ac94:	bf00      	nop
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	20009e98 	.word	0x20009e98

0800ac9c <ADC1_IRQHandler>:




void ADC1_IRQHandler(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(ADCHandle);
#endif
	 HAL_ADC_IRQHandler(&hadc1);
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <ADC1_IRQHandler+0x10>)
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f872 	bl	800ad8c <HAL_ADC_IRQHandler>

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800aca8:	bf00      	nop
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20009e44 	.word	0x20009e44

0800acb0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800acb4:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <SystemInit+0x5c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a14      	ldr	r2, [pc, #80]	; (800ad0c <SystemInit+0x5c>)
 800acba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acbe:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800acc0:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <SystemInit+0x5c>)
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	4911      	ldr	r1, [pc, #68]	; (800ad0c <SystemInit+0x5c>)
 800acc6:	4b12      	ldr	r3, [pc, #72]	; (800ad10 <SystemInit+0x60>)
 800acc8:	4013      	ands	r3, r2
 800acca:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800accc:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <SystemInit+0x5c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0e      	ldr	r2, [pc, #56]	; (800ad0c <SystemInit+0x5c>)
 800acd2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800acd6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800acda:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800acdc:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <SystemInit+0x5c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <SystemInit+0x5c>)
 800ace2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ace6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <SystemInit+0x5c>)
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	4a07      	ldr	r2, [pc, #28]	; (800ad0c <SystemInit+0x5c>)
 800acee:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800acf2:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <SystemInit+0x5c>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800acfa:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <SystemInit+0x64>)
 800acfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad00:	609a      	str	r2, [r3, #8]
#endif
}
 800ad02:	bf00      	nop
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40023800 	.word	0x40023800
 800ad10:	88ffc00c 	.word	0x88ffc00c
 800ad14:	e000ed00 	.word	0xe000ed00

0800ad18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
    uwTickPrio = (1UL << __NVIC_PRIO_BITS); /* Invalid priority */
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <HAL_Init+0x3c>)
 800ad20:	2210      	movs	r2, #16
 800ad22:	605a      	str	r2, [r3, #4]
	uwTickFreq = HAL_TICK_FREQ_DEFAULT;
 800ad24:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <HAL_Init+0x3c>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	609a      	str	r2, [r3, #8]

  HAL_StatusTypeDef  status = HAL_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ad2e:	2003      	movs	r0, #3
 800ad30:	f000 f9f2 	bl	800b118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7ff ff13 	bl	800ab60 <HAL_InitTick>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	71fb      	strb	r3, [r7, #7]
 800ad44:	e001      	b.n	800ad4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ad46:	f7ff fe99 	bl	800aa7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	2000a040 	.word	0x2000a040

0800ad58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <HAL_IncTick+0x1c>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <HAL_IncTick+0x1c>)
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	4903      	ldr	r1, [pc, #12]	; (800ad74 <HAL_IncTick+0x1c>)
 800ad66:	4413      	add	r3, r2
 800ad68:	600b      	str	r3, [r1, #0]
}
 800ad6a:	bf00      	nop
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bc80      	pop	{r7}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	2000a040 	.word	0x2000a040

0800ad78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
  return uwTick;
 800ad7c:	4b02      	ldr	r3, [pc, #8]	; (800ad88 <HAL_GetTick+0x10>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	4770      	bx	lr
 800ad88:	2000a040 	.word	0x2000a040

0800ad8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d14e      	bne.n	800ae40 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0302 	and.w	r3, r3, #2
 800adac:	2b02      	cmp	r3, #2
 800adae:	d147      	bne.n	800ae40 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d105      	bne.n	800adc8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d12c      	bne.n	800ae30 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800addc:	2b00      	cmp	r3, #0
 800adde:	d127      	bne.n	800ae30 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800adea:	2b00      	cmp	r3, #0
 800adec:	d006      	beq.n	800adfc <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d119      	bne.n	800ae30 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0220 	bic.w	r2, r2, #32
 800ae0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae28:	f043 0201 	orr.w	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff f971 	bl	800a118 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f06f 0212 	mvn.w	r2, #18
 800ae3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b80      	cmp	r3, #128	; 0x80
 800ae4c:	d15c      	bne.n	800af08 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d155      	bne.n	800af08 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d105      	bne.n	800ae74 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d13a      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d006      	beq.n	800ae9e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d12c      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d125      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d11e      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d119      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aed2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d105      	bne.n	800aef8 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef0:	f043 0201 	orr.w	r2, r3, #1
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f859 	bl	800afb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f06f 020c 	mvn.w	r2, #12
 800af06:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af12:	2b40      	cmp	r3, #64	; 0x40
 800af14:	d114      	bne.n	800af40 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b01      	cmp	r3, #1
 800af22:	d10d      	bne.n	800af40 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f82b 	bl	800af8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f06f 0201 	mvn.w	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af4e:	d119      	bne.n	800af84 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0320 	and.w	r3, r3, #32
 800af5a:	2b20      	cmp	r3, #32
 800af5c:	d112      	bne.n	800af84 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af62:	f043 0202 	orr.w	r2, r3, #2
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f06f 0220 	mvn.w	r2, #32
 800af72:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f812 	bl	800af9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f06f 0220 	mvn.w	r2, #32
 800af82:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	bc80      	pop	{r7}
 800af9c:	4770      	bx	lr

0800af9e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr

0800afb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bc80      	pop	{r7}
 800afc0:	4770      	bx	lr
	...

0800afc4 <__NVIC_SetPriorityGrouping>:
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800afd4:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <__NVIC_SetPriorityGrouping+0x44>)
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800afe0:	4013      	ands	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800afec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aff6:	4a04      	ldr	r2, [pc, #16]	; (800b008 <__NVIC_SetPriorityGrouping+0x44>)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	60d3      	str	r3, [r2, #12]
}
 800affc:	bf00      	nop
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	bc80      	pop	{r7}
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	e000ed00 	.word	0xe000ed00

0800b00c <__NVIC_GetPriorityGrouping>:
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <__NVIC_GetPriorityGrouping+0x18>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	0a1b      	lsrs	r3, r3, #8
 800b016:	f003 0307 	and.w	r3, r3, #7
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bc80      	pop	{r7}
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	e000ed00 	.word	0xe000ed00

0800b028 <__NVIC_EnableIRQ>:
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b036:	2b00      	cmp	r3, #0
 800b038:	db0b      	blt.n	800b052 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	f003 021f 	and.w	r2, r3, #31
 800b040:	4906      	ldr	r1, [pc, #24]	; (800b05c <__NVIC_EnableIRQ+0x34>)
 800b042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b046:	095b      	lsrs	r3, r3, #5
 800b048:	2001      	movs	r0, #1
 800b04a:	fa00 f202 	lsl.w	r2, r0, r2
 800b04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr
 800b05c:	e000e100 	.word	0xe000e100

0800b060 <__NVIC_SetPriority>:
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	6039      	str	r1, [r7, #0]
 800b06a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b070:	2b00      	cmp	r3, #0
 800b072:	db0a      	blt.n	800b08a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	b2da      	uxtb	r2, r3
 800b078:	490c      	ldr	r1, [pc, #48]	; (800b0ac <__NVIC_SetPriority+0x4c>)
 800b07a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b07e:	0112      	lsls	r2, r2, #4
 800b080:	b2d2      	uxtb	r2, r2
 800b082:	440b      	add	r3, r1
 800b084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b088:	e00a      	b.n	800b0a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	4908      	ldr	r1, [pc, #32]	; (800b0b0 <__NVIC_SetPriority+0x50>)
 800b090:	79fb      	ldrb	r3, [r7, #7]
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	3b04      	subs	r3, #4
 800b098:	0112      	lsls	r2, r2, #4
 800b09a:	b2d2      	uxtb	r2, r2
 800b09c:	440b      	add	r3, r1
 800b09e:	761a      	strb	r2, [r3, #24]
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	e000e100 	.word	0xe000e100
 800b0b0:	e000ed00 	.word	0xe000ed00

0800b0b4 <NVIC_EncodePriority>:
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	f1c3 0307 	rsb	r3, r3, #7
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	bf28      	it	cs
 800b0d2:	2304      	movcs	r3, #4
 800b0d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	2b06      	cmp	r3, #6
 800b0dc:	d902      	bls.n	800b0e4 <NVIC_EncodePriority+0x30>
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	3b03      	subs	r3, #3
 800b0e2:	e000      	b.n	800b0e6 <NVIC_EncodePriority+0x32>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	43da      	mvns	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0fc:	f04f 31ff 	mov.w	r1, #4294967295
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	fa01 f303 	lsl.w	r3, r1, r3
 800b106:	43d9      	mvns	r1, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b10c:	4313      	orrs	r3, r2
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3724      	adds	r7, #36	; 0x24
 800b112:	46bd      	mov	sp, r7
 800b114:	bc80      	pop	{r7}
 800b116:	4770      	bx	lr

0800b118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff ff4f 	bl	800afc4 <__NVIC_SetPriorityGrouping>
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	4603      	mov	r3, r0
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b140:	f7ff ff64 	bl	800b00c <__NVIC_GetPriorityGrouping>
 800b144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	6978      	ldr	r0, [r7, #20]
 800b14c:	f7ff ffb2 	bl	800b0b4 <NVIC_EncodePriority>
 800b150:	4602      	mov	r2, r0
 800b152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff ff81 	bl	800b060 <__NVIC_SetPriority>
}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	4603      	mov	r3, r0
 800b16e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff ff57 	bl	800b028 <__NVIC_EnableIRQ>
}
 800b17a:	bf00      	nop
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d005      	beq.n	800b1a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2204      	movs	r2, #4
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e029      	b.n	800b1fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f022 020e 	bic.w	r2, r2, #14
 800b1b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 0201 	bic.w	r2, r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f003 021c 	and.w	r2, r3, #28
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	fa01 f202 	lsl.w	r2, r1, r2
 800b1d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	4798      	blx	r3
    }
  }
  return status;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b212:	b2db      	uxtb	r3, r3
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	bc80      	pop	{r7}
 800b21c:	4770      	bx	lr
	...

0800b220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b22a:	2300      	movs	r3, #0
 800b22c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b236:	e160      	b.n	800b4fa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	2101      	movs	r1, #1
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	fa01 f303 	lsl.w	r3, r1, r3
 800b244:	4013      	ands	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8152 	beq.w	800b4f4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d003      	beq.n	800b260 <HAL_GPIO_Init+0x40>
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2b12      	cmp	r3, #18
 800b25e:	d123      	bne.n	800b2a8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	08da      	lsrs	r2, r3, #3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3208      	adds	r2, #8
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f003 0307 	and.w	r3, r3, #7
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	220f      	movs	r2, #15
 800b278:	fa02 f303 	lsl.w	r3, r2, r3
 800b27c:	43db      	mvns	r3, r3
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4013      	ands	r3, r2
 800b282:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	fa02 f303 	lsl.w	r3, r2, r3
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	08da      	lsrs	r2, r3, #3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3208      	adds	r2, #8
 800b2a2:	6939      	ldr	r1, [r7, #16]
 800b2a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b8:	43db      	mvns	r3, r3
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f003 0203 	and.w	r2, r3, #3
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d00b      	beq.n	800b2fc <HAL_GPIO_Init+0xdc>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d007      	beq.n	800b2fc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b2f0:	2b11      	cmp	r3, #17
 800b2f2:	d003      	beq.n	800b2fc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	2b12      	cmp	r3, #18
 800b2fa:	d130      	bne.n	800b35e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	2203      	movs	r2, #3
 800b308:	fa02 f303 	lsl.w	r3, r2, r3
 800b30c:	43db      	mvns	r3, r3
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	4013      	ands	r3, r2
 800b312:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	4313      	orrs	r3, r2
 800b324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800b332:	2201      	movs	r2, #1
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	fa02 f303 	lsl.w	r3, r2, r3
 800b33a:	43db      	mvns	r3, r3
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4013      	ands	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	091b      	lsrs	r3, r3, #4
 800b348:	f003 0201 	and.w	r2, r3, #1
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	4313      	orrs	r3, r2
 800b356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	2203      	movs	r2, #3
 800b36a:	fa02 f303 	lsl.w	r3, r2, r3
 800b36e:	43db      	mvns	r3, r3
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4013      	ands	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	fa02 f303 	lsl.w	r3, r2, r3
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4313      	orrs	r3, r2
 800b386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 80ac 	beq.w	800b4f4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b39c:	4b5e      	ldr	r3, [pc, #376]	; (800b518 <HAL_GPIO_Init+0x2f8>)
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	4a5d      	ldr	r2, [pc, #372]	; (800b518 <HAL_GPIO_Init+0x2f8>)
 800b3a2:	f043 0301 	orr.w	r3, r3, #1
 800b3a6:	6213      	str	r3, [r2, #32]
 800b3a8:	4b5b      	ldr	r3, [pc, #364]	; (800b518 <HAL_GPIO_Init+0x2f8>)
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	60bb      	str	r3, [r7, #8]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800b3b4:	4a59      	ldr	r2, [pc, #356]	; (800b51c <HAL_GPIO_Init+0x2fc>)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	089b      	lsrs	r3, r3, #2
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f003 0303 	and.w	r3, r3, #3
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	220f      	movs	r2, #15
 800b3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d0:	43db      	mvns	r3, r3
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a51      	ldr	r2, [pc, #324]	; (800b520 <HAL_GPIO_Init+0x300>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d025      	beq.n	800b42c <HAL_GPIO_Init+0x20c>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a50      	ldr	r2, [pc, #320]	; (800b524 <HAL_GPIO_Init+0x304>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d01f      	beq.n	800b428 <HAL_GPIO_Init+0x208>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a4f      	ldr	r2, [pc, #316]	; (800b528 <HAL_GPIO_Init+0x308>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d019      	beq.n	800b424 <HAL_GPIO_Init+0x204>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a4e      	ldr	r2, [pc, #312]	; (800b52c <HAL_GPIO_Init+0x30c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d013      	beq.n	800b420 <HAL_GPIO_Init+0x200>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a4d      	ldr	r2, [pc, #308]	; (800b530 <HAL_GPIO_Init+0x310>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d00d      	beq.n	800b41c <HAL_GPIO_Init+0x1fc>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a4c      	ldr	r2, [pc, #304]	; (800b534 <HAL_GPIO_Init+0x314>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d007      	beq.n	800b418 <HAL_GPIO_Init+0x1f8>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a4b      	ldr	r2, [pc, #300]	; (800b538 <HAL_GPIO_Init+0x318>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d101      	bne.n	800b414 <HAL_GPIO_Init+0x1f4>
 800b410:	2306      	movs	r3, #6
 800b412:	e00c      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b414:	2307      	movs	r3, #7
 800b416:	e00a      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b418:	2305      	movs	r3, #5
 800b41a:	e008      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b41c:	2304      	movs	r3, #4
 800b41e:	e006      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b420:	2303      	movs	r3, #3
 800b422:	e004      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b424:	2302      	movs	r3, #2
 800b426:	e002      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <HAL_GPIO_Init+0x20e>
 800b42c:	2300      	movs	r3, #0
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	f002 0203 	and.w	r2, r2, #3
 800b434:	0092      	lsls	r2, r2, #2
 800b436:	4093      	lsls	r3, r2
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b43e:	4937      	ldr	r1, [pc, #220]	; (800b51c <HAL_GPIO_Init+0x2fc>)
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	089b      	lsrs	r3, r3, #2
 800b444:	3302      	adds	r3, #2
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b44c:	4b3b      	ldr	r3, [pc, #236]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	43db      	mvns	r3, r3
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4013      	ands	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b470:	4a32      	ldr	r2, [pc, #200]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b476:	4b31      	ldr	r3, [pc, #196]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	43db      	mvns	r3, r3
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	4013      	ands	r3, r2
 800b484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b49a:	4a28      	ldr	r2, [pc, #160]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b4a0:	4b26      	ldr	r3, [pc, #152]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b4c4:	4a1d      	ldr	r2, [pc, #116]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b4ca:	4b1c      	ldr	r3, [pc, #112]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	43db      	mvns	r3, r3
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b4ee:	4a13      	ldr	r2, [pc, #76]	; (800b53c <HAL_GPIO_Init+0x31c>)
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	f47f ae97 	bne.w	800b238 <HAL_GPIO_Init+0x18>
  } 
}
 800b50a:	bf00      	nop
 800b50c:	bf00      	nop
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	40023800 	.word	0x40023800
 800b51c:	40010000 	.word	0x40010000
 800b520:	40020000 	.word	0x40020000
 800b524:	40020400 	.word	0x40020400
 800b528:	40020800 	.word	0x40020800
 800b52c:	40020c00 	.word	0x40020c00
 800b530:	40021000 	.word	0x40021000
 800b534:	40021400 	.word	0x40021400
 800b538:	40021800 	.word	0x40021800
 800b53c:	40010400 	.word	0x40010400

0800b540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	807b      	strh	r3, [r7, #2]
 800b54c:	4613      	mov	r3, r2
 800b54e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b550:	787b      	ldrb	r3, [r7, #1]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b556:	887a      	ldrh	r2, [r7, #2]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800b55c:	e003      	b.n	800b566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800b55e:	887b      	ldrh	r3, [r7, #2]
 800b560:	041a      	lsls	r2, r3, #16
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	619a      	str	r2, [r3, #24]
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bc80      	pop	{r7}
 800b56e:	4770      	bx	lr

0800b570 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b590:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b598:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	2b10      	cmp	r3, #16
 800b59e:	d003      	beq.n	800b5a8 <HAL_I2C_EV_IRQHandler+0x38>
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	f040 80bd 	bne.w	800b722 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10d      	bne.n	800b5de <HAL_I2C_EV_IRQHandler+0x6e>
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b5c8:	d003      	beq.n	800b5d2 <HAL_I2C_EV_IRQHandler+0x62>
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b5d0:	d101      	bne.n	800b5d6 <HAL_I2C_EV_IRQHandler+0x66>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <HAL_I2C_EV_IRQHandler+0x68>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	f000 812e 	beq.w	800b83a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00c      	beq.n	800b602 <HAL_I2C_EV_IRQHandler+0x92>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	0a5b      	lsrs	r3, r3, #9
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 fc17 	bl	800ce28 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fd46 	bl	800c08c <I2C_Master_SB>
 800b600:	e08e      	b.n	800b720 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	08db      	lsrs	r3, r3, #3
 800b606:	f003 0301 	and.w	r3, r3, #1
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d009      	beq.n	800b622 <HAL_I2C_EV_IRQHandler+0xb2>
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	0a5b      	lsrs	r3, r3, #9
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fdbb 	bl	800c196 <I2C_Master_ADD10>
 800b620:	e07e      	b.n	800b720 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	085b      	lsrs	r3, r3, #1
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <HAL_I2C_EV_IRQHandler+0xd2>
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	0a5b      	lsrs	r3, r3, #9
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fdd4 	bl	800c1e8 <I2C_Master_ADDR>
 800b640:	e06e      	b.n	800b720 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	089b      	lsrs	r3, r3, #2
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d037      	beq.n	800b6be <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b65c:	f000 80ef 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	09db      	lsrs	r3, r3, #7
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00f      	beq.n	800b68c <HAL_I2C_EV_IRQHandler+0x11c>
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	0a9b      	lsrs	r3, r3, #10
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <HAL_I2C_EV_IRQHandler+0x11c>
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	089b      	lsrs	r3, r3, #2
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	d103      	bne.n	800b68c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9d3 	bl	800ba30 <I2C_MasterTransmit_TXE>
 800b68a:	e049      	b.n	800b720 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	089b      	lsrs	r3, r3, #2
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80d2 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	0a5b      	lsrs	r3, r3, #9
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 80cb 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	2b10      	cmp	r3, #16
 800b6ac:	d103      	bne.n	800b6b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fa5a 	bl	800bb68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b6b4:	e0c3      	b.n	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fabe 	bl	800bc38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b6bc:	e0bf      	b.n	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6cc:	f000 80b7 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	099b      	lsrs	r3, r3, #6
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00f      	beq.n	800b6fc <HAL_I2C_EV_IRQHandler+0x18c>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	0a9b      	lsrs	r3, r3, #10
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d009      	beq.n	800b6fc <HAL_I2C_EV_IRQHandler+0x18c>
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	089b      	lsrs	r3, r3, #2
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d103      	bne.n	800b6fc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fb2e 	bl	800bd56 <I2C_MasterReceive_RXNE>
 800b6fa:	e011      	b.n	800b720 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	089b      	lsrs	r3, r3, #2
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 809a 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	0a5b      	lsrs	r3, r3, #9
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 8093 	beq.w	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fbcd 	bl	800beb8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b71e:	e08e      	b.n	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
 800b720:	e08d      	b.n	800b83e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b726:	2b00      	cmp	r3, #0
 800b728:	d004      	beq.n	800b734 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	61fb      	str	r3, [r7, #28]
 800b732:	e007      	b.n	800b744 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d012      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0x206>
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	0a5b      	lsrs	r3, r3, #9
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00c      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800b76c:	69b9      	ldr	r1, [r7, #24]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 ff86 	bl	800c680 <I2C_Slave_ADDR>
 800b774:	e066      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	091b      	lsrs	r3, r3, #4
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <HAL_I2C_EV_IRQHandler+0x226>
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	0a5b      	lsrs	r3, r3, #9
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 ffba 	bl	800c708 <I2C_Slave_STOPF>
 800b794:	e056      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b796:	7bbb      	ldrb	r3, [r7, #14]
 800b798:	2b21      	cmp	r3, #33	; 0x21
 800b79a:	d002      	beq.n	800b7a2 <HAL_I2C_EV_IRQHandler+0x232>
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	2b29      	cmp	r3, #41	; 0x29
 800b7a0:	d125      	bne.n	800b7ee <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	09db      	lsrs	r3, r3, #7
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00f      	beq.n	800b7ce <HAL_I2C_EV_IRQHandler+0x25e>
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	0a9b      	lsrs	r3, r3, #10
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <HAL_I2C_EV_IRQHandler+0x25e>
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	089b      	lsrs	r3, r3, #2
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d103      	bne.n	800b7ce <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fe9e 	bl	800c508 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b7cc:	e039      	b.n	800b842 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	089b      	lsrs	r3, r3, #2
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d033      	beq.n	800b842 <HAL_I2C_EV_IRQHandler+0x2d2>
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	0a5b      	lsrs	r3, r3, #9
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d02d      	beq.n	800b842 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fecb 	bl	800c582 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b7ec:	e029      	b.n	800b842 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	099b      	lsrs	r3, r3, #6
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00f      	beq.n	800b81a <HAL_I2C_EV_IRQHandler+0x2aa>
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	0a9b      	lsrs	r3, r3, #10
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d009      	beq.n	800b81a <HAL_I2C_EV_IRQHandler+0x2aa>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	089b      	lsrs	r3, r3, #2
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d103      	bne.n	800b81a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fed5 	bl	800c5c2 <I2C_SlaveReceive_RXNE>
 800b818:	e014      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	089b      	lsrs	r3, r3, #2
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00e      	beq.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	0a5b      	lsrs	r3, r3, #9
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 ff03 	bl	800c63e <I2C_SlaveReceive_BTF>
 800b838:	e004      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800b83a:	bf00      	nop
 800b83c:	e002      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b83e:	bf00      	nop
 800b840:	e000      	b.n	800b844 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b842:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b08a      	sub	sp, #40	; 0x28
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b86c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	0a1b      	lsrs	r3, r3, #8
 800b872:	f003 0301 	and.w	r3, r3, #1
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00e      	beq.n	800b898 <HAL_I2C_ER_IRQHandler+0x4e>
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	0a1b      	lsrs	r3, r3, #8
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d008      	beq.n	800b898 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	f043 0301 	orr.w	r3, r3, #1
 800b88c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b896:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	0a5b      	lsrs	r3, r3, #9
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00e      	beq.n	800b8c2 <HAL_I2C_ER_IRQHandler+0x78>
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d008      	beq.n	800b8c2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	f043 0302 	orr.w	r3, r3, #2
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800b8c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	0a9b      	lsrs	r3, r3, #10
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d03f      	beq.n	800b94e <HAL_I2C_ER_IRQHandler+0x104>
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	0a1b      	lsrs	r3, r3, #8
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d039      	beq.n	800b94e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800b8da:	7efb      	ldrb	r3, [r7, #27]
 800b8dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b8f4:	7ebb      	ldrb	r3, [r7, #26]
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d112      	bne.n	800b920 <HAL_I2C_ER_IRQHandler+0xd6>
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10f      	bne.n	800b920 <HAL_I2C_ER_IRQHandler+0xd6>
 800b900:	7cfb      	ldrb	r3, [r7, #19]
 800b902:	2b21      	cmp	r3, #33	; 0x21
 800b904:	d008      	beq.n	800b918 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b906:	7cfb      	ldrb	r3, [r7, #19]
 800b908:	2b29      	cmp	r3, #41	; 0x29
 800b90a:	d005      	beq.n	800b918 <HAL_I2C_ER_IRQHandler+0xce>
 800b90c:	7cfb      	ldrb	r3, [r7, #19]
 800b90e:	2b28      	cmp	r3, #40	; 0x28
 800b910:	d106      	bne.n	800b920 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b21      	cmp	r3, #33	; 0x21
 800b916:	d103      	bne.n	800b920 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 f825 	bl	800c968 <I2C_Slave_AF>
 800b91e:	e016      	b.n	800b94e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b928:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	f043 0304 	orr.w	r3, r3, #4
 800b930:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b932:	7efb      	ldrb	r3, [r7, #27]
 800b934:	2b10      	cmp	r3, #16
 800b936:	d002      	beq.n	800b93e <HAL_I2C_ER_IRQHandler+0xf4>
 800b938:	7efb      	ldrb	r3, [r7, #27]
 800b93a:	2b40      	cmp	r3, #64	; 0x40
 800b93c:	d107      	bne.n	800b94e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b94c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	0adb      	lsrs	r3, r3, #11
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00e      	beq.n	800b978 <HAL_I2C_ER_IRQHandler+0x12e>
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	d008      	beq.n	800b978 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	f043 0308 	orr.w	r3, r3, #8
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800b976:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d008      	beq.n	800b990 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	431a      	orrs	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f001 f85c 	bl	800ca48 <I2C_ITError>
  }
}
 800b990:	bf00      	nop
 800b992:	3728      	adds	r7, #40	; 0x28
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bc80      	pop	{r7}
 800b9a8:	4770      	bx	lr

0800b9aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bc80      	pop	{r7}
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bc80      	pop	{r7}
 800b9d4:	4770      	bx	lr

0800b9d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bc80      	pop	{r7}
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bc80      	pop	{r7}
 800b9f8:	4770      	bx	lr

0800b9fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bc80      	pop	{r7}
 800ba0a:	4770      	bx	lr

0800ba0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bc80      	pop	{r7}
 800ba1c:	4770      	bx	lr

0800ba1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bc80      	pop	{r7}
 800ba2e:	4770      	bx	lr

0800ba30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d150      	bne.n	800baf8 <I2C_MasterTransmit_TXE+0xc8>
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	2b21      	cmp	r3, #33	; 0x21
 800ba5a:	d14d      	bne.n	800baf8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2b08      	cmp	r3, #8
 800ba60:	d01d      	beq.n	800ba9e <I2C_MasterTransmit_TXE+0x6e>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b20      	cmp	r3, #32
 800ba66:	d01a      	beq.n	800ba9e <I2C_MasterTransmit_TXE+0x6e>
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba6e:	d016      	beq.n	800ba9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ba7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2211      	movs	r2, #17
 800ba84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7fe faf6 	bl	800a088 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ba9c:	e060      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800baac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800babc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b40      	cmp	r3, #64	; 0x40
 800bad6:	d107      	bne.n	800bae8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ff81 	bl	800b9e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bae6:	e03b      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7fe fac9 	bl	800a088 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800baf6:	e033      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	2b21      	cmp	r3, #33	; 0x21
 800bafc:	d005      	beq.n	800bb0a <I2C_MasterTransmit_TXE+0xda>
 800bafe:	7bbb      	ldrb	r3, [r7, #14]
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d12d      	bne.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	2b22      	cmp	r3, #34	; 0x22
 800bb08:	d12a      	bne.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d108      	bne.n	800bb26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800bb24:	e01c      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b40      	cmp	r3, #64	; 0x40
 800bb30:	d103      	bne.n	800bb3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f880 	bl	800bc38 <I2C_MemoryTransmit_TXE_BTF>
}
 800bb38:	e012      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	781a      	ldrb	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bb5e:	e7ff      	b.n	800bb60 <I2C_MasterTransmit_TXE+0x130>
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b21      	cmp	r3, #33	; 0x21
 800bb80:	d156      	bne.n	800bc30 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d012      	beq.n	800bbb2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	781a      	ldrb	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800bbb0:	e03e      	b.n	800bc30 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d01d      	beq.n	800bbf4 <I2C_MasterTransmit_BTF+0x8c>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d01a      	beq.n	800bbf4 <I2C_MasterTransmit_BTF+0x8c>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbc4:	d016      	beq.n	800bbf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bbd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2211      	movs	r2, #17
 800bbda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7fe fa4b 	bl	800a088 <HAL_I2C_MasterTxCpltCallback>
}
 800bbf2:	e01d      	b.n	800bc30 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bc02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7fe fa2c 	bl	800a088 <HAL_I2C_MasterTxCpltCallback>
}
 800bc30:	bf00      	nop
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11d      	bne.n	800bc8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d10b      	bne.n	800bc70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc68:	1c9a      	adds	r2, r3, #2
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800bc6e:	e06e      	b.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	121b      	asrs	r3, r3, #8
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bc8a:	e060      	b.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d10b      	bne.n	800bcac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bcaa:	e050      	b.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d14c      	bne.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	2b22      	cmp	r3, #34	; 0x22
 800bcb8:	d108      	bne.n	800bccc <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcc8:	601a      	str	r2, [r3, #0]
}
 800bcca:	e040      	b.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d015      	beq.n	800bd02 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	2b21      	cmp	r3, #33	; 0x21
 800bcda:	d112      	bne.n	800bd02 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	781a      	ldrb	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bd00:	e025      	b.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d120      	bne.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	2b21      	cmp	r3, #33	; 0x21
 800bd10:	d11d      	bne.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd20:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd30:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff fe4d 	bl	800b9e8 <HAL_I2C_MemTxCpltCallback>
}
 800bd4e:	bf00      	nop
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b22      	cmp	r3, #34	; 0x22
 800bd68:	f040 80a2 	bne.w	800beb0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d921      	bls.n	800bdbe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	691a      	ldr	r2, [r3, #16]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	b2d2      	uxtb	r2, r2
 800bd86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	f040 8082 	bne.w	800beb0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdba:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800bdbc:	e078      	b.n	800beb0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d074      	beq.n	800beb0 <I2C_MasterReceive_RXNE+0x15a>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d002      	beq.n	800bdd2 <I2C_MasterReceive_RXNE+0x7c>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d16e      	bne.n	800beb0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 f803 	bl	800cdde <I2C_WaitOnSTOPRequestThroughIT>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d142      	bne.n	800be64 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bdfc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691a      	ldr	r2, [r3, #16]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2220      	movs	r2, #32
 800be28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b40      	cmp	r3, #64	; 0x40
 800be36:	d10a      	bne.n	800be4e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff fdd7 	bl	800b9fa <HAL_I2C_MemRxCpltCallback>
}
 800be4c:	e030      	b.n	800beb0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2212      	movs	r2, #18
 800be5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7fe f937 	bl	800a0d0 <HAL_I2C_MasterRxCpltCallback>
}
 800be62:	e025      	b.n	800beb0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800be72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be90:	b29b      	uxth	r3, r3
 800be92:	3b01      	subs	r3, #1
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff fdae 	bl	800ba0c <HAL_I2C_ErrorCallback>
}
 800beb0:	bf00      	nop
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beca:	b29b      	uxth	r3, r3
 800becc:	2b04      	cmp	r3, #4
 800bece:	d11b      	bne.n	800bf08 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bede:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	691a      	ldr	r2, [r3, #16]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befc:	b29b      	uxth	r3, r3
 800befe:	3b01      	subs	r3, #1
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800bf06:	e0bd      	b.n	800c084 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d129      	bne.n	800bf66 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf20:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d00a      	beq.n	800bf3e <I2C_MasterReceive_BTF+0x86>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d007      	beq.n	800bf3e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	691a      	ldr	r2, [r3, #16]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bf64:	e08e      	b.n	800c084 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d176      	bne.n	800c05e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d002      	beq.n	800bf7c <I2C_MasterReceive_BTF+0xc4>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b10      	cmp	r3, #16
 800bf7a:	d108      	bne.n	800bf8e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	e019      	b.n	800bfc2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d002      	beq.n	800bf9a <I2C_MasterReceive_BTF+0xe2>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d108      	bne.n	800bfac <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e00a      	b.n	800bfc2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b10      	cmp	r3, #16
 800bfb0:	d007      	beq.n	800bfc2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	691a      	ldr	r2, [r3, #16]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	b2d2      	uxtb	r2, r2
 800bfce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	691a      	ldr	r2, [r3, #16]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c01c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	d10a      	bne.n	800c048 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff fcda 	bl	800b9fa <HAL_I2C_MemRxCpltCallback>
}
 800c046:	e01d      	b.n	800c084 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2212      	movs	r2, #18
 800c054:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7fe f83a 	bl	800a0d0 <HAL_I2C_MasterRxCpltCallback>
}
 800c05c:	e012      	b.n	800c084 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	691a      	ldr	r2, [r3, #16]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b40      	cmp	r3, #64	; 0x40
 800c09e:	d117      	bne.n	800c0d0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c0b8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c0ba:	e067      	b.n	800c18c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f043 0301 	orr.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	611a      	str	r2, [r3, #16]
}
 800c0ce:	e05d      	b.n	800c18c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0d8:	d133      	bne.n	800c142 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b21      	cmp	r3, #33	; 0x21
 800c0e4:	d109      	bne.n	800c0fa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c0f6:	611a      	str	r2, [r3, #16]
 800c0f8:	e008      	b.n	800c10c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	f043 0301 	orr.w	r3, r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c110:	2b00      	cmp	r3, #0
 800c112:	d004      	beq.n	800c11e <I2C_Master_SB+0x92>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d108      	bne.n	800c130 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	2b00      	cmp	r3, #0
 800c124:	d032      	beq.n	800c18c <I2C_Master_SB+0x100>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d02d      	beq.n	800c18c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c13e:	605a      	str	r2, [r3, #4]
}
 800c140:	e024      	b.n	800c18c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10e      	bne.n	800c168 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14e:	b29b      	uxth	r3, r3
 800c150:	11db      	asrs	r3, r3, #7
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0306 	and.w	r3, r3, #6
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	f063 030f 	orn	r3, r3, #15
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	611a      	str	r2, [r3, #16]
}
 800c166:	e011      	b.n	800c18c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d10d      	bne.n	800c18c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c174:	b29b      	uxth	r3, r3
 800c176:	11db      	asrs	r3, r3, #7
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	f003 0306 	and.w	r3, r3, #6
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f063 030e 	orn	r3, r3, #14
 800c184:	b2da      	uxtb	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	611a      	str	r2, [r3, #16]
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	4770      	bx	lr

0800c196 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c196:	b480      	push	{r7}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d103      	bne.n	800c1ba <I2C_Master_ADD10+0x24>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d104      	bne.n	800c1ce <I2C_Master_ADD10+0x38>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d007      	beq.n	800c1de <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1dc:	605a      	str	r2, [r3, #4]
    }
  }
}
 800c1de:	bf00      	nop
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bc80      	pop	{r7}
 800c1e6:	4770      	bx	lr

0800c1e8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b091      	sub	sp, #68	; 0x44
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c204:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b22      	cmp	r3, #34	; 0x22
 800c210:	f040 8169 	bne.w	800c4e6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10f      	bne.n	800c23c <I2C_Master_ADDR+0x54>
 800c21c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	d10b      	bne.n	800c23c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c224:	2300      	movs	r3, #0
 800c226:	633b      	str	r3, [r7, #48]	; 0x30
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	633b      	str	r3, [r7, #48]	; 0x30
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	633b      	str	r3, [r7, #48]	; 0x30
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	e160      	b.n	800c4fe <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c240:	2b00      	cmp	r3, #0
 800c242:	d11d      	bne.n	800c280 <I2C_Master_ADDR+0x98>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c24c:	d118      	bne.n	800c280 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c24e:	2300      	movs	r3, #0
 800c250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c272:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	651a      	str	r2, [r3, #80]	; 0x50
 800c27e:	e13e      	b.n	800c4fe <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c284:	b29b      	uxth	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d113      	bne.n	800c2b2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c28a:	2300      	movs	r3, #0
 800c28c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	e115      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	f040 808a 	bne.w	800c3d2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2c4:	d137      	bne.n	800c336 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2d4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2e4:	d113      	bne.n	800c30e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2f4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	627b      	str	r3, [r7, #36]	; 0x24
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	e0e7      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c30e:	2300      	movs	r3, #0
 800c310:	623b      	str	r3, [r7, #32]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	695b      	ldr	r3, [r3, #20]
 800c318:	623b      	str	r3, [r7, #32]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	623b      	str	r3, [r7, #32]
 800c322:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e0d3      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	2b08      	cmp	r3, #8
 800c33a:	d02e      	beq.n	800c39a <I2C_Master_ADDR+0x1b2>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33e:	2b20      	cmp	r3, #32
 800c340:	d02b      	beq.n	800c39a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c344:	2b12      	cmp	r3, #18
 800c346:	d102      	bne.n	800c34e <I2C_Master_ADDR+0x166>
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d125      	bne.n	800c39a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	2b04      	cmp	r3, #4
 800c352:	d00e      	beq.n	800c372 <I2C_Master_ADDR+0x18a>
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	2b02      	cmp	r3, #2
 800c358:	d00b      	beq.n	800c372 <I2C_Master_ADDR+0x18a>
 800c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35c:	2b10      	cmp	r3, #16
 800c35e:	d008      	beq.n	800c372 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	e007      	b.n	800c382 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c380:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c382:	2300      	movs	r3, #0
 800c384:	61fb      	str	r3, [r7, #28]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	e0a1      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3a8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	61bb      	str	r3, [r7, #24]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	61bb      	str	r3, [r7, #24]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	e085      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d14d      	bne.n	800c478 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	d016      	beq.n	800c410 <I2C_Master_ADDR+0x228>
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d013      	beq.n	800c410 <I2C_Master_ADDR+0x228>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	2b10      	cmp	r3, #16
 800c3ec:	d010      	beq.n	800c410 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3fc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e007      	b.n	800c420 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c41e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c42a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c42e:	d117      	bne.n	800c460 <I2C_Master_ADDR+0x278>
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c436:	d00b      	beq.n	800c450 <I2C_Master_ADDR+0x268>
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d008      	beq.n	800c450 <I2C_Master_ADDR+0x268>
 800c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c440:	2b08      	cmp	r3, #8
 800c442:	d005      	beq.n	800c450 <I2C_Master_ADDR+0x268>
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	2b10      	cmp	r3, #16
 800c448:	d002      	beq.n	800c450 <I2C_Master_ADDR+0x268>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	2b20      	cmp	r3, #32
 800c44e:	d107      	bne.n	800c460 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c45e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c460:	2300      	movs	r3, #0
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	e032      	b.n	800c4de <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c486:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c496:	d117      	bne.n	800c4c8 <I2C_Master_ADDR+0x2e0>
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c49e:	d00b      	beq.n	800c4b8 <I2C_Master_ADDR+0x2d0>
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d008      	beq.n	800c4b8 <I2C_Master_ADDR+0x2d0>
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d005      	beq.n	800c4b8 <I2C_Master_ADDR+0x2d0>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	2b10      	cmp	r3, #16
 800c4b0:	d002      	beq.n	800c4b8 <I2C_Master_ADDR+0x2d0>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	2b20      	cmp	r3, #32
 800c4b6:	d107      	bne.n	800c4c8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800c4e4:	e00b      	b.n	800c4fe <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
}
 800c4fc:	e7ff      	b.n	800c4fe <I2C_Master_ADDR+0x316>
 800c4fe:	bf00      	nop
 800c500:	3744      	adds	r7, #68	; 0x44
 800c502:	46bd      	mov	sp, r7
 800c504:	bc80      	pop	{r7}
 800c506:	4770      	bx	lr

0800c508 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c516:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d02b      	beq.n	800c57a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	781a      	ldrb	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c532:	1c5a      	adds	r2, r3, #1
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	3b01      	subs	r3, #1
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d114      	bne.n	800c57a <I2C_SlaveTransmit_TXE+0x72>
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	2b29      	cmp	r3, #41	; 0x29
 800c554:	d111      	bne.n	800c57a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c564:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2221      	movs	r2, #33	; 0x21
 800c56a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2228      	movs	r2, #40	; 0x28
 800c570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fa0f 	bl	800b998 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c58e:	b29b      	uxth	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr

0800c5c2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d02c      	beq.n	800c636 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	691a      	ldr	r2, [r3, #16]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	b2d2      	uxtb	r2, r2
 800c5e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c606:	b29b      	uxth	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d114      	bne.n	800c636 <I2C_SlaveReceive_RXNE+0x74>
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	2b2a      	cmp	r3, #42	; 0x2a
 800c610:	d111      	bne.n	800c636 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c620:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2222      	movs	r2, #34	; 0x22
 800c626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2228      	movs	r2, #40	; 0x28
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff f9ba 	bl	800b9aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c63e:	b480      	push	{r7}
 800c640:	b083      	sub	sp, #12
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d012      	beq.n	800c676 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	691a      	ldr	r2, [r3, #16]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	b2d2      	uxtb	r2, r2
 800c65c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	3b01      	subs	r3, #1
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c676:	bf00      	nop
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bc80      	pop	{r7}
 800c67e:	4770      	bx	lr

0800c680 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c694:	b2db      	uxtb	r3, r3
 800c696:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c69a:	2b28      	cmp	r3, #40	; 0x28
 800c69c:	d127      	bne.n	800c6ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	089b      	lsrs	r3, r3, #2
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	09db      	lsrs	r3, r3, #7
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d103      	bne.n	800c6d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	81bb      	strh	r3, [r7, #12]
 800c6d0:	e002      	b.n	800c6d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800c6e0:	89ba      	ldrh	r2, [r7, #12]
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7ff f968 	bl	800b9bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6ec:	e008      	b.n	800c700 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f06f 0202 	mvn.w	r2, #2
 800c6f6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c716:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c726:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c728:	2300      	movs	r3, #0
 800c72a:	60bb      	str	r3, [r7, #8]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	60bb      	str	r3, [r7, #8]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0201 	orr.w	r2, r2, #1
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c754:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c764:	d172      	bne.n	800c84c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	2b22      	cmp	r3, #34	; 0x22
 800c76a:	d002      	beq.n	800c772 <I2C_Slave_STOPF+0x6a>
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b2a      	cmp	r3, #42	; 0x2a
 800c770:	d135      	bne.n	800c7de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c784:	b29b      	uxth	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d005      	beq.n	800c796 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	f043 0204 	orr.w	r2, r3, #4
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe fd2a 	bl	800b204 <HAL_DMA_GetState>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d049      	beq.n	800c84a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ba:	4a69      	ldr	r2, [pc, #420]	; (800c960 <I2C_Slave_STOPF+0x258>)
 800c7bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fcdd 	bl	800b182 <HAL_DMA_Abort_IT>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d03d      	beq.n	800c84a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c7d8:	4610      	mov	r0, r2
 800c7da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7dc:	e035      	b.n	800c84a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d005      	beq.n	800c802 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fa:	f043 0204 	orr.w	r2, r3, #4
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c810:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fcf4 	bl	800b204 <HAL_DMA_GetState>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d014      	beq.n	800c84c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c826:	4a4e      	ldr	r2, [pc, #312]	; (800c960 <I2C_Slave_STOPF+0x258>)
 800c828:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fca7 	bl	800b182 <HAL_DMA_Abort_IT>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
 800c848:	e000      	b.n	800c84c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c84a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d03e      	beq.n	800c8d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	f003 0304 	and.w	r3, r3, #4
 800c860:	2b04      	cmp	r3, #4
 800c862:	d112      	bne.n	800c88a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	691a      	ldr	r2, [r3, #16]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86e:	b2d2      	uxtb	r2, r2
 800c870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c880:	b29b      	uxth	r3, r3
 800c882:	3b01      	subs	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c894:	2b40      	cmp	r3, #64	; 0x40
 800c896:	d112      	bne.n	800c8be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	691a      	ldr	r2, [r3, #16]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8cc:	f043 0204 	orr.w	r2, r3, #4
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f8b3 	bl	800ca48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c8e2:	e039      	b.n	800c958 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e8:	d109      	bne.n	800c8fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2228      	movs	r2, #40	; 0x28
 800c8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff f856 	bl	800b9aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b28      	cmp	r3, #40	; 0x28
 800c908:	d111      	bne.n	800c92e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a15      	ldr	r2, [pc, #84]	; (800c964 <I2C_Slave_STOPF+0x25c>)
 800c90e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2220      	movs	r2, #32
 800c91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff f855 	bl	800b9d6 <HAL_I2C_ListenCpltCallback>
}
 800c92c:	e014      	b.n	800c958 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c932:	2b22      	cmp	r3, #34	; 0x22
 800c934:	d002      	beq.n	800c93c <I2C_Slave_STOPF+0x234>
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2b22      	cmp	r3, #34	; 0x22
 800c93a:	d10d      	bne.n	800c958 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2220      	movs	r2, #32
 800c946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff f829 	bl	800b9aa <HAL_I2C_SlaveRxCpltCallback>
}
 800c958:	bf00      	nop
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	0800ccad 	.word	0x0800ccad
 800c964:	ffff0000 	.word	0xffff0000

0800c968 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c976:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2b08      	cmp	r3, #8
 800c982:	d002      	beq.n	800c98a <I2C_Slave_AF+0x22>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b20      	cmp	r3, #32
 800c988:	d129      	bne.n	800c9de <I2C_Slave_AF+0x76>
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	2b28      	cmp	r3, #40	; 0x28
 800c98e:	d126      	bne.n	800c9de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a2c      	ldr	r2, [pc, #176]	; (800ca44 <I2C_Slave_AF+0xdc>)
 800c994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c9a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c9ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7fe fffd 	bl	800b9d6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c9dc:	e02e      	b.n	800ca3c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	2b21      	cmp	r3, #33	; 0x21
 800c9e2:	d126      	bne.n	800ca32 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a17      	ldr	r2, [pc, #92]	; (800ca44 <I2C_Slave_AF+0xdc>)
 800c9e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2221      	movs	r2, #33	; 0x21
 800c9ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca0e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ca18:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca28:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7fe ffb4 	bl	800b998 <HAL_I2C_SlaveTxCpltCallback>
}
 800ca30:	e004      	b.n	800ca3c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ca3a:	615a      	str	r2, [r3, #20]
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	ffff0000 	.word	0xffff0000

0800ca48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d002      	beq.n	800ca6c <I2C_ITError+0x24>
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	2b40      	cmp	r3, #64	; 0x40
 800ca6a:	d10a      	bne.n	800ca82 <I2C_ITError+0x3a>
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	2b22      	cmp	r3, #34	; 0x22
 800ca70:	d107      	bne.n	800ca82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca88:	2b28      	cmp	r3, #40	; 0x28
 800ca8a:	d107      	bne.n	800ca9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2228      	movs	r2, #40	; 0x28
 800ca96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ca9a:	e015      	b.n	800cac8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caaa:	d00a      	beq.n	800cac2 <I2C_ITError+0x7a>
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b60      	cmp	r3, #96	; 0x60
 800cab0:	d007      	beq.n	800cac2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2220      	movs	r2, #32
 800cab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cad6:	d162      	bne.n	800cb9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cae6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d020      	beq.n	800cb38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafa:	4a6a      	ldr	r2, [pc, #424]	; (800cca4 <I2C_ITError+0x25c>)
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fb3d 	bl	800b182 <HAL_DMA_Abort_IT>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f000 8089 	beq.w	800cc22 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2220      	movs	r2, #32
 800cb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb32:	4610      	mov	r0, r2
 800cb34:	4798      	blx	r3
 800cb36:	e074      	b.n	800cc22 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3c:	4a59      	ldr	r2, [pc, #356]	; (800cca4 <I2C_ITError+0x25c>)
 800cb3e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fb1c 	bl	800b182 <HAL_DMA_Abort_IT>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d068      	beq.n	800cc22 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5a:	2b40      	cmp	r3, #64	; 0x40
 800cb5c:	d10b      	bne.n	800cb76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	691a      	ldr	r2, [r3, #16]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb68:	b2d2      	uxtb	r2, r2
 800cb6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f022 0201 	bic.w	r2, r2, #1
 800cb84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4798      	blx	r3
 800cb9c:	e041      	b.n	800cc22 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b60      	cmp	r3, #96	; 0x60
 800cba8:	d125      	bne.n	800cbf6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2220      	movs	r2, #32
 800cbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc2:	2b40      	cmp	r3, #64	; 0x40
 800cbc4:	d10b      	bne.n	800cbde <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	b2d2      	uxtb	r2, r2
 800cbd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 0201 	bic.w	r2, r2, #1
 800cbec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fe ff15 	bl	800ba1e <HAL_I2C_AbortCpltCallback>
 800cbf4:	e015      	b.n	800cc22 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc00:	2b40      	cmp	r3, #64	; 0x40
 800cc02:	d10b      	bne.n	800cc1c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	691a      	ldr	r2, [r3, #16]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0e:	b2d2      	uxtb	r2, r2
 800cc10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7fe fef5 	bl	800ba0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10e      	bne.n	800cc50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d109      	bne.n	800cc50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d104      	bne.n	800cc50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d007      	beq.n	800cc60 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cc5e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc66:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6c:	f003 0304 	and.w	r3, r3, #4
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d113      	bne.n	800cc9c <I2C_ITError+0x254>
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	2b28      	cmp	r3, #40	; 0x28
 800cc78:	d110      	bne.n	800cc9c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	; (800cca8 <I2C_ITError+0x260>)
 800cc7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2220      	movs	r2, #32
 800cc8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fe fe9d 	bl	800b9d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc9c:	bf00      	nop
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	0800ccad 	.word	0x0800ccad
 800cca8:	ffff0000 	.word	0xffff0000

0800ccac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccc4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (32000000 / 25U / 1000U);
 800ccc6:	f44f 432f 	mov.w	r3, #44800	; 0xaf00
 800ccca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <I2C_DMAAbort+0x34>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd6:	f043 0220 	orr.w	r2, r3, #32
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800ccde:	e00a      	b.n	800ccf6 <I2C_DMAAbort+0x4a>
    }
    count--;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccf4:	d0ea      	beq.n	800cccc <I2C_DMAAbort+0x20>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <I2C_DMAAbort+0x5a>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd02:	2200      	movs	r2, #0
 800cd04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <I2C_DMAAbort+0x6a>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd12:	2200      	movs	r2, #0
 800cd14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <I2C_DMAAbort+0x90>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	2200      	movs	r2, #0
 800cd3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d003      	beq.n	800cd4c <I2C_DMAAbort+0xa0>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd48:	2200      	movs	r2, #0
 800cd4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f022 0201 	bic.w	r2, r2, #1
 800cd5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b60      	cmp	r3, #96	; 0x60
 800cd66:	d10e      	bne.n	800cd86 <I2C_DMAAbort+0xda>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cd7e:	6978      	ldr	r0, [r7, #20]
 800cd80:	f7fe fe4d 	bl	800ba1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd84:	e027      	b.n	800cdd6 <I2C_DMAAbort+0x12a>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cd86:	7cfb      	ldrb	r3, [r7, #19]
 800cd88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cd8c:	2b28      	cmp	r3, #40	; 0x28
 800cd8e:	d117      	bne.n	800cdc0 <I2C_DMAAbort+0x114>
      __HAL_I2C_ENABLE(hi2c);
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f042 0201 	orr.w	r2, r2, #1
 800cd9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2228      	movs	r2, #40	; 0x28
 800cdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cdbe:	e007      	b.n	800cdd0 <I2C_DMAAbort+0x124>
      hi2c->State = HAL_I2C_STATE_READY;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800cdd0:	6978      	ldr	r0, [r7, #20]
 800cdd2:	f7fe fe1b 	bl	800ba0c <HAL_I2C_ErrorCallback>
}
 800cdd6:	bf00      	nop
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (32000000 / 25U / 1000U);
 800cdea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800cdee:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d107      	bne.n	800ce0c <I2C_WaitOnSTOPRequestThroughIT+0x2e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce00:	f043 0220 	orr.w	r2, r3, #32
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e008      	b.n	800ce1e <I2C_WaitOnSTOPRequestThroughIT+0x40>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce1a:	d0e9      	beq.n	800cdf0 <I2C_WaitOnSTOPRequestThroughIT+0x12>

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bc80      	pop	{r7}
 800ce26:	4770      	bx	lr

0800ce28 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ce38:	d103      	bne.n	800ce42 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce40:	e007      	b.n	800ce52 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce46:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ce4a:	d102      	bne.n	800ce52 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2208      	movs	r2, #8
 800ce50:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ce52:	bf00      	nop
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bc80      	pop	{r7}
 800ce5a:	4770      	bx	lr

0800ce5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b088      	sub	sp, #32
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e31d      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce6e:	4b94      	ldr	r3, [pc, #592]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f003 030c 	and.w	r3, r3, #12
 800ce76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce78:	4b91      	ldr	r3, [pc, #580]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce80:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d07b      	beq.n	800cf86 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d006      	beq.n	800cea2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	2b0c      	cmp	r3, #12
 800ce98:	d10f      	bne.n	800ceba <HAL_RCC_OscConfig+0x5e>
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea0:	d10b      	bne.n	800ceba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cea2:	4b87      	ldr	r3, [pc, #540]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d06a      	beq.n	800cf84 <HAL_RCC_OscConfig+0x128>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d166      	bne.n	800cf84 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e2f7      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d106      	bne.n	800ced0 <HAL_RCC_OscConfig+0x74>
 800cec2:	4b7f      	ldr	r3, [pc, #508]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a7e      	ldr	r2, [pc, #504]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	e02d      	b.n	800cf2c <HAL_RCC_OscConfig+0xd0>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10c      	bne.n	800cef2 <HAL_RCC_OscConfig+0x96>
 800ced8:	4b79      	ldr	r3, [pc, #484]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a78      	ldr	r2, [pc, #480]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	4b76      	ldr	r3, [pc, #472]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a75      	ldr	r2, [pc, #468]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800ceea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	e01c      	b.n	800cf2c <HAL_RCC_OscConfig+0xd0>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d10c      	bne.n	800cf14 <HAL_RCC_OscConfig+0xb8>
 800cefa:	4b71      	ldr	r3, [pc, #452]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a70      	ldr	r2, [pc, #448]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf04:	6013      	str	r3, [r2, #0]
 800cf06:	4b6e      	ldr	r3, [pc, #440]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a6d      	ldr	r2, [pc, #436]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf10:	6013      	str	r3, [r2, #0]
 800cf12:	e00b      	b.n	800cf2c <HAL_RCC_OscConfig+0xd0>
 800cf14:	4b6a      	ldr	r3, [pc, #424]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a69      	ldr	r2, [pc, #420]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	4b67      	ldr	r3, [pc, #412]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a66      	ldr	r2, [pc, #408]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d013      	beq.n	800cf5c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf34:	f7fd ff20 	bl	800ad78 <HAL_GetTick>
 800cf38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf3a:	e008      	b.n	800cf4e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cf3c:	f7fd ff1c 	bl	800ad78 <HAL_GetTick>
 800cf40:	4602      	mov	r2, r0
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	2b64      	cmp	r3, #100	; 0x64
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e2ad      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf4e:	4b5c      	ldr	r3, [pc, #368]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0f0      	beq.n	800cf3c <HAL_RCC_OscConfig+0xe0>
 800cf5a:	e014      	b.n	800cf86 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf5c:	f7fd ff0c 	bl	800ad78 <HAL_GetTick>
 800cf60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cf62:	e008      	b.n	800cf76 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cf64:	f7fd ff08 	bl	800ad78 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b64      	cmp	r3, #100	; 0x64
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e299      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cf76:	4b52      	ldr	r3, [pc, #328]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1f0      	bne.n	800cf64 <HAL_RCC_OscConfig+0x108>
 800cf82:	e000      	b.n	800cf86 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0302 	and.w	r3, r3, #2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d05a      	beq.n	800d048 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	d005      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2b0c      	cmp	r3, #12
 800cf9c:	d119      	bne.n	800cfd2 <HAL_RCC_OscConfig+0x176>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d116      	bne.n	800cfd2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfa4:	4b46      	ldr	r3, [pc, #280]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0302 	and.w	r3, r3, #2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <HAL_RCC_OscConfig+0x160>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d001      	beq.n	800cfbc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e276      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfbc:	4b40      	ldr	r3, [pc, #256]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	493d      	ldr	r1, [pc, #244]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfd0:	e03a      	b.n	800d048 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d020      	beq.n	800d01c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfda:	4b3a      	ldr	r3, [pc, #232]	; (800d0c4 <HAL_RCC_OscConfig+0x268>)
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfe0:	f7fd feca 	bl	800ad78 <HAL_GetTick>
 800cfe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cfe6:	e008      	b.n	800cffa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cfe8:	f7fd fec6 	bl	800ad78 <HAL_GetTick>
 800cfec:	4602      	mov	r2, r0
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d901      	bls.n	800cffa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cff6:	2303      	movs	r3, #3
 800cff8:	e257      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cffa:	4b31      	ldr	r3, [pc, #196]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0f0      	beq.n	800cfe8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d006:	4b2e      	ldr	r3, [pc, #184]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	021b      	lsls	r3, r3, #8
 800d014:	492a      	ldr	r1, [pc, #168]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d016:	4313      	orrs	r3, r2
 800d018:	604b      	str	r3, [r1, #4]
 800d01a:	e015      	b.n	800d048 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d01c:	4b29      	ldr	r3, [pc, #164]	; (800d0c4 <HAL_RCC_OscConfig+0x268>)
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d022:	f7fd fea9 	bl	800ad78 <HAL_GetTick>
 800d026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d028:	e008      	b.n	800d03c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d02a:	f7fd fea5 	bl	800ad78 <HAL_GetTick>
 800d02e:	4602      	mov	r2, r0
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	2b02      	cmp	r3, #2
 800d036:	d901      	bls.n	800d03c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e236      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d03c:	4b20      	ldr	r3, [pc, #128]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1f0      	bne.n	800d02a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0310 	and.w	r3, r3, #16
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 80b8 	beq.w	800d1c6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d170      	bne.n	800d13e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d05c:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d064:	2b00      	cmp	r3, #0
 800d066:	d005      	beq.n	800d074 <HAL_RCC_OscConfig+0x218>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e21a      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a1a      	ldr	r2, [r3, #32]
 800d078:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d080:	429a      	cmp	r2, r3
 800d082:	d921      	bls.n	800d0c8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fc09 	bl	800d8a0 <RCC_SetFlashLatencyFromMSIRange>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e208      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d098:	4b09      	ldr	r3, [pc, #36]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a1b      	ldr	r3, [r3, #32]
 800d0a4:	4906      	ldr	r1, [pc, #24]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	061b      	lsls	r3, r3, #24
 800d0b8:	4901      	ldr	r1, [pc, #4]	; (800d0c0 <HAL_RCC_OscConfig+0x264>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	604b      	str	r3, [r1, #4]
 800d0be:	e020      	b.n	800d102 <HAL_RCC_OscConfig+0x2a6>
 800d0c0:	40023800 	.word	0x40023800
 800d0c4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d0c8:	4ba4      	ldr	r3, [pc, #656]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a1b      	ldr	r3, [r3, #32]
 800d0d4:	49a1      	ldr	r1, [pc, #644]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d0da:	4ba0      	ldr	r3, [pc, #640]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	061b      	lsls	r3, r3, #24
 800d0e8:	499c      	ldr	r1, [pc, #624]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fbd4 	bl	800d8a0 <RCC_SetFlashLatencyFromMSIRange>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e1d3      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	0b5b      	lsrs	r3, r3, #13
 800d108:	3301      	adds	r3, #1
 800d10a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d10e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800d112:	4a92      	ldr	r2, [pc, #584]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d114:	6892      	ldr	r2, [r2, #8]
 800d116:	0912      	lsrs	r2, r2, #4
 800d118:	f002 020f 	and.w	r2, r2, #15
 800d11c:	4990      	ldr	r1, [pc, #576]	; (800d360 <HAL_RCC_OscConfig+0x504>)
 800d11e:	5c8a      	ldrb	r2, [r1, r2]
 800d120:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d122:	4a90      	ldr	r2, [pc, #576]	; (800d364 <HAL_RCC_OscConfig+0x508>)
 800d124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d126:	4b90      	ldr	r3, [pc, #576]	; (800d368 <HAL_RCC_OscConfig+0x50c>)
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd fd18 	bl	800ab60 <HAL_InitTick>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d045      	beq.n	800d1c6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	e1b5      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d029      	beq.n	800d19a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d146:	4b89      	ldr	r3, [pc, #548]	; (800d36c <HAL_RCC_OscConfig+0x510>)
 800d148:	2201      	movs	r2, #1
 800d14a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d14c:	f7fd fe14 	bl	800ad78 <HAL_GetTick>
 800d150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d152:	e008      	b.n	800d166 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d154:	f7fd fe10 	bl	800ad78 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d901      	bls.n	800d166 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e1a1      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d166:	4b7d      	ldr	r3, [pc, #500]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0f0      	beq.n	800d154 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d172:	4b7a      	ldr	r3, [pc, #488]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	4977      	ldr	r1, [pc, #476]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d180:	4313      	orrs	r3, r2
 800d182:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d184:	4b75      	ldr	r3, [pc, #468]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	69db      	ldr	r3, [r3, #28]
 800d190:	061b      	lsls	r3, r3, #24
 800d192:	4972      	ldr	r1, [pc, #456]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d194:	4313      	orrs	r3, r2
 800d196:	604b      	str	r3, [r1, #4]
 800d198:	e015      	b.n	800d1c6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d19a:	4b74      	ldr	r3, [pc, #464]	; (800d36c <HAL_RCC_OscConfig+0x510>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d1a0:	f7fd fdea 	bl	800ad78 <HAL_GetTick>
 800d1a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d1a6:	e008      	b.n	800d1ba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d1a8:	f7fd fde6 	bl	800ad78 <HAL_GetTick>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d901      	bls.n	800d1ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	e177      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d1ba:	4b68      	ldr	r3, [pc, #416]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d1f0      	bne.n	800d1a8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 0308 	and.w	r3, r3, #8
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d030      	beq.n	800d234 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d016      	beq.n	800d208 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1da:	4b65      	ldr	r3, [pc, #404]	; (800d370 <HAL_RCC_OscConfig+0x514>)
 800d1dc:	2201      	movs	r2, #1
 800d1de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1e0:	f7fd fdca 	bl	800ad78 <HAL_GetTick>
 800d1e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d1e6:	e008      	b.n	800d1fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1e8:	f7fd fdc6 	bl	800ad78 <HAL_GetTick>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d901      	bls.n	800d1fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	e157      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d1fa:	4b58      	ldr	r3, [pc, #352]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fe:	f003 0302 	and.w	r3, r3, #2
 800d202:	2b00      	cmp	r3, #0
 800d204:	d0f0      	beq.n	800d1e8 <HAL_RCC_OscConfig+0x38c>
 800d206:	e015      	b.n	800d234 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d208:	4b59      	ldr	r3, [pc, #356]	; (800d370 <HAL_RCC_OscConfig+0x514>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d20e:	f7fd fdb3 	bl	800ad78 <HAL_GetTick>
 800d212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d214:	e008      	b.n	800d228 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d216:	f7fd fdaf 	bl	800ad78 <HAL_GetTick>
 800d21a:	4602      	mov	r2, r0
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	2b02      	cmp	r3, #2
 800d222:	d901      	bls.n	800d228 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d224:	2303      	movs	r3, #3
 800d226:	e140      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d228:	4b4c      	ldr	r3, [pc, #304]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22c:	f003 0302 	and.w	r3, r3, #2
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1f0      	bne.n	800d216 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 80b5 	beq.w	800d3ac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d242:	2300      	movs	r3, #0
 800d244:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d246:	4b45      	ldr	r3, [pc, #276]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10d      	bne.n	800d26e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d252:	4b42      	ldr	r3, [pc, #264]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	4a41      	ldr	r2, [pc, #260]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d25c:	6253      	str	r3, [r2, #36]	; 0x24
 800d25e:	4b3f      	ldr	r3, [pc, #252]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d266:	60bb      	str	r3, [r7, #8]
 800d268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d26a:	2301      	movs	r3, #1
 800d26c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d26e:	4b41      	ldr	r3, [pc, #260]	; (800d374 <HAL_RCC_OscConfig+0x518>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d276:	2b00      	cmp	r3, #0
 800d278:	d118      	bne.n	800d2ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d27a:	4b3e      	ldr	r3, [pc, #248]	; (800d374 <HAL_RCC_OscConfig+0x518>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a3d      	ldr	r2, [pc, #244]	; (800d374 <HAL_RCC_OscConfig+0x518>)
 800d280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d286:	f7fd fd77 	bl	800ad78 <HAL_GetTick>
 800d28a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d28c:	e008      	b.n	800d2a0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d28e:	f7fd fd73 	bl	800ad78 <HAL_GetTick>
 800d292:	4602      	mov	r2, r0
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	2b64      	cmp	r3, #100	; 0x64
 800d29a:	d901      	bls.n	800d2a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e104      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2a0:	4b34      	ldr	r3, [pc, #208]	; (800d374 <HAL_RCC_OscConfig+0x518>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0f0      	beq.n	800d28e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d106      	bne.n	800d2c2 <HAL_RCC_OscConfig+0x466>
 800d2b4:	4b29      	ldr	r3, [pc, #164]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b8:	4a28      	ldr	r2, [pc, #160]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2be:	6353      	str	r3, [r2, #52]	; 0x34
 800d2c0:	e02d      	b.n	800d31e <HAL_RCC_OscConfig+0x4c2>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10c      	bne.n	800d2e4 <HAL_RCC_OscConfig+0x488>
 800d2ca:	4b24      	ldr	r3, [pc, #144]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ce:	4a23      	ldr	r2, [pc, #140]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2d4:	6353      	str	r3, [r2, #52]	; 0x34
 800d2d6:	4b21      	ldr	r3, [pc, #132]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2da:	4a20      	ldr	r2, [pc, #128]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2e0:	6353      	str	r3, [r2, #52]	; 0x34
 800d2e2:	e01c      	b.n	800d31e <HAL_RCC_OscConfig+0x4c2>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	2b05      	cmp	r3, #5
 800d2ea:	d10c      	bne.n	800d306 <HAL_RCC_OscConfig+0x4aa>
 800d2ec:	4b1b      	ldr	r3, [pc, #108]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f0:	4a1a      	ldr	r2, [pc, #104]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d2f6:	6353      	str	r3, [r2, #52]	; 0x34
 800d2f8:	4b18      	ldr	r3, [pc, #96]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fc:	4a17      	ldr	r2, [pc, #92]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d302:	6353      	str	r3, [r2, #52]	; 0x34
 800d304:	e00b      	b.n	800d31e <HAL_RCC_OscConfig+0x4c2>
 800d306:	4b15      	ldr	r3, [pc, #84]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30a:	4a14      	ldr	r2, [pc, #80]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d30c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d310:	6353      	str	r3, [r2, #52]	; 0x34
 800d312:	4b12      	ldr	r3, [pc, #72]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d316:	4a11      	ldr	r2, [pc, #68]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d31c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d015      	beq.n	800d352 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d326:	f7fd fd27 	bl	800ad78 <HAL_GetTick>
 800d32a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d32c:	e00a      	b.n	800d344 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d32e:	f7fd fd23 	bl	800ad78 <HAL_GetTick>
 800d332:	4602      	mov	r2, r0
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	f241 3288 	movw	r2, #5000	; 0x1388
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d901      	bls.n	800d344 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e0b2      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d344:	4b05      	ldr	r3, [pc, #20]	; (800d35c <HAL_RCC_OscConfig+0x500>)
 800d346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0ee      	beq.n	800d32e <HAL_RCC_OscConfig+0x4d2>
 800d350:	e023      	b.n	800d39a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d352:	f7fd fd11 	bl	800ad78 <HAL_GetTick>
 800d356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d358:	e019      	b.n	800d38e <HAL_RCC_OscConfig+0x532>
 800d35a:	bf00      	nop
 800d35c:	40023800 	.word	0x40023800
 800d360:	08010534 	.word	0x08010534
 800d364:	20008008 	.word	0x20008008
 800d368:	2000a040 	.word	0x2000a040
 800d36c:	42470020 	.word	0x42470020
 800d370:	42470680 	.word	0x42470680
 800d374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d378:	f7fd fcfe 	bl	800ad78 <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	f241 3288 	movw	r2, #5000	; 0x1388
 800d386:	4293      	cmp	r3, r2
 800d388:	d901      	bls.n	800d38e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800d38a:	2303      	movs	r3, #3
 800d38c:	e08d      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d38e:	4b49      	ldr	r3, [pc, #292]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1ee      	bne.n	800d378 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d39a:	7ffb      	ldrb	r3, [r7, #31]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d105      	bne.n	800d3ac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3a0:	4b44      	ldr	r3, [pc, #272]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a4:	4a43      	ldr	r2, [pc, #268]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3aa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d079      	beq.n	800d4a8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	2b0c      	cmp	r3, #12
 800d3b8:	d056      	beq.n	800d468 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d13b      	bne.n	800d43a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3c2:	4b3d      	ldr	r3, [pc, #244]	; (800d4b8 <HAL_RCC_OscConfig+0x65c>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3c8:	f7fd fcd6 	bl	800ad78 <HAL_GetTick>
 800d3cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d3ce:	e008      	b.n	800d3e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3d0:	f7fd fcd2 	bl	800ad78 <HAL_GetTick>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d901      	bls.n	800d3e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e063      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d3e2:	4b34      	ldr	r3, [pc, #208]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1f0      	bne.n	800d3d0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3ee:	4b31      	ldr	r3, [pc, #196]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fe:	4319      	orrs	r1, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d404:	430b      	orrs	r3, r1
 800d406:	492b      	ldr	r1, [pc, #172]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d408:	4313      	orrs	r3, r2
 800d40a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d40c:	4b2a      	ldr	r3, [pc, #168]	; (800d4b8 <HAL_RCC_OscConfig+0x65c>)
 800d40e:	2201      	movs	r2, #1
 800d410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d412:	f7fd fcb1 	bl	800ad78 <HAL_GetTick>
 800d416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d418:	e008      	b.n	800d42c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d41a:	f7fd fcad 	bl	800ad78 <HAL_GetTick>
 800d41e:	4602      	mov	r2, r0
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	2b02      	cmp	r3, #2
 800d426:	d901      	bls.n	800d42c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800d428:	2303      	movs	r3, #3
 800d42a:	e03e      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d42c:	4b21      	ldr	r3, [pc, #132]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0f0      	beq.n	800d41a <HAL_RCC_OscConfig+0x5be>
 800d438:	e036      	b.n	800d4a8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d43a:	4b1f      	ldr	r3, [pc, #124]	; (800d4b8 <HAL_RCC_OscConfig+0x65c>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d440:	f7fd fc9a 	bl	800ad78 <HAL_GetTick>
 800d444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d446:	e008      	b.n	800d45a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d448:	f7fd fc96 	bl	800ad78 <HAL_GetTick>
 800d44c:	4602      	mov	r2, r0
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	2b02      	cmp	r3, #2
 800d454:	d901      	bls.n	800d45a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e027      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d45a:	4b16      	ldr	r3, [pc, #88]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f0      	bne.n	800d448 <HAL_RCC_OscConfig+0x5ec>
 800d466:	e01f      	b.n	800d4a8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d101      	bne.n	800d474 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e01a      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d474:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <HAL_RCC_OscConfig+0x658>)
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d484:	429a      	cmp	r2, r3
 800d486:	d10d      	bne.n	800d4a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d492:	429a      	cmp	r2, r3
 800d494:	d106      	bne.n	800d4a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d001      	beq.n	800d4a8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e000      	b.n	800d4aa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3720      	adds	r7, #32
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	40023800 	.word	0x40023800
 800d4b8:	42470060 	.word	0x42470060

0800d4bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e11a      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4d0:	4b8f      	ldr	r3, [pc, #572]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d919      	bls.n	800d512 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d105      	bne.n	800d4f0 <HAL_RCC_ClockConfig+0x34>
 800d4e4:	4b8a      	ldr	r3, [pc, #552]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a89      	ldr	r2, [pc, #548]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d4ea:	f043 0304 	orr.w	r3, r3, #4
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	4b87      	ldr	r3, [pc, #540]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f023 0201 	bic.w	r2, r3, #1
 800d4f8:	4985      	ldr	r1, [pc, #532]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d500:	4b83      	ldr	r3, [pc, #524]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d001      	beq.n	800d512 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e0f9      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 0302 	and.w	r3, r3, #2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d008      	beq.n	800d530 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d51e:	4b7d      	ldr	r3, [pc, #500]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	497a      	ldr	r1, [pc, #488]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d52c:	4313      	orrs	r3, r2
 800d52e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 808e 	beq.w	800d65a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d107      	bne.n	800d556 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d546:	4b73      	ldr	r3, [pc, #460]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d121      	bne.n	800d596 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e0d7      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d107      	bne.n	800d56e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d55e:	4b6d      	ldr	r3, [pc, #436]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d115      	bne.n	800d596 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e0cb      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d107      	bne.n	800d586 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d576:	4b67      	ldr	r3, [pc, #412]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 0302 	and.w	r3, r3, #2
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e0bf      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d586:	4b63      	ldr	r3, [pc, #396]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e0b7      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d596:	4b5f      	ldr	r3, [pc, #380]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	f023 0203 	bic.w	r2, r3, #3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	495c      	ldr	r1, [pc, #368]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d5a8:	f7fd fbe6 	bl	800ad78 <HAL_GetTick>
 800d5ac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d112      	bne.n	800d5dc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d5b6:	e00a      	b.n	800d5ce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5b8:	f7fd fbde 	bl	800ad78 <HAL_GetTick>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d901      	bls.n	800d5ce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e09b      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d5ce:	4b51      	ldr	r3, [pc, #324]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f003 030c 	and.w	r3, r3, #12
 800d5d6:	2b08      	cmp	r3, #8
 800d5d8:	d1ee      	bne.n	800d5b8 <HAL_RCC_ClockConfig+0xfc>
 800d5da:	e03e      	b.n	800d65a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	2b03      	cmp	r3, #3
 800d5e2:	d112      	bne.n	800d60a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5e4:	e00a      	b.n	800d5fc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5e6:	f7fd fbc7 	bl	800ad78 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d901      	bls.n	800d5fc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	e084      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5fc:	4b45      	ldr	r3, [pc, #276]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	f003 030c 	and.w	r3, r3, #12
 800d604:	2b0c      	cmp	r3, #12
 800d606:	d1ee      	bne.n	800d5e6 <HAL_RCC_ClockConfig+0x12a>
 800d608:	e027      	b.n	800d65a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d11d      	bne.n	800d64e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d612:	e00a      	b.n	800d62a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d614:	f7fd fbb0 	bl	800ad78 <HAL_GetTick>
 800d618:	4602      	mov	r2, r0
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d622:	4293      	cmp	r3, r2
 800d624:	d901      	bls.n	800d62a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800d626:	2303      	movs	r3, #3
 800d628:	e06d      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d62a:	4b3a      	ldr	r3, [pc, #232]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f003 030c 	and.w	r3, r3, #12
 800d632:	2b04      	cmp	r3, #4
 800d634:	d1ee      	bne.n	800d614 <HAL_RCC_ClockConfig+0x158>
 800d636:	e010      	b.n	800d65a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d638:	f7fd fb9e 	bl	800ad78 <HAL_GetTick>
 800d63c:	4602      	mov	r2, r0
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	f241 3288 	movw	r2, #5000	; 0x1388
 800d646:	4293      	cmp	r3, r2
 800d648:	d901      	bls.n	800d64e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800d64a:	2303      	movs	r3, #3
 800d64c:	e05b      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d64e:	4b31      	ldr	r3, [pc, #196]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	f003 030c 	and.w	r3, r3, #12
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1ee      	bne.n	800d638 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d65a:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	429a      	cmp	r2, r3
 800d666:	d219      	bcs.n	800d69c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d105      	bne.n	800d67a <HAL_RCC_ClockConfig+0x1be>
 800d66e:	4b28      	ldr	r3, [pc, #160]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a27      	ldr	r2, [pc, #156]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d674:	f043 0304 	orr.w	r3, r3, #4
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	4b25      	ldr	r3, [pc, #148]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f023 0201 	bic.w	r2, r3, #1
 800d682:	4923      	ldr	r1, [pc, #140]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	4313      	orrs	r3, r2
 800d688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d68a:	4b21      	ldr	r3, [pc, #132]	; (800d710 <HAL_RCC_ClockConfig+0x254>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	429a      	cmp	r2, r3
 800d696:	d001      	beq.n	800d69c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e034      	b.n	800d706 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0304 	and.w	r3, r3, #4
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d008      	beq.n	800d6ba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6a8:	4b1a      	ldr	r3, [pc, #104]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	4917      	ldr	r1, [pc, #92]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f003 0308 	and.w	r3, r3, #8
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d009      	beq.n	800d6da <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d6c6:	4b13      	ldr	r3, [pc, #76]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	490f      	ldr	r1, [pc, #60]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d6da:	f000 f823 	bl	800d724 <HAL_RCC_GetSysClockFreq>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <HAL_RCC_ClockConfig+0x258>)
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	091b      	lsrs	r3, r3, #4
 800d6e6:	f003 030f 	and.w	r3, r3, #15
 800d6ea:	490b      	ldr	r1, [pc, #44]	; (800d718 <HAL_RCC_ClockConfig+0x25c>)
 800d6ec:	5ccb      	ldrb	r3, [r1, r3]
 800d6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d6f2:	4a0a      	ldr	r2, [pc, #40]	; (800d71c <HAL_RCC_ClockConfig+0x260>)
 800d6f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d6f6:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <HAL_RCC_ClockConfig+0x264>)
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fd fa30 	bl	800ab60 <HAL_InitTick>
 800d700:	4603      	mov	r3, r0
 800d702:	72fb      	strb	r3, [r7, #11]

  return status;
 800d704:	7afb      	ldrb	r3, [r7, #11]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	40023c00 	.word	0x40023c00
 800d714:	40023800 	.word	0x40023800
 800d718:	08010534 	.word	0x08010534
 800d71c:	20008008 	.word	0x20008008
 800d720:	2000a040 	.word	0x2000a040

0800d724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d724:	b480      	push	{r7}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800d72a:	4b28      	ldr	r3, [pc, #160]	; (800d7cc <HAL_RCC_GetSysClockFreq+0xa8>)
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f003 030c 	and.w	r3, r3, #12
 800d736:	2b0c      	cmp	r3, #12
 800d738:	d00c      	beq.n	800d754 <HAL_RCC_GetSysClockFreq+0x30>
 800d73a:	2b0c      	cmp	r3, #12
 800d73c:	d831      	bhi.n	800d7a2 <HAL_RCC_GetSysClockFreq+0x7e>
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d002      	beq.n	800d748 <HAL_RCC_GetSysClockFreq+0x24>
 800d742:	2b08      	cmp	r3, #8
 800d744:	d003      	beq.n	800d74e <HAL_RCC_GetSysClockFreq+0x2a>
 800d746:	e02c      	b.n	800d7a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d748:	4b21      	ldr	r3, [pc, #132]	; (800d7d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800d74a:	613b      	str	r3, [r7, #16]
      break;
 800d74c:	e037      	b.n	800d7be <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d74e:	4b21      	ldr	r3, [pc, #132]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800d750:	613b      	str	r3, [r7, #16]
      break;
 800d752:	e034      	b.n	800d7be <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	0c9b      	lsrs	r3, r3, #18
 800d758:	f003 030f 	and.w	r3, r3, #15
 800d75c:	4a1e      	ldr	r2, [pc, #120]	; (800d7d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800d75e:	5cd3      	ldrb	r3, [r2, r3]
 800d760:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	0d9b      	lsrs	r3, r3, #22
 800d766:	f003 0303 	and.w	r3, r3, #3
 800d76a:	3301      	adds	r3, #1
 800d76c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d76e:	4b17      	ldr	r3, [pc, #92]	; (800d7cc <HAL_RCC_GetSysClockFreq+0xa8>)
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d008      	beq.n	800d78c <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	4a15      	ldr	r2, [pc, #84]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800d77e:	fb02 f203 	mul.w	r2, r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	fbb2 f3f3 	udiv	r3, r2, r3
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e007      	b.n	800d79c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	4a10      	ldr	r2, [pc, #64]	; (800d7d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800d790:	fb02 f203 	mul.w	r2, r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	613b      	str	r3, [r7, #16]
      break;
 800d7a0:	e00d      	b.n	800d7be <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <HAL_RCC_GetSysClockFreq+0xa8>)
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	0b5b      	lsrs	r3, r3, #13
 800d7a8:	f003 0307 	and.w	r3, r3, #7
 800d7ac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ba:	613b      	str	r3, [r7, #16]
      break;
 800d7bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d7be:	693b      	ldr	r3, [r7, #16]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	371c      	adds	r7, #28
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bc80      	pop	{r7}
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	40023800 	.word	0x40023800
 800d7d0:	00f42400 	.word	0x00f42400
 800d7d4:	007a1200 	.word	0x007a1200
 800d7d8:	08010528 	.word	0x08010528

0800d7dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7e0:	4b02      	ldr	r3, [pc, #8]	; (800d7ec <HAL_RCC_GetHCLKFreq+0x10>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bc80      	pop	{r7}
 800d7ea:	4770      	bx	lr
 800d7ec:	20008008 	.word	0x20008008

0800d7f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d7f4:	f7ff fff2 	bl	800d7dc <HAL_RCC_GetHCLKFreq>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	4b05      	ldr	r3, [pc, #20]	; (800d810 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	0a1b      	lsrs	r3, r3, #8
 800d800:	f003 0307 	and.w	r3, r3, #7
 800d804:	4903      	ldr	r1, [pc, #12]	; (800d814 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d806:	5ccb      	ldrb	r3, [r1, r3]
 800d808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	40023800 	.word	0x40023800
 800d814:	08010544 	.word	0x08010544

0800d818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d81c:	f7ff ffde 	bl	800d7dc <HAL_RCC_GetHCLKFreq>
 800d820:	4602      	mov	r2, r0
 800d822:	4b05      	ldr	r3, [pc, #20]	; (800d838 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	0adb      	lsrs	r3, r3, #11
 800d828:	f003 0307 	and.w	r3, r3, #7
 800d82c:	4903      	ldr	r1, [pc, #12]	; (800d83c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d82e:	5ccb      	ldrb	r3, [r1, r3]
 800d830:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d834:	4618      	mov	r0, r3
 800d836:	bd80      	pop	{r7, pc}
 800d838:	40023800 	.word	0x40023800
 800d83c:	08010544 	.word	0x08010544

0800d840 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	220f      	movs	r2, #15
 800d84e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d850:	4b11      	ldr	r3, [pc, #68]	; (800d898 <HAL_RCC_GetClockConfig+0x58>)
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	f003 0203 	and.w	r2, r3, #3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d85c:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <HAL_RCC_GetClockConfig+0x58>)
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d868:	4b0b      	ldr	r3, [pc, #44]	; (800d898 <HAL_RCC_GetClockConfig+0x58>)
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d874:	4b08      	ldr	r3, [pc, #32]	; (800d898 <HAL_RCC_GetClockConfig+0x58>)
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	08db      	lsrs	r3, r3, #3
 800d87a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d882:	4b06      	ldr	r3, [pc, #24]	; (800d89c <HAL_RCC_GetClockConfig+0x5c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0201 	and.w	r2, r3, #1
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	601a      	str	r2, [r3, #0]
}
 800d88e:	bf00      	nop
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	bc80      	pop	{r7}
 800d896:	4770      	bx	lr
 800d898:	40023800 	.word	0x40023800
 800d89c:	40023c00 	.word	0x40023c00

0800d8a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d8ac:	4b29      	ldr	r3, [pc, #164]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d12c      	bne.n	800d912 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d8b8:	4b26      	ldr	r3, [pc, #152]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d005      	beq.n	800d8d0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800d8cc:	617b      	str	r3, [r7, #20]
 800d8ce:	e016      	b.n	800d8fe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8d0:	4b20      	ldr	r3, [pc, #128]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d4:	4a1f      	ldr	r2, [pc, #124]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8da:	6253      	str	r3, [r2, #36]	; 0x24
 800d8dc:	4b1d      	ldr	r3, [pc, #116]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e4:	60fb      	str	r3, [r7, #12]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800d8f0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8f2:	4b18      	ldr	r3, [pc, #96]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f6:	4a17      	ldr	r2, [pc, #92]	; (800d954 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d8f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8fc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800d904:	d105      	bne.n	800d912 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d90c:	d101      	bne.n	800d912 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800d90e:	2301      	movs	r3, #1
 800d910:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d105      	bne.n	800d924 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800d918:	4b10      	ldr	r3, [pc, #64]	; (800d95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a0f      	ldr	r2, [pc, #60]	; (800d95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d91e:	f043 0304 	orr.w	r3, r3, #4
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	4b0d      	ldr	r3, [pc, #52]	; (800d95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f023 0201 	bic.w	r2, r3, #1
 800d92c:	490b      	ldr	r1, [pc, #44]	; (800d95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	4313      	orrs	r3, r2
 800d932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d934:	4b09      	ldr	r3, [pc, #36]	; (800d95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d001      	beq.n	800d946 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	371c      	adds	r7, #28
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bc80      	pop	{r7}
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	40023800 	.word	0x40023800
 800d958:	40007000 	.word	0x40007000
 800d95c:	40023c00 	.word	0x40023c00

0800d960 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b088      	sub	sp, #32
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	099b      	lsrs	r3, r3, #6
 800d97c:	f003 0301 	and.w	r3, r3, #1
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10f      	bne.n	800d9a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	099b      	lsrs	r3, r3, #6
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	4798      	blx	r3
    return;
 800d9a2:	e0d7      	b.n	800db54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	085b      	lsrs	r3, r3, #1
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00a      	beq.n	800d9c6 <HAL_SPI_IRQHandler+0x66>
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	09db      	lsrs	r3, r3, #7
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	4798      	blx	r3
    return;
 800d9c4:	e0c6      	b.n	800db54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	095b      	lsrs	r3, r3, #5
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10c      	bne.n	800d9ec <HAL_SPI_IRQHandler+0x8c>
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	099b      	lsrs	r3, r3, #6
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	0a1b      	lsrs	r3, r3, #8
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 80b4 	beq.w	800db54 <HAL_SPI_IRQHandler+0x1f4>
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	095b      	lsrs	r3, r3, #5
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 80ad 	beq.w	800db54 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	099b      	lsrs	r3, r3, #6
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	2b00      	cmp	r3, #0
 800da04:	d023      	beq.n	800da4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d011      	beq.n	800da36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da16:	f043 0204 	orr.w	r2, r3, #4
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da1e:	2300      	movs	r3, #0
 800da20:	617b      	str	r3, [r7, #20]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	617b      	str	r3, [r7, #20]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	e00b      	b.n	800da4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da36:	2300      	movs	r3, #0
 800da38:	613b      	str	r3, [r7, #16]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	613b      	str	r3, [r7, #16]
 800da4a:	693b      	ldr	r3, [r7, #16]
        return;
 800da4c:	e082      	b.n	800db54 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	095b      	lsrs	r3, r3, #5
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	d014      	beq.n	800da84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5e:	f043 0201 	orr.w	r2, r3, #1
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800da66:	2300      	movs	r3, #0
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	0a1b      	lsrs	r3, r3, #8
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00c      	beq.n	800daaa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da94:	f043 0208 	orr.w	r2, r3, #8
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da9c:	2300      	movs	r3, #0
 800da9e:	60bb      	str	r3, [r7, #8]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	60bb      	str	r3, [r7, #8]
 800daa8:	68bb      	ldr	r3, [r7, #8]
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d04f      	beq.n	800db52 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dac0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	f003 0302 	and.w	r3, r3, #2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <HAL_SPI_IRQHandler+0x17e>
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d034      	beq.n	800db48 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 0203 	bic.w	r2, r2, #3
 800daec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d011      	beq.n	800db1a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dafa:	4a18      	ldr	r2, [pc, #96]	; (800db5c <HAL_SPI_IRQHandler+0x1fc>)
 800dafc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db02:	4618      	mov	r0, r3
 800db04:	f7fd fb3d 	bl	800b182 <HAL_DMA_Abort_IT>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d016      	beq.n	800db50 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db26:	4a0d      	ldr	r2, [pc, #52]	; (800db5c <HAL_SPI_IRQHandler+0x1fc>)
 800db28:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fd fb27 	bl	800b182 <HAL_DMA_Abort_IT>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800db46:	e003      	b.n	800db50 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f809 	bl	800db60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800db4e:	e000      	b.n	800db52 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800db50:	bf00      	nop
    return;
 800db52:	bf00      	nop
  }
}
 800db54:	3720      	adds	r7, #32
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	0800db73 	.word	0x0800db73

0800db60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bc80      	pop	{r7}
 800db70:	4770      	bx	lr

0800db72 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2200      	movs	r2, #0
 800db84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f7ff ffe7 	bl	800db60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db92:	bf00      	nop
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b082      	sub	sp, #8
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e01d      	b.n	800dbe8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d106      	bne.n	800dbc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f815 	bl	800dbf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4610      	mov	r0, r2
 800dbda:	f000 f935 	bl	800de48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bc80      	pop	{r7}
 800dc00:	4770      	bx	lr

0800dc02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68da      	ldr	r2, [r3, #12]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f042 0201 	orr.w	r2, r2, #1
 800dc18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f003 0307 	and.w	r3, r3, #7
 800dc24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b06      	cmp	r3, #6
 800dc2a:	d007      	beq.n	800dc3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f042 0201 	orr.w	r2, r2, #1
 800dc3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bc80      	pop	{r7}
 800dc46:	4770      	bx	lr

0800dc48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	f003 0302 	and.w	r3, r3, #2
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d122      	bne.n	800dca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	f003 0302 	and.w	r3, r3, #2
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d11b      	bne.n	800dca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f06f 0202 	mvn.w	r2, #2
 800dc74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f8c1 	bl	800de12 <HAL_TIM_IC_CaptureCallback>
 800dc90:	e005      	b.n	800dc9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f8b4 	bl	800de00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f8c3 	bl	800de24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	f003 0304 	and.w	r3, r3, #4
 800dcae:	2b04      	cmp	r3, #4
 800dcb0:	d122      	bne.n	800dcf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f003 0304 	and.w	r3, r3, #4
 800dcbc:	2b04      	cmp	r3, #4
 800dcbe:	d11b      	bne.n	800dcf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f06f 0204 	mvn.w	r2, #4
 800dcc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2202      	movs	r2, #2
 800dcce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f897 	bl	800de12 <HAL_TIM_IC_CaptureCallback>
 800dce4:	e005      	b.n	800dcf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f88a 	bl	800de00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f899 	bl	800de24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	d122      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f003 0308 	and.w	r3, r3, #8
 800dd10:	2b08      	cmp	r3, #8
 800dd12:	d11b      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f06f 0208 	mvn.w	r2, #8
 800dd1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2204      	movs	r2, #4
 800dd22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f86d 	bl	800de12 <HAL_TIM_IC_CaptureCallback>
 800dd38:	e005      	b.n	800dd46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f860 	bl	800de00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f86f 	bl	800de24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	f003 0310 	and.w	r3, r3, #16
 800dd56:	2b10      	cmp	r3, #16
 800dd58:	d122      	bne.n	800dda0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f003 0310 	and.w	r3, r3, #16
 800dd64:	2b10      	cmp	r3, #16
 800dd66:	d11b      	bne.n	800dda0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f06f 0210 	mvn.w	r2, #16
 800dd70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2208      	movs	r2, #8
 800dd76:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	69db      	ldr	r3, [r3, #28]
 800dd7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f843 	bl	800de12 <HAL_TIM_IC_CaptureCallback>
 800dd8c:	e005      	b.n	800dd9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f836 	bl	800de00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f845 	bl	800de24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d10e      	bne.n	800ddcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d107      	bne.n	800ddcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f06f 0201 	mvn.w	r2, #1
 800ddc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7fc fde6 	bl	800a998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd6:	2b40      	cmp	r3, #64	; 0x40
 800ddd8:	d10e      	bne.n	800ddf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde4:	2b40      	cmp	r3, #64	; 0x40
 800dde6:	d107      	bne.n	800ddf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f81f 	bl	800de36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddf8:	bf00      	nop
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bc80      	pop	{r7}
 800de10:	4770      	bx	lr

0800de12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	bc80      	pop	{r7}
 800de22:	4770      	bx	lr

0800de24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	bc80      	pop	{r7}
 800de34:	4770      	bx	lr

0800de36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de36:	b480      	push	{r7}
 800de38:	b083      	sub	sp, #12
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	bc80      	pop	{r7}
 800de46:	4770      	bx	lr

0800de48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5e:	d00f      	beq.n	800de80 <TIM_Base_SetConfig+0x38>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a2b      	ldr	r2, [pc, #172]	; (800df10 <TIM_Base_SetConfig+0xc8>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d00b      	beq.n	800de80 <TIM_Base_SetConfig+0x38>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a2a      	ldr	r2, [pc, #168]	; (800df14 <TIM_Base_SetConfig+0xcc>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d007      	beq.n	800de80 <TIM_Base_SetConfig+0x38>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a29      	ldr	r2, [pc, #164]	; (800df18 <TIM_Base_SetConfig+0xd0>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d003      	beq.n	800de80 <TIM_Base_SetConfig+0x38>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a28      	ldr	r2, [pc, #160]	; (800df1c <TIM_Base_SetConfig+0xd4>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d108      	bne.n	800de92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4313      	orrs	r3, r2
 800de90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de98:	d017      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a1c      	ldr	r2, [pc, #112]	; (800df10 <TIM_Base_SetConfig+0xc8>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d013      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <TIM_Base_SetConfig+0xcc>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d00f      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a1a      	ldr	r2, [pc, #104]	; (800df18 <TIM_Base_SetConfig+0xd0>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d00b      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a19      	ldr	r2, [pc, #100]	; (800df1c <TIM_Base_SetConfig+0xd4>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d007      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a18      	ldr	r2, [pc, #96]	; (800df20 <TIM_Base_SetConfig+0xd8>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d003      	beq.n	800deca <TIM_Base_SetConfig+0x82>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a17      	ldr	r2, [pc, #92]	; (800df24 <TIM_Base_SetConfig+0xdc>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d108      	bne.n	800dedc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ded0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	615a      	str	r2, [r3, #20]
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bc80      	pop	{r7}
 800df0e:	4770      	bx	lr
 800df10:	40000400 	.word	0x40000400
 800df14:	40000800 	.word	0x40000800
 800df18:	40000c00 	.word	0x40000c00
 800df1c:	40010800 	.word	0x40010800
 800df20:	40010c00 	.word	0x40010c00
 800df24:	40011000 	.word	0x40011000

0800df28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e03f      	b.n	800dfba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df40:	b2db      	uxtb	r3, r3
 800df42:	2b00      	cmp	r3, #0
 800df44:	d106      	bne.n	800df54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7fc fdc2 	bl	800aad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2224      	movs	r2, #36	; 0x24
 800df58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fa9f 	bl	800e4b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	691a      	ldr	r2, [r3, #16]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	695a      	ldr	r2, [r3, #20]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dfa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2220      	movs	r2, #32
 800dfac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfc2:	b480      	push	{r7}
 800dfc4:	b085      	sub	sp, #20
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	60f8      	str	r0, [r7, #12]
 800dfca:	60b9      	str	r1, [r7, #8]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b20      	cmp	r3, #32
 800dfda:	d140      	bne.n	800e05e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <HAL_UART_Receive_IT+0x26>
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e039      	b.n	800e060 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d101      	bne.n	800dffa <HAL_UART_Receive_IT+0x38>
 800dff6:	2302      	movs	r3, #2
 800dff8:	e032      	b.n	800e060 <HAL_UART_Receive_IT+0x9e>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	88fa      	ldrh	r2, [r7, #6]
 800e00c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	88fa      	ldrh	r2, [r7, #6]
 800e012:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2222      	movs	r2, #34	; 0x22
 800e01e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68da      	ldr	r2, [r3, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e038:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	695a      	ldr	r2, [r3, #20]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f042 0201 	orr.w	r2, r2, #1
 800e048:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	68da      	ldr	r2, [r3, #12]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f042 0220 	orr.w	r2, r2, #32
 800e058:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	e000      	b.n	800e060 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e05e:	2302      	movs	r3, #2
  }
}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	bc80      	pop	{r7}
 800e068:	4770      	bx	lr
	...

0800e06c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	f003 030f 	and.w	r3, r3, #15
 800e09a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10d      	bne.n	800e0be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	f003 0320 	and.w	r3, r3, #32
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <HAL_UART_IRQHandler+0x52>
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	f003 0320 	and.w	r3, r3, #32
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f979 	bl	800e3ae <UART_Receive_IT>
      return;
 800e0bc:	e0cb      	b.n	800e256 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f000 80ab 	beq.w	800e21c <HAL_UART_IRQHandler+0x1b0>
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d105      	bne.n	800e0dc <HAL_UART_IRQHandler+0x70>
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f000 80a0 	beq.w	800e21c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00a      	beq.n	800e0fc <HAL_UART_IRQHandler+0x90>
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d005      	beq.n	800e0fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f4:	f043 0201 	orr.w	r2, r3, #1
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <HAL_UART_IRQHandler+0xb0>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d005      	beq.n	800e11c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e114:	f043 0202 	orr.w	r2, r3, #2
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f003 0302 	and.w	r3, r3, #2
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00a      	beq.n	800e13c <HAL_UART_IRQHandler+0xd0>
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f003 0301 	and.w	r3, r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e134:	f043 0204 	orr.w	r2, r3, #4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	f003 0308 	and.w	r3, r3, #8
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00a      	beq.n	800e15c <HAL_UART_IRQHandler+0xf0>
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e154:	f043 0208 	orr.w	r2, r3, #8
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e160:	2b00      	cmp	r3, #0
 800e162:	d077      	beq.n	800e254 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	f003 0320 	and.w	r3, r3, #32
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <HAL_UART_IRQHandler+0x112>
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	f003 0320 	and.w	r3, r3, #32
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 f918 	bl	800e3ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e188:	2b40      	cmp	r3, #64	; 0x40
 800e18a:	bf0c      	ite	eq
 800e18c:	2301      	moveq	r3, #1
 800e18e:	2300      	movne	r3, #0
 800e190:	b2db      	uxtb	r3, r3
 800e192:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e198:	f003 0308 	and.w	r3, r3, #8
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d102      	bne.n	800e1a6 <HAL_UART_IRQHandler+0x13a>
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d031      	beq.n	800e20a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f863 	bl	800e272 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1b6:	2b40      	cmp	r3, #64	; 0x40
 800e1b8:	d123      	bne.n	800e202 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	695a      	ldr	r2, [r3, #20]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d013      	beq.n	800e1fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	4a21      	ldr	r2, [pc, #132]	; (800e25c <HAL_UART_IRQHandler+0x1f0>)
 800e1d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fc ffcf 	bl	800b182 <HAL_DMA_Abort_IT>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d016      	beq.n	800e218 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1f4:	4610      	mov	r0, r2
 800e1f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f8:	e00e      	b.n	800e218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f830 	bl	800e260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e200:	e00a      	b.n	800e218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f82c 	bl	800e260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e208:	e006      	b.n	800e218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f828 	bl	800e260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e216:	e01d      	b.n	800e254 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e218:	bf00      	nop
    return;
 800e21a:	e01b      	b.n	800e254 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <HAL_UART_IRQHandler+0x1cc>
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d003      	beq.n	800e238 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f84f 	bl	800e2d4 <UART_Transmit_IT>
    return;
 800e236:	e00e      	b.n	800e256 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d009      	beq.n	800e256 <HAL_UART_IRQHandler+0x1ea>
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d004      	beq.n	800e256 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 f896 	bl	800e37e <UART_EndTransmit_IT>
    return;
 800e252:	e000      	b.n	800e256 <HAL_UART_IRQHandler+0x1ea>
    return;
 800e254:	bf00      	nop
  }
}
 800e256:	3720      	adds	r7, #32
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	0800e2ad 	.word	0x0800e2ad

0800e260 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bc80      	pop	{r7}
 800e270:	4770      	bx	lr

0800e272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	68da      	ldr	r2, [r3, #12]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e288:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	695a      	ldr	r2, [r3, #20]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f022 0201 	bic.w	r2, r2, #1
 800e298:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2220      	movs	r2, #32
 800e29e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e2a2:	bf00      	nop
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bc80      	pop	{r7}
 800e2aa:	4770      	bx	lr

0800e2ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7ff ffca 	bl	800e260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2cc:	bf00      	nop
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b21      	cmp	r3, #33	; 0x21
 800e2e6:	d144      	bne.n	800e372 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2f0:	d11a      	bne.n	800e328 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e306:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d105      	bne.n	800e31c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a1b      	ldr	r3, [r3, #32]
 800e314:	1c9a      	adds	r2, r3, #2
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	621a      	str	r2, [r3, #32]
 800e31a:	e00e      	b.n	800e33a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a1b      	ldr	r3, [r3, #32]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	621a      	str	r2, [r3, #32]
 800e326:	e008      	b.n	800e33a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a1b      	ldr	r3, [r3, #32]
 800e32c:	1c59      	adds	r1, r3, #1
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6211      	str	r1, [r2, #32]
 800e332:	781a      	ldrb	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e33e:	b29b      	uxth	r3, r3
 800e340:	3b01      	subs	r3, #1
 800e342:	b29b      	uxth	r3, r3
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	4619      	mov	r1, r3
 800e348:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10f      	bne.n	800e36e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68da      	ldr	r2, [r3, #12]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e35c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68da      	ldr	r2, [r3, #12]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e36c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	e000      	b.n	800e374 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e372:	2302      	movs	r3, #2
  }
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	bc80      	pop	{r7}
 800e37c:	4770      	bx	lr

0800e37e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68da      	ldr	r2, [r3, #12]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2220      	movs	r2, #32
 800e39a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7fb fe2a 	bl	8009ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b22      	cmp	r3, #34	; 0x22
 800e3c0:	d171      	bne.n	800e4a6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3ca:	d123      	bne.n	800e414 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10e      	bne.n	800e3f8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f0:	1c9a      	adds	r2, r3, #2
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	629a      	str	r2, [r3, #40]	; 0x28
 800e3f6:	e029      	b.n	800e44c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	b2db      	uxtb	r3, r3
 800e402:	b29a      	uxth	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	629a      	str	r2, [r3, #40]	; 0x28
 800e412:	e01b      	b.n	800e44c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10a      	bne.n	800e432 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6858      	ldr	r0, [r3, #4]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e426:	1c59      	adds	r1, r3, #1
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	6291      	str	r1, [r2, #40]	; 0x28
 800e42c:	b2c2      	uxtb	r2, r0
 800e42e:	701a      	strb	r2, [r3, #0]
 800e430:	e00c      	b.n	800e44c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43e:	1c58      	adds	r0, r3, #1
 800e440:	6879      	ldr	r1, [r7, #4]
 800e442:	6288      	str	r0, [r1, #40]	; 0x28
 800e444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e448:	b2d2      	uxtb	r2, r2
 800e44a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e450:	b29b      	uxth	r3, r3
 800e452:	3b01      	subs	r3, #1
 800e454:	b29b      	uxth	r3, r3
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	4619      	mov	r1, r3
 800e45a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d120      	bne.n	800e4a2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68da      	ldr	r2, [r3, #12]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0220 	bic.w	r2, r2, #32
 800e46e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68da      	ldr	r2, [r3, #12]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e47e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	695a      	ldr	r2, [r3, #20]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f022 0201 	bic.w	r2, r2, #1
 800e48e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2220      	movs	r2, #32
 800e494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7fb fdd1 	bl	800a040 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e002      	b.n	800e4a8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e000      	b.n	800e4a8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e4a6:	2302      	movs	r3, #2
  }
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68da      	ldr	r2, [r3, #12]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689a      	ldr	r2, [r3, #8]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	431a      	orrs	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e4f0:	f023 030c 	bic.w	r3, r3, #12
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	6812      	ldr	r2, [r2, #0]
 800e4f8:	68f9      	ldr	r1, [r7, #12]
 800e4fa:	430b      	orrs	r3, r1
 800e4fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	699a      	ldr	r2, [r3, #24]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	69db      	ldr	r3, [r3, #28]
 800e518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e51c:	f040 80a5 	bne.w	800e66a <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4aa4      	ldr	r2, [pc, #656]	; (800e7b8 <UART_SetConfig+0x308>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d14f      	bne.n	800e5ca <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e52a:	f7ff f975 	bl	800d818 <HAL_RCC_GetPCLK2Freq>
 800e52e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009a      	lsls	r2, r3, #2
 800e53a:	441a      	add	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	005b      	lsls	r3, r3, #1
 800e542:	fbb2 f3f3 	udiv	r3, r2, r3
 800e546:	4a9d      	ldr	r2, [pc, #628]	; (800e7bc <UART_SetConfig+0x30c>)
 800e548:	fba2 2303 	umull	r2, r3, r2, r3
 800e54c:	095b      	lsrs	r3, r3, #5
 800e54e:	0119      	lsls	r1, r3, #4
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	4613      	mov	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	009a      	lsls	r2, r3, #2
 800e55a:	441a      	add	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	fbb2 f2f3 	udiv	r2, r2, r3
 800e566:	4b95      	ldr	r3, [pc, #596]	; (800e7bc <UART_SetConfig+0x30c>)
 800e568:	fba3 0302 	umull	r0, r3, r3, r2
 800e56c:	095b      	lsrs	r3, r3, #5
 800e56e:	2064      	movs	r0, #100	; 0x64
 800e570:	fb00 f303 	mul.w	r3, r0, r3
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	3332      	adds	r3, #50	; 0x32
 800e57a:	4a90      	ldr	r2, [pc, #576]	; (800e7bc <UART_SetConfig+0x30c>)
 800e57c:	fba2 2303 	umull	r2, r3, r2, r3
 800e580:	095b      	lsrs	r3, r3, #5
 800e582:	005b      	lsls	r3, r3, #1
 800e584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e588:	4419      	add	r1, r3
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	009a      	lsls	r2, r3, #2
 800e594:	441a      	add	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e5a0:	4b86      	ldr	r3, [pc, #536]	; (800e7bc <UART_SetConfig+0x30c>)
 800e5a2:	fba3 0302 	umull	r0, r3, r3, r2
 800e5a6:	095b      	lsrs	r3, r3, #5
 800e5a8:	2064      	movs	r0, #100	; 0x64
 800e5aa:	fb00 f303 	mul.w	r3, r0, r3
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	00db      	lsls	r3, r3, #3
 800e5b2:	3332      	adds	r3, #50	; 0x32
 800e5b4:	4a81      	ldr	r2, [pc, #516]	; (800e7bc <UART_SetConfig+0x30c>)
 800e5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ba:	095b      	lsrs	r3, r3, #5
 800e5bc:	f003 0207 	and.w	r2, r3, #7
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	440a      	add	r2, r1
 800e5c6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e5c8:	e0f1      	b.n	800e7ae <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e5ca:	f7ff f911 	bl	800d7f0 <HAL_RCC_GetPCLK1Freq>
 800e5ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	009a      	lsls	r2, r3, #2
 800e5da:	441a      	add	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e6:	4a75      	ldr	r2, [pc, #468]	; (800e7bc <UART_SetConfig+0x30c>)
 800e5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ec:	095b      	lsrs	r3, r3, #5
 800e5ee:	0119      	lsls	r1, r3, #4
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	009a      	lsls	r2, r3, #2
 800e5fa:	441a      	add	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	fbb2 f2f3 	udiv	r2, r2, r3
 800e606:	4b6d      	ldr	r3, [pc, #436]	; (800e7bc <UART_SetConfig+0x30c>)
 800e608:	fba3 0302 	umull	r0, r3, r3, r2
 800e60c:	095b      	lsrs	r3, r3, #5
 800e60e:	2064      	movs	r0, #100	; 0x64
 800e610:	fb00 f303 	mul.w	r3, r0, r3
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	3332      	adds	r3, #50	; 0x32
 800e61a:	4a68      	ldr	r2, [pc, #416]	; (800e7bc <UART_SetConfig+0x30c>)
 800e61c:	fba2 2303 	umull	r2, r3, r2, r3
 800e620:	095b      	lsrs	r3, r3, #5
 800e622:	005b      	lsls	r3, r3, #1
 800e624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e628:	4419      	add	r1, r3
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	4613      	mov	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	009a      	lsls	r2, r3, #2
 800e634:	441a      	add	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e640:	4b5e      	ldr	r3, [pc, #376]	; (800e7bc <UART_SetConfig+0x30c>)
 800e642:	fba3 0302 	umull	r0, r3, r3, r2
 800e646:	095b      	lsrs	r3, r3, #5
 800e648:	2064      	movs	r0, #100	; 0x64
 800e64a:	fb00 f303 	mul.w	r3, r0, r3
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	00db      	lsls	r3, r3, #3
 800e652:	3332      	adds	r3, #50	; 0x32
 800e654:	4a59      	ldr	r2, [pc, #356]	; (800e7bc <UART_SetConfig+0x30c>)
 800e656:	fba2 2303 	umull	r2, r3, r2, r3
 800e65a:	095b      	lsrs	r3, r3, #5
 800e65c:	f003 0207 	and.w	r2, r3, #7
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	440a      	add	r2, r1
 800e666:	609a      	str	r2, [r3, #8]
}
 800e668:	e0a1      	b.n	800e7ae <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a52      	ldr	r2, [pc, #328]	; (800e7b8 <UART_SetConfig+0x308>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d14e      	bne.n	800e712 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e674:	f7ff f8d0 	bl	800d818 <HAL_RCC_GetPCLK2Freq>
 800e678:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	009a      	lsls	r2, r3, #2
 800e684:	441a      	add	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e690:	4a4a      	ldr	r2, [pc, #296]	; (800e7bc <UART_SetConfig+0x30c>)
 800e692:	fba2 2303 	umull	r2, r3, r2, r3
 800e696:	095b      	lsrs	r3, r3, #5
 800e698:	0119      	lsls	r1, r3, #4
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009a      	lsls	r2, r3, #2
 800e6a4:	441a      	add	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800e6b0:	4b42      	ldr	r3, [pc, #264]	; (800e7bc <UART_SetConfig+0x30c>)
 800e6b2:	fba3 0302 	umull	r0, r3, r3, r2
 800e6b6:	095b      	lsrs	r3, r3, #5
 800e6b8:	2064      	movs	r0, #100	; 0x64
 800e6ba:	fb00 f303 	mul.w	r3, r0, r3
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	011b      	lsls	r3, r3, #4
 800e6c2:	3332      	adds	r3, #50	; 0x32
 800e6c4:	4a3d      	ldr	r2, [pc, #244]	; (800e7bc <UART_SetConfig+0x30c>)
 800e6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ca:	095b      	lsrs	r3, r3, #5
 800e6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6d0:	4419      	add	r1, r3
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	009a      	lsls	r2, r3, #2
 800e6dc:	441a      	add	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e6e8:	4b34      	ldr	r3, [pc, #208]	; (800e7bc <UART_SetConfig+0x30c>)
 800e6ea:	fba3 0302 	umull	r0, r3, r3, r2
 800e6ee:	095b      	lsrs	r3, r3, #5
 800e6f0:	2064      	movs	r0, #100	; 0x64
 800e6f2:	fb00 f303 	mul.w	r3, r0, r3
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	011b      	lsls	r3, r3, #4
 800e6fa:	3332      	adds	r3, #50	; 0x32
 800e6fc:	4a2f      	ldr	r2, [pc, #188]	; (800e7bc <UART_SetConfig+0x30c>)
 800e6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e702:	095b      	lsrs	r3, r3, #5
 800e704:	f003 020f 	and.w	r2, r3, #15
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	440a      	add	r2, r1
 800e70e:	609a      	str	r2, [r3, #8]
}
 800e710:	e04d      	b.n	800e7ae <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e712:	f7ff f86d 	bl	800d7f0 <HAL_RCC_GetPCLK1Freq>
 800e716:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009a      	lsls	r2, r3, #2
 800e722:	441a      	add	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e72e:	4a23      	ldr	r2, [pc, #140]	; (800e7bc <UART_SetConfig+0x30c>)
 800e730:	fba2 2303 	umull	r2, r3, r2, r3
 800e734:	095b      	lsrs	r3, r3, #5
 800e736:	0119      	lsls	r1, r3, #4
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	009a      	lsls	r2, r3, #2
 800e742:	441a      	add	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e74e:	4b1b      	ldr	r3, [pc, #108]	; (800e7bc <UART_SetConfig+0x30c>)
 800e750:	fba3 0302 	umull	r0, r3, r3, r2
 800e754:	095b      	lsrs	r3, r3, #5
 800e756:	2064      	movs	r0, #100	; 0x64
 800e758:	fb00 f303 	mul.w	r3, r0, r3
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	011b      	lsls	r3, r3, #4
 800e760:	3332      	adds	r3, #50	; 0x32
 800e762:	4a16      	ldr	r2, [pc, #88]	; (800e7bc <UART_SetConfig+0x30c>)
 800e764:	fba2 2303 	umull	r2, r3, r2, r3
 800e768:	095b      	lsrs	r3, r3, #5
 800e76a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e76e:	4419      	add	r1, r3
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009a      	lsls	r2, r3, #2
 800e77a:	441a      	add	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	fbb2 f2f3 	udiv	r2, r2, r3
 800e786:	4b0d      	ldr	r3, [pc, #52]	; (800e7bc <UART_SetConfig+0x30c>)
 800e788:	fba3 0302 	umull	r0, r3, r3, r2
 800e78c:	095b      	lsrs	r3, r3, #5
 800e78e:	2064      	movs	r0, #100	; 0x64
 800e790:	fb00 f303 	mul.w	r3, r0, r3
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	3332      	adds	r3, #50	; 0x32
 800e79a:	4a08      	ldr	r2, [pc, #32]	; (800e7bc <UART_SetConfig+0x30c>)
 800e79c:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a0:	095b      	lsrs	r3, r3, #5
 800e7a2:	f003 020f 	and.w	r2, r3, #15
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	609a      	str	r2, [r3, #8]
}
 800e7ae:	bf00      	nop
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	40013800 	.word	0x40013800
 800e7bc:	51eb851f 	.word	0x51eb851f

0800e7c0 <LL_GPIO_SetPinMode>:
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b089      	sub	sp, #36	; 0x24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	fa93 f3a3 	rbit	r3, r3
 800e7da:	613b      	str	r3, [r7, #16]
  return result;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	fab3 f383 	clz	r3, r3
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	2103      	movs	r1, #3
 800e7e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ec:	43db      	mvns	r3, r3
 800e7ee:	401a      	ands	r2, r3
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	fa93 f3a3 	rbit	r3, r3
 800e7fa:	61bb      	str	r3, [r7, #24]
  return result;
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	fab3 f383 	clz	r3, r3
 800e802:	b2db      	uxtb	r3, r3
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	fa01 f303 	lsl.w	r3, r1, r3
 800e80c:	431a      	orrs	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	601a      	str	r2, [r3, #0]
}
 800e812:	bf00      	nop
 800e814:	3724      	adds	r7, #36	; 0x24
 800e816:	46bd      	mov	sp, r7
 800e818:	bc80      	pop	{r7}
 800e81a:	4770      	bx	lr

0800e81c <LL_GPIO_SetPinOutputType>:
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	43db      	mvns	r3, r3
 800e830:	401a      	ands	r2, r3
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	fb01 f303 	mul.w	r3, r1, r3
 800e83a:	431a      	orrs	r2, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	605a      	str	r2, [r3, #4]
}
 800e840:	bf00      	nop
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	bc80      	pop	{r7}
 800e848:	4770      	bx	lr

0800e84a <LL_GPIO_SetPinSpeed>:
{
 800e84a:	b480      	push	{r7}
 800e84c:	b089      	sub	sp, #36	; 0x24
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	fa93 f3a3 	rbit	r3, r3
 800e864:	613b      	str	r3, [r7, #16]
  return result;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	fab3 f383 	clz	r3, r3
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	005b      	lsls	r3, r3, #1
 800e870:	2103      	movs	r1, #3
 800e872:	fa01 f303 	lsl.w	r3, r1, r3
 800e876:	43db      	mvns	r3, r3
 800e878:	401a      	ands	r2, r3
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	fa93 f3a3 	rbit	r3, r3
 800e884:	61bb      	str	r3, [r7, #24]
  return result;
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	fab3 f383 	clz	r3, r3
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	fa01 f303 	lsl.w	r3, r1, r3
 800e896:	431a      	orrs	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	609a      	str	r2, [r3, #8]
}
 800e89c:	bf00      	nop
 800e89e:	3724      	adds	r7, #36	; 0x24
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bc80      	pop	{r7}
 800e8a4:	4770      	bx	lr

0800e8a6 <LL_GPIO_SetPinPull>:
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b089      	sub	sp, #36	; 0x24
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	68da      	ldr	r2, [r3, #12]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	fa93 f3a3 	rbit	r3, r3
 800e8c0:	613b      	str	r3, [r7, #16]
  return result;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	fab3 f383 	clz	r3, r3
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	2103      	movs	r1, #3
 800e8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d2:	43db      	mvns	r3, r3
 800e8d4:	401a      	ands	r2, r3
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	fa93 f3a3 	rbit	r3, r3
 800e8e0:	61bb      	str	r3, [r7, #24]
  return result;
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	fab3 f383 	clz	r3, r3
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	60da      	str	r2, [r3, #12]
}
 800e8f8:	bf00      	nop
 800e8fa:	3724      	adds	r7, #36	; 0x24
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bc80      	pop	{r7}
 800e900:	4770      	bx	lr

0800e902 <LL_GPIO_SetAFPin_0_7>:
{
 800e902:	b480      	push	{r7}
 800e904:	b089      	sub	sp, #36	; 0x24
 800e906:	af00      	add	r7, sp, #0
 800e908:	60f8      	str	r0, [r7, #12]
 800e90a:	60b9      	str	r1, [r7, #8]
 800e90c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6a1a      	ldr	r2, [r3, #32]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	fa93 f3a3 	rbit	r3, r3
 800e91c:	613b      	str	r3, [r7, #16]
  return result;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	fab3 f383 	clz	r3, r3
 800e924:	b2db      	uxtb	r3, r3
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	210f      	movs	r1, #15
 800e92a:	fa01 f303 	lsl.w	r3, r1, r3
 800e92e:	43db      	mvns	r3, r3
 800e930:	401a      	ands	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	fa93 f3a3 	rbit	r3, r3
 800e93c:	61bb      	str	r3, [r7, #24]
  return result;
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	fab3 f383 	clz	r3, r3
 800e944:	b2db      	uxtb	r3, r3
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	6879      	ldr	r1, [r7, #4]
 800e94a:	fa01 f303 	lsl.w	r3, r1, r3
 800e94e:	431a      	orrs	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	621a      	str	r2, [r3, #32]
}
 800e954:	bf00      	nop
 800e956:	3724      	adds	r7, #36	; 0x24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bc80      	pop	{r7}
 800e95c:	4770      	bx	lr

0800e95e <LL_GPIO_SetAFPin_8_15>:
{
 800e95e:	b480      	push	{r7}
 800e960:	b089      	sub	sp, #36	; 0x24
 800e962:	af00      	add	r7, sp, #0
 800e964:	60f8      	str	r0, [r7, #12]
 800e966:	60b9      	str	r1, [r7, #8]
 800e968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	0a1b      	lsrs	r3, r3, #8
 800e972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	fa93 f3a3 	rbit	r3, r3
 800e97a:	613b      	str	r3, [r7, #16]
  return result;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	fab3 f383 	clz	r3, r3
 800e982:	b2db      	uxtb	r3, r3
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	210f      	movs	r1, #15
 800e988:	fa01 f303 	lsl.w	r3, r1, r3
 800e98c:	43db      	mvns	r3, r3
 800e98e:	401a      	ands	r2, r3
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	0a1b      	lsrs	r3, r3, #8
 800e994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	fa93 f3a3 	rbit	r3, r3
 800e99c:	61bb      	str	r3, [r7, #24]
  return result;
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	fab3 f383 	clz	r3, r3
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ae:	431a      	orrs	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e9b4:	bf00      	nop
 800e9b6:	3724      	adds	r7, #36	; 0x24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bc80      	pop	{r7}
 800e9bc:	4770      	bx	lr

0800e9be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b088      	sub	sp, #32
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	fa93 f3a3 	rbit	r3, r3
 800e9dc:	613b      	str	r3, [r7, #16]
  return result;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	fab3 f383 	clz	r3, r3
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e9e8:	e050      	b.n	800ea8c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d042      	beq.n	800ea86 <LL_GPIO_Init+0xc8>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d003      	beq.n	800ea10 <LL_GPIO_Init+0x52>
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	d10d      	bne.n	800ea2c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	461a      	mov	r2, r3
 800ea16:	69b9      	ldr	r1, [r7, #24]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7ff ff16 	bl	800e84a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	461a      	mov	r2, r3
 800ea24:	69b9      	ldr	r1, [r7, #24]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff fef8 	bl	800e81c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	461a      	mov	r2, r3
 800ea32:	69b9      	ldr	r1, [r7, #24]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff ff36 	bl	800e8a6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d11a      	bne.n	800ea78 <LL_GPIO_Init+0xba>
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	fa93 f3a3 	rbit	r3, r3
 800ea4c:	60bb      	str	r3, [r7, #8]
  return result;
 800ea4e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ea50:	fab3 f383 	clz	r3, r3
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b07      	cmp	r3, #7
 800ea58:	d807      	bhi.n	800ea6a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	695b      	ldr	r3, [r3, #20]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	69b9      	ldr	r1, [r7, #24]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7ff ff4d 	bl	800e902 <LL_GPIO_SetAFPin_0_7>
 800ea68:	e006      	b.n	800ea78 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	695b      	ldr	r3, [r3, #20]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	69b9      	ldr	r1, [r7, #24]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff ff73 	bl	800e95e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	69b9      	ldr	r1, [r7, #24]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff fe9d 	bl	800e7c0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	fa22 f303 	lsr.w	r3, r2, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1a7      	bne.n	800e9ea <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3720      	adds	r7, #32
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60b9      	str	r1, [r7, #8]
 800eaac:	607a      	str	r2, [r7, #4]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800eab4:	bf00      	nop
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bc80      	pop	{r7}
 800eabc:	4770      	bx	lr

0800eabe <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d003      	beq.n	800eadc <_out_char+0x1e>
    _putchar(character);
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fb fa76 	bl	8009fc8 <_putchar>
  }
}
 800eadc:	bf00      	nop
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e002      	b.n	800eafa <_strnlen_s+0x16>
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d004      	beq.n	800eb0c <_strnlen_s+0x28>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	1e5a      	subs	r2, r3, #1
 800eb06:	603a      	str	r2, [r7, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f3      	bne.n	800eaf4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	1ad3      	subs	r3, r2, r3
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3714      	adds	r7, #20
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bc80      	pop	{r7}
 800eb1a:	4770      	bx	lr

0800eb1c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	2b2f      	cmp	r3, #47	; 0x2f
 800eb2a:	d904      	bls.n	800eb36 <_is_digit+0x1a>
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	2b39      	cmp	r3, #57	; 0x39
 800eb30:	d801      	bhi.n	800eb36 <_is_digit+0x1a>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <_is_digit+0x1c>
 800eb36:	2300      	movs	r3, #0
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	b2db      	uxtb	r3, r3
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bc80      	pop	{r7}
 800eb46:	4770      	bx	lr

0800eb48 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800eb50:	2300      	movs	r3, #0
 800eb52:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800eb54:	e00e      	b.n	800eb74 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	4613      	mov	r3, r2
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	4413      	add	r3, r2
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4618      	mov	r0, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	1c59      	adds	r1, r3, #1
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	6011      	str	r1, [r2, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	4403      	add	r3, r0
 800eb70:	3b30      	subs	r3, #48	; 0x30
 800eb72:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ffce 	bl	800eb1c <_is_digit>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e7      	bne.n	800eb56 <_atoi+0xe>
  }
  return i;
 800eb86:	68fb      	ldr	r3, [r7, #12]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800eb90:	b590      	push	{r4, r7, lr}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	607a      	str	r2, [r7, #4]
 800eb9c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800eba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba4:	f003 0302 	and.w	r3, r3, #2
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d125      	bne.n	800ebf8 <_out_rev+0x68>
 800ebac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d120      	bne.n	800ebf8 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	e00a      	b.n	800ebd2 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	1c53      	adds	r3, r2, #1
 800ebc0:	607b      	str	r3, [r7, #4]
 800ebc2:	68fc      	ldr	r4, [r7, #12]
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	68b9      	ldr	r1, [r7, #8]
 800ebc8:	2020      	movs	r0, #32
 800ebca:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d3f0      	bcc.n	800ebbc <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800ebda:	e00d      	b.n	800ebf8 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	4413      	add	r3, r2
 800ebe8:	7818      	ldrb	r0, [r3, #0]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	1c53      	adds	r3, r2, #1
 800ebee:	607b      	str	r3, [r7, #4]
 800ebf0:	68fc      	ldr	r4, [r7, #12]
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	68b9      	ldr	r1, [r7, #8]
 800ebf6:	47a0      	blx	r4
  while (len) {
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1ee      	bne.n	800ebdc <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec00:	f003 0302 	and.w	r3, r3, #2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00e      	beq.n	800ec26 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800ec08:	e007      	b.n	800ec1a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	1c53      	adds	r3, r2, #1
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	68fc      	ldr	r4, [r7, #12]
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	68b9      	ldr	r1, [r7, #8]
 800ec16:	2020      	movs	r0, #32
 800ec18:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d8f1      	bhi.n	800ec0a <_out_rev+0x7a>
    }
  }

  return idx;
 800ec26:	687b      	ldr	r3, [r7, #4]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	371c      	adds	r7, #28
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}

0800ec30 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b088      	sub	sp, #32
 800ec34:	af04      	add	r7, sp, #16
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	f003 0302 	and.w	r3, r3, #2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d136      	bne.n	800ecb6 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d018      	beq.n	800ec80 <_ntoa_format+0x50>
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d013      	beq.n	800ec80 <_ntoa_format+0x50>
 800ec58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d104      	bne.n	800ec6a <_ntoa_format+0x3a>
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	f003 030c 	and.w	r3, r3, #12
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00a      	beq.n	800ec80 <_ntoa_format+0x50>
      width--;
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec70:	e006      	b.n	800ec80 <_ntoa_format+0x50>
      buf[len++] = '0';
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	1c5a      	adds	r2, r3, #1
 800ec76:	61fa      	str	r2, [r7, #28]
 800ec78:	69ba      	ldr	r2, [r7, #24]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	2230      	movs	r2, #48	; 0x30
 800ec7e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec80:	69fa      	ldr	r2, [r7, #28]
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d20a      	bcs.n	800ec9e <_ntoa_format+0x6e>
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	2b1f      	cmp	r3, #31
 800ec8c:	d9f1      	bls.n	800ec72 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec8e:	e006      	b.n	800ec9e <_ntoa_format+0x6e>
      buf[len++] = '0';
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	61fa      	str	r2, [r7, #28]
 800ec96:	69ba      	ldr	r2, [r7, #24]
 800ec98:	4413      	add	r3, r2
 800ec9a:	2230      	movs	r2, #48	; 0x30
 800ec9c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d006      	beq.n	800ecb6 <_ntoa_format+0x86>
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d202      	bcs.n	800ecb6 <_ntoa_format+0x86>
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	2b1f      	cmp	r3, #31
 800ecb4:	d9ec      	bls.n	800ec90 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	f003 0310 	and.w	r3, r3, #16
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d058      	beq.n	800ed72 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d116      	bne.n	800ecf8 <_ntoa_format+0xc8>
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d013      	beq.n	800ecf8 <_ntoa_format+0xc8>
 800ecd0:	69fa      	ldr	r2, [r7, #28]
 800ecd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d003      	beq.n	800ece0 <_ntoa_format+0xb0>
 800ecd8:	69fa      	ldr	r2, [r7, #28]
 800ecda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d10b      	bne.n	800ecf8 <_ntoa_format+0xc8>
      len--;
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d005      	beq.n	800ecf8 <_ntoa_format+0xc8>
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	2b10      	cmp	r3, #16
 800ecf0:	d102      	bne.n	800ecf8 <_ntoa_format+0xc8>
        len--;
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	2b10      	cmp	r3, #16
 800ecfc:	d10f      	bne.n	800ed1e <_ntoa_format+0xee>
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	f003 0320 	and.w	r3, r3, #32
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10a      	bne.n	800ed1e <_ntoa_format+0xee>
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	2b1f      	cmp	r3, #31
 800ed0c:	d807      	bhi.n	800ed1e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	1c5a      	adds	r2, r3, #1
 800ed12:	61fa      	str	r2, [r7, #28]
 800ed14:	69ba      	ldr	r2, [r7, #24]
 800ed16:	4413      	add	r3, r2
 800ed18:	2278      	movs	r2, #120	; 0x78
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	e01f      	b.n	800ed5e <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	2b10      	cmp	r3, #16
 800ed22:	d10f      	bne.n	800ed44 <_ntoa_format+0x114>
 800ed24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed26:	f003 0320 	and.w	r3, r3, #32
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <_ntoa_format+0x114>
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	2b1f      	cmp	r3, #31
 800ed32:	d807      	bhi.n	800ed44 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	61fa      	str	r2, [r7, #28]
 800ed3a:	69ba      	ldr	r2, [r7, #24]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	2258      	movs	r2, #88	; 0x58
 800ed40:	701a      	strb	r2, [r3, #0]
 800ed42:	e00c      	b.n	800ed5e <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d109      	bne.n	800ed5e <_ntoa_format+0x12e>
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	2b1f      	cmp	r3, #31
 800ed4e:	d806      	bhi.n	800ed5e <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	61fa      	str	r2, [r7, #28]
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	4413      	add	r3, r2
 800ed5a:	2262      	movs	r2, #98	; 0x62
 800ed5c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	2b1f      	cmp	r3, #31
 800ed62:	d806      	bhi.n	800ed72 <_ntoa_format+0x142>
      buf[len++] = '0';
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	1c5a      	adds	r2, r3, #1
 800ed68:	61fa      	str	r2, [r7, #28]
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	2230      	movs	r2, #48	; 0x30
 800ed70:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	2b1f      	cmp	r3, #31
 800ed76:	d824      	bhi.n	800edc2 <_ntoa_format+0x192>
    if (negative) {
 800ed78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d007      	beq.n	800ed90 <_ntoa_format+0x160>
      buf[len++] = '-';
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	61fa      	str	r2, [r7, #28]
 800ed86:	69ba      	ldr	r2, [r7, #24]
 800ed88:	4413      	add	r3, r2
 800ed8a:	222d      	movs	r2, #45	; 0x2d
 800ed8c:	701a      	strb	r2, [r3, #0]
 800ed8e:	e018      	b.n	800edc2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	f003 0304 	and.w	r3, r3, #4
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d007      	beq.n	800edaa <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	61fa      	str	r2, [r7, #28]
 800eda0:	69ba      	ldr	r2, [r7, #24]
 800eda2:	4413      	add	r3, r2
 800eda4:	222b      	movs	r2, #43	; 0x2b
 800eda6:	701a      	strb	r2, [r3, #0]
 800eda8:	e00b      	b.n	800edc2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	f003 0308 	and.w	r3, r3, #8
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d006      	beq.n	800edc2 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	61fa      	str	r2, [r7, #28]
 800edba:	69ba      	ldr	r2, [r7, #24]
 800edbc:	4413      	add	r3, r2
 800edbe:	2220      	movs	r2, #32
 800edc0:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	9303      	str	r3, [sp, #12]
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	9302      	str	r3, [sp, #8]
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	68b9      	ldr	r1, [r7, #8]
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f7ff fed9 	bl	800eb90 <_out_rev>
 800edde:	4603      	mov	r3, r0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b096      	sub	sp, #88	; 0x58
 800edec:	af08      	add	r7, sp, #32
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800edf6:	2300      	movs	r3, #0
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800edfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d103      	bne.n	800ee08 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800ee00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee02:	f023 0310 	bic.w	r3, r3, #16
 800ee06:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ee08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <_ntoa_long+0x30>
 800ee12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d033      	beq.n	800ee80 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800ee18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee22:	fb01 f202 	mul.w	r2, r1, r2
 800ee26:	1a9b      	subs	r3, r3, r2
 800ee28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ee2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee30:	2b09      	cmp	r3, #9
 800ee32:	d804      	bhi.n	800ee3e <_ntoa_long+0x56>
 800ee34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee38:	3330      	adds	r3, #48	; 0x30
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	e00d      	b.n	800ee5a <_ntoa_long+0x72>
 800ee3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee40:	f003 0320 	and.w	r3, r3, #32
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <_ntoa_long+0x64>
 800ee48:	2241      	movs	r2, #65	; 0x41
 800ee4a:	e000      	b.n	800ee4e <_ntoa_long+0x66>
 800ee4c:	2261      	movs	r2, #97	; 0x61
 800ee4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee52:	4413      	add	r3, r2
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	3b0a      	subs	r3, #10
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee5c:	1c59      	adds	r1, r3, #1
 800ee5e:	6379      	str	r1, [r7, #52]	; 0x34
 800ee60:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ee64:	440b      	add	r3, r1
 800ee66:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ee6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee72:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ee74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d002      	beq.n	800ee80 <_ntoa_long+0x98>
 800ee7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7c:	2b1f      	cmp	r3, #31
 800ee7e:	d9cb      	bls.n	800ee18 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ee80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee82:	9306      	str	r3, [sp, #24]
 800ee84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee86:	9305      	str	r3, [sp, #20]
 800ee88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee8a:	9304      	str	r3, [sp, #16]
 800ee8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee8e:	9303      	str	r3, [sp, #12]
 800ee90:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ee94:	9302      	str	r3, [sp, #8]
 800ee96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee98:	9301      	str	r3, [sp, #4]
 800ee9a:	f107 0310 	add.w	r3, r7, #16
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	68b9      	ldr	r1, [r7, #8]
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fec2 	bl	800ec30 <_ntoa_format>
 800eeac:	4603      	mov	r3, r0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3738      	adds	r7, #56	; 0x38
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b096      	sub	sp, #88	; 0x58
 800eeba:	af08      	add	r7, sp, #32
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800eec4:	2300      	movs	r3, #0
 800eec6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800eec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eecc:	4313      	orrs	r3, r2
 800eece:	d103      	bne.n	800eed8 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800eed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eed2:	f023 0310 	bic.w	r3, r3, #16
 800eed6:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800eed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <_ntoa_long_long+0x34>
 800eee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eee6:	4313      	orrs	r3, r2
 800eee8:	d038      	beq.n	800ef5c <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 800eeea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eeee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eef2:	f7fa fcd5 	bl	80098a0 <__aeabi_uldivmod>
 800eef6:	4613      	mov	r3, r2
 800eef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800eefc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef00:	2b09      	cmp	r3, #9
 800ef02:	d804      	bhi.n	800ef0e <_ntoa_long_long+0x58>
 800ef04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef08:	3330      	adds	r3, #48	; 0x30
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	e00d      	b.n	800ef2a <_ntoa_long_long+0x74>
 800ef0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef10:	f003 0320 	and.w	r3, r3, #32
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <_ntoa_long_long+0x66>
 800ef18:	2241      	movs	r2, #65	; 0x41
 800ef1a:	e000      	b.n	800ef1e <_ntoa_long_long+0x68>
 800ef1c:	2261      	movs	r2, #97	; 0x61
 800ef1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef22:	4413      	add	r3, r2
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	3b0a      	subs	r3, #10
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2c:	1c59      	adds	r1, r3, #1
 800ef2e:	6379      	str	r1, [r7, #52]	; 0x34
 800ef30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef34:	440b      	add	r3, r1
 800ef36:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ef3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ef42:	f7fa fcad 	bl	80098a0 <__aeabi_uldivmod>
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ef4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef52:	4313      	orrs	r3, r2
 800ef54:	d002      	beq.n	800ef5c <_ntoa_long_long+0xa6>
 800ef56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef58:	2b1f      	cmp	r3, #31
 800ef5a:	d9c6      	bls.n	800eeea <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ef5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef60:	9206      	str	r2, [sp, #24]
 800ef62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef64:	9205      	str	r2, [sp, #20]
 800ef66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef68:	9204      	str	r2, [sp, #16]
 800ef6a:	9303      	str	r3, [sp, #12]
 800ef6c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ef70:	9302      	str	r3, [sp, #8]
 800ef72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	f107 0310 	add.w	r3, r7, #16
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	68b9      	ldr	r1, [r7, #8]
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f7ff fe54 	bl	800ec30 <_ntoa_format>
 800ef88:	4603      	mov	r3, r0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3738      	adds	r7, #56	; 0x38
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	0000      	movs	r0, r0
 800ef94:	0000      	movs	r0, r0
	...

0800ef98 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ef98:	b590      	push	{r4, r7, lr}
 800ef9a:	b09d      	sub	sp, #116	; 0x74
 800ef9c:	af06      	add	r7, sp, #24
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
 800efa4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800efa6:	2300      	movs	r3, #0
 800efa8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800efaa:	f04f 0200 	mov.w	r2, #0
 800efae:	f04f 0300 	mov.w	r3, #0
 800efb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800efb6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800efba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800efbe:	f7fa fbf5 	bl	80097ac <__aeabi_dcmpeq>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d10f      	bne.n	800efe8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800efc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efca:	9303      	str	r3, [sp, #12]
 800efcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efce:	9302      	str	r3, [sp, #8]
 800efd0:	2303      	movs	r3, #3
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	4baa      	ldr	r3, [pc, #680]	; (800f280 <_ftoa+0x2e8>)
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	68b9      	ldr	r1, [r7, #8]
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff fdd6 	bl	800eb90 <_out_rev>
 800efe4:	4603      	mov	r3, r0
 800efe6:	e22d      	b.n	800f444 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 800efe8:	f04f 32ff 	mov.w	r2, #4294967295
 800efec:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800eff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800eff4:	f7fa fbe4 	bl	80097c0 <__aeabi_dcmplt>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00f      	beq.n	800f01e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800effe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f000:	9303      	str	r3, [sp, #12]
 800f002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f004:	9302      	str	r3, [sp, #8]
 800f006:	2304      	movs	r3, #4
 800f008:	9301      	str	r3, [sp, #4]
 800f00a:	4b9e      	ldr	r3, [pc, #632]	; (800f284 <_ftoa+0x2ec>)
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff fdbb 	bl	800eb90 <_out_rev>
 800f01a:	4603      	mov	r3, r0
 800f01c:	e212      	b.n	800f444 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 800f01e:	f04f 32ff 	mov.w	r2, #4294967295
 800f022:	4b99      	ldr	r3, [pc, #612]	; (800f288 <_ftoa+0x2f0>)
 800f024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f028:	f7fa fbe8 	bl	80097fc <__aeabi_dcmpgt>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01d      	beq.n	800f06e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800f032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f034:	f003 0304 	and.w	r3, r3, #4
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <_ftoa+0xa8>
 800f03c:	4b93      	ldr	r3, [pc, #588]	; (800f28c <_ftoa+0x2f4>)
 800f03e:	e000      	b.n	800f042 <_ftoa+0xaa>
 800f040:	4b93      	ldr	r3, [pc, #588]	; (800f290 <_ftoa+0x2f8>)
 800f042:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f044:	f002 0204 	and.w	r2, r2, #4
 800f048:	2a00      	cmp	r2, #0
 800f04a:	d001      	beq.n	800f050 <_ftoa+0xb8>
 800f04c:	2204      	movs	r2, #4
 800f04e:	e000      	b.n	800f052 <_ftoa+0xba>
 800f050:	2203      	movs	r2, #3
 800f052:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f054:	9103      	str	r1, [sp, #12]
 800f056:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f058:	9102      	str	r1, [sp, #8]
 800f05a:	9201      	str	r2, [sp, #4]
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	68b9      	ldr	r1, [r7, #8]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff fd93 	bl	800eb90 <_out_rev>
 800f06a:	4603      	mov	r3, r0
 800f06c:	e1ea      	b.n	800f444 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800f06e:	a380      	add	r3, pc, #512	; (adr r3, 800f270 <_ftoa+0x2d8>)
 800f070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f078:	f7fa fbc0 	bl	80097fc <__aeabi_dcmpgt>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d109      	bne.n	800f096 <_ftoa+0xfe>
 800f082:	a37d      	add	r3, pc, #500	; (adr r3, 800f278 <_ftoa+0x2e0>)
 800f084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f08c:	f7fa fb98 	bl	80097c0 <__aeabi_dcmplt>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d011      	beq.n	800f0ba <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f09c:	9303      	str	r3, [sp, #12]
 800f09e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0a0:	9302      	str	r3, [sp, #8]
 800f0a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f0a6:	e9cd 2300 	strd	r2, r3, [sp]
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	68b9      	ldr	r1, [r7, #8]
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f000 f9d1 	bl	800f458 <_etoa>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	e1c4      	b.n	800f444 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 800f0c0:	f04f 0200 	mov.w	r2, #0
 800f0c4:	f04f 0300 	mov.w	r3, #0
 800f0c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f0cc:	f7fa fb78 	bl	80097c0 <__aeabi_dcmplt>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00e      	beq.n	800f0f4 <_ftoa+0x15c>
    negative = true;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800f0dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f0e0:	f04f 0000 	mov.w	r0, #0
 800f0e4:	f04f 0100 	mov.w	r1, #0
 800f0e8:	f7f9 ff40 	bl	8008f6c <__aeabi_dsub>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800f0f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10e      	bne.n	800f11c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f0fe:	2306      	movs	r3, #6
 800f100:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f102:	e00b      	b.n	800f11c <_ftoa+0x184>
    buf[len++] = '0';
 800f104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	657a      	str	r2, [r7, #84]	; 0x54
 800f10a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f10e:	4413      	add	r3, r2
 800f110:	2230      	movs	r2, #48	; 0x30
 800f112:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800f116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f118:	3b01      	subs	r3, #1
 800f11a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11e:	2b1f      	cmp	r3, #31
 800f120:	d802      	bhi.n	800f128 <_ftoa+0x190>
 800f122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f124:	2b09      	cmp	r3, #9
 800f126:	d8ed      	bhi.n	800f104 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800f128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f12c:	f7fa fb70 	bl	8009810 <__aeabi_d2iz>
 800f130:	4603      	mov	r3, r0
 800f132:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800f134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f136:	f7fa f867 	bl	8009208 <__aeabi_i2d>
 800f13a:	4602      	mov	r2, r0
 800f13c:	460b      	mov	r3, r1
 800f13e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f142:	f7f9 ff13 	bl	8008f6c <__aeabi_dsub>
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	4610      	mov	r0, r2
 800f14c:	4619      	mov	r1, r3
 800f14e:	4a51      	ldr	r2, [pc, #324]	; (800f294 <_ftoa+0x2fc>)
 800f150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f152:	00db      	lsls	r3, r3, #3
 800f154:	4413      	add	r3, r2
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	f7fa f8bf 	bl	80092dc <__aeabi_dmul>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 800f166:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f16a:	f7fa fb79 	bl	8009860 <__aeabi_d2uiz>
 800f16e:	4603      	mov	r3, r0
 800f170:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 800f172:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f174:	f7fa f838 	bl	80091e8 <__aeabi_ui2d>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f180:	f7f9 fef4 	bl	8008f6c <__aeabi_dsub>
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800f18c:	f04f 0200 	mov.w	r2, #0
 800f190:	4b41      	ldr	r3, [pc, #260]	; (800f298 <_ftoa+0x300>)
 800f192:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f196:	f7fa fb31 	bl	80097fc <__aeabi_dcmpgt>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d016      	beq.n	800f1ce <_ftoa+0x236>
    ++frac;
 800f1a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800f1a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f1a8:	f7fa f81e 	bl	80091e8 <__aeabi_ui2d>
 800f1ac:	4a39      	ldr	r2, [pc, #228]	; (800f294 <_ftoa+0x2fc>)
 800f1ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	4413      	add	r3, r2
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	f7fa fb16 	bl	80097e8 <__aeabi_dcmpge>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d01a      	beq.n	800f1f8 <_ftoa+0x260>
      frac = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800f1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1cc:	e014      	b.n	800f1f8 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 800f1ce:	f04f 0200 	mov.w	r2, #0
 800f1d2:	4b31      	ldr	r3, [pc, #196]	; (800f298 <_ftoa+0x300>)
 800f1d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f1d8:	f7fa faf2 	bl	80097c0 <__aeabi_dcmplt>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10a      	bne.n	800f1f8 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800f1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d004      	beq.n	800f1f2 <_ftoa+0x25a>
 800f1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800f1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800f1f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d134      	bne.n	800f268 <_ftoa+0x2d0>
    diff = value - (double)whole;
 800f1fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f200:	f7fa f802 	bl	8009208 <__aeabi_i2d>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f20c:	f7f9 feae 	bl	8008f6c <__aeabi_dsub>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800f218:	2301      	movs	r3, #1
 800f21a:	461c      	mov	r4, r3
 800f21c:	f04f 0200 	mov.w	r2, #0
 800f220:	4b1d      	ldr	r3, [pc, #116]	; (800f298 <_ftoa+0x300>)
 800f222:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f226:	f7fa facb 	bl	80097c0 <__aeabi_dcmplt>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <_ftoa+0x29c>
 800f230:	2300      	movs	r3, #0
 800f232:	461c      	mov	r4, r3
 800f234:	b2e3      	uxtb	r3, r4
 800f236:	f083 0301 	eor.w	r3, r3, #1
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d109      	bne.n	800f254 <_ftoa+0x2bc>
 800f240:	f04f 0200 	mov.w	r2, #0
 800f244:	4b14      	ldr	r3, [pc, #80]	; (800f298 <_ftoa+0x300>)
 800f246:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f24a:	f7fa fad7 	bl	80097fc <__aeabi_dcmpgt>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d067      	beq.n	800f324 <_ftoa+0x38c>
 800f254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f256:	f003 0301 	and.w	r3, r3, #1
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f000 8085 	beq.w	800f36a <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800f260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f262:	3301      	adds	r3, #1
 800f264:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f266:	e080      	b.n	800f36a <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 800f268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f26a:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f26c:	e037      	b.n	800f2de <_ftoa+0x346>
 800f26e:	bf00      	nop
 800f270:	00000000 	.word	0x00000000
 800f274:	41cdcd65 	.word	0x41cdcd65
 800f278:	00000000 	.word	0x00000000
 800f27c:	c1cdcd65 	.word	0xc1cdcd65
 800f280:	080104c8 	.word	0x080104c8
 800f284:	080104cc 	.word	0x080104cc
 800f288:	7fefffff 	.word	0x7fefffff
 800f28c:	080104d4 	.word	0x080104d4
 800f290:	080104dc 	.word	0x080104dc
 800f294:	08010550 	.word	0x08010550
 800f298:	3fe00000 	.word	0x3fe00000
      --count;
 800f29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 800f2a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f2a4:	4b69      	ldr	r3, [pc, #420]	; (800f44c <_ftoa+0x4b4>)
 800f2a6:	fba3 2301 	umull	r2, r3, r3, r1
 800f2aa:	08da      	lsrs	r2, r3, #3
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	4413      	add	r3, r2
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	1aca      	subs	r2, r1, r3
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ba:	1c59      	adds	r1, r3, #1
 800f2bc:	6579      	str	r1, [r7, #84]	; 0x54
 800f2be:	3230      	adds	r2, #48	; 0x30
 800f2c0:	b2d2      	uxtb	r2, r2
 800f2c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f2c6:	440b      	add	r3, r1
 800f2c8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800f2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ce:	4a5f      	ldr	r2, [pc, #380]	; (800f44c <_ftoa+0x4b4>)
 800f2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d4:	08db      	lsrs	r3, r3, #3
 800f2d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2e0:	2b1f      	cmp	r3, #31
 800f2e2:	d9db      	bls.n	800f29c <_ftoa+0x304>
 800f2e4:	e00a      	b.n	800f2fc <_ftoa+0x364>
        break;
 800f2e6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f2e8:	e008      	b.n	800f2fc <_ftoa+0x364>
      buf[len++] = '0';
 800f2ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ec:	1c5a      	adds	r2, r3, #1
 800f2ee:	657a      	str	r2, [r7, #84]	; 0x54
 800f2f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f2f4:	4413      	add	r3, r2
 800f2f6:	2230      	movs	r2, #48	; 0x30
 800f2f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f2fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2fe:	2b1f      	cmp	r3, #31
 800f300:	d804      	bhi.n	800f30c <_ftoa+0x374>
 800f302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f304:	1e5a      	subs	r2, r3, #1
 800f306:	647a      	str	r2, [r7, #68]	; 0x44
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1ee      	bne.n	800f2ea <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f30e:	2b1f      	cmp	r3, #31
 800f310:	d82b      	bhi.n	800f36a <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 800f312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	657a      	str	r2, [r7, #84]	; 0x54
 800f318:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f31c:	4413      	add	r3, r2
 800f31e:	222e      	movs	r2, #46	; 0x2e
 800f320:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f324:	e021      	b.n	800f36a <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 800f326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f328:	4b49      	ldr	r3, [pc, #292]	; (800f450 <_ftoa+0x4b8>)
 800f32a:	fb83 1302 	smull	r1, r3, r3, r2
 800f32e:	1099      	asrs	r1, r3, #2
 800f330:	17d3      	asrs	r3, r2, #31
 800f332:	1ac9      	subs	r1, r1, r3
 800f334:	460b      	mov	r3, r1
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	440b      	add	r3, r1
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	1ad1      	subs	r1, r2, r3
 800f33e:	b2ca      	uxtb	r2, r1
 800f340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f342:	1c59      	adds	r1, r3, #1
 800f344:	6579      	str	r1, [r7, #84]	; 0x54
 800f346:	3230      	adds	r2, #48	; 0x30
 800f348:	b2d2      	uxtb	r2, r2
 800f34a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f34e:	440b      	add	r3, r1
 800f350:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800f354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f356:	4a3e      	ldr	r2, [pc, #248]	; (800f450 <_ftoa+0x4b8>)
 800f358:	fb82 1203 	smull	r1, r2, r2, r3
 800f35c:	1092      	asrs	r2, r2, #2
 800f35e:	17db      	asrs	r3, r3, #31
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f36c:	2b1f      	cmp	r3, #31
 800f36e:	d9da      	bls.n	800f326 <_ftoa+0x38e>
 800f370:	e000      	b.n	800f374 <_ftoa+0x3dc>
      break;
 800f372:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800f374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d124      	bne.n	800f3c8 <_ftoa+0x430>
 800f37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d01f      	beq.n	800f3c8 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800f388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d015      	beq.n	800f3ba <_ftoa+0x422>
 800f38e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f392:	2b00      	cmp	r3, #0
 800f394:	d104      	bne.n	800f3a0 <_ftoa+0x408>
 800f396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f398:	f003 030c 	and.w	r3, r3, #12
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00c      	beq.n	800f3ba <_ftoa+0x422>
      width--;
 800f3a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f3a6:	e008      	b.n	800f3ba <_ftoa+0x422>
      buf[len++] = '0';
 800f3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3aa:	1c5a      	adds	r2, r3, #1
 800f3ac:	657a      	str	r2, [r7, #84]	; 0x54
 800f3ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3b2:	4413      	add	r3, r2
 800f3b4:	2230      	movs	r2, #48	; 0x30
 800f3b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f3ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d202      	bcs.n	800f3c8 <_ftoa+0x430>
 800f3c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3c4:	2b1f      	cmp	r3, #31
 800f3c6:	d9ef      	bls.n	800f3a8 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f3c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ca:	2b1f      	cmp	r3, #31
 800f3cc:	d82a      	bhi.n	800f424 <_ftoa+0x48c>
    if (negative) {
 800f3ce:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d009      	beq.n	800f3ea <_ftoa+0x452>
      buf[len++] = '-';
 800f3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	657a      	str	r2, [r7, #84]	; 0x54
 800f3dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3e0:	4413      	add	r3, r2
 800f3e2:	222d      	movs	r2, #45	; 0x2d
 800f3e4:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f3e8:	e01c      	b.n	800f424 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 800f3ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d009      	beq.n	800f408 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800f3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	657a      	str	r2, [r7, #84]	; 0x54
 800f3fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3fe:	4413      	add	r3, r2
 800f400:	222b      	movs	r2, #43	; 0x2b
 800f402:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f406:	e00d      	b.n	800f424 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 800f408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f40a:	f003 0308 	and.w	r3, r3, #8
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d008      	beq.n	800f424 <_ftoa+0x48c>
      buf[len++] = ' ';
 800f412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	657a      	str	r2, [r7, #84]	; 0x54
 800f418:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f41c:	4413      	add	r3, r2
 800f41e:	2220      	movs	r2, #32
 800f420:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800f424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f426:	9303      	str	r3, [sp, #12]
 800f428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f42a:	9302      	str	r3, [sp, #8]
 800f42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	f107 0310 	add.w	r3, r7, #16
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff fba7 	bl	800eb90 <_out_rev>
 800f442:	4603      	mov	r3, r0
}
 800f444:	4618      	mov	r0, r3
 800f446:	375c      	adds	r7, #92	; 0x5c
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd90      	pop	{r4, r7, pc}
 800f44c:	cccccccd 	.word	0xcccccccd
 800f450:	66666667 	.word	0x66666667
 800f454:	00000000 	.word	0x00000000

0800f458 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	b09b      	sub	sp, #108	; 0x6c
 800f45e:	af06      	add	r7, sp, #24
 800f460:	6178      	str	r0, [r7, #20]
 800f462:	6139      	str	r1, [r7, #16]
 800f464:	60fa      	str	r2, [r7, #12]
 800f466:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800f468:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f46c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f470:	f7fa f99c 	bl	80097ac <__aeabi_dcmpeq>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d014      	beq.n	800f4a4 <_etoa+0x4c>
 800f47a:	f04f 32ff 	mov.w	r2, #4294967295
 800f47e:	4bc4      	ldr	r3, [pc, #784]	; (800f790 <_etoa+0x338>)
 800f480:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f484:	f7fa f9ba 	bl	80097fc <__aeabi_dcmpgt>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10a      	bne.n	800f4a4 <_etoa+0x4c>
 800f48e:	f04f 32ff 	mov.w	r2, #4294967295
 800f492:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f496:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f49a:	f7fa f991 	bl	80097c0 <__aeabi_dcmplt>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d014      	beq.n	800f4ce <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4a8:	9304      	str	r3, [sp, #16]
 800f4aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4ae:	9303      	str	r3, [sp, #12]
 800f4b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4b4:	9302      	str	r3, [sp, #8]
 800f4b6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f4ba:	e9cd 2300 	strd	r2, r3, [sp]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	6939      	ldr	r1, [r7, #16]
 800f4c4:	6978      	ldr	r0, [r7, #20]
 800f4c6:	f7ff fd67 	bl	800ef98 <_ftoa>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	e247      	b.n	800f95e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	461e      	mov	r6, r3
 800f4d2:	f04f 0200 	mov.w	r2, #0
 800f4d6:	f04f 0300 	mov.w	r3, #0
 800f4da:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f4de:	f7fa f96f 	bl	80097c0 <__aeabi_dcmplt>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <_etoa+0x94>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	461e      	mov	r6, r3
 800f4ec:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 800f4f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d005      	beq.n	800f504 <_etoa+0xac>
    value = -value;
 800f4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800f4fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f502:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800f504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f510:	2306      	movs	r3, #6
 800f512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800f516:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f51a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800f51e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	f04f 0300 	mov.w	r3, #0
 800f52a:	0d0a      	lsrs	r2, r1, #20
 800f52c:	2300      	movs	r3, #0
 800f52e:	4613      	mov	r3, r2
 800f530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f534:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f538:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800f53a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f53e:	f04f 30ff 	mov.w	r0, #4294967295
 800f542:	4994      	ldr	r1, [pc, #592]	; (800f794 <_etoa+0x33c>)
 800f544:	ea02 0400 	and.w	r4, r2, r0
 800f548:	ea03 0501 	and.w	r5, r3, r1
 800f54c:	f04f 0200 	mov.w	r2, #0
 800f550:	4b91      	ldr	r3, [pc, #580]	; (800f798 <_etoa+0x340>)
 800f552:	ea44 0802 	orr.w	r8, r4, r2
 800f556:	ea45 0903 	orr.w	r9, r5, r3
 800f55a:	e9c7 8906 	strd	r8, r9, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800f55e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f560:	f7f9 fe52 	bl	8009208 <__aeabi_i2d>
 800f564:	a37e      	add	r3, pc, #504	; (adr r3, 800f760 <_etoa+0x308>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f9 feb7 	bl	80092dc <__aeabi_dmul>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	4610      	mov	r0, r2
 800f574:	4619      	mov	r1, r3
 800f576:	a37c      	add	r3, pc, #496	; (adr r3, 800f768 <_etoa+0x310>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f9 fcf8 	bl	8008f70 <__adddf3>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4614      	mov	r4, r2
 800f586:	461d      	mov	r5, r3
 800f588:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f58c:	f04f 0200 	mov.w	r2, #0
 800f590:	4b82      	ldr	r3, [pc, #520]	; (800f79c <_etoa+0x344>)
 800f592:	f7f9 fceb 	bl	8008f6c <__aeabi_dsub>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4610      	mov	r0, r2
 800f59c:	4619      	mov	r1, r3
 800f59e:	a374      	add	r3, pc, #464	; (adr r3, 800f770 <_etoa+0x318>)
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	f7f9 fe9a 	bl	80092dc <__aeabi_dmul>
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	f7f9 fcde 	bl	8008f70 <__adddf3>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	f7fa f928 	bl	8009810 <__aeabi_d2iz>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800f5c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f5c6:	f7f9 fe1f 	bl	8009208 <__aeabi_i2d>
 800f5ca:	a36b      	add	r3, pc, #428	; (adr r3, 800f778 <_etoa+0x320>)
 800f5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d0:	f7f9 fe84 	bl	80092dc <__aeabi_dmul>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4610      	mov	r0, r2
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f04f 0200 	mov.w	r2, #0
 800f5e0:	4b6f      	ldr	r3, [pc, #444]	; (800f7a0 <_etoa+0x348>)
 800f5e2:	f7f9 fcc5 	bl	8008f70 <__adddf3>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	f7fa f90f 	bl	8009810 <__aeabi_d2iz>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800f5f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f5f8:	f7f9 fe06 	bl	8009208 <__aeabi_i2d>
 800f5fc:	a360      	add	r3, pc, #384	; (adr r3, 800f780 <_etoa+0x328>)
 800f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f602:	f7f9 fe6b 	bl	80092dc <__aeabi_dmul>
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	4614      	mov	r4, r2
 800f60c:	461d      	mov	r5, r3
 800f60e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f610:	f7f9 fdfa 	bl	8009208 <__aeabi_i2d>
 800f614:	a35c      	add	r3, pc, #368	; (adr r3, 800f788 <_etoa+0x330>)
 800f616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61a:	f7f9 fe5f 	bl	80092dc <__aeabi_dmul>
 800f61e:	4602      	mov	r2, r0
 800f620:	460b      	mov	r3, r1
 800f622:	4620      	mov	r0, r4
 800f624:	4629      	mov	r1, r5
 800f626:	f7f9 fca1 	bl	8008f6c <__aeabi_dsub>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 800f632:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f636:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f63a:	f7f9 fe4f 	bl	80092dc <__aeabi_dmul>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800f646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f648:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800f64c:	4618      	mov	r0, r3
 800f64e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f652:	f04f 0200 	mov.w	r2, #0
 800f656:	f04f 0300 	mov.w	r3, #0
 800f65a:	0503      	lsls	r3, r0, #20
 800f65c:	2200      	movs	r2, #0
 800f65e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800f662:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800f666:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f66a:	4602      	mov	r2, r0
 800f66c:	460b      	mov	r3, r1
 800f66e:	f7f9 fc7f 	bl	8008f70 <__adddf3>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	4690      	mov	r8, r2
 800f678:	4699      	mov	r9, r3
 800f67a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f67e:	f04f 0000 	mov.w	r0, #0
 800f682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f686:	f7f9 fc71 	bl	8008f6c <__aeabi_dsub>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4692      	mov	sl, r2
 800f690:	469b      	mov	fp, r3
 800f692:	f04f 0200 	mov.w	r2, #0
 800f696:	4b43      	ldr	r3, [pc, #268]	; (800f7a4 <_etoa+0x34c>)
 800f698:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f69c:	f7f9 ff48 	bl	8009530 <__aeabi_ddiv>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	f04f 0200 	mov.w	r2, #0
 800f6ac:	4b3e      	ldr	r3, [pc, #248]	; (800f7a8 <_etoa+0x350>)
 800f6ae:	f7f9 fc5f 	bl	8008f70 <__adddf3>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f6ba:	f7f9 ff39 	bl	8009530 <__aeabi_ddiv>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	f04f 0200 	mov.w	r2, #0
 800f6ca:	4b38      	ldr	r3, [pc, #224]	; (800f7ac <_etoa+0x354>)
 800f6cc:	f7f9 fc50 	bl	8008f70 <__adddf3>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f6d8:	f7f9 ff2a 	bl	8009530 <__aeabi_ddiv>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	4650      	mov	r0, sl
 800f6e2:	4659      	mov	r1, fp
 800f6e4:	f7f9 fc44 	bl	8008f70 <__adddf3>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	f7f9 ff1e 	bl	8009530 <__aeabi_ddiv>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	f04f 0200 	mov.w	r2, #0
 800f700:	4b25      	ldr	r3, [pc, #148]	; (800f798 <_etoa+0x340>)
 800f702:	f7f9 fc35 	bl	8008f70 <__adddf3>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4620      	mov	r0, r4
 800f70c:	4629      	mov	r1, r5
 800f70e:	f7f9 fde5 	bl	80092dc <__aeabi_dmul>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800f71a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f71e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f722:	f7fa f84d 	bl	80097c0 <__aeabi_dcmplt>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00d      	beq.n	800f748 <_etoa+0x2f0>
    expval--;
 800f72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f72e:	3b01      	subs	r3, #1
 800f730:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800f732:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f736:	f04f 0200 	mov.w	r2, #0
 800f73a:	4b1b      	ldr	r3, [pc, #108]	; (800f7a8 <_etoa+0x350>)
 800f73c:	f7f9 fef8 	bl	8009530 <__aeabi_ddiv>
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800f748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74a:	2b63      	cmp	r3, #99	; 0x63
 800f74c:	dc30      	bgt.n	800f7b0 <_etoa+0x358>
 800f74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f750:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800f754:	db2c      	blt.n	800f7b0 <_etoa+0x358>
 800f756:	2304      	movs	r3, #4
 800f758:	e02b      	b.n	800f7b2 <_etoa+0x35a>
 800f75a:	bf00      	nop
 800f75c:	f3af 8000 	nop.w
 800f760:	509f79fb 	.word	0x509f79fb
 800f764:	3fd34413 	.word	0x3fd34413
 800f768:	8b60c8b3 	.word	0x8b60c8b3
 800f76c:	3fc68a28 	.word	0x3fc68a28
 800f770:	636f4361 	.word	0x636f4361
 800f774:	3fd287a7 	.word	0x3fd287a7
 800f778:	0979a371 	.word	0x0979a371
 800f77c:	400a934f 	.word	0x400a934f
 800f780:	bbb55516 	.word	0xbbb55516
 800f784:	40026bb1 	.word	0x40026bb1
 800f788:	fefa39ef 	.word	0xfefa39ef
 800f78c:	3fe62e42 	.word	0x3fe62e42
 800f790:	7fefffff 	.word	0x7fefffff
 800f794:	000fffff 	.word	0x000fffff
 800f798:	3ff00000 	.word	0x3ff00000
 800f79c:	3ff80000 	.word	0x3ff80000
 800f7a0:	3fe00000 	.word	0x3fe00000
 800f7a4:	402c0000 	.word	0x402c0000
 800f7a8:	40240000 	.word	0x40240000
 800f7ac:	40180000 	.word	0x40180000
 800f7b0:	2305      	movs	r3, #5
 800f7b2:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800f7b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d03d      	beq.n	800f83c <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800f7c0:	a369      	add	r3, pc, #420	; (adr r3, 800f968 <_etoa+0x510>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f7ca:	f7fa f80d 	bl	80097e8 <__aeabi_dcmpge>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d024      	beq.n	800f81e <_etoa+0x3c6>
 800f7d4:	a366      	add	r3, pc, #408	; (adr r3, 800f970 <_etoa+0x518>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f7de:	f7f9 ffef 	bl	80097c0 <__aeabi_dcmplt>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01a      	beq.n	800f81e <_etoa+0x3c6>
      if ((int)prec > expval) {
 800f7e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	da07      	bge.n	800f802 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 800f7f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f800:	e002      	b.n	800f808 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800f808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f80c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800f814:	2300      	movs	r3, #0
 800f816:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800f818:	2300      	movs	r3, #0
 800f81a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f81c:	e00e      	b.n	800f83c <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800f81e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00a      	beq.n	800f83c <_etoa+0x3e4>
 800f826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f82a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d004      	beq.n	800f83c <_etoa+0x3e4>
        --prec;
 800f832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f836:	3b01      	subs	r3, #1
 800f838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800f83c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f840:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800f842:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f848:	429a      	cmp	r2, r3
 800f84a:	d904      	bls.n	800f856 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800f84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	647b      	str	r3, [r7, #68]	; 0x44
 800f854:	e001      	b.n	800f85a <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800f856:	2300      	movs	r3, #0
 800f858:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800f85a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f85e:	f003 0302 	and.w	r3, r3, #2
 800f862:	2b00      	cmp	r3, #0
 800f864:	d004      	beq.n	800f870 <_etoa+0x418>
 800f866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800f86c:	2300      	movs	r3, #0
 800f86e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800f870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f872:	2b00      	cmp	r3, #0
 800f874:	d009      	beq.n	800f88a <_etoa+0x432>
    value /= conv.F;
 800f876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f87a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f87e:	f7f9 fe57 	bl	8009530 <__aeabi_ddiv>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800f88e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f892:	2b00      	cmp	r3, #0
 800f894:	d006      	beq.n	800f8a4 <_etoa+0x44c>
 800f896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f898:	603b      	str	r3, [r7, #0]
 800f89a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f89c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f8a0:	607b      	str	r3, [r7, #4]
 800f8a2:	e003      	b.n	800f8ac <_etoa+0x454>
 800f8a4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800f8a8:	e9c7 3400 	strd	r3, r4, [r7]
 800f8ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8b4:	9304      	str	r3, [sp, #16]
 800f8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8b8:	9303      	str	r3, [sp, #12]
 800f8ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8be:	9302      	str	r3, [sp, #8]
 800f8c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f8c4:	e9cd 3400 	strd	r3, r4, [sp]
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	6939      	ldr	r1, [r7, #16]
 800f8ce:	6978      	ldr	r0, [r7, #20]
 800f8d0:	f7ff fb62 	bl	800ef98 <_ftoa>
 800f8d4:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800f8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d03f      	beq.n	800f95c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800f8dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8e0:	f003 0320 	and.w	r3, r3, #32
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <_etoa+0x494>
 800f8e8:	2045      	movs	r0, #69	; 0x45
 800f8ea:	e000      	b.n	800f8ee <_etoa+0x496>
 800f8ec:	2065      	movs	r0, #101	; 0x65
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	1c53      	adds	r3, r2, #1
 800f8f2:	60fb      	str	r3, [r7, #12]
 800f8f4:	697c      	ldr	r4, [r7, #20]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6939      	ldr	r1, [r7, #16]
 800f8fa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800f8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	bfb8      	it	lt
 800f902:	425b      	neglt	r3, r3
 800f904:	4618      	mov	r0, r3
 800f906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f908:	0fdb      	lsrs	r3, r3, #31
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f90e:	3a01      	subs	r2, #1
 800f910:	2105      	movs	r1, #5
 800f912:	9105      	str	r1, [sp, #20]
 800f914:	9204      	str	r2, [sp, #16]
 800f916:	2200      	movs	r2, #0
 800f918:	9203      	str	r2, [sp, #12]
 800f91a:	220a      	movs	r2, #10
 800f91c:	9202      	str	r2, [sp, #8]
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	9000      	str	r0, [sp, #0]
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	6939      	ldr	r1, [r7, #16]
 800f928:	6978      	ldr	r0, [r7, #20]
 800f92a:	f7ff fa5d 	bl	800ede8 <_ntoa_long>
 800f92e:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800f930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f934:	f003 0302 	and.w	r3, r3, #2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00f      	beq.n	800f95c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800f93c:	e007      	b.n	800f94e <_etoa+0x4f6>
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	1c53      	adds	r3, r2, #1
 800f942:	60fb      	str	r3, [r7, #12]
 800f944:	697c      	ldr	r4, [r7, #20]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	6939      	ldr	r1, [r7, #16]
 800f94a:	2020      	movs	r0, #32
 800f94c:	47a0      	blx	r4
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f958:	429a      	cmp	r2, r3
 800f95a:	d8f0      	bhi.n	800f93e <_etoa+0x4e6>
    }
  }
  return idx;
 800f95c:	68fb      	ldr	r3, [r7, #12]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3754      	adds	r7, #84	; 0x54
 800f962:	46bd      	mov	sp, r7
 800f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f968:	eb1c432d 	.word	0xeb1c432d
 800f96c:	3f1a36e2 	.word	0x3f1a36e2
 800f970:	00000000 	.word	0x00000000
 800f974:	412e8480 	.word	0x412e8480

0800f978 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800f978:	b5b0      	push	{r4, r5, r7, lr}
 800f97a:	b0a0      	sub	sp, #128	; 0x80
 800f97c:	af0a      	add	r7, sp, #40	; 0x28
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800f986:	2300      	movs	r3, #0
 800f988:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 8490 	bne.w	80102b2 <_vsnprintf+0x93a>
    // use null output function
    out = _out_null;
 800f992:	4ba0      	ldr	r3, [pc, #640]	; (800fc14 <_vsnprintf+0x29c>)
 800f994:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800f996:	f000 bc8c 	b.w	80102b2 <_vsnprintf+0x93a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2b25      	cmp	r3, #37	; 0x25
 800f9a0:	d00d      	beq.n	800f9be <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	7818      	ldrb	r0, [r3, #0]
 800f9a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9a8:	1c53      	adds	r3, r2, #1
 800f9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f9ac:	68fc      	ldr	r4, [r7, #12]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	47a0      	blx	r4
      format++;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	603b      	str	r3, [r7, #0]
      continue;
 800f9ba:	f000 bc7a 	b.w	80102b2 <_vsnprintf+0x93a>
    }
    else {
      // yes, evaluate it
      format++;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	3b20      	subs	r3, #32
 800f9ce:	2b10      	cmp	r3, #16
 800f9d0:	d856      	bhi.n	800fa80 <_vsnprintf+0x108>
 800f9d2:	a201      	add	r2, pc, #4	; (adr r2, 800f9d8 <_vsnprintf+0x60>)
 800f9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d8:	0800fa59 	.word	0x0800fa59
 800f9dc:	0800fa81 	.word	0x0800fa81
 800f9e0:	0800fa81 	.word	0x0800fa81
 800f9e4:	0800fa6d 	.word	0x0800fa6d
 800f9e8:	0800fa81 	.word	0x0800fa81
 800f9ec:	0800fa81 	.word	0x0800fa81
 800f9f0:	0800fa81 	.word	0x0800fa81
 800f9f4:	0800fa81 	.word	0x0800fa81
 800f9f8:	0800fa81 	.word	0x0800fa81
 800f9fc:	0800fa81 	.word	0x0800fa81
 800fa00:	0800fa81 	.word	0x0800fa81
 800fa04:	0800fa45 	.word	0x0800fa45
 800fa08:	0800fa81 	.word	0x0800fa81
 800fa0c:	0800fa31 	.word	0x0800fa31
 800fa10:	0800fa81 	.word	0x0800fa81
 800fa14:	0800fa81 	.word	0x0800fa81
 800fa18:	0800fa1d 	.word	0x0800fa1d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800fa1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa1e:	f043 0301 	orr.w	r3, r3, #1
 800fa22:	657b      	str	r3, [r7, #84]	; 0x54
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	3301      	adds	r3, #1
 800fa28:	603b      	str	r3, [r7, #0]
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa2e:	e02a      	b.n	800fa86 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800fa30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa32:	f043 0302 	orr.w	r3, r3, #2
 800fa36:	657b      	str	r3, [r7, #84]	; 0x54
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	603b      	str	r3, [r7, #0]
 800fa3e:	2301      	movs	r3, #1
 800fa40:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa42:	e020      	b.n	800fa86 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800fa44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa46:	f043 0304 	orr.w	r3, r3, #4
 800fa4a:	657b      	str	r3, [r7, #84]	; 0x54
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	603b      	str	r3, [r7, #0]
 800fa52:	2301      	movs	r3, #1
 800fa54:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa56:	e016      	b.n	800fa86 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800fa58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa5a:	f043 0308 	orr.w	r3, r3, #8
 800fa5e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	603b      	str	r3, [r7, #0]
 800fa66:	2301      	movs	r3, #1
 800fa68:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa6a:	e00c      	b.n	800fa86 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800fa6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa6e:	f043 0310 	orr.w	r3, r3, #16
 800fa72:	657b      	str	r3, [r7, #84]	; 0x54
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	3301      	adds	r3, #1
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa7e:	e002      	b.n	800fa86 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800fa80:	2300      	movs	r3, #0
 800fa82:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa84:	bf00      	nop
      }
    } while (n);
 800fa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d19d      	bne.n	800f9c8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff f841 	bl	800eb1c <_is_digit>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d005      	beq.n	800faac <_vsnprintf+0x134>
      width = _atoi(&format);
 800faa0:	463b      	mov	r3, r7
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff f850 	bl	800eb48 <_atoi>
 800faa8:	6538      	str	r0, [r7, #80]	; 0x50
 800faaa:	e018      	b.n	800fade <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b2a      	cmp	r3, #42	; 0x2a
 800fab2:	d114      	bne.n	800fade <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800fab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fab6:	1d1a      	adds	r2, r3, #4
 800fab8:	66ba      	str	r2, [r7, #104]	; 0x68
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	da07      	bge.n	800fad4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800fac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fac6:	f043 0302 	orr.w	r3, r3, #2
 800faca:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800facc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800face:	425b      	negs	r3, r3
 800fad0:	653b      	str	r3, [r7, #80]	; 0x50
 800fad2:	e001      	b.n	800fad8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800fad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	3301      	adds	r3, #1
 800fadc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800fade:	2300      	movs	r3, #0
 800fae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b2e      	cmp	r3, #46	; 0x2e
 800fae8:	d124      	bne.n	800fb34 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800faea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800faf0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	3301      	adds	r3, #1
 800faf6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff f80d 	bl	800eb1c <_is_digit>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d005      	beq.n	800fb14 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800fb08:	463b      	mov	r3, r7
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7ff f81c 	bl	800eb48 <_atoi>
 800fb10:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fb12:	e00f      	b.n	800fb34 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b2a      	cmp	r3, #42	; 0x2a
 800fb1a:	d10b      	bne.n	800fb34 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800fb1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb1e:	1d1a      	adds	r2, r3, #4
 800fb20:	66ba      	str	r2, [r7, #104]	; 0x68
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb2c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	3301      	adds	r3, #1
 800fb32:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	3b68      	subs	r3, #104	; 0x68
 800fb3a:	2b12      	cmp	r3, #18
 800fb3c:	d866      	bhi.n	800fc0c <_vsnprintf+0x294>
 800fb3e:	a201      	add	r2, pc, #4	; (adr r2, 800fb44 <_vsnprintf+0x1cc>)
 800fb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb44:	0800fbb7 	.word	0x0800fbb7
 800fb48:	0800fc0d 	.word	0x0800fc0d
 800fb4c:	0800fbed 	.word	0x0800fbed
 800fb50:	0800fc0d 	.word	0x0800fc0d
 800fb54:	0800fb91 	.word	0x0800fb91
 800fb58:	0800fc0d 	.word	0x0800fc0d
 800fb5c:	0800fc0d 	.word	0x0800fc0d
 800fb60:	0800fc0d 	.word	0x0800fc0d
 800fb64:	0800fc0d 	.word	0x0800fc0d
 800fb68:	0800fc0d 	.word	0x0800fc0d
 800fb6c:	0800fc0d 	.word	0x0800fc0d
 800fb70:	0800fc0d 	.word	0x0800fc0d
 800fb74:	0800fbdd 	.word	0x0800fbdd
 800fb78:	0800fc0d 	.word	0x0800fc0d
 800fb7c:	0800fc0d 	.word	0x0800fc0d
 800fb80:	0800fc0d 	.word	0x0800fc0d
 800fb84:	0800fc0d 	.word	0x0800fc0d
 800fb88:	0800fc0d 	.word	0x0800fc0d
 800fb8c:	0800fbfd 	.word	0x0800fbfd
      case 'l' :
        flags |= FLAGS_LONG;
 800fb90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb96:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	2b6c      	cmp	r3, #108	; 0x6c
 800fba4:	d134      	bne.n	800fc10 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800fba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fbac:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	603b      	str	r3, [r7, #0]
        }
        break;
 800fbb4:	e02c      	b.n	800fc10 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800fbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbbc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b68      	cmp	r3, #104	; 0x68
 800fbca:	d125      	bne.n	800fc18 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800fbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbd2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	603b      	str	r3, [r7, #0]
        }
        break;
 800fbda:	e01d      	b.n	800fc18 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fbdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbe2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	603b      	str	r3, [r7, #0]
        break;
 800fbea:	e016      	b.n	800fc1a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fbf2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	603b      	str	r3, [r7, #0]
        break;
 800fbfa:	e00e      	b.n	800fc1a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fbfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc02:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	3301      	adds	r3, #1
 800fc08:	603b      	str	r3, [r7, #0]
        break;
 800fc0a:	e006      	b.n	800fc1a <_vsnprintf+0x2a2>
      default :
        break;
 800fc0c:	bf00      	nop
 800fc0e:	e004      	b.n	800fc1a <_vsnprintf+0x2a2>
        break;
 800fc10:	bf00      	nop
 800fc12:	e002      	b.n	800fc1a <_vsnprintf+0x2a2>
 800fc14:	0800eaa5 	.word	0x0800eaa5
        break;
 800fc18:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	3b25      	subs	r3, #37	; 0x25
 800fc20:	2b53      	cmp	r3, #83	; 0x53
 800fc22:	f200 8339 	bhi.w	8010298 <_vsnprintf+0x920>
 800fc26:	a201      	add	r2, pc, #4	; (adr r2, 800fc2c <_vsnprintf+0x2b4>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	08010281 	.word	0x08010281
 800fc30:	08010299 	.word	0x08010299
 800fc34:	08010299 	.word	0x08010299
 800fc38:	08010299 	.word	0x08010299
 800fc3c:	08010299 	.word	0x08010299
 800fc40:	08010299 	.word	0x08010299
 800fc44:	08010299 	.word	0x08010299
 800fc48:	08010299 	.word	0x08010299
 800fc4c:	08010299 	.word	0x08010299
 800fc50:	08010299 	.word	0x08010299
 800fc54:	08010299 	.word	0x08010299
 800fc58:	08010299 	.word	0x08010299
 800fc5c:	08010299 	.word	0x08010299
 800fc60:	08010299 	.word	0x08010299
 800fc64:	08010299 	.word	0x08010299
 800fc68:	08010299 	.word	0x08010299
 800fc6c:	08010299 	.word	0x08010299
 800fc70:	08010299 	.word	0x08010299
 800fc74:	08010299 	.word	0x08010299
 800fc78:	08010299 	.word	0x08010299
 800fc7c:	08010299 	.word	0x08010299
 800fc80:	08010299 	.word	0x08010299
 800fc84:	08010299 	.word	0x08010299
 800fc88:	08010299 	.word	0x08010299
 800fc8c:	08010299 	.word	0x08010299
 800fc90:	08010299 	.word	0x08010299
 800fc94:	08010299 	.word	0x08010299
 800fc98:	08010299 	.word	0x08010299
 800fc9c:	08010299 	.word	0x08010299
 800fca0:	08010299 	.word	0x08010299
 800fca4:	08010299 	.word	0x08010299
 800fca8:	08010299 	.word	0x08010299
 800fcac:	08010053 	.word	0x08010053
 800fcb0:	0801000b 	.word	0x0801000b
 800fcb4:	08010053 	.word	0x08010053
 800fcb8:	08010299 	.word	0x08010299
 800fcbc:	08010299 	.word	0x08010299
 800fcc0:	08010299 	.word	0x08010299
 800fcc4:	08010299 	.word	0x08010299
 800fcc8:	08010299 	.word	0x08010299
 800fccc:	08010299 	.word	0x08010299
 800fcd0:	08010299 	.word	0x08010299
 800fcd4:	08010299 	.word	0x08010299
 800fcd8:	08010299 	.word	0x08010299
 800fcdc:	08010299 	.word	0x08010299
 800fce0:	08010299 	.word	0x08010299
 800fce4:	08010299 	.word	0x08010299
 800fce8:	08010299 	.word	0x08010299
 800fcec:	08010299 	.word	0x08010299
 800fcf0:	08010299 	.word	0x08010299
 800fcf4:	08010299 	.word	0x08010299
 800fcf8:	0800fd7d 	.word	0x0800fd7d
 800fcfc:	08010299 	.word	0x08010299
 800fd00:	08010299 	.word	0x08010299
 800fd04:	08010299 	.word	0x08010299
 800fd08:	08010299 	.word	0x08010299
 800fd0c:	08010299 	.word	0x08010299
 800fd10:	08010299 	.word	0x08010299
 800fd14:	08010299 	.word	0x08010299
 800fd18:	08010299 	.word	0x08010299
 800fd1c:	08010299 	.word	0x08010299
 800fd20:	0800fd7d 	.word	0x0800fd7d
 800fd24:	080100bb 	.word	0x080100bb
 800fd28:	0800fd7d 	.word	0x0800fd7d
 800fd2c:	08010053 	.word	0x08010053
 800fd30:	0801000b 	.word	0x0801000b
 800fd34:	08010053 	.word	0x08010053
 800fd38:	08010299 	.word	0x08010299
 800fd3c:	0800fd7d 	.word	0x0800fd7d
 800fd40:	08010299 	.word	0x08010299
 800fd44:	08010299 	.word	0x08010299
 800fd48:	08010299 	.word	0x08010299
 800fd4c:	08010299 	.word	0x08010299
 800fd50:	08010299 	.word	0x08010299
 800fd54:	0800fd7d 	.word	0x0800fd7d
 800fd58:	080101f3 	.word	0x080101f3
 800fd5c:	08010299 	.word	0x08010299
 800fd60:	08010299 	.word	0x08010299
 800fd64:	0801012f 	.word	0x0801012f
 800fd68:	08010299 	.word	0x08010299
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	08010299 	.word	0x08010299
 800fd74:	08010299 	.word	0x08010299
 800fd78:	0800fd7d 	.word	0x0800fd7d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	2b78      	cmp	r3, #120	; 0x78
 800fd82:	d003      	beq.n	800fd8c <_vsnprintf+0x414>
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b58      	cmp	r3, #88	; 0x58
 800fd8a:	d102      	bne.n	800fd92 <_vsnprintf+0x41a>
          base = 16U;
 800fd8c:	2310      	movs	r3, #16
 800fd8e:	643b      	str	r3, [r7, #64]	; 0x40
 800fd90:	e013      	b.n	800fdba <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	2b6f      	cmp	r3, #111	; 0x6f
 800fd98:	d102      	bne.n	800fda0 <_vsnprintf+0x428>
          base =  8U;
 800fd9a:	2308      	movs	r3, #8
 800fd9c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd9e:	e00c      	b.n	800fdba <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	2b62      	cmp	r3, #98	; 0x62
 800fda6:	d102      	bne.n	800fdae <_vsnprintf+0x436>
          base =  2U;
 800fda8:	2302      	movs	r3, #2
 800fdaa:	643b      	str	r3, [r7, #64]	; 0x40
 800fdac:	e005      	b.n	800fdba <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800fdae:	230a      	movs	r3, #10
 800fdb0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800fdb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdb4:	f023 0310 	bic.w	r3, r3, #16
 800fdb8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b58      	cmp	r3, #88	; 0x58
 800fdc0:	d103      	bne.n	800fdca <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800fdc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdc4:	f043 0320 	orr.w	r3, r3, #32
 800fdc8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	2b69      	cmp	r3, #105	; 0x69
 800fdd0:	d007      	beq.n	800fde2 <_vsnprintf+0x46a>
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2b64      	cmp	r3, #100	; 0x64
 800fdd8:	d003      	beq.n	800fde2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800fdda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fddc:	f023 030c 	bic.w	r3, r3, #12
 800fde0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800fde2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800fdec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdee:	f023 0301 	bic.w	r3, r3, #1
 800fdf2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2b69      	cmp	r3, #105	; 0x69
 800fdfa:	d004      	beq.n	800fe06 <_vsnprintf+0x48e>
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b64      	cmp	r3, #100	; 0x64
 800fe02:	f040 808e 	bne.w	800ff22 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800fe06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d02f      	beq.n	800fe70 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800fe10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe12:	3307      	adds	r3, #7
 800fe14:	f023 0307 	bic.w	r3, r3, #7
 800fe18:	f103 0208 	add.w	r2, r3, #8
 800fe1c:	66ba      	str	r2, [r7, #104]	; 0x68
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fe26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	f173 0100 	sbcs.w	r1, r3, #0
 800fe30:	da02      	bge.n	800fe38 <_vsnprintf+0x4c0>
 800fe32:	4252      	negs	r2, r2
 800fe34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	0fdb      	lsrs	r3, r3, #31
 800fe40:	b2dc      	uxtb	r4, r3
 800fe42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe44:	461a      	mov	r2, r3
 800fe46:	f04f 0300 	mov.w	r3, #0
 800fe4a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800fe4c:	9508      	str	r5, [sp, #32]
 800fe4e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fe50:	9507      	str	r5, [sp, #28]
 800fe52:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800fe54:	9506      	str	r5, [sp, #24]
 800fe56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe5a:	9402      	str	r4, [sp, #8]
 800fe5c:	e9cd 0100 	strd	r0, r1, [sp]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe64:	68b9      	ldr	r1, [r7, #8]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f7ff f825 	bl	800eeb6 <_ntoa_long_long>
 800fe6c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800fe6e:	e0c8      	b.n	8010002 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800fe70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d01e      	beq.n	800feb8 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 800fe7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe7c:	1d1a      	adds	r2, r3, #4
 800fe7e:	66ba      	str	r2, [r7, #104]	; 0x68
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	bfb8      	it	lt
 800fe8a:	425b      	neglt	r3, r3
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	0fdb      	lsrs	r3, r3, #31
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe96:	9205      	str	r2, [sp, #20]
 800fe98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe9a:	9204      	str	r2, [sp, #16]
 800fe9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe9e:	9203      	str	r2, [sp, #12]
 800fea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fea2:	9202      	str	r2, [sp, #8]
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	9100      	str	r1, [sp, #0]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feac:	68b9      	ldr	r1, [r7, #8]
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f7fe ff9a 	bl	800ede8 <_ntoa_long>
 800feb4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800feb6:	e0a4      	b.n	8010002 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800feb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d005      	beq.n	800fece <_vsnprintf+0x556>
 800fec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fec4:	1d1a      	adds	r2, r3, #4
 800fec6:	66ba      	str	r2, [r7, #104]	; 0x68
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	e00e      	b.n	800feec <_vsnprintf+0x574>
 800fece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d005      	beq.n	800fee4 <_vsnprintf+0x56c>
 800fed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feda:	1d1a      	adds	r2, r3, #4
 800fedc:	66ba      	str	r2, [r7, #104]	; 0x68
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	b21b      	sxth	r3, r3
 800fee2:	e003      	b.n	800feec <_vsnprintf+0x574>
 800fee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fee6:	1d1a      	adds	r2, r3, #4
 800fee8:	66ba      	str	r2, [r7, #104]	; 0x68
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	bfb8      	it	lt
 800fef4:	425b      	neglt	r3, r3
 800fef6:	4619      	mov	r1, r3
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	0fdb      	lsrs	r3, r3, #31
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff00:	9205      	str	r2, [sp, #20]
 800ff02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff04:	9204      	str	r2, [sp, #16]
 800ff06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff08:	9203      	str	r2, [sp, #12]
 800ff0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff0c:	9202      	str	r2, [sp, #8]
 800ff0e:	9301      	str	r3, [sp, #4]
 800ff10:	9100      	str	r1, [sp, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff16:	68b9      	ldr	r1, [r7, #8]
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7fe ff65 	bl	800ede8 <_ntoa_long>
 800ff1e:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ff20:	e06f      	b.n	8010002 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800ff22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d020      	beq.n	800ff6e <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ff2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff2e:	3307      	adds	r3, #7
 800ff30:	f023 0307 	bic.w	r3, r3, #7
 800ff34:	f103 0208 	add.w	r2, r3, #8
 800ff38:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff40:	4608      	mov	r0, r1
 800ff42:	f04f 0100 	mov.w	r1, #0
 800ff46:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800ff48:	9408      	str	r4, [sp, #32]
 800ff4a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800ff4c:	9407      	str	r4, [sp, #28]
 800ff4e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ff50:	9406      	str	r4, [sp, #24]
 800ff52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff56:	2100      	movs	r1, #0
 800ff58:	9102      	str	r1, [sp, #8]
 800ff5a:	e9cd 2300 	strd	r2, r3, [sp]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff62:	68b9      	ldr	r1, [r7, #8]
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f7fe ffa6 	bl	800eeb6 <_ntoa_long_long>
 800ff6a:	6478      	str	r0, [r7, #68]	; 0x44
 800ff6c:	e049      	b.n	8010002 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800ff6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d016      	beq.n	800ffa6 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800ff78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff7a:	1d1a      	adds	r2, r3, #4
 800ff7c:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff82:	9205      	str	r2, [sp, #20]
 800ff84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff86:	9204      	str	r2, [sp, #16]
 800ff88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff8a:	9203      	str	r2, [sp, #12]
 800ff8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff8e:	9202      	str	r2, [sp, #8]
 800ff90:	2200      	movs	r2, #0
 800ff92:	9201      	str	r2, [sp, #4]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff9a:	68b9      	ldr	r1, [r7, #8]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f7fe ff23 	bl	800ede8 <_ntoa_long>
 800ffa2:	6478      	str	r0, [r7, #68]	; 0x44
 800ffa4:	e02d      	b.n	8010002 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ffa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <_vsnprintf+0x644>
 800ffb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffb2:	1d1a      	adds	r2, r3, #4
 800ffb4:	66ba      	str	r2, [r7, #104]	; 0x68
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	e00e      	b.n	800ffda <_vsnprintf+0x662>
 800ffbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d005      	beq.n	800ffd2 <_vsnprintf+0x65a>
 800ffc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffc8:	1d1a      	adds	r2, r3, #4
 800ffca:	66ba      	str	r2, [r7, #104]	; 0x68
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	e003      	b.n	800ffda <_vsnprintf+0x662>
 800ffd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffd4:	1d1a      	adds	r2, r3, #4
 800ffd6:	66ba      	str	r2, [r7, #104]	; 0x68
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ffdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffde:	9305      	str	r3, [sp, #20]
 800ffe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffe2:	9304      	str	r3, [sp, #16]
 800ffe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffe6:	9303      	str	r3, [sp, #12]
 800ffe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffea:	9302      	str	r3, [sp, #8]
 800ffec:	2300      	movs	r3, #0
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fff8:	68b9      	ldr	r1, [r7, #8]
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f7fe fef4 	bl	800ede8 <_ntoa_long>
 8010000:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	3301      	adds	r3, #1
 8010006:	603b      	str	r3, [r7, #0]
        break;
 8010008:	e153      	b.n	80102b2 <_vsnprintf+0x93a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	2b46      	cmp	r3, #70	; 0x46
 8010010:	d103      	bne.n	801001a <_vsnprintf+0x6a2>
 8010012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010014:	f043 0320 	orr.w	r3, r3, #32
 8010018:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 801001a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801001c:	3307      	adds	r3, #7
 801001e:	f023 0307 	bic.w	r3, r3, #7
 8010022:	f103 0208 	add.w	r2, r3, #8
 8010026:	66ba      	str	r2, [r7, #104]	; 0x68
 8010028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801002e:	9104      	str	r1, [sp, #16]
 8010030:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010032:	9103      	str	r1, [sp, #12]
 8010034:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010036:	9102      	str	r1, [sp, #8]
 8010038:	e9cd 2300 	strd	r2, r3, [sp]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010040:	68b9      	ldr	r1, [r7, #8]
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f7fe ffa8 	bl	800ef98 <_ftoa>
 8010048:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	3301      	adds	r3, #1
 801004e:	603b      	str	r3, [r7, #0]
        break;
 8010050:	e12f      	b.n	80102b2 <_vsnprintf+0x93a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b67      	cmp	r3, #103	; 0x67
 8010058:	d003      	beq.n	8010062 <_vsnprintf+0x6ea>
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	2b47      	cmp	r3, #71	; 0x47
 8010060:	d103      	bne.n	801006a <_vsnprintf+0x6f2>
 8010062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010068:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	2b45      	cmp	r3, #69	; 0x45
 8010070:	d003      	beq.n	801007a <_vsnprintf+0x702>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b47      	cmp	r3, #71	; 0x47
 8010078:	d103      	bne.n	8010082 <_vsnprintf+0x70a>
 801007a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801007c:	f043 0320 	orr.w	r3, r3, #32
 8010080:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8010082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010084:	3307      	adds	r3, #7
 8010086:	f023 0307 	bic.w	r3, r3, #7
 801008a:	f103 0208 	add.w	r2, r3, #8
 801008e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010096:	9104      	str	r1, [sp, #16]
 8010098:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801009a:	9103      	str	r1, [sp, #12]
 801009c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801009e:	9102      	str	r1, [sp, #8]
 80100a0:	e9cd 2300 	strd	r2, r3, [sp]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100a8:	68b9      	ldr	r1, [r7, #8]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7ff f9d4 	bl	800f458 <_etoa>
 80100b0:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	3301      	adds	r3, #1
 80100b6:	603b      	str	r3, [r7, #0]
        break;
 80100b8:	e0fb      	b.n	80102b2 <_vsnprintf+0x93a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80100ba:	2301      	movs	r3, #1
 80100bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80100be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100c0:	f003 0302 	and.w	r3, r3, #2
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d10e      	bne.n	80100e6 <_vsnprintf+0x76e>
          while (l++ < width) {
 80100c8:	e007      	b.n	80100da <_vsnprintf+0x762>
            out(' ', buffer, idx++, maxlen);
 80100ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100cc:	1c53      	adds	r3, r2, #1
 80100ce:	647b      	str	r3, [r7, #68]	; 0x44
 80100d0:	68fc      	ldr	r4, [r7, #12]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	68b9      	ldr	r1, [r7, #8]
 80100d6:	2020      	movs	r0, #32
 80100d8:	47a0      	blx	r4
          while (l++ < width) {
 80100da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100dc:	1c5a      	adds	r2, r3, #1
 80100de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80100e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d8f1      	bhi.n	80100ca <_vsnprintf+0x752>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80100e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100e8:	1d1a      	adds	r2, r3, #4
 80100ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	b2d8      	uxtb	r0, r3
 80100f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100f2:	1c53      	adds	r3, r2, #1
 80100f4:	647b      	str	r3, [r7, #68]	; 0x44
 80100f6:	68fc      	ldr	r4, [r7, #12]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	68b9      	ldr	r1, [r7, #8]
 80100fc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80100fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010100:	f003 0302 	and.w	r3, r3, #2
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00e      	beq.n	8010126 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8010108:	e007      	b.n	801011a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 801010a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801010c:	1c53      	adds	r3, r2, #1
 801010e:	647b      	str	r3, [r7, #68]	; 0x44
 8010110:	68fc      	ldr	r4, [r7, #12]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	68b9      	ldr	r1, [r7, #8]
 8010116:	2020      	movs	r0, #32
 8010118:	47a0      	blx	r4
          while (l++ < width) {
 801011a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010122:	429a      	cmp	r2, r3
 8010124:	d8f1      	bhi.n	801010a <_vsnprintf+0x792>
          }
        }
        format++;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	3301      	adds	r3, #1
 801012a:	603b      	str	r3, [r7, #0]
        break;
 801012c:	e0c1      	b.n	80102b2 <_vsnprintf+0x93a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 801012e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010130:	1d1a      	adds	r2, r3, #4
 8010132:	66ba      	str	r2, [r7, #104]	; 0x68
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8010138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <_vsnprintf+0x7ca>
 801013e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010140:	e001      	b.n	8010146 <_vsnprintf+0x7ce>
 8010142:	f04f 33ff 	mov.w	r3, #4294967295
 8010146:	4619      	mov	r1, r3
 8010148:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801014a:	f7fe fccb 	bl	800eae4 <_strnlen_s>
 801014e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8010150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <_vsnprintf+0x7ee>
          l = (l < precision ? l : precision);
 801015a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801015c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801015e:	4293      	cmp	r3, r2
 8010160:	bf28      	it	cs
 8010162:	4613      	movcs	r3, r2
 8010164:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8010166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010168:	f003 0302 	and.w	r3, r3, #2
 801016c:	2b00      	cmp	r3, #0
 801016e:	d11a      	bne.n	80101a6 <_vsnprintf+0x82e>
          while (l++ < width) {
 8010170:	e007      	b.n	8010182 <_vsnprintf+0x80a>
            out(' ', buffer, idx++, maxlen);
 8010172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010174:	1c53      	adds	r3, r2, #1
 8010176:	647b      	str	r3, [r7, #68]	; 0x44
 8010178:	68fc      	ldr	r4, [r7, #12]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68b9      	ldr	r1, [r7, #8]
 801017e:	2020      	movs	r0, #32
 8010180:	47a0      	blx	r4
          while (l++ < width) {
 8010182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010184:	1c5a      	adds	r2, r3, #1
 8010186:	637a      	str	r2, [r7, #52]	; 0x34
 8010188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801018a:	429a      	cmp	r2, r3
 801018c:	d8f1      	bhi.n	8010172 <_vsnprintf+0x7fa>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801018e:	e00a      	b.n	80101a6 <_vsnprintf+0x82e>
          out(*(p++), buffer, idx++, maxlen);
 8010190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	63ba      	str	r2, [r7, #56]	; 0x38
 8010196:	7818      	ldrb	r0, [r3, #0]
 8010198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801019a:	1c53      	adds	r3, r2, #1
 801019c:	647b      	str	r3, [r7, #68]	; 0x44
 801019e:	68fc      	ldr	r4, [r7, #12]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d009      	beq.n	80101c2 <_vsnprintf+0x84a>
 80101ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d0eb      	beq.n	8010190 <_vsnprintf+0x818>
 80101b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ba:	1e5a      	subs	r2, r3, #1
 80101bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1e6      	bne.n	8010190 <_vsnprintf+0x818>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80101c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c4:	f003 0302 	and.w	r3, r3, #2
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00e      	beq.n	80101ea <_vsnprintf+0x872>
          while (l++ < width) {
 80101cc:	e007      	b.n	80101de <_vsnprintf+0x866>
            out(' ', buffer, idx++, maxlen);
 80101ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101d0:	1c53      	adds	r3, r2, #1
 80101d2:	647b      	str	r3, [r7, #68]	; 0x44
 80101d4:	68fc      	ldr	r4, [r7, #12]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68b9      	ldr	r1, [r7, #8]
 80101da:	2020      	movs	r0, #32
 80101dc:	47a0      	blx	r4
          while (l++ < width) {
 80101de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e0:	1c5a      	adds	r2, r3, #1
 80101e2:	637a      	str	r2, [r7, #52]	; 0x34
 80101e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d8f1      	bhi.n	80101ce <_vsnprintf+0x856>
          }
        }
        format++;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	3301      	adds	r3, #1
 80101ee:	603b      	str	r3, [r7, #0]
        break;
 80101f0:	e05f      	b.n	80102b2 <_vsnprintf+0x93a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80101f2:	2308      	movs	r3, #8
 80101f4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80101f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101f8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80101fc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80101fe:	2300      	movs	r3, #0
 8010200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8010204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01e      	beq.n	801024a <_vsnprintf+0x8d2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 801020c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	66ba      	str	r2, [r7, #104]	; 0x68
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	461a      	mov	r2, r3
 8010216:	f04f 0300 	mov.w	r3, #0
 801021a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801021c:	9108      	str	r1, [sp, #32]
 801021e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010220:	9107      	str	r1, [sp, #28]
 8010222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010224:	9106      	str	r1, [sp, #24]
 8010226:	f04f 0010 	mov.w	r0, #16
 801022a:	f04f 0100 	mov.w	r1, #0
 801022e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010232:	2100      	movs	r1, #0
 8010234:	9102      	str	r1, [sp, #8]
 8010236:	e9cd 2300 	strd	r2, r3, [sp]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7fe fe38 	bl	800eeb6 <_ntoa_long_long>
 8010246:	6478      	str	r0, [r7, #68]	; 0x44
 8010248:	e016      	b.n	8010278 <_vsnprintf+0x900>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 801024a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801024c:	1d1a      	adds	r2, r3, #4
 801024e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010256:	9305      	str	r3, [sp, #20]
 8010258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801025e:	9303      	str	r3, [sp, #12]
 8010260:	2310      	movs	r3, #16
 8010262:	9302      	str	r3, [sp, #8]
 8010264:	2300      	movs	r3, #0
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	9200      	str	r2, [sp, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801026e:	68b9      	ldr	r1, [r7, #8]
 8010270:	68f8      	ldr	r0, [r7, #12]
 8010272:	f7fe fdb9 	bl	800ede8 <_ntoa_long>
 8010276:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	3301      	adds	r3, #1
 801027c:	603b      	str	r3, [r7, #0]
        break;
 801027e:	e018      	b.n	80102b2 <_vsnprintf+0x93a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8010280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010282:	1c53      	adds	r3, r2, #1
 8010284:	647b      	str	r3, [r7, #68]	; 0x44
 8010286:	68fc      	ldr	r4, [r7, #12]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	68b9      	ldr	r1, [r7, #8]
 801028c:	2025      	movs	r0, #37	; 0x25
 801028e:	47a0      	blx	r4
        format++;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	603b      	str	r3, [r7, #0]
        break;
 8010296:	e00c      	b.n	80102b2 <_vsnprintf+0x93a>

      default :
        out(*format, buffer, idx++, maxlen);
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	7818      	ldrb	r0, [r3, #0]
 801029c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801029e:	1c53      	adds	r3, r2, #1
 80102a0:	647b      	str	r3, [r7, #68]	; 0x44
 80102a2:	68fc      	ldr	r4, [r7, #12]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68b9      	ldr	r1, [r7, #8]
 80102a8:	47a0      	blx	r4
        format++;
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	3301      	adds	r3, #1
 80102ae:	603b      	str	r3, [r7, #0]
        break;
 80102b0:	bf00      	nop
  while (*format)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f47f ab6f 	bne.w	800f99a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80102bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d302      	bcc.n	80102ca <_vsnprintf+0x952>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	1e5a      	subs	r2, r3, #1
 80102c8:	e000      	b.n	80102cc <_vsnprintf+0x954>
 80102ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102cc:	68fc      	ldr	r4, [r7, #12]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	2000      	movs	r0, #0
 80102d4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80102d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3758      	adds	r7, #88	; 0x58
 80102dc:	46bd      	mov	sp, r7
 80102de:	bdb0      	pop	{r4, r5, r7, pc}

080102e0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80102e0:	b40f      	push	{r0, r1, r2, r3}
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b086      	sub	sp, #24
 80102e6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80102e8:	f107 031c 	add.w	r3, r7, #28
 80102ec:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80102ee:	1d39      	adds	r1, r7, #4
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	f04f 32ff 	mov.w	r2, #4294967295
 80102fa:	4806      	ldr	r0, [pc, #24]	; (8010314 <printf_+0x34>)
 80102fc:	f7ff fb3c 	bl	800f978 <_vsnprintf>
 8010300:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8010302:	68fb      	ldr	r3, [r7, #12]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801030e:	b004      	add	sp, #16
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	0800eabf 	.word	0x0800eabf

08010318 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 8010318:	f01e 0f04 	tst.w	lr, #4
 801031c:	bf0c      	ite	eq
 801031e:	f3ef 8008 	mrseq	r0, MSP
 8010322:	f3ef 8009 	mrsne	r0, PSP
 8010326:	f8df 1004 	ldr.w	r1, [pc, #4]	; 801032c <handler_address_const>
 801032a:	4708      	bx	r1

0801032c <handler_address_const>:
 801032c:	08009f59 	.word	0x08009f59
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 8010330:	bf00      	nop
	...

08010334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8010334:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8010336:	e003      	b.n	8010340 <LoopCopyDataInit>

08010338 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8010338:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 801033a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 801033c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 801033e:	3104      	adds	r1, #4

08010340 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8010340:	480a      	ldr	r0, [pc, #40]	; (801036c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8010342:	4b0b      	ldr	r3, [pc, #44]	; (8010370 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8010344:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8010346:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8010348:	d3f6      	bcc.n	8010338 <CopyDataInit>
  ldr r2, =_sbss
 801034a:	4a0a      	ldr	r2, [pc, #40]	; (8010374 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 801034c:	e002      	b.n	8010354 <LoopFillZerobss>

0801034e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 801034e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8010350:	f842 3b04 	str.w	r3, [r2], #4

08010354 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8010354:	4b08      	ldr	r3, [pc, #32]	; (8010378 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8010356:	429a      	cmp	r2, r3
  bcc FillZerobss
 8010358:	d3f9      	bcc.n	801034e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801035a:	f7fa fca9 	bl	800acb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801035e:	f000 f80f 	bl	8010380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8010362:	f7fa fa0d 	bl	800a780 <main>
  bx lr
 8010366:	4770      	bx	lr
  ldr r3, =_sidata
 8010368:	080105b0 	.word	0x080105b0
  ldr r0, =_sdata
 801036c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8010370:	2000800c 	.word	0x2000800c
  ldr r2, =_sbss
 8010374:	20008400 	.word	0x20008400
  ldr r3, = _ebss
 8010378:	2000a060 	.word	0x2000a060

0801037c <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801037c:	e7fe      	b.n	801037c <COMP_ACQ_IRQHandler>
	...

08010380 <__libc_init_array>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	2600      	movs	r6, #0
 8010384:	4d0c      	ldr	r5, [pc, #48]	; (80103b8 <__libc_init_array+0x38>)
 8010386:	4c0d      	ldr	r4, [pc, #52]	; (80103bc <__libc_init_array+0x3c>)
 8010388:	1b64      	subs	r4, r4, r5
 801038a:	10a4      	asrs	r4, r4, #2
 801038c:	42a6      	cmp	r6, r4
 801038e:	d109      	bne.n	80103a4 <__libc_init_array+0x24>
 8010390:	f000 f830 	bl	80103f4 <_init>
 8010394:	2600      	movs	r6, #0
 8010396:	4d0a      	ldr	r5, [pc, #40]	; (80103c0 <__libc_init_array+0x40>)
 8010398:	4c0a      	ldr	r4, [pc, #40]	; (80103c4 <__libc_init_array+0x44>)
 801039a:	1b64      	subs	r4, r4, r5
 801039c:	10a4      	asrs	r4, r4, #2
 801039e:	42a6      	cmp	r6, r4
 80103a0:	d105      	bne.n	80103ae <__libc_init_array+0x2e>
 80103a2:	bd70      	pop	{r4, r5, r6, pc}
 80103a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80103a8:	4798      	blx	r3
 80103aa:	3601      	adds	r6, #1
 80103ac:	e7ee      	b.n	801038c <__libc_init_array+0xc>
 80103ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80103b2:	4798      	blx	r3
 80103b4:	3601      	adds	r6, #1
 80103b6:	e7f2      	b.n	801039e <__libc_init_array+0x1e>
 80103b8:	080105a8 	.word	0x080105a8
 80103bc:	080105a8 	.word	0x080105a8
 80103c0:	080105a8 	.word	0x080105a8
 80103c4:	080105ac 	.word	0x080105ac

080103c8 <memcpy>:
 80103c8:	440a      	add	r2, r1
 80103ca:	4291      	cmp	r1, r2
 80103cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80103d0:	d100      	bne.n	80103d4 <memcpy+0xc>
 80103d2:	4770      	bx	lr
 80103d4:	b510      	push	{r4, lr}
 80103d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103da:	4291      	cmp	r1, r2
 80103dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e0:	d1f9      	bne.n	80103d6 <memcpy+0xe>
 80103e2:	bd10      	pop	{r4, pc}

080103e4 <memset>:
 80103e4:	4603      	mov	r3, r0
 80103e6:	4402      	add	r2, r0
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d100      	bne.n	80103ee <memset+0xa>
 80103ec:	4770      	bx	lr
 80103ee:	f803 1b01 	strb.w	r1, [r3], #1
 80103f2:	e7f9      	b.n	80103e8 <memset+0x4>

080103f4 <_init>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	bf00      	nop
 80103f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fa:	bc08      	pop	{r3}
 80103fc:	469e      	mov	lr, r3
 80103fe:	4770      	bx	lr

08010400 <_fini>:
 8010400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010402:	bf00      	nop
 8010404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010406:	bc08      	pop	{r3}
 8010408:	469e      	mov	lr, r3
 801040a:	4770      	bx	lr
