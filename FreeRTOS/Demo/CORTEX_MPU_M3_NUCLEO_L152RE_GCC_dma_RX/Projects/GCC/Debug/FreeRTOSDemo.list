
FreeRTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000849c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080104a0  080104a0  000204a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b8  080106b8  00038014  2**0
                  CONTENTS
  4 .ARM          00000008  080106b8  080106b8  000206b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106c0  080106c0  00038014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106c0  080106c0  000206c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106c4  080106c4  000206c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .privileged_data 00008000  20000000  080106c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000014  20008000  080186c8  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c40  20008400  080186dc  00038400  2**10
                  ALLOC
 11 ._user_heap_stack 00000600  2000a040  080186dc  0003a040  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00038014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec68  00000000  00000000  0003803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f42  00000000  00000000  00056ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  0005abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001880  00000000  00000000  0005c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d01d  00000000  00000000  0005de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cbbf  00000000  00000000  0007ae95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af49e  00000000  00000000  00097a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146ef2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000715c  00000000  00000000  00146f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 c5 03 01 08 71 ce 00 08 77 ce 00 08     ... ....q...w...
 8000010:	a9 03 01 08 7d ce 00 08 83 ce 00 08 00 00 00 00     ....}...........
	...
 800002c:	59 6f 00 08 89 ce 00 08 00 00 00 00 9d 6e 00 08     Yo...........n..
 800003c:	29 6f 00 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     )o..............
 800004c:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 800005c:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 800006c:	b9 be 00 08 85 b7 00 08 09 b9 00 08 59 bd 00 08     ............Y...
 800007c:	b9 bd 00 08 c9 b9 00 08 65 b9 00 08 29 bf 00 08     ........e...)...
 800008c:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 800009c:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 80000ac:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 80000bc:	0d 04 01 08 0d 04 01 08 2d bc 00 08 59 be 00 08     ........-...Y...
 80000cc:	6d b8 00 08 0d 04 01 08 0d 04 01 08 c9 ba 00 08     m...............
 80000dc:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 80000ec:	95 ce 00 08 0d 04 01 08 00 00 00 00 0d 04 01 08     ................
 80000fc:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 800010c:	0d 04 01 08 0d 04 01 08 0d 04 01 08 0d 04 01 08     ................
 800011c:	00 00 00 00 0d 04 01 08 00 00 00 00 00 00 00 00     ................
	...
 8000138:	5f f8 08 f1                                         _...

0800013c <xPermissionRO>:
 800013c:	00 44 00 40 03 00 00 00 01 00 00 00 00 30 01 40     .D.@.........0.@
 800014c:	07 00 00 00 00 00 00 00 00 58 00 40 07 00 00 00     .........X.@....
 800015c:	04 00 00 00 00 24 01 40 01 00 00 00 11 00 00 00     .....$.@........

0800016c <xContainerSendRequest>:
};



BaseType_t xContainerSendRequest(Peripheral_Request_t xRequest, BaseType_t xCallerIsPrivileged)
{
 800016c:	b084      	sub	sp, #16
 800016e:	b580      	push	{r7, lr}
 8000170:	b08a      	sub	sp, #40	; 0x28
 8000172:	af00      	add	r7, sp, #0
 8000174:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8000178:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PeripheralPermission_t *PeripheralPermission = (PeripheralPermission_t *) xTaskAdditionsGetPermissions();
 800017c:	f00b fef4 	bl	800bf68 <xTaskAdditionsGetPermissions>
 8000180:	6278      	str	r0, [r7, #36]	; 0x24
    uint8_t uIndex;
    ePeripheralOperation xPeripheraloperation = eNone;
 8000182:	23ff      	movs	r3, #255	; 0xff
 8000184:	77fb      	strb	r3, [r7, #31]
    xMPU_REGION_REGISTERS *xMPU_region, *xMPU_regionSec;
    uint32_t ulBaseAddress, ulBaseAddressSec;
	uint32_t ulRegionSize, ulRegionSizeSec;
	uint8_t ucAccessPermission, ucAccessPermissionSec;
	uint8_t ucDMATransferDataAlign = 1; //each DMA operation is 1 byte length
 8000186:	2301      	movs	r3, #1
 8000188:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	bool ucValidated;


    /*Check access permission for peripheral*/
	ucValidated = false;
 800018c:	2300      	movs	r3, #0
 800018e:	f887 3020 	strb.w	r3, [r7, #32]
	for(uIndex = 0; uIndex < portTOTAL_NUM_PERMISSIONS && (ucValidated == false) ; uIndex++  )
 8000192:	2300      	movs	r3, #0
 8000194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000198:	e092      	b.n	80002c0 <xContainerSendRequest+0x154>
	{
		/* Verify if the current task has access to peripheral */
		if (PeripheralPermission->pulPeripheral == xRequest.pulPeripheral)
 800019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001a0:	429a      	cmp	r2, r3
 80001a2:	d17c      	bne.n	800029e <xContainerSendRequest+0x132>
		{
			/* Verify if requested operation is a Read or write */
			if(xRequest.ucOperation == eWrite ||  xRequest.ucOperation == eRead   ||   xRequest.ucOperation == eFullDuplex )
 80001a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001a8:	2b02      	cmp	r3, #2
 80001aa:	d007      	beq.n	80001bc <xContainerSendRequest+0x50>
 80001ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d003      	beq.n	80001bc <xContainerSendRequest+0x50>
 80001b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001b8:	2b04      	cmp	r3, #4
 80001ba:	d170      	bne.n	800029e <xContainerSendRequest+0x132>
			{
				/* Verify if the the requested operation is included in the application capabilities*/
				xPeripheraloperation= xRequest.ucOperation;
 80001bc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001c0:	77fb      	strb	r3, [r7, #31]

				if(xPeripheraloperation & PeripheralPermission->ucOperation)
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	791a      	ldrb	r2, [r3, #4]
 80001c6:	7ffb      	ldrb	r3, [r7, #31]
 80001c8:	4013      	ands	r3, r2
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d066      	beq.n	800029e <xContainerSendRequest+0x132>
				{

					switch ((uint32_t) xRequest.pulPeripheral) {
 80001d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001d2:	4aad      	ldr	r2, [pc, #692]	; (8000488 <xContainerSendRequest+0x31c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d02c      	beq.n	8000232 <xContainerSendRequest+0xc6>
 80001d8:	4aab      	ldr	r2, [pc, #684]	; (8000488 <xContainerSendRequest+0x31c>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d861      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 80001de:	4aab      	ldr	r2, [pc, #684]	; (800048c <xContainerSendRequest+0x320>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d026      	beq.n	8000232 <xContainerSendRequest+0xc6>
 80001e4:	4aa9      	ldr	r2, [pc, #676]	; (800048c <xContainerSendRequest+0x320>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d85b      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 80001ea:	4aa9      	ldr	r2, [pc, #676]	; (8000490 <xContainerSendRequest+0x324>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d048      	beq.n	8000282 <xContainerSendRequest+0x116>
 80001f0:	4aa7      	ldr	r2, [pc, #668]	; (8000490 <xContainerSendRequest+0x324>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d855      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 80001f6:	4aa7      	ldr	r2, [pc, #668]	; (8000494 <xContainerSendRequest+0x328>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d037      	beq.n	800026c <xContainerSendRequest+0x100>
 80001fc:	4aa5      	ldr	r2, [pc, #660]	; (8000494 <xContainerSendRequest+0x328>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d84f      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 8000202:	4aa5      	ldr	r2, [pc, #660]	; (8000498 <xContainerSendRequest+0x32c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d031      	beq.n	800026c <xContainerSendRequest+0x100>
 8000208:	4aa3      	ldr	r2, [pc, #652]	; (8000498 <xContainerSendRequest+0x32c>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d849      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 800020e:	4aa3      	ldr	r2, [pc, #652]	; (800049c <xContainerSendRequest+0x330>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d00e      	beq.n	8000232 <xContainerSendRequest+0xc6>
 8000214:	4aa1      	ldr	r2, [pc, #644]	; (800049c <xContainerSendRequest+0x330>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d843      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 800021a:	4aa1      	ldr	r2, [pc, #644]	; (80004a0 <xContainerSendRequest+0x334>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d008      	beq.n	8000232 <xContainerSendRequest+0xc6>
 8000220:	4a9f      	ldr	r2, [pc, #636]	; (80004a0 <xContainerSendRequest+0x334>)
 8000222:	4293      	cmp	r3, r2
 8000224:	d83d      	bhi.n	80002a2 <xContainerSendRequest+0x136>
 8000226:	4a9f      	ldr	r2, [pc, #636]	; (80004a4 <xContainerSendRequest+0x338>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d002      	beq.n	8000232 <xContainerSendRequest+0xc6>
 800022c:	4a9e      	ldr	r2, [pc, #632]	; (80004a8 <xContainerSendRequest+0x33c>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d137      	bne.n	80002a2 <xContainerSendRequest+0x136>
						case (uint32_t) USART3:
						case (uint32_t) SPI1:
						case (uint32_t) SPI2:
						case (uint32_t) SPI3:
							/* For these peripherals, specifically SPI the size for tx and rx must be the same, so we make sure to use the same size here for the next validations */
							xRequest.ulSizeSec = xRequest.ulSize;
 8000232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38

							/* verify that the permission includes a valid chip select GPIO, useful for SPI or RS485 transceivers (i.e., EAR validation) */
							if( ((uint8_t)xRequest.ulOption1 & 0x7F )>= 0 && ( (uint8_t)xRequest.ulOption1 & 0x7F ) < portTOTAL_NUM_GPIO_CS   )
 8000236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10c      	bne.n	800025c <xContainerSendRequest+0xf0>
							{
								if( ((uint8_t)xRequest.ulOption1 & 0x7F)  == (uint8_t)PeripheralPermission->ucOption )
 8000242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000244:	b2db      	uxtb	r3, r3
 8000246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800024c:	6892      	ldr	r2, [r2, #8]
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	4293      	cmp	r3, r2
 8000252:	d128      	bne.n	80002a6 <xContainerSendRequest+0x13a>
								{
									ucValidated = true;
 8000254:	2301      	movs	r3, #1
 8000256:	f887 3020 	strb.w	r3, [r7, #32]
									break;
 800025a:	e029      	b.n	80002b0 <xContainerSendRequest+0x144>
								}


							}
							else if( (uint8_t)xRequest.ulOption1 == OPT_NULL )
 800025c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d120      	bne.n	80002a6 <xContainerSendRequest+0x13a>
							{
								ucValidated = true;
 8000264:	2301      	movs	r3, #1
 8000266:	f887 3020 	strb.w	r3, [r7, #32]
								break; // finish the loop continue with the next validation of MPU region
 800026a:	e021      	b.n	80002b0 <xContainerSendRequest+0x144>
							}

							break;
						case (uint32_t) I2C1:
						case (uint32_t) I2C2:
							if( (uint8_t)xRequest.ulOption1 == (uint8_t)PeripheralPermission->ucOption ) // for I2C the option is the address of the slave device (i.e., EAR validation)
 800026c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800026e:	b2da      	uxtb	r2, r3
 8000270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	429a      	cmp	r2, r3
 8000278:	d117      	bne.n	80002aa <xContainerSendRequest+0x13e>
							{
								ucValidated = true;
 800027a:	2301      	movs	r3, #1
 800027c:	f887 3020 	strb.w	r3, [r7, #32]
								break;
 8000280:	e016      	b.n	80002b0 <xContainerSendRequest+0x144>
							}
							break;
						case (uint32_t) ADC1:
								if( (uint32_t)xRequest.ulOption1 && (uint32_t)PeripheralPermission->ucOption ) // for I2C the option is the address of the slave device
 8000282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000284:	2b00      	cmp	r3, #0
 8000286:	d012      	beq.n	80002ae <xContainerSendRequest+0x142>
 8000288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d00e      	beq.n	80002ae <xContainerSendRequest+0x142>
								{
									ucValidated = true;
 8000290:	2301      	movs	r3, #1
 8000292:	f887 3020 	strb.w	r3, [r7, #32]
									ucDMATransferDataAlign = 2; // DMA size operation 2 bytes
 8000296:	2302      	movs	r3, #2
 8000298:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
									break;
 800029c:	e008      	b.n	80002b0 <xContainerSendRequest+0x144>
							break;
					}



				}
 800029e:	bf00      	nop
 80002a0:	e006      	b.n	80002b0 <xContainerSendRequest+0x144>
							break;
 80002a2:	bf00      	nop
 80002a4:	e004      	b.n	80002b0 <xContainerSendRequest+0x144>
							break;
 80002a6:	bf00      	nop
 80002a8:	e002      	b.n	80002b0 <xContainerSendRequest+0x144>
							break;
 80002aa:	bf00      	nop
 80002ac:	e000      	b.n	80002b0 <xContainerSendRequest+0x144>
								break;
 80002ae:	bf00      	nop


			}

		}
		PeripheralPermission++;
 80002b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b2:	330c      	adds	r3, #12
 80002b4:	627b      	str	r3, [r7, #36]	; 0x24
	for(uIndex = 0; uIndex < portTOTAL_NUM_PERMISSIONS && (ucValidated == false) ; uIndex++  )
 80002b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002ba:	3301      	adds	r3, #1
 80002bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80002c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d807      	bhi.n	80002d8 <xContainerSendRequest+0x16c>
 80002c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002cc:	f083 0301 	eor.w	r3, r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	f47f af61 	bne.w	800019a <xContainerSendRequest+0x2e>

	}

	if (ucValidated == false)
 80002d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002dc:	f083 0301 	eor.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <xContainerSendRequest+0x17e>
	{
		return pdFREERTOS_ERRNO_EACCES;
 80002e6:	230d      	movs	r3, #13
 80002e8:	e10b      	b.n	8000502 <xContainerSendRequest+0x396>
	}

	/* Check for boundaries of the transfer*/

	if ( (xRequest.ulRegionNumber < portFIRST_REGION_NUMBER  || xRequest.ulRegionNumber > portLAST_REGION_NUMBER)  &&  xRequest.ulRegionNumber != portSTACK_REGION_NUMBER )
 80002ea:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d903      	bls.n	80002fa <xContainerSendRequest+0x18e>
 80002f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80002f6:	2b04      	cmp	r3, #4
 80002f8:	d905      	bls.n	8000306 <xContainerSendRequest+0x19a>
 80002fa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <xContainerSendRequest+0x19a>
	{
		return pdFREERTOS_ERRNO_EACCES; //invalid region number
 8000302:	230d      	movs	r3, #13
 8000304:	e0fd      	b.n	8000502 <xContainerSendRequest+0x396>
	}

	xMPU_region = xTaskAdditionsGetMemoryRegion(xRequest.ulRegionNumber);
 8000306:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800030a:	4618      	mov	r0, r3
 800030c:	f00b fe3e 	bl	800bf8c <xTaskAdditionsGetMemoryRegion>
 8000310:	61b8      	str	r0, [r7, #24]
	/* Check if the region has valid parameters*/
	if (xMPU_region->ulRegionAttribute == 0 || xMPU_region->ulRegionBaseAddress == 0 )
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d003      	beq.n	8000322 <xContainerSendRequest+0x1b6>
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d101      	bne.n	8000326 <xContainerSendRequest+0x1ba>
	{
		return pdFREERTOS_ERRNO_EACCES; // the region is deactivated or invalid
 8000322:	230d      	movs	r3, #13
 8000324:	e0ed      	b.n	8000502 <xContainerSendRequest+0x396>
	}

	/* Check if size and start of the transfer is between of MPU region boundaries*/
	ulRegionSize = ((xMPU_region->ulRegionAttribute)>>1) & 0x1f;
 8000326:	69bb      	ldr	r3, [r7, #24]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	085b      	lsrs	r3, r3, #1
 800032c:	f003 031f 	and.w	r3, r3, #31
 8000330:	617b      	str	r3, [r7, #20]
	ulRegionSize = 2<<ulRegionSize;
 8000332:	2202      	movs	r2, #2
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
	ulBaseAddress = (xMPU_region->ulRegionBaseAddress & 0xFFFFFFE0);
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f023 031f 	bic.w	r3, r3, #31
 8000344:	613b      	str	r3, [r7, #16]

	if((xRequest.ulAddress + xRequest.ulSize) > (ulBaseAddress +   ulRegionSize) )
 8000346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800034a:	441a      	add	r2, r3
 800034c:	6939      	ldr	r1, [r7, #16]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	440b      	add	r3, r1
 8000352:	429a      	cmp	r2, r3
 8000354:	d901      	bls.n	800035a <xContainerSendRequest+0x1ee>
	{
		return pdFREERTOS_ERRNO_EACCES; // transfer exceeds the boundaries of the MPU  region
 8000356:	230d      	movs	r3, #13
 8000358:	e0d3      	b.n	8000502 <xContainerSendRequest+0x396>
	}

	/* Check if the task has access to read/write to the region used by the DMA transfer */
	ucAccessPermission =  NBYTE(xMPU_region->ulRegionAttribute, 3) & 0x03; //MPU_RASR byte[3] contains the permissions
 800035a:	69bb      	ldr	r3, [r7, #24]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	0e1b      	lsrs	r3, r3, #24
 8000360:	b2db      	uxtb	r3, r3
 8000362:	f003 0303 	and.w	r3, r3, #3
 8000366:	73fb      	strb	r3, [r7, #15]
	if(ucAccessPermission == 0x04 || ucAccessPermission == 0x00 )
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2b04      	cmp	r3, #4
 800036c:	d002      	beq.n	8000374 <xContainerSendRequest+0x208>
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d101      	bne.n	8000378 <xContainerSendRequest+0x20c>
	{
		return pdFREERTOS_ERRNO_EACCES; // 0x00 = no access PU, 0x04 = reserved
 8000374:	230d      	movs	r3, #13
 8000376:	e0c4      	b.n	8000502 <xContainerSendRequest+0x396>
	}


	if( xRequest.ucOperation == eFullDuplex ) //extra verifications when using full Duplex
 8000378:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800037c:	2b04      	cmp	r3, #4
 800037e:	d14d      	bne.n	800041c <xContainerSendRequest+0x2b0>
	{
		if ( (xRequest.ulRegionNumberSec < portFIRST_REGION_NUMBER  || xRequest.ulRegionNumberSec > portLAST_REGION_NUMBER)  &&  xRequest.ulRegionNumberSec != portSTACK_REGION_NUMBER )
 8000380:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000384:	2b01      	cmp	r3, #1
 8000386:	d903      	bls.n	8000390 <xContainerSendRequest+0x224>
 8000388:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800038c:	2b04      	cmp	r3, #4
 800038e:	d905      	bls.n	800039c <xContainerSendRequest+0x230>
 8000390:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <xContainerSendRequest+0x230>
		{
			return pdFREERTOS_ERRNO_EACCES; //invalid region number
 8000398:	230d      	movs	r3, #13
 800039a:	e0b2      	b.n	8000502 <xContainerSendRequest+0x396>
		}
		xMPU_regionSec = xTaskAdditionsGetMemoryRegion(xRequest.ulRegionNumberSec);
 800039c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80003a0:	4618      	mov	r0, r3
 80003a2:	f00b fdf3 	bl	800bf8c <xTaskAdditionsGetMemoryRegion>
 80003a6:	60b8      	str	r0, [r7, #8]
		if ( xMPU_regionSec->ulRegionAttribute == 0 || xMPU_regionSec->ulRegionBaseAddress == 0 )
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <xContainerSendRequest+0x24c>
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d101      	bne.n	80003bc <xContainerSendRequest+0x250>
		{
				return pdFREERTOS_ERRNO_EACCES; // the region is deactivated or invalid
 80003b8:	230d      	movs	r3, #13
 80003ba:	e0a2      	b.n	8000502 <xContainerSendRequest+0x396>
		}

		/* Check size and start of the transfer is inside of MPU region boundaries*/
		ulRegionSizeSec = ((xMPU_regionSec->ulRegionAttribute)>>1) & 0x1f;
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	085b      	lsrs	r3, r3, #1
 80003c2:	f003 031f 	and.w	r3, r3, #31
 80003c6:	607b      	str	r3, [r7, #4]
		ulRegionSizeSec = 2<<ulRegionSizeSec;
 80003c8:	2202      	movs	r2, #2
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	607b      	str	r3, [r7, #4]
		ulBaseAddressSec = (xMPU_regionSec->ulRegionBaseAddress & 0xFFFFFFE0);
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f023 031f 	bic.w	r3, r3, #31
 80003da:	603b      	str	r3, [r7, #0]

		if( (xRequest.ulAddressSec + (xRequest.ulSizeSec*ucDMATransferDataAlign) ) > (ulBaseAddressSec +   ulRegionSizeSec) )
 80003dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80003de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003e0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80003e4:	fb01 f303 	mul.w	r3, r1, r3
 80003e8:	441a      	add	r2, r3
 80003ea:	6839      	ldr	r1, [r7, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	440b      	add	r3, r1
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d901      	bls.n	80003f8 <xContainerSendRequest+0x28c>
		{
			return pdFREERTOS_ERRNO_EACCES; // transfer exceeds the boundaries of the MPU  region
 80003f4:	230d      	movs	r3, #13
 80003f6:	e084      	b.n	8000502 <xContainerSendRequest+0x396>
		}
		ucAccessPermissionSec =  NBYTE(xMPU_regionSec->ulRegionAttribute, 3) & 0x03; //MPU_RASR byte[3] contains the permissions
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	0e1b      	lsrs	r3, r3, #24
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0303 	and.w	r3, r3, #3
 8000404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if(ucAccessPermissionSec == 0x04 || ucAccessPermissionSec == 0x00 )
 8000408:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800040c:	2b04      	cmp	r3, #4
 800040e:	d003      	beq.n	8000418 <xContainerSendRequest+0x2ac>
 8000410:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <xContainerSendRequest+0x2b0>
		{
			return pdFREERTOS_ERRNO_EACCES; // 0x00 = no access PU, 0x04 = reserved
 8000418:	230d      	movs	r3, #13
 800041a:	e072      	b.n	8000502 <xContainerSendRequest+0x396>
		}
	}

	// Get the handler of the Task to notify
	xRequest.ulTask = xTaskGetCurrentTaskHandle();
 800041c:	f005 f87a 	bl	8005514 <xTaskGetCurrentTaskHandle>
 8000420:	4603      	mov	r3, r0
 8000422:	647b      	str	r3, [r7, #68]	; 0x44

	/* Check permissions for reading/writing on the MPU regions */
	if( xRequest.ucOperation == eRead )
 8000424:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000428:	2b01      	cmp	r3, #1
 800042a:	d113      	bne.n	8000454 <xContainerSendRequest+0x2e8>
	{

		if( xCallerIsPrivileged || ( ucAccessPermission & 0x02) ) // Read in primary region PU
 800042c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800042e:	2b00      	cmp	r3, #0
 8000430:	d104      	bne.n	800043c <xContainerSendRequest+0x2d0>
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	2b00      	cmp	r3, #0
 800043a:	d009      	beq.n	8000450 <xContainerSendRequest+0x2e4>
		{
			//send read request
			return xQueueSend(xQueueDMA, (void * ) &xRequest, ( TickType_t ) 10 );
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <xContainerSendRequest+0x340>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	2300      	movs	r3, #0
 8000442:	220a      	movs	r2, #10
 8000444:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000448:	f000 fc3a 	bl	8000cc0 <xQueueGenericSend>
 800044c:	4603      	mov	r3, r0
 800044e:	e058      	b.n	8000502 <xContainerSendRequest+0x396>
		}

		else
		{
			return pdFREERTOS_ERRNO_EACCES;
 8000450:	230d      	movs	r3, #13
 8000452:	e056      	b.n	8000502 <xContainerSendRequest+0x396>
		}

	}
	else if( xRequest.ucOperation == eWrite )
 8000454:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000458:	2b02      	cmp	r3, #2
 800045a:	d12b      	bne.n	80004b4 <xContainerSendRequest+0x348>
	{

		if((xCallerIsPrivileged && ( ucAccessPermission <= 0x03)) || // write in primary region P
 800045c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <xContainerSendRequest+0x2fc>
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d905      	bls.n	8000474 <xContainerSendRequest+0x308>
 8000468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800046a:	2b00      	cmp	r3, #0
 800046c:	d120      	bne.n	80004b0 <xContainerSendRequest+0x344>
		    (!xCallerIsPrivileged  && (ucAccessPermission == 0x03))) // write in primary region U
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d11d      	bne.n	80004b0 <xContainerSendRequest+0x344>
		{
			//send read request
			return xQueueSend(xQueueDMA, (void * ) &xRequest, ( TickType_t ) 10 );
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <xContainerSendRequest+0x340>)
 8000476:	6818      	ldr	r0, [r3, #0]
 8000478:	2300      	movs	r3, #0
 800047a:	220a      	movs	r2, #10
 800047c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000480:	f000 fc1e 	bl	8000cc0 <xQueueGenericSend>
 8000484:	4603      	mov	r3, r0
 8000486:	e03c      	b.n	8000502 <xContainerSendRequest+0x396>
 8000488:	40013800 	.word	0x40013800
 800048c:	40013000 	.word	0x40013000
 8000490:	40012400 	.word	0x40012400
 8000494:	40005800 	.word	0x40005800
 8000498:	40005400 	.word	0x40005400
 800049c:	40004800 	.word	0x40004800
 80004a0:	40004400 	.word	0x40004400
 80004a4:	40003800 	.word	0x40003800
 80004a8:	40003c00 	.word	0x40003c00
 80004ac:	2000018c 	.word	0x2000018c
		}
		else
		{
			return pdFREERTOS_ERRNO_EACCES;
 80004b0:	230d      	movs	r3, #13
 80004b2:	e026      	b.n	8000502 <xContainerSendRequest+0x396>
		}

	}
	else if( xRequest.ucOperation == eFullDuplex )
 80004b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d121      	bne.n	8000500 <xContainerSendRequest+0x394>
	{
		if( ( xCallerIsPrivileged ||( ucAccessPermission & 0x02) ) &&  // Read in primary region PU
 80004bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <xContainerSendRequest+0x360>
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d017      	beq.n	80004fc <xContainerSendRequest+0x390>
 80004cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <xContainerSendRequest+0x36e>
		    ( ( xCallerIsPrivileged && ( ucAccessPermissionSec <= 0x03 ) ) ||  // write in secondary region P
 80004d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d906      	bls.n	80004e8 <xContainerSendRequest+0x37c>
 80004da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10d      	bne.n	80004fc <xContainerSendRequest+0x390>
		      (!xCallerIsPrivileged  && (ucAccessPermissionSec == 0x03 ) )))  // write in secondary region U
 80004e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d109      	bne.n	80004fc <xContainerSendRequest+0x390>
		{
			//send read request
			return xQueueSend(xQueueDMA, (void * ) &xRequest, ( TickType_t ) 10 );
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <xContainerSendRequest+0x3a4>)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	220a      	movs	r2, #10
 80004f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80004f4:	f000 fbe4 	bl	8000cc0 <xQueueGenericSend>
 80004f8:	4603      	mov	r3, r0
 80004fa:	e002      	b.n	8000502 <xContainerSendRequest+0x396>
		}
		else
		{
			return pdFREERTOS_ERRNO_EACCES;
 80004fc:	230d      	movs	r3, #13
 80004fe:	e000      	b.n	8000502 <xContainerSendRequest+0x396>
		}

	}

	return pdFREERTOS_ERRNO_EACCES;
 8000500:	230d      	movs	r3, #13
}
 8000502:	4618      	mov	r0, r3
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr
 8000510:	2000018c 	.word	0x2000018c

08000514 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800051a:	201c      	movs	r0, #28
 800051c:	f006 fda0 	bl	8007060 <pvPortMalloc>
 8000520:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00a      	beq.n	800053e <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3304      	adds	r3, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb14 	bl	8000b60 <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 800053e:	687b      	ldr	r3, [r7, #4]
    }
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <xEventGroupCreateStatic>:
    {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
        configASSERT( pxEventGroupBuffer );
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10a      	bne.n	800056c <xEventGroupCreateStatic+0x24>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055a:	f383 8811 	msr	BASEPRI, r3
 800055e:	f3bf 8f6f 	isb	sy
 8000562:	f3bf 8f4f 	dsb	sy
 8000566:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000568:	bf00      	nop
 800056a:	e7fe      	b.n	800056a <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 800056c:	231c      	movs	r3, #28
 800056e:	60bb      	str	r3, [r7, #8]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2b1c      	cmp	r3, #28
 8000574:	d00a      	beq.n	800058c <xEventGroupCreateStatic+0x44>
        __asm volatile
 8000576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057a:	f383 8811 	msr	BASEPRI, r3
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	f3bf 8f4f 	dsb	sy
 8000586:	60fb      	str	r3, [r7, #12]
    }
 8000588:	bf00      	nop
 800058a:	e7fe      	b.n	800058a <xEventGroupCreateStatic+0x42>
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	617b      	str	r3, [r7, #20]
        if( pxEventBits != NULL )
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00a      	beq.n	80005ac <xEventGroupCreateStatic+0x64>
            pxEventBits->uxEventBits = 0;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	3304      	adds	r3, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fadd 	bl	8000b60 <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2201      	movs	r2, #1
 80005aa:	761a      	strb	r2, [r3, #24]
        return pxEventBits;
 80005ac:	697b      	ldr	r3, [r7, #20]
    }
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b090      	sub	sp, #64	; 0x40
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10a      	bne.n	80005ec <xEventGroupWaitBits+0x36>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	623b      	str	r3, [r7, #32]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00a      	beq.n	800060c <xEventGroupWaitBits+0x56>
        __asm volatile
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	61fb      	str	r3, [r7, #28]
    }
 8000608:	bf00      	nop
 800060a:	e7fe      	b.n	800060a <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10a      	bne.n	8000628 <xEventGroupWaitBits+0x72>
        __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	61bb      	str	r3, [r7, #24]
    }
 8000624:	bf00      	nop
 8000626:	e7fe      	b.n	8000626 <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000628:	f004 ff8e 	bl	8005548 <xTaskGetSchedulerState>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <xEventGroupWaitBits+0x82>
 8000632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <xEventGroupWaitBits+0x86>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <xEventGroupWaitBits+0x88>
 800063c:	2300      	movs	r3, #0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10a      	bne.n	8000658 <xEventGroupWaitBits+0xa2>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	617b      	str	r3, [r7, #20]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 8000658:	f003 fd86 	bl	8004168 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800065c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000668:	f000 fa58 	bl	8000b1c <prvTestWaitCondition>
 800066c:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 800066e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00e      	beq.n	8000692 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8000678:	2300      	movs	r3, #0
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d028      	beq.n	80006d4 <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	43db      	mvns	r3, r3
 800068a:	401a      	ands	r2, r3
 800068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e020      	b.n	80006d4 <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000694:	2b00      	cmp	r3, #0
 8000696:	d104      	bne.n	80006a2 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 800069c:	2301      	movs	r3, #1
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
 80006a0:	e018      	b.n	80006d4 <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80006a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80006b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80006be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c0:	1d18      	adds	r0, r3, #4
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c6:	4313      	orrs	r3, r2
 80006c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006ca:	4619      	mov	r1, r3
 80006cc:	f004 fd42 	bl	8005154 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 80006d4:	f003 fd56 	bl	8004184 <xTaskResumeAll>
 80006d8:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 80006da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d031      	beq.n	8000744 <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <xEventGroupWaitBits+0x19a>)
 80006e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 80006f6:	f004 fef5 	bl	80054e4 <uxTaskResetEventItemValue>
 80006fa:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d11a      	bne.n	800073c <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 8000706:	f00b fcb9 	bl	800c07c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000716:	f000 fa01 	bl	8000b1c <prvTestWaitCondition>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	43db      	mvns	r3, r3
 800072e:	401a      	ands	r2, r3
 8000730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000732:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8000734:	2301      	movs	r3, #1
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 8000738:	f00b fcbe 	bl	800c0b8 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800073c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8000744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000746:	4618      	mov	r0, r3
 8000748:	3740      	adds	r7, #64	; 0x40
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000ed04 	.word	0xe000ed04

08000754 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10a      	bne.n	800077e <xEventGroupClearBits+0x2a>
        __asm volatile
 8000768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076c:	f383 8811 	msr	BASEPRI, r3
 8000770:	f3bf 8f6f 	isb	sy
 8000774:	f3bf 8f4f 	dsb	sy
 8000778:	60fb      	str	r3, [r7, #12]
    }
 800077a:	bf00      	nop
 800077c:	e7fe      	b.n	800077c <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00a      	beq.n	800079e <xEventGroupClearBits+0x4a>
        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	60bb      	str	r3, [r7, #8]
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 800079e:	f00b fc6d 	bl	800c07c <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	43db      	mvns	r3, r3
 80007b0:	401a      	ands	r2, r3
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 80007b6:	f00b fc7f 	bl	800c0b8 <vPortExitCritical>

    return uxReturn;
 80007ba:	693b      	ldr	r3, [r7, #16]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10a      	bne.n	80007f6 <xEventGroupSetBits+0x32>
        __asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	613b      	str	r3, [r7, #16]
    }
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00a      	beq.n	8000816 <xEventGroupSetBits+0x52>
        __asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	60fb      	str	r3, [r7, #12]
    }
 8000812:	bf00      	nop
 8000814:	e7fe      	b.n	8000814 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	3304      	adds	r3, #4
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	3308      	adds	r3, #8
 8000820:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8000822:	f003 fca1 	bl	8004168 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 800082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	431a      	orrs	r2, r3
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8000838:	e03c      	b.n	80008b4 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 800083a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000850:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000858:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d108      	bne.n	8000876 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000874:	e008      	b.n	8000888 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	429a      	cmp	r2, r3
 8000882:	d101      	bne.n	8000888 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8000898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a8:	4619      	mov	r1, r3
 80008aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008ac:	f004 fd1c 	bl	80052e8 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 80008b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d1be      	bne.n	800083a <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c2:	43db      	mvns	r3, r3
 80008c4:	401a      	ands	r2, r3
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80008ca:	f003 fc5b 	bl	8004184 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	681b      	ldr	r3, [r3, #0]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <xEventGroupSync>:
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b08c      	sub	sp, #48	; 0x30
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xTimeoutOccurred = pdFALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00a      	beq.n	8000910 <xEventGroupSync+0x36>
        __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	61bb      	str	r3, [r7, #24]
    }
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <xEventGroupSync+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10a      	bne.n	800092c <xEventGroupSync+0x52>
        __asm volatile
 8000916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	617b      	str	r3, [r7, #20]
    }
 8000928:	bf00      	nop
 800092a:	e7fe      	b.n	800092a <xEventGroupSync+0x50>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800092c:	f004 fe0c 	bl	8005548 <xTaskGetSchedulerState>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <xEventGroupSync+0x62>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d101      	bne.n	8000940 <xEventGroupSync+0x66>
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <xEventGroupSync+0x68>
 8000940:	2300      	movs	r3, #0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10a      	bne.n	800095c <xEventGroupSync+0x82>
        __asm volatile
 8000946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094a:	f383 8811 	msr	BASEPRI, r3
 800094e:	f3bf 8f6f 	isb	sy
 8000952:	f3bf 8f4f 	dsb	sy
 8000956:	613b      	str	r3, [r7, #16]
    }
 8000958:	bf00      	nop
 800095a:	e7fe      	b.n	800095a <xEventGroupSync+0x80>
    vTaskSuspendAll();
 800095c:	f003 fc04 	bl	8004168 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	623b      	str	r3, [r7, #32]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff ff2b 	bl	80007c4 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800096e:	6a3a      	ldr	r2, [r7, #32]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4013      	ands	r3, r2
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	429a      	cmp	r2, r3
 800097c:	d10d      	bne.n	800099a <xEventGroupSync+0xc0>
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 800097e:	6a3a      	ldr	r2, [r7, #32]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	601a      	str	r2, [r3, #0]
            xTicksToWait = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	e013      	b.n	80009c2 <xEventGroupSync+0xe8>
            if( xTicksToWait != ( TickType_t ) 0 )
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <xEventGroupSync+0xde>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	1d18      	adds	r0, r3, #4
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f004 fbd1 	bl	8005154 <vTaskPlaceOnUnorderedEventList>
                uxReturn = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009b6:	e004      	b.n	80009c2 <xEventGroupSync+0xe8>
                uxReturn = pxEventBits->uxEventBits;
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                xTimeoutOccurred = pdTRUE;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    xAlreadyYielded = xTaskResumeAll();
 80009c2:	f003 fbdf 	bl	8004184 <xTaskResumeAll>
 80009c6:	61f8      	str	r0, [r7, #28]
    if( xTicksToWait != ( TickType_t ) 0 )
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d02c      	beq.n	8000a28 <xEventGroupSync+0x14e>
        if( xAlreadyYielded == pdFALSE )
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <xEventGroupSync+0x10a>
            portYIELD_WITHIN_API();
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <xEventGroupSync+0x15a>)
 80009d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80009e4:	f004 fd7e 	bl	80054e4 <uxTaskResetEventItemValue>
 80009e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d115      	bne.n	8000a20 <xEventGroupSync+0x146>
            taskENTER_CRITICAL();
 80009f4:	f00b fb42 	bl	800c07c <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80009fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4013      	ands	r3, r2
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d106      	bne.n	8000a18 <xEventGroupSync+0x13e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	401a      	ands	r2, r3
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	601a      	str	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8000a18:	f00b fb4e 	bl	800c0b8 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    return uxReturn;
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000ed04 	.word	0xe000ed04

08000a38 <xEventGroupGetBitsFromISR>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    EventGroup_t const * const pxEventBits = xEventGroup;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	61fb      	str	r3, [r7, #28]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000a44:	f3ef 8211 	mrs	r2, BASEPRI
 8000a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4c:	f383 8811 	msr	BASEPRI, r3
 8000a50:	f3bf 8f6f 	isb	sy
 8000a54:	f3bf 8f4f 	dsb	sy
 8000a58:	60fa      	str	r2, [r7, #12]
 8000a5a:	60bb      	str	r3, [r7, #8]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a5e:	61bb      	str	r3, [r7, #24]
        uxReturn = pxEventBits->uxEventBits;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000a70:	bf00      	nop
    return uxReturn;
 8000a72:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8000a74:	4618      	mov	r0, r3
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	617b      	str	r3, [r7, #20]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]

    vTaskSuspendAll();
 8000a90:	f003 fb6a 	bl	8004168 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000a94:	e017      	b.n	8000ac6 <vEventGroupDelete+0x48>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d10a      	bne.n	8000ab8 <vEventGroupDelete+0x3a>
        __asm volatile
 8000aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa6:	f383 8811 	msr	BASEPRI, r3
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	60fb      	str	r3, [r7, #12]
    }
 8000ab4:	bf00      	nop
 8000ab6:	e7fe      	b.n	8000ab6 <vEventGroupDelete+0x38>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fc11 	bl	80052e8 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1e3      	bne.n	8000a96 <vEventGroupDelete+0x18>
            }
        #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
            {
                /* The event group could have been allocated statically or
                 * dynamically, so check before attempting to free the memory. */
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	7e1b      	ldrb	r3, [r3, #24]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <vEventGroupDelete+0x5e>
                {
                    vPortFree( pxEventBits );
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f006 fb92 	bl	8007200 <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 8000adc:	f003 fb52 	bl	8004184 <xTaskResumeAll>
}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fe65 	bl	80007c4 <xEventGroupSetBits>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000b0c:	6839      	ldr	r1, [r7, #0]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fe20 	bl	8000754 <xEventGroupClearBits>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d107      	bne.n	8000b42 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00a      	beq.n	8000b52 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e007      	b.n	8000b52 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4013      	ands	r3, r2
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d101      	bne.n	8000b52 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8000b52:	697b      	ldr	r3, [r7, #20]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f103 0208 	add.w	r2, r3, #8
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 0208 	add.w	r2, r3, #8
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 0208 	add.w	r2, r3, #8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d103      	bne.n	8000bd6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e00c      	b.n	8000bf0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3308      	adds	r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e002      	b.n	8000be4 <vListInsert+0x2e>
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d2f6      	bcs.n	8000bde <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <vListInsertEnd>:
{
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6892      	ldr	r2, [r2, #8]
 8000c82:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d103      	bne.n	8000ca0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10a      	bne.n	8000cf2 <xQueueGenericSend+0x32>
        __asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000cee:	bf00      	nop
 8000cf0:	e7fe      	b.n	8000cf0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d103      	bne.n	8000d00 <xQueueGenericSend+0x40>
 8000cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <xQueueGenericSend+0x44>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <xQueueGenericSend+0x46>
 8000d04:	2300      	movs	r3, #0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10a      	bne.n	8000d20 <xQueueGenericSend+0x60>
        __asm volatile
 8000d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	623b      	str	r3, [r7, #32]
    }
 8000d1c:	bf00      	nop
 8000d1e:	e7fe      	b.n	8000d1e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d103      	bne.n	8000d2e <xQueueGenericSend+0x6e>
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <xQueueGenericSend+0x72>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <xQueueGenericSend+0x74>
 8000d32:	2300      	movs	r3, #0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10a      	bne.n	8000d4e <xQueueGenericSend+0x8e>
        __asm volatile
 8000d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3c:	f383 8811 	msr	BASEPRI, r3
 8000d40:	f3bf 8f6f 	isb	sy
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	61fb      	str	r3, [r7, #28]
    }
 8000d4a:	bf00      	nop
 8000d4c:	e7fe      	b.n	8000d4c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d4e:	f004 fbfb 	bl	8005548 <xTaskGetSchedulerState>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <xQueueGenericSend+0x9e>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <xQueueGenericSend+0xa2>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <xQueueGenericSend+0xa4>
 8000d62:	2300      	movs	r3, #0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10a      	bne.n	8000d7e <xQueueGenericSend+0xbe>
        __asm volatile
 8000d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6c:	f383 8811 	msr	BASEPRI, r3
 8000d70:	f3bf 8f6f 	isb	sy
 8000d74:	f3bf 8f4f 	dsb	sy
 8000d78:	61bb      	str	r3, [r7, #24]
    }
 8000d7a:	bf00      	nop
 8000d7c:	e7fe      	b.n	8000d7c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d7e:	f00b f97d 	bl	800c07c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d302      	bcc.n	8000d94 <xQueueGenericSend+0xd4>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d145      	bne.n	8000e20 <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000da0:	f001 facd 	bl	800233e <prvCopyDataToQueue>
 8000da4:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 8000da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d102      	bne.n	8000dba <xQueueGenericSend+0xfa>
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d12e      	bne.n	8000e18 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dbc:	f001 fb4f 	bl	800245e <prvNotifyQueueSetContainer>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d028      	beq.n	8000e18 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <xQueueGenericSend+0x230>)
 8000dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	e01f      	b.n	8000e18 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d010      	beq.n	8000e02 <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de2:	3324      	adds	r3, #36	; 0x24
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fa1d 	bl	8005224 <xTaskRemoveFromEventList>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <xQueueGenericSend+0x230>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	e00a      	b.n	8000e18 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <xQueueGenericSend+0x230>)
 8000e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000e18:	f00b f94e 	bl	800c0b8 <vPortExitCritical>
                return pdPASS;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e063      	b.n	8000ee8 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d103      	bne.n	8000e2e <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e26:	f00b f947 	bl	800c0b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e05c      	b.n	8000ee8 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fd35 	bl	80058a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e42:	f00b f939 	bl	800c0b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e46:	f003 f98f 	bl	8004168 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e4a:	f00b f917 	bl	800c07c <vPortEnterCritical>
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5a:	d103      	bne.n	8000e64 <xQueueGenericSend+0x1a4>
 8000e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d103      	bne.n	8000e7a <xQueueGenericSend+0x1ba>
 8000e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e7a:	f00b f91d 	bl	800c0b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e7e:	1d3a      	adds	r2, r7, #4
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ffea 	bl	8004e60 <xTaskCheckForTimeOut>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d124      	bne.n	8000edc <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e94:	f001 fa3b 	bl	800230e <prvIsQueueFull>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d018      	beq.n	8000ed0 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea0:	3310      	adds	r3, #16
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f930 	bl	800510c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eae:	f001 f9b9 	bl	8002224 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000eb2:	f003 f967 	bl	8004184 <xTaskResumeAll>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f af60 	bne.w	8000d7e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <xQueueGenericSend+0x230>)
 8000ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	e756      	b.n	8000d7e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ed2:	f001 f9a7 	bl	8002224 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ed6:	f003 f955 	bl	8004184 <xTaskResumeAll>
 8000eda:	e750      	b.n	8000d7e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ede:	f001 f9a1 	bl	8002224 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ee2:	f003 f94f 	bl	8004184 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ee6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	e000ed04 	.word	0xe000ed04

08000ef4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10a      	bne.n	8000f24 <xQueuePeek+0x30>
        __asm volatile
 8000f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000f20:	bf00      	nop
 8000f22:	e7fe      	b.n	8000f22 <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <xQueuePeek+0x3e>
 8000f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <xQueuePeek+0x42>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <xQueuePeek+0x44>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <xQueuePeek+0x5e>
        __asm volatile
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	623b      	str	r3, [r7, #32]
    }
 8000f4e:	bf00      	nop
 8000f50:	e7fe      	b.n	8000f50 <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f52:	f004 faf9 	bl	8005548 <xTaskGetSchedulerState>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <xQueuePeek+0x6e>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <xQueuePeek+0x72>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <xQueuePeek+0x74>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10a      	bne.n	8000f82 <xQueuePeek+0x8e>
        __asm volatile
 8000f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f70:	f383 8811 	msr	BASEPRI, r3
 8000f74:	f3bf 8f6f 	isb	sy
 8000f78:	f3bf 8f4f 	dsb	sy
 8000f7c:	61fb      	str	r3, [r7, #28]
    }
 8000f7e:	bf00      	nop
 8000f80:	e7fe      	b.n	8000f80 <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f82:	f00b f87b 	bl	800c07c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d021      	beq.n	8000fd6 <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f9c:	f001 fa39 	bl	8002412 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa4:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00f      	beq.n	8000fce <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb0:	3324      	adds	r3, #36	; 0x24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 f936 	bl	8005224 <xTaskRemoveFromEventList>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <xQueuePeek+0x1c0>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000fce:	f00b f873 	bl	800c0b8 <vPortExitCritical>
                return pdPASS;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e069      	b.n	80010aa <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000fdc:	f00b f86c 	bl	800c0b8 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e062      	b.n	80010aa <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d106      	bne.n	8000ff8 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 fc5a 	bl	80058a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ff8:	f00b f85e 	bl	800c0b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ffc:	f003 f8b4 	bl	8004168 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001000:	f00b f83c 	bl	800c07c <vPortEnterCritical>
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800100a:	b25b      	sxtb	r3, r3
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d103      	bne.n	800101a <xQueuePeek+0x126>
 8001012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001020:	b25b      	sxtb	r3, r3
 8001022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001026:	d103      	bne.n	8001030 <xQueuePeek+0x13c>
 8001028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001030:	f00b f842 	bl	800c0b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001034:	1d3a      	adds	r2, r7, #4
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f003 ff0f 	bl	8004e60 <xTaskCheckForTimeOut>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d123      	bne.n	8001090 <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800104a:	f001 f94a 	bl	80022e2 <prvIsQueueEmpty>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	3324      	adds	r3, #36	; 0x24
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f004 f855 	bl	800510c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001064:	f001 f8de 	bl	8002224 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001068:	f003 f88c 	bl	8004184 <xTaskResumeAll>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d187      	bne.n	8000f82 <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <xQueuePeek+0x1c0>)
 8001074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	e77e      	b.n	8000f82 <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8001084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001086:	f001 f8cd 	bl	8002224 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800108a:	f003 f87b 	bl	8004184 <xTaskResumeAll>
 800108e:	e778      	b.n	8000f82 <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8001090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001092:	f001 f8c7 	bl	8002224 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001096:	f003 f875 	bl	8004184 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800109a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800109c:	f001 f921 	bl	80022e2 <prvIsQueueEmpty>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f43f af6d 	beq.w	8000f82 <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80010a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3738      	adds	r7, #56	; 0x38
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000ed04 	.word	0xe000ed04

080010b8 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80010c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <xQueuePeekFromISR+0x2a>
        __asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	61fb      	str	r3, [r7, #28]
    }
 80010de:	bf00      	nop
 80010e0:	e7fe      	b.n	80010e0 <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <xQueuePeekFromISR+0x38>
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <xQueuePeekFromISR+0x3c>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <xQueuePeekFromISR+0x3e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10a      	bne.n	8001110 <xQueuePeekFromISR+0x58>
        __asm volatile
 80010fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	f3bf 8f6f 	isb	sy
 8001106:	f3bf 8f4f 	dsb	sy
 800110a:	61bb      	str	r3, [r7, #24]
    }
 800110c:	bf00      	nop
 800110e:	e7fe      	b.n	800110e <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <xQueuePeekFromISR+0x76>
        __asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	617b      	str	r3, [r7, #20]
    }
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800112e:	f00b f821 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 8001132:	f3ef 8211 	mrs	r2, BASEPRI
 8001136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113a:	f383 8811 	msr	BASEPRI, r3
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	613a      	str	r2, [r7, #16]
 8001148:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 800114a:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001160:	f001 f957 	bl	8002412 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 800116a:	2301      	movs	r3, #1
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800116e:	e001      	b.n	8001174 <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f383 8811 	msr	BASEPRI, r3
    }
 800117e:	bf00      	nop
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001182:	4618      	mov	r0, r3
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <xQueueReceive>:
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b08c      	sub	sp, #48	; 0x30
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    Queue_t * const pxQueue = xQueue;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    configASSERT( ( pxQueue ) );
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10a      	bne.n	80011ba <xQueueReceive+0x30>
        __asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	623b      	str	r3, [r7, #32]
    }
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <xQueueReceive+0x2e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <xQueueReceive+0x3e>
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <xQueueReceive+0x42>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <xQueueReceive+0x44>
 80011cc:	2300      	movs	r3, #0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10a      	bne.n	80011e8 <xQueueReceive+0x5e>
        __asm volatile
 80011d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d6:	f383 8811 	msr	BASEPRI, r3
 80011da:	f3bf 8f6f 	isb	sy
 80011de:	f3bf 8f4f 	dsb	sy
 80011e2:	61fb      	str	r3, [r7, #28]
    }
 80011e4:	bf00      	nop
 80011e6:	e7fe      	b.n	80011e6 <xQueueReceive+0x5c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011e8:	f004 f9ae 	bl	8005548 <xTaskGetSchedulerState>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <xQueueReceive+0x6e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <xQueueReceive+0x72>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <xQueueReceive+0x74>
 80011fc:	2300      	movs	r3, #0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <xQueueReceive+0x8e>
        __asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	61bb      	str	r3, [r7, #24]
    }
 8001214:	bf00      	nop
 8001216:	e7fe      	b.n	8001216 <xQueueReceive+0x8c>
        taskENTER_CRITICAL();
 8001218:	f00a ff30 	bl	800c07c <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01f      	beq.n	8001268 <xQueueReceive+0xde>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800122c:	f001 f8f1 	bl	8002412 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00f      	beq.n	8001260 <xQueueReceive+0xd6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	3310      	adds	r3, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f003 ffed 	bl	8005224 <xTaskRemoveFromEventList>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <xQueueReceive+0x1ba>)
 8001252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001260:	f00a ff2a 	bl	800c0b8 <vPortExitCritical>
                return pdPASS;
 8001264:	2301      	movs	r3, #1
 8001266:	e069      	b.n	800133c <xQueueReceive+0x1b2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <xQueueReceive+0xec>
                    taskEXIT_CRITICAL();
 800126e:	f00a ff23 	bl	800c0b8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8001272:	2300      	movs	r3, #0
 8001274:	e062      	b.n	800133c <xQueueReceive+0x1b2>
                else if( xEntryTimeSet == pdFALSE )
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <xQueueReceive+0x100>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4618      	mov	r0, r3
 8001282:	f004 fb11 	bl	80058a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001286:	2301      	movs	r3, #1
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
        taskEXIT_CRITICAL();
 800128a:	f00a ff15 	bl	800c0b8 <vPortExitCritical>
        vTaskSuspendAll();
 800128e:	f002 ff6b 	bl	8004168 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001292:	f00a fef3 	bl	800c07c <vPortEnterCritical>
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800129c:	b25b      	sxtb	r3, r3
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d103      	bne.n	80012ac <xQueueReceive+0x122>
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d103      	bne.n	80012c2 <xQueueReceive+0x138>
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012c2:	f00a fef9 	bl	800c0b8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fdc6 	bl	8004e60 <xTaskCheckForTimeOut>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <xQueueReceive+0x198>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012dc:	f001 f801 	bl	80022e2 <prvIsQueueEmpty>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d017      	beq.n	8001316 <xQueueReceive+0x18c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	3324      	adds	r3, #36	; 0x24
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 ff0c 	bl	800510c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012f6:	f000 ff95 	bl	8002224 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80012fa:	f002 ff43 	bl	8004184 <xTaskResumeAll>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d189      	bne.n	8001218 <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <xQueueReceive+0x1ba>)
 8001306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	f3bf 8f6f 	isb	sy
 8001314:	e780      	b.n	8001218 <xQueueReceive+0x8e>
                prvUnlockQueue( pxQueue );
 8001316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001318:	f000 ff84 	bl	8002224 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800131c:	f002 ff32 	bl	8004184 <xTaskResumeAll>
 8001320:	e77a      	b.n	8001218 <xQueueReceive+0x8e>
            prvUnlockQueue( pxQueue );
 8001322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001324:	f000 ff7e 	bl	8002224 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001328:	f002 ff2c 	bl	8004184 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800132c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800132e:	f000 ffd8 	bl	80022e2 <prvIsQueueEmpty>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	f43f af6f 	beq.w	8001218 <xQueueReceive+0x8e>
                return errQUEUE_EMPTY;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	e000ed04 	.word	0xe000ed04

08001348 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10a      	bne.n	800136c <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8001356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135a:	f383 8811 	msr	BASEPRI, r3
 800135e:	f3bf 8f6f 	isb	sy
 8001362:	f3bf 8f4f 	dsb	sy
 8001366:	60bb      	str	r3, [r7, #8]
    }
 8001368:	bf00      	nop
 800136a:	e7fe      	b.n	800136a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800136c:	f00a fe86 	bl	800c07c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001376:	f00a fe9f 	bl	800c0b8 <vPortExitCritical>

    return uxReturn;
 800137a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <uxQueueSpacesAvailable+0x28>
        __asm volatile
 8001396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139a:	f383 8811 	msr	BASEPRI, r3
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	60fb      	str	r3, [r7, #12]
    }
 80013a8:	bf00      	nop
 80013aa:	e7fe      	b.n	80013aa <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 80013ac:	f00a fe66 	bl	800c07c <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 80013bc:	f00a fe7c 	bl	800c0b8 <vPortExitCritical>

    return uxReturn;
 80013c0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10a      	bne.n	80013f2 <vQueueDelete+0x28>
        __asm volatile
 80013dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	60bb      	str	r3, [r7, #8]
    }
 80013ee:	bf00      	nop
 80013f0:	e7fe      	b.n	80013f0 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fce4 	bl	8001dc0 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f005 fefc 	bl	8007200 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <xQueueGenericSendFromISR>:
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 8001422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10a      	bne.n	800143e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142c:	f383 8811 	msr	BASEPRI, r3
 8001430:	f3bf 8f6f 	isb	sy
 8001434:	f3bf 8f4f 	dsb	sy
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800143a:	bf00      	nop
 800143c:	e7fe      	b.n	800143c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d103      	bne.n	800144c <xQueueGenericSendFromISR+0x3c>
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <xQueueGenericSendFromISR+0x40>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <xQueueGenericSendFromISR+0x42>
 8001450:	2300      	movs	r3, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10a      	bne.n	800146c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001468:	bf00      	nop
 800146a:	e7fe      	b.n	800146a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d103      	bne.n	800147a <xQueueGenericSendFromISR+0x6a>
 8001472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <xQueueGenericSendFromISR+0x6e>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <xQueueGenericSendFromISR+0x70>
 800147e:	2300      	movs	r3, #0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10a      	bne.n	800149a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001488:	f383 8811 	msr	BASEPRI, r3
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f3bf 8f4f 	dsb	sy
 8001494:	623b      	str	r3, [r7, #32]
    }
 8001496:	bf00      	nop
 8001498:	e7fe      	b.n	8001498 <xQueueGenericSendFromISR+0x88>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800149a:	f00a fe6b 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 800149e:	f3ef 8211 	mrs	r2, BASEPRI
 80014a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a6:	f383 8811 	msr	BASEPRI, r3
 80014aa:	f3bf 8f6f 	isb	sy
 80014ae:	f3bf 8f4f 	dsb	sy
 80014b2:	61fa      	str	r2, [r7, #28]
 80014b4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80014b6:	69fb      	ldr	r3, [r7, #28]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d302      	bcc.n	80014cc <xQueueGenericSendFromISR+0xbc>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d155      	bne.n	8001578 <xQueueGenericSendFromISR+0x168>
            const int8_t cTxLock = pxQueue->cTxLock;
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014e2:	f000 ff2c 	bl	800233e <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80014e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d129      	bne.n	8001544 <xQueueGenericSendFromISR+0x134>
                        if( pxQueue->pxQueueSetContainer != NULL )
 80014f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d012      	beq.n	800151e <xQueueGenericSendFromISR+0x10e>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d102      	bne.n	8001504 <xQueueGenericSendFromISR+0xf4>
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d136      	bne.n	8001572 <xQueueGenericSendFromISR+0x162>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001506:	f000 ffaa 	bl	800245e <prvNotifyQueueSetContainer>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d030      	beq.n	8001572 <xQueueGenericSendFromISR+0x162>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d02d      	beq.n	8001572 <xQueueGenericSendFromISR+0x162>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e029      	b.n	8001572 <xQueueGenericSendFromISR+0x162>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <xQueueGenericSendFromISR+0x162>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001528:	3324      	adds	r3, #36	; 0x24
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fe7a 	bl	8005224 <xTaskRemoveFromEventList>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01d      	beq.n	8001572 <xQueueGenericSendFromISR+0x162>
                                    if( pxHigherPriorityTaskWoken != NULL )
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01a      	beq.n	8001572 <xQueueGenericSendFromISR+0x162>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e016      	b.n	8001572 <xQueueGenericSendFromISR+0x162>
                configASSERT( cTxLock != queueINT8_MAX );
 8001544:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001548:	2b7f      	cmp	r3, #127	; 0x7f
 800154a:	d10a      	bne.n	8001562 <xQueueGenericSendFromISR+0x152>
        __asm volatile
 800154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001550:	f383 8811 	msr	BASEPRI, r3
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	f3bf 8f4f 	dsb	sy
 800155c:	617b      	str	r3, [r7, #20]
    }
 800155e:	bf00      	nop
 8001560:	e7fe      	b.n	8001560 <xQueueGenericSendFromISR+0x150>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001566:	3301      	adds	r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001572:	2301      	movs	r3, #1
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001576:	e001      	b.n	800157c <xQueueGenericSendFromISR+0x16c>
            xReturn = errQUEUE_FULL;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f383 8811 	msr	BASEPRI, r3
    }
 8001586:	bf00      	nop
    return xReturn;
 8001588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800158a:	4618      	mov	r0, r3
 800158c:	3740      	adds	r7, #64	; 0x40
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <xQueueGiveFromISR>:
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b08e      	sub	sp, #56	; 0x38
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( pxQueue );
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <xQueueGiveFromISR+0x2a>
        __asm volatile
 80015a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015aa:	f383 8811 	msr	BASEPRI, r3
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f3bf 8f4f 	dsb	sy
 80015b6:	623b      	str	r3, [r7, #32]
    }
 80015b8:	bf00      	nop
 80015ba:	e7fe      	b.n	80015ba <xQueueGiveFromISR+0x28>
    configASSERT( pxQueue->uxItemSize == 0 );
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00a      	beq.n	80015da <xQueueGiveFromISR+0x48>
        __asm volatile
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f3bf 8f4f 	dsb	sy
 80015d4:	61fb      	str	r3, [r7, #28]
    }
 80015d6:	bf00      	nop
 80015d8:	e7fe      	b.n	80015d8 <xQueueGiveFromISR+0x46>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <xQueueGiveFromISR+0x58>
 80015e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <xQueueGiveFromISR+0x5c>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <xQueueGiveFromISR+0x5e>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <xQueueGiveFromISR+0x78>
        __asm volatile
 80015f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	61bb      	str	r3, [r7, #24]
    }
 8001606:	bf00      	nop
 8001608:	e7fe      	b.n	8001608 <xQueueGiveFromISR+0x76>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800160a:	f00a fdb3 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 800160e:	f3ef 8211 	mrs	r2, BASEPRI
 8001612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	617a      	str	r2, [r7, #20]
 8001624:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8001626:	697b      	ldr	r3, [r7, #20]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001636:	429a      	cmp	r2, r3
 8001638:	d24b      	bcs.n	80016d2 <xQueueGiveFromISR+0x140>
            const int8_t cTxLock = pxQueue->cTxLock;
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 800164c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d123      	bne.n	800169e <xQueueGiveFromISR+0x10c>
                        if( pxQueue->pxQueueSetContainer != NULL )
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <xQueueGiveFromISR+0xe6>
                            if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800165e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001660:	f000 fefd 	bl	800245e <prvNotifyQueueSetContainer>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d030      	beq.n	80016cc <xQueueGiveFromISR+0x13a>
                                if( pxHigherPriorityTaskWoken != NULL )
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02d      	beq.n	80016cc <xQueueGiveFromISR+0x13a>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e029      	b.n	80016cc <xQueueGiveFromISR+0x13a>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	2b00      	cmp	r3, #0
 800167e:	d025      	beq.n	80016cc <xQueueGiveFromISR+0x13a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	3324      	adds	r3, #36	; 0x24
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fdcd 	bl	8005224 <xTaskRemoveFromEventList>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01d      	beq.n	80016cc <xQueueGiveFromISR+0x13a>
                                    if( pxHigherPriorityTaskWoken != NULL )
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <xQueueGiveFromISR+0x13a>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e016      	b.n	80016cc <xQueueGiveFromISR+0x13a>
                configASSERT( cTxLock != queueINT8_MAX );
 800169e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d10a      	bne.n	80016bc <xQueueGiveFromISR+0x12a>
        __asm volatile
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	60fb      	str	r3, [r7, #12]
    }
 80016b8:	bf00      	nop
 80016ba:	e7fe      	b.n	80016ba <xQueueGiveFromISR+0x128>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80016bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 80016cc:	2301      	movs	r3, #1
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	e001      	b.n	80016d6 <xQueueGiveFromISR+0x144>
            xReturn = errQUEUE_FULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f383 8811 	msr	BASEPRI, r3
    }
 80016e0:	bf00      	nop
    return xReturn;
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <xQueueReceiveFromISR>:
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 80016fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001714:	bf00      	nop
 8001716:	e7fe      	b.n	8001716 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <xQueueReceiveFromISR+0x3a>
 800171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <xQueueReceiveFromISR+0x3e>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <xQueueReceiveFromISR+0x40>
 800172a:	2300      	movs	r3, #0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001742:	bf00      	nop
 8001744:	e7fe      	b.n	8001744 <xQueueReceiveFromISR+0x58>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001746:	f00a fd15 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 800174a:	f3ef 8211 	mrs	r2, BASEPRI
 800174e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001752:	f383 8811 	msr	BASEPRI, r3
 8001756:	f3bf 8f6f 	isb	sy
 800175a:	f3bf 8f4f 	dsb	sy
 800175e:	623a      	str	r2, [r7, #32]
 8001760:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8001762:	6a3b      	ldr	r3, [r7, #32]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03e      	beq.n	80017f0 <xQueueReceiveFromISR+0x104>
            const int8_t cRxLock = pxQueue->cRxLock;
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001780:	f000 fe47 	bl	8002412 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 800178c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d112      	bne.n	80017bc <xQueueReceiveFromISR+0xd0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d025      	beq.n	80017ea <xQueueReceiveFromISR+0xfe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a0:	3310      	adds	r3, #16
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fd3e 	bl	8005224 <xTaskRemoveFromEventList>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01d      	beq.n	80017ea <xQueueReceiveFromISR+0xfe>
                        if( pxHigherPriorityTaskWoken != NULL )
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01a      	beq.n	80017ea <xQueueReceiveFromISR+0xfe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e016      	b.n	80017ea <xQueueReceiveFromISR+0xfe>
                configASSERT( cRxLock != queueINT8_MAX );
 80017bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80017c0:	2b7f      	cmp	r3, #127	; 0x7f
 80017c2:	d10a      	bne.n	80017da <xQueueReceiveFromISR+0xee>
        __asm volatile
 80017c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c8:	f383 8811 	msr	BASEPRI, r3
 80017cc:	f3bf 8f6f 	isb	sy
 80017d0:	f3bf 8f4f 	dsb	sy
 80017d4:	61bb      	str	r3, [r7, #24]
    }
 80017d6:	bf00      	nop
 80017d8:	e7fe      	b.n	80017d8 <xQueueReceiveFromISR+0xec>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80017da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017de:	3301      	adds	r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 80017ea:	2301      	movs	r3, #1
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ee:	e001      	b.n	80017f4 <xQueueReceiveFromISR+0x108>
            xReturn = pdFAIL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f383 8811 	msr	BASEPRI, r3
    }
 80017fe:	bf00      	nop
    return xReturn;
 8001800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001802:	4618      	mov	r0, r3
 8001804:	3740      	adds	r7, #64	; 0x40
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 800180a:	b480      	push	{r7}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10a      	bne.n	8001832 <xQueueIsQueueEmptyFromISR+0x28>
        __asm volatile
 800181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	60fb      	str	r3, [r7, #12]
    }
 800182e:	bf00      	nop
 8001830:	e7fe      	b.n	8001830 <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e001      	b.n	8001844 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001844:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	60fb      	str	r3, [r7, #12]
    }
 8001874:	bf00      	nop
 8001876:	e7fe      	b.n	8001876 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001880:	429a      	cmp	r2, r3
 8001882:	d102      	bne.n	800188a <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e001      	b.n	800188e <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800188e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <uxQueueMessagesWaitingFromISR>:
{
 800189a:	b480      	push	{r7}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	617b      	str	r3, [r7, #20]
    configASSERT( pxQueue );
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <uxQueueMessagesWaitingFromISR+0x28>
        __asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	60fb      	str	r3, [r7, #12]
    }
 80018be:	bf00      	nop
 80018c0:	e7fe      	b.n	80018c0 <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	613b      	str	r3, [r7, #16]
    return uxReturn;
 80018c8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <xQueueCreateMutex>:
    {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	461a      	mov	r2, r3
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f000 fab7 	bl	8001e60 <xQueueGenericCreate>
 80018f2:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fe3c 	bl	8002572 <prvInitialiseMutex>
        return xNewQueue;
 80018fa:	68fb      	ldr	r3, [r7, #12]
    }
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <xQueueCreateMutexStatic>:
    {
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	6939      	ldr	r1, [r7, #16]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f000 faf0 	bl	8001f08 <xQueueGenericCreateStatic>
 8001928:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fe21 	bl	8002572 <prvInitialiseMutex>
        return xNewQueue;
 8001930:	68fb      	ldr	r3, [r7, #12]
    }
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <xQueueCreateCountingSemaphore>:
    {
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
        configASSERT( uxMaxCount != 0 );
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 800194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	613b      	str	r3, [r7, #16]
    }
 800195c:	bf00      	nop
 800195e:	e7fe      	b.n	800195e <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d90a      	bls.n	800197e <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	60fb      	str	r3, [r7, #12]
    }
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <xQueueCreateCountingSemaphore+0x42>
        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800197e:	2202      	movs	r2, #2
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa6c 	bl	8001e60 <xQueueGenericCreate>
 8001988:	6178      	str	r0, [r7, #20]
        if( xHandle != NULL )
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <xQueueCreateCountingSemaphore+0x5c>
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
        return xHandle;
 8001996:	697b      	ldr	r3, [r7, #20]
    }
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <xQueueCreateCountingSemaphoreStatic>:
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
        configASSERT( uxMaxCount != 0 );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <xQueueCreateCountingSemaphoreStatic+0x28>
        __asm volatile
 80019b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	f3bf 8f6f 	isb	sy
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	61bb      	str	r3, [r7, #24]
    }
 80019c4:	bf00      	nop
 80019c6:	e7fe      	b.n	80019c6 <xQueueCreateCountingSemaphoreStatic+0x26>
        configASSERT( uxInitialCount <= uxMaxCount );
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d90a      	bls.n	80019e6 <xQueueCreateCountingSemaphoreStatic+0x46>
        __asm volatile
 80019d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	617b      	str	r3, [r7, #20]
    }
 80019e2:	bf00      	nop
 80019e4:	e7fe      	b.n	80019e4 <xQueueCreateCountingSemaphoreStatic+0x44>
        xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80019e6:	2302      	movs	r3, #2
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fa89 	bl	8001f08 <xQueueGenericCreateStatic>
 80019f6:	61f8      	str	r0, [r7, #28]
        if( xHandle != NULL )
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <xQueueCreateCountingSemaphoreStatic+0x64>
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38
        return xHandle;
 8001a04:	69fb      	ldr	r3, [r7, #28]
    }
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <xQueueSemaphoreTake>:
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08e      	sub	sp, #56	; 0x38
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    Queue_t * const pxQueue = xQueue;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( ( pxQueue ) );
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	623b      	str	r3, [r7, #32]
    }
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <xQueueSemaphoreTake+0x50>
        __asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	61fb      	str	r3, [r7, #28]
    }
 8001a5a:	bf00      	nop
 8001a5c:	e7fe      	b.n	8001a5c <xQueueSemaphoreTake+0x4e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a5e:	f003 fd73 	bl	8005548 <xTaskGetSchedulerState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <xQueueSemaphoreTake+0x60>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <xQueueSemaphoreTake+0x64>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <xQueueSemaphoreTake+0x66>
 8001a72:	2300      	movs	r3, #0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <xQueueSemaphoreTake+0x80>
        __asm volatile
 8001a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	61bb      	str	r3, [r7, #24]
    }
 8001a8a:	bf00      	nop
 8001a8c:	e7fe      	b.n	8001a8c <xQueueSemaphoreTake+0x7e>
        taskENTER_CRITICAL();
 8001a8e:	f00a faf5 	bl	800c07c <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <xQueueSemaphoreTake+0xda>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d104      	bne.n	8001ab8 <xQueueSemaphoreTake+0xaa>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001aae:	f003 fee7 	bl	8005880 <pvTaskIncrementMutexHeldCount>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00f      	beq.n	8001ae0 <xQueueSemaphoreTake+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	3310      	adds	r3, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fbad 	bl	8005224 <xTaskRemoveFromEventList>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <xQueueSemaphoreTake+0xd2>
                        queueYIELD_IF_USING_PREEMPTION();
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <xQueueSemaphoreTake+0x212>)
 8001ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001ae0:	f00a faea 	bl	800c0b8 <vPortExitCritical>
                return pdPASS;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e097      	b.n	8001c18 <xQueueSemaphoreTake+0x20a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d111      	bne.n	8001b12 <xQueueSemaphoreTake+0x104>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	617b      	str	r3, [r7, #20]
    }
 8001b06:	bf00      	nop
 8001b08:	e7fe      	b.n	8001b08 <xQueueSemaphoreTake+0xfa>
                    taskEXIT_CRITICAL();
 8001b0a:	f00a fad5 	bl	800c0b8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e082      	b.n	8001c18 <xQueueSemaphoreTake+0x20a>
                else if( xEntryTimeSet == pdFALSE )
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <xQueueSemaphoreTake+0x118>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fec3 	bl	80058a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
        taskEXIT_CRITICAL();
 8001b26:	f00a fac7 	bl	800c0b8 <vPortExitCritical>
        vTaskSuspendAll();
 8001b2a:	f002 fb1d 	bl	8004168 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001b2e:	f00a faa5 	bl	800c07c <vPortEnterCritical>
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d103      	bne.n	8001b48 <xQueueSemaphoreTake+0x13a>
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d103      	bne.n	8001b5e <xQueueSemaphoreTake+0x150>
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b5e:	f00a faab 	bl	800c0b8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b62:	463a      	mov	r2, r7
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f978 	bl	8004e60 <xTaskCheckForTimeOut>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d132      	bne.n	8001bdc <xQueueSemaphoreTake+0x1ce>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b78:	f000 fbb3 	bl	80022e2 <prvIsQueueEmpty>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d026      	beq.n	8001bd0 <xQueueSemaphoreTake+0x1c2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <xQueueSemaphoreTake+0x190>
                            taskENTER_CRITICAL();
 8001b8a:	f00a fa77 	bl	800c07c <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fcf6 	bl	8005584 <xTaskPriorityInherit>
 8001b98:	6338      	str	r0, [r7, #48]	; 0x30
                            taskEXIT_CRITICAL();
 8001b9a:	f00a fa8d 	bl	800c0b8 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	3324      	adds	r3, #36	; 0x24
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fab0 	bl	800510c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bae:	f000 fb39 	bl	8002224 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001bb2:	f002 fae7 	bl	8004184 <xTaskResumeAll>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f af68 	bne.w	8001a8e <xQueueSemaphoreTake+0x80>
                    portYIELD_WITHIN_API();
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <xQueueSemaphoreTake+0x212>)
 8001bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	e75e      	b.n	8001a8e <xQueueSemaphoreTake+0x80>
                prvUnlockQueue( pxQueue );
 8001bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bd2:	f000 fb27 	bl	8002224 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001bd6:	f002 fad5 	bl	8004184 <xTaskResumeAll>
 8001bda:	e758      	b.n	8001a8e <xQueueSemaphoreTake+0x80>
            prvUnlockQueue( pxQueue );
 8001bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bde:	f000 fb21 	bl	8002224 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001be2:	f002 facf 	bl	8004184 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be8:	f000 fb7b 	bl	80022e2 <prvIsQueueEmpty>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f43f af4d 	beq.w	8001a8e <xQueueSemaphoreTake+0x80>
                        if( xInheritanceOccurred != pdFALSE )
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00d      	beq.n	8001c16 <xQueueSemaphoreTake+0x208>
                            taskENTER_CRITICAL();
 8001bfa:	f00a fa3f 	bl	800c07c <vPortEnterCritical>
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c00:	f000 fcd1 	bl	80025a6 <prvGetDisinheritPriorityAfterTimeout>
 8001c04:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fda9 	bl	8005764 <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 8001c12:	f00a fa51 	bl	800c0b8 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3738      	adds	r7, #56	; 0x38
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	e000ed04 	.word	0xe000ed04

08001c24 <xQueueGetMutexHolder>:
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60bb      	str	r3, [r7, #8]
        taskENTER_CRITICAL();
 8001c30:	f00a fa24 	bl	800c07c <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <xQueueGetMutexHolder+0x20>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e001      	b.n	8001c48 <xQueueGetMutexHolder+0x24>
                pxReturn = NULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
        taskEXIT_CRITICAL();
 8001c48:	f00a fa36 	bl	800c0b8 <vPortExitCritical>
        return pxReturn;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <xQueueGetMutexHolderFromISR>:
    {
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <xQueueGetMutexHolderFromISR+0x24>
        __asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	60bb      	str	r3, [r7, #8]
    }
 8001c76:	bf00      	nop
 8001c78:	e7fe      	b.n	8001c78 <xQueueGetMutexHolderFromISR+0x22>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <xQueueGetMutexHolderFromISR+0x34>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e001      	b.n	8001c8e <xQueueGetMutexHolderFromISR+0x38>
            pxReturn = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <xQueueTakeMutexRecursive>:
    {
 8001c9a:	b590      	push	{r4, r7, lr}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <xQueueTakeMutexRecursive+0x2a>
        __asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	60fb      	str	r3, [r7, #12]
    }
 8001cc0:	bf00      	nop
 8001cc2:	e7fe      	b.n	8001cc2 <xQueueTakeMutexRecursive+0x28>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	689c      	ldr	r4, [r3, #8]
 8001cc8:	f003 fc24 	bl	8005514 <xTaskGetCurrentTaskHandle>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	429c      	cmp	r4, r3
 8001cd0:	d107      	bne.n	8001ce2 <xQueueTakeMutexRecursive+0x48>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00c      	b.n	8001cfc <xQueueTakeMutexRecursive+0x62>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	6938      	ldr	r0, [r7, #16]
 8001ce6:	f7ff fe92 	bl	8001a0e <xQueueSemaphoreTake>
 8001cea:	6178      	str	r0, [r7, #20]
            if( xReturn != pdFAIL )
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <xQueueTakeMutexRecursive+0x62>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60da      	str	r2, [r3, #12]
        return xReturn;
 8001cfc:	697b      	ldr	r3, [r7, #20]
    }
 8001cfe:	4618      	mov	r0, r3
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}

08001d06 <xQueueGiveMutexRecursive>:
    {
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b087      	sub	sp, #28
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <xQueueGiveMutexRecursive+0x28>
        __asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	60fb      	str	r3, [r7, #12]
    }
 8001d2a:	bf00      	nop
 8001d2c:	e7fe      	b.n	8001d2c <xQueueGiveMutexRecursive+0x26>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	689c      	ldr	r4, [r3, #8]
 8001d32:	f003 fbef 	bl	8005514 <xTaskGetCurrentTaskHandle>
 8001d36:	4603      	mov	r3, r0
 8001d38:	429c      	cmp	r4, r3
 8001d3a:	d111      	bne.n	8001d60 <xQueueGiveMutexRecursive+0x5a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <xQueueGiveMutexRecursive+0x54>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7fe ffb3 	bl	8000cc0 <xQueueGenericSend>
            xReturn = pdPASS;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e001      	b.n	8001d64 <xQueueGiveMutexRecursive+0x5e>
            xReturn = pdFAIL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
        return xReturn;
 8001d64:	697b      	ldr	r3, [r7, #20]
    }
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}

08001d6e <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e014      	b.n	8001da8 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <vQueueAddToRegistry+0x4e>)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <vQueueAddToRegistry+0x4e>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <vQueueAddToRegistry+0x4e>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001da0:	e006      	b.n	8001db0 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d9e7      	bls.n	8001d7e <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000228 	.word	0x20000228

08001dc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e016      	b.n	8001dfc <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <vQueueUnregisterQueue+0x50>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d10b      	bne.n	8001df6 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <vQueueUnregisterQueue+0x50>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2100      	movs	r1, #0
 8001de4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001de8:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <vQueueUnregisterQueue+0x50>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
                break;
 8001df4:	e006      	b.n	8001e04 <vQueueUnregisterQueue+0x44>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d9e5      	bls.n	8001dce <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000228 	.word	0x20000228

08001e14 <pcQueueGetName>:
    {
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e010      	b.n	8001e48 <pcQueueGetName+0x34>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001e26:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <pcQueueGetName+0x48>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d105      	bne.n	8001e42 <pcQueueGetName+0x2e>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <pcQueueGetName+0x48>)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e3e:	60bb      	str	r3, [r7, #8]
                break;
 8001e40:	e005      	b.n	8001e4e <pcQueueGetName+0x3a>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3301      	adds	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d9eb      	bls.n	8001e26 <pcQueueGetName+0x12>
        return pcReturn;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000228 	.word	0x20000228

08001e60 <xQueueGenericCreate>:
    {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	71fb      	strb	r3, [r7, #7]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xQueueGenericCreate+0x2a>
        __asm volatile
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	61bb      	str	r3, [r7, #24]
    }
 8001e86:	bf00      	nop
 8001e88:	e7fe      	b.n	8001e88 <xQueueGenericCreate+0x28>
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <xQueueGenericCreate+0x48>
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d101      	bne.n	8001eac <xQueueGenericCreate+0x4c>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <xQueueGenericCreate+0x4e>
 8001eac:	2300      	movs	r3, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <xQueueGenericCreate+0x68>
        __asm volatile
 8001eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	617b      	str	r3, [r7, #20]
    }
 8001ec4:	bf00      	nop
 8001ec6:	e7fe      	b.n	8001ec6 <xQueueGenericCreate+0x66>
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	334c      	adds	r3, #76	; 0x4c
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 f8c7 	bl	8007060 <pvPortMalloc>
 8001ed2:	6238      	str	r0, [r7, #32]
        if( pxNewQueue != NULL )
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d011      	beq.n	8001efe <xQueueGenericCreate+0x9e>
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	334c      	adds	r3, #76	; 0x4c
 8001ee2:	61fb      	str	r3, [r7, #28]
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fb18 	bl	800252e <prvInitialiseNewQueue>
        return pxNewQueue;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
    }
 8001f00:	4618      	mov	r0, r3
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <xQueueGenericCreateStatic>:
    {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericCreateStatic+0x28>
        configASSERT( pxStaticQueue != NULL );
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericCreateStatic+0x44>
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <xQueueGenericCreateStatic+0x52>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <xQueueGenericCreateStatic+0x56>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <xQueueGenericCreateStatic+0x58>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	623b      	str	r3, [r7, #32]
    }
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <xQueueGenericCreateStatic+0x7e>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <xQueueGenericCreateStatic+0x82>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <xQueueGenericCreateStatic+0x84>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
 8001fa2:	bf00      	nop
 8001fa4:	e7fe      	b.n	8001fa4 <xQueueGenericCreateStatic+0x9c>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8001fa6:	234c      	movs	r3, #76	; 0x4c
 8001fa8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b4c      	cmp	r3, #76	; 0x4c
 8001fae:	d00a      	beq.n	8001fc6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	61bb      	str	r3, [r7, #24]
    }
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001fc6:	697b      	ldr	r3, [r7, #20]
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        if( pxNewQueue != NULL )
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <xQueueGenericCreateStatic+0xe6>
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 faa0 	bl	800252e <prvInitialiseNewQueue>
        return pxNewQueue;
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3730      	adds	r7, #48	; 0x30
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
        QueueSetHandle_t pxQueue;

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8002000:	2200      	movs	r2, #0
 8002002:	2104      	movs	r1, #4
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff2b 	bl	8001e60 <xQueueGenericCreate>
 800200a:	60f8      	str	r0, [r7, #12]

        return pxQueue;
 800200c:	68fb      	ldr	r3, [r7, #12]
    }
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        taskENTER_CRITICAL();
 8002020:	f00a f82c 	bl	800c07c <vPortEnterCritical>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <xQueueAddToSet+0x1c>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e00b      	b.n	800204a <xQueueAddToSet+0x34>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <xQueueAddToSet+0x2a>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e004      	b.n	800204a <xQueueAddToSet+0x34>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	649a      	str	r2, [r3, #72]	; 0x48
                xReturn = pdPASS;
 8002046:	2301      	movs	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 800204a:	f00a f835 	bl	800c0b8 <vPortExitCritical>

        return xReturn;
 800204e:	68fb      	ldr	r3, [r7, #12]
    }
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <xQueueRemoveFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                    QueueSetHandle_t xQueueSet )
    {
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60bb      	str	r3, [r7, #8]

        if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d002      	beq.n	8002076 <xQueueRemoveFromSet+0x1e>
        {
            /* The queue was not a member of the set. */
            xReturn = pdFAIL;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e00f      	b.n	8002096 <xQueueRemoveFromSet+0x3e>
        }
        else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <xQueueRemoveFromSet+0x2c>
        {
            /* It is dangerous to remove a queue from a set when the queue is
             * not empty because the queue set will still hold pending events for
             * the queue. */
            xReturn = pdFAIL;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e008      	b.n	8002096 <xQueueRemoveFromSet+0x3e>
        }
        else
        {
            taskENTER_CRITICAL();
 8002084:	f009 fffa 	bl	800c07c <vPortEnterCritical>
            {
                /* The queue is no longer contained in the set. */
                pxQueueOrSemaphore->pxQueueSetContainer = NULL;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	649a      	str	r2, [r3, #72]	; 0x48
            }
            taskEXIT_CRITICAL();
 800208e:	f00a f813 	bl	800c0b8 <vPortExitCritical>
            xReturn = pdPASS;
 8002092:	2301      	movs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8002096:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
        QueueSetMemberHandle_t xReturn = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff f867 	bl	800118a <xQueueReceive>
        return xReturn;
 80020bc:	68fb      	ldr	r3, [r7, #12]
    }
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <xQueueSelectFromSetFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
    {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
        QueueSetMemberHandle_t xReturn = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]

        ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fb06 	bl	80016ec <xQueueReceiveFromISR>
        return xReturn;
 80020e0:	68fb      	ldr	r3, [r7, #12]
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <vQueueWaitForMessageRestricted>:
    {
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	617b      	str	r3, [r7, #20]
        prvLockQueue( pxQueue );
 80020fa:	f009 ffbf 	bl	800c07c <vPortEnterCritical>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002104:	b25b      	sxtb	r3, r3
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210a:	d103      	bne.n	8002114 <vQueueWaitForMessageRestricted+0x2a>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211a:	b25b      	sxtb	r3, r3
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d103      	bne.n	800212a <vQueueWaitForMessageRestricted+0x40>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800212a:	f009 ffc5 	bl	800c0b8 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <vQueueWaitForMessageRestricted+0x5a>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3324      	adds	r3, #36	; 0x24
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f844 	bl	80051cc <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f000 f86d 	bl	8002224 <prvUnlockQueue>
    }
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <xQueueGenericReset>:
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60fb      	str	r3, [r7, #12]
    configASSERT( pxQueue );
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <xQueueGenericReset+0x2a>
        __asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	60bb      	str	r3, [r7, #8]
    }
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <xQueueGenericReset+0x28>
    taskENTER_CRITICAL();
 800217c:	f009 ff7e 	bl	800c07c <vPortEnterCritical>
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	3b01      	subs	r3, #1
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	441a      	add	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	22ff      	movs	r2, #255	; 0xff
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	22ff      	movs	r2, #255	; 0xff
 80021c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        if( xNewQueue == pdFALSE )
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d114      	bne.n	80021fc <xQueueGenericReset+0xaa>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <xQueueGenericReset+0xbe>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3310      	adds	r3, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f820 	bl	8005224 <xTaskRemoveFromEventList>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d012      	beq.n	8002210 <xQueueGenericReset+0xbe>
                    queueYIELD_IF_USING_PREEMPTION();
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <xQueueGenericReset+0xce>)
 80021ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	e009      	b.n	8002210 <xQueueGenericReset+0xbe>
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3310      	adds	r3, #16
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fcad 	bl	8000b60 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3324      	adds	r3, #36	; 0x24
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fca8 	bl	8000b60 <vListInitialise>
    taskEXIT_CRITICAL();
 8002210:	f009 ff52 	bl	800c0b8 <vPortExitCritical>
    return pdPASS;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000ed04 	.word	0xe000ed04

08002224 <prvUnlockQueue>:
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 800222c:	f009 ff26 	bl	800c07c <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002236:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002238:	e01e      	b.n	8002278 <prvUnlockQueue+0x54>
                    if( pxQueue->pxQueueSetContainer != NULL )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <prvUnlockQueue+0x30>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f90b 	bl	800245e <prvNotifyQueueSetContainer>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <prvUnlockQueue+0x4c>
                            vTaskMissedYield();
 800224e:	f003 f96f 	bl	8005530 <vTaskMissedYield>
 8002252:	e00d      	b.n	8002270 <prvUnlockQueue+0x4c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <prvUnlockQueue+0x5e>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3324      	adds	r3, #36	; 0x24
 8002260:	4618      	mov	r0, r3
 8002262:	f002 ffdf 	bl	8005224 <xTaskRemoveFromEventList>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <prvUnlockQueue+0x4c>
                                vTaskMissedYield();
 800226c:	f003 f960 	bl	8005530 <vTaskMissedYield>
            --cTxLock;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	3b01      	subs	r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dcdc      	bgt.n	800223a <prvUnlockQueue+0x16>
 8002280:	e000      	b.n	8002284 <prvUnlockQueue+0x60>
                            break;
 8002282:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 800228c:	f009 ff14 	bl	800c0b8 <vPortExitCritical>
    taskENTER_CRITICAL();
 8002290:	f009 fef4 	bl	800c07c <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800229c:	e011      	b.n	80022c2 <prvUnlockQueue+0x9e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <prvUnlockQueue+0xa8>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3310      	adds	r3, #16
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 ffba 	bl	8005224 <xTaskRemoveFromEventList>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <prvUnlockQueue+0x96>
                    vTaskMissedYield();
 80022b6:	f003 f93b 	bl	8005530 <vTaskMissedYield>
                --cRxLock;
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	3b01      	subs	r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80022c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dce9      	bgt.n	800229e <prvUnlockQueue+0x7a>
 80022ca:	e000      	b.n	80022ce <prvUnlockQueue+0xaa>
                break;
 80022cc:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 80022d6:	f009 feef 	bl	800c0b8 <vPortExitCritical>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <prvIsQueueEmpty>:
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 80022ea:	f009 fec7 	bl	800c07c <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 80022f6:	2301      	movs	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e001      	b.n	8002300 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 8002300:	f009 feda 	bl	800c0b8 <vPortExitCritical>
    return xReturn;
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <prvIsQueueFull>:
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8002316:	f009 feb1 	bl	800c07c <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	429a      	cmp	r2, r3
 8002324:	d102      	bne.n	800232c <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 8002326:	2301      	movs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e001      	b.n	8002330 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 8002330:	f009 fec2 	bl	800c0b8 <vPortExitCritical>
    return xReturn;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <prvCopyDataToQueue>:
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10d      	bne.n	8002378 <prvCopyDataToQueue+0x3a>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d14d      	bne.n	8002400 <prvCopyDataToQueue+0xc2>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f981 	bl	8005670 <xTaskPriorityDisinherit>
 800236e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	e043      	b.n	8002400 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6858      	ldr	r0, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	461a      	mov	r2, r3
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	f00e f865 	bl	8010458 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	441a      	add	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d32b      	bcc.n	8002400 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	e026      	b.n	8002400 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68d8      	ldr	r0, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	461a      	mov	r2, r3
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	f00e f84b 	bl	8010458 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	425b      	negs	r3, r3
 80023cc:	441a      	add	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d207      	bcs.n	80023ee <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	425b      	negs	r3, r3
 80023e8:	441a      	add	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d105      	bne.n	8002400 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 8002408:	697b      	ldr	r3, [r7, #20]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <prvCopyDataFromQueue>:
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d018      	beq.n	8002456 <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	441a      	add	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d303      	bcc.n	8002446 <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	461a      	mov	r2, r3
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f00e f801 	bl	8010458 <memcpy>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 800245e:	b580      	push	{r7, lr}
 8002460:	b088      	sub	sp, #32
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	613b      	str	r3, [r7, #16]
    }
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	429a      	cmp	r2, r3
 8002496:	d30a      	bcc.n	80024ae <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	60fb      	str	r3, [r7, #12]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d234      	bcs.n	8002524 <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024c0:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	4619      	mov	r1, r3
 80024c8:	69b8      	ldr	r0, [r7, #24]
 80024ca:	f7ff ff38 	bl	800233e <prvCopyDataToQueue>
 80024ce:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 80024d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d10e      	bne.n	80024f8 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3324      	adds	r3, #36	; 0x24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fe9c 	bl	8005224 <xTaskRemoveFromEventList>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d018      	beq.n	8002524 <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e015      	b.n	8002524 <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 80024f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024fc:	2b7f      	cmp	r3, #127	; 0x7f
 80024fe:	d10a      	bne.n	8002516 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	60bb      	str	r3, [r7, #8]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	3301      	adds	r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b25a      	sxtb	r2, r3
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002524:	69fb      	ldr	r3, [r7, #28]
    }
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <prvInitialiseNewQueue>:
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e002      	b.n	8002550 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800255c:	2101      	movs	r1, #1
 800255e:	69b8      	ldr	r0, [r7, #24]
 8002560:	f7ff fdf7 	bl	8002152 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2200      	movs	r2, #0
 8002568:	649a      	str	r2, [r3, #72]	; 0x48
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <prvInitialiseMutex>:
    {
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002592:	2300      	movs	r3, #0
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe fb91 	bl	8000cc0 <xQueueGenericSend>
    }
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <prvGetDisinheritPriorityAfterTimeout>:
    {
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1c3 0305 	rsb	r3, r3, #5
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e001      	b.n	80025c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80025c8:	68fb      	ldr	r3, [r7, #12]
    }
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b092      	sub	sp, #72	; 0x48
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xStreamBufferSend+0x3e>
        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xStreamBufferSend+0x3c>
    configASSERT( pxStreamBuffer );
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xStreamBufferSend+0x5a>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xStreamBufferSend+0x58>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	7f1b      	ldrb	r3, [r3, #28]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <xStreamBufferSend+0x98>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	3304      	adds	r3, #4
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d80a      	bhi.n	800265e <xStreamBufferSend+0x8a>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	623b      	str	r3, [r7, #32]
    }
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xStreamBufferSend+0x88>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 800265e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	429a      	cmp	r2, r3
 8002664:	d908      	bls.n	8002678 <xStreamBufferSend+0xa4>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	e005      	b.n	8002678 <xStreamBufferSend+0xa4>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 800266c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	429a      	cmp	r2, r3
 8002672:	d901      	bls.n	8002678 <xStreamBufferSend+0xa4>
        {
            xRequiredSpace = xMaxReportedSpace;
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d041      	beq.n	8002702 <xStreamBufferSend+0x12e>
    {
        vTaskSetTimeOutState( &xTimeOut );
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fbc6 	bl	8004e14 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8002688:	f009 fcf8 	bl	800c07c <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800268c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800268e:	f000 fa9e 	bl	8002bce <xStreamBufferSpacesAvailable>
 8002692:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 8002694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	429a      	cmp	r2, r3
 800269a:	d218      	bcs.n	80026ce <xStreamBufferSend+0xfa>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 800269c:	2100      	movs	r1, #0
 800269e:	2000      	movs	r0, #0
 80026a0:	f002 fb50 	bl	8004d44 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <xStreamBufferSend+0xee>
        __asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	61fb      	str	r3, [r7, #28]
    }
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xStreamBufferSend+0xec>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80026c2:	f002 ff27 	bl	8005514 <xTaskGetCurrentTaskHandle>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	e002      	b.n	80026d4 <xStreamBufferSend+0x100>
                }
                else
                {
                    taskEXIT_CRITICAL();
 80026ce:	f009 fcf3 	bl	800c0b8 <vPortExitCritical>
                    break;
 80026d2:	e016      	b.n	8002702 <xStreamBufferSend+0x12e>
                }
            }
            taskEXIT_CRITICAL();
 80026d4:	f009 fcf0 	bl	800c0b8 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f002 f99a 	bl	8004a1c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80026ee:	463a      	mov	r2, r7
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fbb2 	bl	8004e60 <xTaskCheckForTimeOut>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0c2      	beq.n	8002688 <xStreamBufferSend+0xb4>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 8002702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <xStreamBufferSend+0x13c>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800270a:	f000 fa60 	bl	8002bce <xStreamBufferSpacesAvailable>
 800270e:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800271c:	f000 fd45 	bl	80031aa <prvWriteMessageToBuffer>
 8002720:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <xStreamBufferSend+0x18c>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800272a:	f000 fc7b 	bl	8003024 <prvBytesInBuffer>
 800272e:	4602      	mov	r2, r0
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d313      	bcc.n	8002760 <xStreamBufferSend+0x18c>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8002738:	f001 fd16 	bl	8004168 <vTaskSuspendAll>
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <xStreamBufferSend+0x188>
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	6918      	ldr	r0, [r3, #16]
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	f001 ff81 	bl	8004658 <xTaskGenericNotify>
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	f001 fd12 	bl	8004184 <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002762:	4618      	mov	r0, r3
 8002764:	3740      	adds	r7, #64	; 0x40
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b090      	sub	sp, #64	; 0x40
 800276e:	af02      	add	r7, sp, #8
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <xStreamBufferSendFromISR+0x32>
        __asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	623b      	str	r3, [r7, #32]
    }
 8002798:	bf00      	nop
 800279a:	e7fe      	b.n	800279a <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xStreamBufferSendFromISR+0x4e>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	61fb      	str	r3, [r7, #28]
    }
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	7f1b      	ldrb	r3, [r3, #28]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	3304      	adds	r3, #4
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80027ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027cc:	f000 f9ff 	bl	8002bce <xStreamBufferSpacesAvailable>
 80027d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027de:	f000 fce4 	bl	80031aa <prvWriteMessageToBuffer>
 80027e2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02d      	beq.n	8002846 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80027ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ec:	f000 fc1a 	bl	8003024 <prvBytesInBuffer>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d325      	bcc.n	8002846 <xStreamBufferSendFromISR+0xdc>
        __asm volatile
 80027fa:	f3ef 8211 	mrs	r2, BASEPRI
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	61ba      	str	r2, [r7, #24]
 8002810:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8002812:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <xStreamBufferSendFromISR+0xd0>
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6918      	ldr	r0, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	f001 fff2 	bl	8004818 <xTaskGenericNotifyFromISR>
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f383 8811 	msr	BASEPRI, r3
    }
 8002844:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002848:	4618      	mov	r0, r3
 800284a:	3738      	adds	r7, #56	; 0x38
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08e      	sub	sp, #56	; 0x38
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xStreamBufferReceive+0x32>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	61fb      	str	r3, [r7, #28]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <xStreamBufferReceive+0x4e>
        __asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	61bb      	str	r3, [r7, #24]
    }
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80028aa:	2304      	movs	r3, #4
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	e001      	b.n	80028b4 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d037      	beq.n	800292a <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 80028ba:	f009 fbdf 	bl	800c07c <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80028be:	6a38      	ldr	r0, [r7, #32]
 80028c0:	f000 fbb0 	bl	8003024 <prvBytesInBuffer>
 80028c4:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80028c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d817      	bhi.n	80028fe <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80028ce:	2100      	movs	r1, #0
 80028d0:	2000      	movs	r0, #0
 80028d2:	f002 fa37 	bl	8004d44 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <xStreamBufferReceive+0xa4>
        __asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	617b      	str	r3, [r7, #20]
    }
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80028f4:	f002 fe0e 	bl	8005514 <xTaskGetCurrentTaskHandle>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028fe:	f009 fbdb 	bl	800c0b8 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 8002902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	429a      	cmp	r2, r3
 8002908:	d813      	bhi.n	8002932 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	2000      	movs	r0, #0
 8002916:	f002 f881 	bl	8004a1c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002920:	6a38      	ldr	r0, [r7, #32]
 8002922:	f000 fb7f 	bl	8003024 <prvBytesInBuffer>
 8002926:	62b8      	str	r0, [r7, #40]	; 0x28
 8002928:	e003      	b.n	8002932 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800292a:	6a38      	ldr	r0, [r7, #32]
 800292c:	f000 fb7a 	bl	8003024 <prvBytesInBuffer>
 8002930:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	429a      	cmp	r2, r3
 8002938:	d91f      	bls.n	800297a <xStreamBufferReceive+0x12a>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	6a38      	ldr	r0, [r7, #32]
 8002946:	f000 fbfe 	bl	8003146 <prvReadMessageFromBuffer>
 800294a:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <xStreamBufferReceive+0x12a>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 8002952:	f001 fc09 	bl	8004168 <vTaskSuspendAll>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <xStreamBufferReceive+0x126>
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	6958      	ldr	r0, [r3, #20]
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	f001 fe74 	bl	8004658 <xTaskGenericNotify>
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
 8002976:	f001 fc05 	bl	8004184 <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800297c:	4618      	mov	r0, r3
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	; 0x40
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvRxData );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <xStreamBufferReceiveFromISR+0x32>
        __asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	623b      	str	r3, [r7, #32]
    }
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xStreamBufferReceiveFromISR+0x30>
    configASSERT( pxStreamBuffer );
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xStreamBufferReceiveFromISR+0x4e>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	61fb      	str	r3, [r7, #28]
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xStreamBufferReceiveFromISR+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	7f1b      	ldrb	r3, [r3, #28]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <xStreamBufferReceiveFromISR+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80029de:	2304      	movs	r3, #4
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
 80029e2:	e001      	b.n	80029e8 <xStreamBufferReceiveFromISR+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80029e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ea:	f000 fb1b 	bl	8003024 <prvBytesInBuffer>
 80029ee:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80029f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d931      	bls.n	8002a5c <xStreamBufferReceiveFromISR+0xd8>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a04:	f000 fb9f 	bl	8003146 <prvReadMessageFromBuffer>
 8002a08:	6378      	str	r0, [r7, #52]	; 0x34

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d025      	beq.n	8002a5c <xStreamBufferReceiveFromISR+0xd8>
        __asm volatile
 8002a10:	f3ef 8211 	mrs	r2, BASEPRI
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8002a28:	69bb      	ldr	r3, [r7, #24]
        {
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <xStreamBufferReceiveFromISR+0xcc>
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	6958      	ldr	r0, [r3, #20]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	f001 fee7 	bl	8004818 <xTaskGenericNotifyFromISR>
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f383 8811 	msr	BASEPRI, r3
    }
 8002a5a:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3738      	adds	r7, #56	; 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <vStreamBufferDelete>:
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
    configASSERT( pxStreamBuffer );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <vStreamBufferDelete+0x28>
        __asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	60bb      	str	r3, [r7, #8]
    }
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <vStreamBufferDelete+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	7f1b      	ldrb	r3, [r3, #28]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <vStreamBufferDelete+0x3c>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f004 fbb0 	bl	8007200 <vPortFree>
}
 8002aa0:	e004      	b.n	8002aac <vStreamBufferDelete+0x46>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f00d fce4 	bl	8010474 <memset>
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <xStreamBufferIsFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

    configASSERT( pxStreamBuffer );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <xStreamBufferIsFull+0x28>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	60bb      	str	r3, [r7, #8]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xStreamBufferIsFull+0x26>

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	7f1b      	ldrb	r3, [r3, #28]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <xStreamBufferIsFull+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e001      	b.n	8002af2 <xStreamBufferIsFull+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f86b 	bl	8002bce <xStreamBufferSpacesAvailable>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d302      	bcc.n	8002b06 <xStreamBufferIsFull+0x52>
    {
        xReturn = pdTRUE;
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e001      	b.n	8002b0a <xStreamBufferIsFull+0x56>
    }
    else
    {
        xReturn = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xStreamBufferIsEmpty>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <xStreamBufferIsEmpty+0x28>
        __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	60bb      	str	r3, [r7, #8]
    }
 8002b38:	bf00      	nop
 8002b3a:	e7fe      	b.n	8002b3a <xStreamBufferIsEmpty+0x26>
    xTail = pxStreamBuffer->xTail;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
    if( pxStreamBuffer->xHead == xTail )
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d102      	bne.n	8002b52 <xStreamBufferIsEmpty+0x3e>
        xReturn = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e001      	b.n	8002b56 <xStreamBufferIsEmpty+0x42>
        xReturn = pdFALSE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
    return xReturn;
 8002b56:	697b      	ldr	r3, [r7, #20]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <xStreamBufferReset>:
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b088      	sub	sp, #32
 8002b66:	af02      	add	r7, sp, #8
 8002b68:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFAIL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xStreamBufferReset+0x2c>
        __asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60fb      	str	r3, [r7, #12]
    }
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xStreamBufferReset+0x2a>
    taskENTER_CRITICAL();
 8002b8e:	f009 fa75 	bl	800c07c <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d112      	bne.n	8002bc0 <xStreamBufferReset+0x5e>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <xStreamBufferReset+0x5e>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	68d8      	ldr	r0, [r3, #12]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	7f1b      	ldrb	r3, [r3, #28]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	6938      	ldr	r0, [r7, #16]
 8002bb8:	f000 fbae 	bl	8003318 <prvInitialiseNewStreamBuffer>
                xReturn = pdPASS;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
    taskEXIT_CRITICAL();
 8002bc0:	f009 fa7a 	bl	800c0b8 <vPortExitCritical>
    return xReturn;
 8002bc4:	697b      	ldr	r3, [r7, #20]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <xStreamBufferSpacesAvailable>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	60fb      	str	r3, [r7, #12]
    }
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xStreamBufferSpacesAvailable+0x26>
    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
    if( xSpace >= pxStreamBuffer->xLength )
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d304      	bcc.n	8002c26 <xStreamBufferSpacesAvailable+0x58>
        xSpace -= pxStreamBuffer->xLength;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    return xSpace;
 8002c26:	697b      	ldr	r3, [r7, #20]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <xStreamBufferBytesAvailable>:
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xStreamBufferBytesAvailable+0x28>
        __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	60fb      	str	r3, [r7, #12]
    }
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xStreamBufferBytesAvailable+0x26>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f000 f9e2 	bl	8003024 <prvBytesInBuffer>
 8002c60:	6138      	str	r0, [r7, #16]
    return xReturn;
 8002c62:	693b      	ldr	r3, [r7, #16]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <xStreamBufferSetTriggerLevel>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xStreamBufferSetTriggerLevel+0x2a>
        __asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	60fb      	str	r3, [r7, #12]
    }
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xStreamBufferSetTriggerLevel+0x28>
    if( xTriggerLevel == ( size_t ) 0 )
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xStreamBufferSetTriggerLevel+0x34>
        xTriggerLevel = ( size_t ) 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	603b      	str	r3, [r7, #0]
    if( xTriggerLevel <= pxStreamBuffer->xLength )
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d805      	bhi.n	8002cb6 <xStreamBufferSetTriggerLevel+0x4a>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	60da      	str	r2, [r3, #12]
        xReturn = pdPASS;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e001      	b.n	8002cba <xStreamBufferSetTriggerLevel+0x4e>
        xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
    return xReturn;
 8002cba:	697b      	ldr	r3, [r7, #20]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08c      	sub	sp, #48	; 0x30
 8002cca:	af02      	add	r7, sp, #8
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <xStreamBufferSendCompletedFromISR+0x2a>
        __asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	61bb      	str	r3, [r7, #24]
    }
 8002cec:	bf00      	nop
 8002cee:	e7fe      	b.n	8002cee <xStreamBufferSendCompletedFromISR+0x28>
        __asm volatile
 8002cf0:	f3ef 8211 	mrs	r2, BASEPRI
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	617a      	str	r2, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8002d08:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002d0a:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <xStreamBufferSendCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	6918      	ldr	r0, [r3, #16]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	f001 fd77 	bl	8004818 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
            xReturn = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e001      	b.n	8002d3a <xStreamBufferSendCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f383 8811 	msr	BASEPRI, r3
    }
 8002d44:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xStreamBufferReceiveCompletedFromISR+0x2a>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61bb      	str	r3, [r7, #24]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xStreamBufferReceiveCompletedFromISR+0x28>
        __asm volatile
 8002d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	617a      	str	r2, [r7, #20]
 8002d90:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8002d92:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002d94:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <xStreamBufferReceiveCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	6958      	ldr	r0, [r3, #20]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	f001 fd32 	bl	8004818 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
            xReturn = pdTRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e001      	b.n	8002dc4 <xStreamBufferReceiveCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f383 8811 	msr	BASEPRI, r3
    }
 8002dce:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <xStreamBufferGenericCreate>:
    {
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b08c      	sub	sp, #48	; 0x30
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
        if( xIsMessageBuffer == pdTRUE )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d110      	bne.n	8002e0e <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d81b      	bhi.n	8002e30 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
    }
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xStreamBufferGenericCreate+0x32>
            ucFlags = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            configASSERT( xBufferSizeBytes > 0 );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	61bb      	str	r3, [r7, #24]
    }
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <xStreamBufferGenericCreate+0x54>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d90a      	bls.n	8002e4e <xStreamBufferGenericCreate+0x74>
        __asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	617b      	str	r3, [r7, #20]
    }
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xStreamBufferGenericCreate+0x72>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <xStreamBufferGenericCreate+0x7e>
            xTriggerLevelBytes = ( size_t ) 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
        xBufferSizeBytes++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
        pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3320      	adds	r3, #32
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f8fc 	bl	8007060 <pvPortMalloc>
 8002e68:	6238      	str	r0, [r7, #32]
        if( pucAllocatedMemory != NULL )
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <xStreamBufferGenericCreate+0xac>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f103 0120 	add.w	r1, r3, #32
 8002e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6a38      	ldr	r0, [r7, #32]
 8002e82:	f000 fa49 	bl	8003318 <prvInitialiseNewStreamBuffer>
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002e86:	6a3b      	ldr	r3, [r7, #32]
    }
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <xStreamBufferGenericCreateStatic>:
    {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	; 0x40
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( pucStreamBufferStorageArea );
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xStreamBufferGenericCreateStatic+0x2e>
        __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xStreamBufferGenericCreateStatic+0x2c>
        configASSERT( pxStaticStreamBuffer );
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xStreamBufferGenericCreateStatic+0x4a>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xStreamBufferGenericCreateStatic+0x48>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90a      	bls.n	8002ef8 <xStreamBufferGenericCreateStatic+0x68>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	623b      	str	r3, [r7, #32]
    }
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xStreamBufferGenericCreateStatic+0x66>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <xStreamBufferGenericCreateStatic+0x72>
            xTriggerLevelBytes = ( size_t ) 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
        if( xIsMessageBuffer != pdFALSE )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <xStreamBufferGenericCreateStatic+0x80>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002f0e:	e002      	b.n	8002f16 <xStreamBufferGenericCreateStatic+0x86>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002f10:	2302      	movs	r3, #2
 8002f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d80a      	bhi.n	8002f32 <xStreamBufferGenericCreateStatic+0xa2>
        __asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	61fb      	str	r3, [r7, #28]
    }
 8002f2e:	bf00      	nop
 8002f30:	e7fe      	b.n	8002f30 <xStreamBufferGenericCreateStatic+0xa0>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002f32:	2320      	movs	r3, #32
 8002f34:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d00a      	beq.n	8002f52 <xStreamBufferGenericCreateStatic+0xc2>
        __asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61bb      	str	r3, [r7, #24]
    }
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xStreamBufferGenericCreateStatic+0xc0>
        if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <xStreamBufferGenericCreateStatic+0xf4>
 8002f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <xStreamBufferGenericCreateStatic+0xf4>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f6c:	f000 f9d4 	bl	8003318 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	7f1b      	ldrb	r3, [r3, #28]
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	771a      	strb	r2, [r3, #28]
            xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8002f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
 8002f82:	e001      	b.n	8002f88 <xStreamBufferGenericCreateStatic+0xf8>
            xReturn = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
        return xReturn;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3738      	adds	r7, #56	; 0x38
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <xStreamBufferNextMessageLengthBytes>:
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	623b      	str	r3, [r7, #32]
    configASSERT( pxStreamBuffer );
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xStreamBufferNextMessageLengthBytes+0x28>
        __asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	617b      	str	r3, [r7, #20]
    }
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xStreamBufferNextMessageLengthBytes+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	7f1b      	ldrb	r3, [r3, #28]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d027      	beq.n	8003016 <xStreamBufferNextMessageLengthBytes+0x84>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002fc6:	6a38      	ldr	r0, [r7, #32]
 8002fc8:	f000 f82c 	bl	8003024 <prvBytesInBuffer>
 8002fcc:	61f8      	str	r0, [r7, #28]
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d90f      	bls.n	8002ff4 <xStreamBufferNextMessageLengthBytes+0x62>
            xOriginalTail = pxStreamBuffer->xTail;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 8002fda:	f107 010c 	add.w	r1, r7, #12
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	6a38      	ldr	r0, [r7, #32]
 8002fe4:	f000 f91e 	bl	8003224 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
            pxStreamBuffer->xTail = xOriginalTail;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e012      	b.n	800301a <xStreamBufferNextMessageLengthBytes+0x88>
            configASSERT( xBytesAvailable == 0 );
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <xStreamBufferNextMessageLengthBytes+0x7e>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	613b      	str	r3, [r7, #16]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xStreamBufferNextMessageLengthBytes+0x7c>
            xReturn = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e001      	b.n	800301a <xStreamBufferNextMessageLengthBytes+0x88>
        xReturn = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    return xReturn;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvBytesInBuffer>:
    return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d304      	bcc.n	8003056 <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <prvWriteBytesToBuffer>:
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08a      	sub	sp, #40	; 0x28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
    configASSERT( xCount > ( size_t ) 0 );
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <prvWriteBytesToBuffer+0x28>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	61fb      	str	r3, [r7, #28]
    }
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <prvWriteBytesToBuffer+0x26>
    xNextHead = pxStreamBuffer->xHead;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4293      	cmp	r3, r2
 800309c:	bf28      	it	cs
 800309e:	4613      	movcs	r3, r2
 80030a0:	623b      	str	r3, [r7, #32]
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d90a      	bls.n	80030c6 <prvWriteBytesToBuffer+0x64>
        __asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61bb      	str	r3, [r7, #24]
    }
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	4413      	add	r3, r2
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f00d f9c0 	bl	8010458 <memcpy>
    if( xCount > xFirstLength )
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d91c      	bls.n	800311a <prvWriteBytesToBuffer+0xb8>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	1ad2      	subs	r2, r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d90a      	bls.n	8003104 <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	617b      	str	r3, [r7, #20]
    }
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6998      	ldr	r0, [r3, #24]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	18d1      	adds	r1, r2, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	461a      	mov	r2, r3
 8003116:	f00d f99f 	bl	8010458 <memcpy>
    xNextHead += xCount;
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    if( xNextHead >= pxStreamBuffer->xLength )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	429a      	cmp	r2, r3
 800312a:	d304      	bcc.n	8003136 <prvWriteBytesToBuffer+0xd4>
        xNextHead -= pxStreamBuffer->xLength;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    pxStreamBuffer->xHead = xNextHead;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	605a      	str	r2, [r3, #4]
    return xCount;
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <prvReadMessageFromBuffer>:
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b088      	sub	sp, #32
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d019      	beq.n	800318e <prvReadMessageFromBuffer+0x48>
        xOriginalTail = pxStreamBuffer->xTail;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8003160:	f107 0110 	add.w	r1, r7, #16
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f85b 	bl	8003224 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	61fb      	str	r3, [r7, #28]
        xBytesAvailable -= xBytesToStoreMessageLength;
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	603b      	str	r3, [r7, #0]
        if( xNextMessageLength > xBufferLengthBytes )
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d907      	bls.n	8003192 <prvReadMessageFromBuffer+0x4c>
            pxStreamBuffer->xTail = xOriginalTail;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e001      	b.n	8003192 <prvReadMessageFromBuffer+0x4c>
        xNextMessageLength = xBufferLengthBytes;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	61fb      	str	r3, [r7, #28]
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f843 	bl	8003224 <prvReadBytesFromBuffer>
 800319e:	6178      	str	r0, [r7, #20]
    return xReceivedLength;
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <prvWriteMessageToBuffer>:
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
    if( xSpace == ( size_t ) 0 )
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <prvWriteMessageToBuffer+0x1a>
        xShouldWrite = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e01d      	b.n	8003200 <prvWriteMessageToBuffer+0x56>
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	7f1b      	ldrb	r3, [r3, #28]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <prvWriteMessageToBuffer+0x38>
        xShouldWrite = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf28      	it	cs
 80031dc:	4613      	movcs	r3, r2
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	e00e      	b.n	8003200 <prvWriteMessageToBuffer+0x56>
    else if( xSpace >= xRequiredSpace )
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d308      	bcc.n	80031fc <prvWriteMessageToBuffer+0x52>
        xShouldWrite = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2204      	movs	r2, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ff34 	bl	8003062 <prvWriteBytesToBuffer>
 80031fa:	e001      	b.n	8003200 <prvWriteMessageToBuffer+0x56>
        xShouldWrite = pdFALSE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
    if( xShouldWrite != pdFALSE )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <prvWriteMessageToBuffer+0x6c>
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	461a      	mov	r2, r3
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ff28 	bl	8003062 <prvWriteBytesToBuffer>
 8003212:	6138      	str	r0, [r7, #16]
 8003214:	e001      	b.n	800321a <prvWriteMessageToBuffer+0x70>
        xReturn = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
    return xReturn;
 800321a:	693b      	ldr	r3, [r7, #16]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <prvReadBytesFromBuffer>:
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4293      	cmp	r3, r2
 8003238:	bf28      	it	cs
 800323a:	4613      	movcs	r3, r2
 800323c:	623b      	str	r3, [r7, #32]
    if( xCount > ( size_t ) 0 )
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d064      	beq.n	800330e <prvReadBytesFromBuffer+0xea>
        xNextTail = pxStreamBuffer->xTail;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	4293      	cmp	r3, r2
 8003256:	bf28      	it	cs
 8003258:	4613      	movcs	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
        configASSERT( xFirstLength <= xMaxCount );
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d90a      	bls.n	800327a <prvReadBytesFromBuffer+0x56>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61bb      	str	r3, [r7, #24]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	441a      	add	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d90a      	bls.n	800329e <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	617b      	str	r3, [r7, #20]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	4413      	add	r3, r2
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	4619      	mov	r1, r3
 80032aa:	68b8      	ldr	r0, [r7, #8]
 80032ac:	f00d f8d4 	bl	8010458 <memcpy>
        if( xCount > xFirstLength )
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d919      	bls.n	80032ec <prvReadBytesFromBuffer+0xc8>
            configASSERT( xCount <= xMaxCount );
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d90a      	bls.n	80032d6 <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	613b      	str	r3, [r7, #16]
    }
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	18d0      	adds	r0, r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6999      	ldr	r1, [r3, #24]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	f00d f8b6 	bl	8010458 <memcpy>
        xNextTail += xCount;
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	4413      	add	r3, r2
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
        if( xNextTail >= pxStreamBuffer->xLength )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d304      	bcc.n	8003308 <prvReadBytesFromBuffer+0xe4>
            xNextTail -= pxStreamBuffer->xLength;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
        pxStreamBuffer->xTail = xNextTail;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	601a      	str	r2, [r3, #0]
    return xCount;
 800330e:	6a3b      	ldr	r3, [r7, #32]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	; 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 8003326:	2355      	movs	r3, #85	; 0x55
 8003328:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f00d f8a0 	bl	8010474 <memset>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4293      	cmp	r3, r2
 800333a:	d00a      	beq.n	8003352 <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	613b      	str	r3, [r7, #16]
    }
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003352:	2220      	movs	r2, #32
 8003354:	2100      	movs	r1, #0
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f00d f88c 	bl	8010474 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003374:	771a      	strb	r2, [r3, #28]
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af06      	add	r7, sp, #24
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fe63 	bl	8007060 <pvPortMalloc>
 800339a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00e      	beq.n	80033c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033a2:	208c      	movs	r0, #140	; 0x8c
 80033a4:	f003 fe5c 	bl	8007060 <pvPortMalloc>
 80033a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	659a      	str	r2, [r3, #88]	; 0x58
 80033b6:	e005      	b.n	80033c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f003 ff21 	bl	8007200 <vPortFree>
 80033be:	e001      	b.n	80033c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <xTaskCreate+0x7e>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			#if ( configUSE_DMA_CONTAINER == 1 )
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, NULL );
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	2300      	movs	r3, #0
 80033da:	9303      	str	r3, [sp, #12]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	9302      	str	r3, [sp, #8]
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f002 fc69 	bl	8005cc4 <prvInitialiseNewTask>
			#else
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
			#endif
            prvAddNewTaskToReadyList( pxNewTCB );
 80033f2:	69f8      	ldr	r0, [r7, #28]
 80033f4:	f002 fd26 	bl	8005e44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80033f8:	2301      	movs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e002      	b.n	8003404 <xTaskCreate+0x84>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003404:	69bb      	ldr	r3, [r7, #24]
    }
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <xTaskCreateStatic>:
    {
 800340e:	b580      	push	{r7, lr}
 8003410:	b090      	sub	sp, #64	; 0x40
 8003412:	af06      	add	r7, sp, #24
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
        configASSERT( puxStackBuffer != NULL );
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <xTaskCreateStatic+0x2a>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	623b      	str	r3, [r7, #32]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <xTaskCreateStatic+0x46>
        __asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	61fb      	str	r3, [r7, #28]
    }
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <xTaskCreateStatic+0x44>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003454:	238c      	movs	r3, #140	; 0x8c
 8003456:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b8c      	cmp	r3, #140	; 0x8c
 800345c:	d00a      	beq.n	8003474 <xTaskCreateStatic+0x66>
        __asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	61bb      	str	r3, [r7, #24]
    }
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003474:	693b      	ldr	r3, [r7, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	d040      	beq.n	80034fe <xTaskCreateStatic+0xf0>
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03d      	beq.n	80034fe <xTaskCreateStatic+0xf0>
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800348a:	659a      	str	r2, [r3, #88]	; 0x58
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL,NULL);
 8003494:	2300      	movs	r3, #0
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	2300      	movs	r3, #0
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f002 fc07 	bl	8005cc4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034b8:	f002 fcc4 	bl	8005e44 <prvAddNewTaskToReadyList>
            	xSTackRegions[ulNumberRestrictedTask].ulTCB = (uint32_t *) pxNewTCB;
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <xTaskCreateStatic+0xfe>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4913      	ldr	r1, [pc, #76]	; (8003510 <xTaskCreateStatic+0x102>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	601a      	str	r2, [r3, #0]
            	xSTackRegions[ulNumberRestrictedTask].ulStackAddress = (uint32_t *) puxStackBuffer;
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <xTaskCreateStatic+0xfe>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	490e      	ldr	r1, [pc, #56]	; (8003510 <xTaskCreateStatic+0x102>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e4:	601a      	str	r2, [r3, #0]
            	xSTackRegions[ulNumberRestrictedTask].ulStackSize = ulStackDepth;
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <xTaskCreateStatic+0xfe>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4909      	ldr	r1, [pc, #36]	; (8003510 <xTaskCreateStatic+0x102>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3308      	adds	r3, #8
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e001      	b.n	8003502 <xTaskCreateStatic+0xf4>
            xReturn = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
        return xReturn;
 8003502:	697b      	ldr	r3, [r7, #20]
    }
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200001f8 	.word	0x200001f8
 8003510:	20000198 	.word	0x20000198

08003514 <xTaskCreateRestricted>:
    {
 8003514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003516:	b08d      	sub	sp, #52	; 0x34
 8003518:	af06      	add	r7, sp, #24
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <xTaskCreateRestricted+0x2e>
        __asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
    }
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <xTaskCreateRestricted+0x2c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d057      	beq.n	80035fa <xTaskCreateRestricted+0xe6>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800354a:	208c      	movs	r0, #140	; 0x8c
 800354c:	f003 fd88 	bl	8007060 <pvPortMalloc>
 8003550:	6138      	str	r0, [r7, #16]
            if( pxNewTCB != NULL )
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d050      	beq.n	80035fa <xTaskCreateRestricted+0xe6>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	659a      	str	r2, [r3, #88]	; 0x58
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685c      	ldr	r4, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003574:	461e      	mov	r6, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68dd      	ldr	r5, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003586:	9104      	str	r1, [sp, #16]
 8003588:	9203      	str	r2, [sp, #12]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	9202      	str	r2, [sp, #8]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	462b      	mov	r3, r5
 8003596:	4632      	mov	r2, r6
 8003598:	4621      	mov	r1, r4
 800359a:	f002 fb93 	bl	8005cc4 <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 800359e:	6938      	ldr	r0, [r7, #16]
 80035a0:	f002 fc50 	bl	8005e44 <prvAddNewTaskToReadyList>
				xReturn = pdPASS;
 80035a4:	2301      	movs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
					xSTackRegions[ulNumberRestrictedTask].ulTCB = (uint32_t *) pxNewTCB;
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <xTaskCreateRestricted+0xf0>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4916      	ldr	r1, [pc, #88]	; (8003608 <xTaskCreateRestricted+0xf4>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	601a      	str	r2, [r3, #0]
					xSTackRegions[ulNumberRestrictedTask].ulStackAddress = (uint32_t *) pxTaskDefinition->puxStackBuffer;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <xTaskCreateRestricted+0xf0>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6959      	ldr	r1, [r3, #20]
 80035c4:	4810      	ldr	r0, [pc, #64]	; (8003608 <xTaskCreateRestricted+0xf4>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4403      	add	r3, r0
 80035d0:	3304      	adds	r3, #4
 80035d2:	6019      	str	r1, [r3, #0]
					xSTackRegions[ulNumberRestrictedTask].ulStackSize = pxTaskDefinition->usStackDepth * 4; // size in bytes
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	891b      	ldrh	r3, [r3, #8]
 80035d8:	0099      	lsls	r1, r3, #2
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <xTaskCreateRestricted+0xf0>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4608      	mov	r0, r1
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <xTaskCreateRestricted+0xf4>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3308      	adds	r3, #8
 80035ee:	6018      	str	r0, [r3, #0]
					ulNumberRestrictedTask++;
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <xTaskCreateRestricted+0xf0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a03      	ldr	r2, [pc, #12]	; (8003604 <xTaskCreateRestricted+0xf0>)
 80035f8:	6013      	str	r3, [r2, #0]
        return xReturn;
 80035fa:	697b      	ldr	r3, [r7, #20]
    }
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003604:	200001f8 	.word	0x200001f8
 8003608:	20000198 	.word	0x20000198

0800360c <xTaskCreateRestrictedStatic>:
    {
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	b08d      	sub	sp, #52	; 0x34
 8003610:	af06      	add	r7, sp, #24
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xTaskCreateRestrictedStatic+0x2e>
        __asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60fb      	str	r3, [r7, #12]
    }
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCreateRestrictedStatic+0x2c>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xTaskCreateRestrictedStatic+0x4c>
        __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60bb      	str	r3, [r7, #8]
    }
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xTaskCreateRestrictedStatic+0x4a>
        if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d051      	beq.n	8003704 <xTaskCreateRestrictedStatic+0xf8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04d      	beq.n	8003704 <xTaskCreateRestrictedStatic+0xf8>
            pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	659a      	str	r2, [r3, #88]	; 0x58
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685c      	ldr	r4, [r3, #4]
                                  ( uint32_t ) pxTaskDefinition->usStackDepth,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	891b      	ldrh	r3, [r3, #8]
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800368a:	461e      	mov	r6, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68dd      	ldr	r5, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
                                  pxTaskDefinition->xRegions
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	3218      	adds	r2, #24
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800369c:	9104      	str	r1, [sp, #16]
 800369e:	9203      	str	r2, [sp, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	9202      	str	r2, [sp, #8]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	462b      	mov	r3, r5
 80036ac:	4632      	mov	r2, r6
 80036ae:	4621      	mov	r1, r4
 80036b0:	f002 fb08 	bl	8005cc4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80036b4:	6938      	ldr	r0, [r7, #16]
 80036b6:	f002 fbc5 	bl	8005e44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80036ba:	2301      	movs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
            		xSTackRegions[ulNumberRestrictedTask].ulTCB = (uint32_t *) pxNewTCB;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <xTaskCreateRestrictedStatic+0x104>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4914      	ldr	r1, [pc, #80]	; (8003714 <xTaskCreateRestrictedStatic+0x108>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	601a      	str	r2, [r3, #0]
					xSTackRegions[ulNumberRestrictedTask].ulStackAddress = (uint32_t *) pxTaskDefinition->pxTaskBuffer;
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <xTaskCreateRestrictedStatic+0x104>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80036da:	480e      	ldr	r0, [pc, #56]	; (8003714 <xTaskCreateRestrictedStatic+0x108>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4403      	add	r3, r0
 80036e6:	3304      	adds	r3, #4
 80036e8:	6019      	str	r1, [r3, #0]
					xSTackRegions[ulNumberRestrictedTask].ulStackSize = pxTaskDefinition->usStackDepth;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8919      	ldrh	r1, [r3, #8]
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <xTaskCreateRestrictedStatic+0x104>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4608      	mov	r0, r1
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <xTaskCreateRestrictedStatic+0x108>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3308      	adds	r3, #8
 8003702:	6018      	str	r0, [r3, #0]
        return xReturn;
 8003704:	697b      	ldr	r3, [r7, #20]
    }
 8003706:	4618      	mov	r0, r3
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	bf00      	nop
 8003710:	200001f8 	.word	0x200001f8
 8003714:	20000198 	.word	0x20000198

08003718 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <vTaskAllocateMPURegions+0x16>
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <vTaskAllocateMPURegions+0x30>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	e000      	b.n	8003730 <vTaskAllocateMPURegions+0x18>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1d18      	adds	r0, r3, #4
 8003736:	2300      	movs	r3, #0
 8003738:	2200      	movs	r2, #0
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	f003 f9ce 	bl	8006adc <vPortStoreTaskMPUSettings>
    }
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000250 	.word	0x20000250

0800374c <vTaskDelete>:
    {
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003754:	f008 fc92 	bl	800c07c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <vTaskDelete+0x18>
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <vTaskDelete+0xf8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	e000      	b.n	8003766 <vTaskDelete+0x1a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	332c      	adds	r3, #44	; 0x2c
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fa7d 	bl	8000c6c <uxListRemove>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d115      	bne.n	80037a4 <vTaskDelete+0x58>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377c:	4932      	ldr	r1, [pc, #200]	; (8003848 <vTaskDelete+0xfc>)
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <vTaskDelete+0x58>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <vTaskDelete+0x100>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4013      	ands	r3, r2
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <vTaskDelete+0x100>)
 80037a2:	6013      	str	r3, [r2, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <vTaskDelete+0x6a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3340      	adds	r3, #64	; 0x40
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fa5b 	bl	8000c6c <uxListRemove>
            uxTaskNumber++;
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <vTaskDelete+0x104>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <vTaskDelete+0x104>)
 80037be:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <vTaskDelete+0xf8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d10b      	bne.n	80037e2 <vTaskDelete+0x96>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	332c      	adds	r3, #44	; 0x2c
 80037ce:	4619      	mov	r1, r3
 80037d0:	4820      	ldr	r0, [pc, #128]	; (8003854 <vTaskDelete+0x108>)
 80037d2:	f7fd fa28 	bl	8000c26 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <vTaskDelete+0x10c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <vTaskDelete+0x10c>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e009      	b.n	80037f6 <vTaskDelete+0xaa>
                --uxCurrentNumberOfTasks;
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <vTaskDelete+0x110>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <vTaskDelete+0x110>)
 80037ea:	6013      	str	r3, [r2, #0]
                prvDeleteTCB( pxTCB );
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f002 f8ef 	bl	80059d0 <prvDeleteTCB>
                prvResetNextTaskUnblockTime();
 80037f2:	f002 fa4d 	bl	8005c90 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80037f6:	f008 fc5f 	bl	800c0b8 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <vTaskDelete+0x114>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01b      	beq.n	800383a <vTaskDelete+0xee>
            if( pxTCB == pxCurrentTCB )
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <vTaskDelete+0xf8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d116      	bne.n	800383a <vTaskDelete+0xee>
                configASSERT( uxSchedulerSuspended == 0 );
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <vTaskDelete+0x118>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <vTaskDelete+0xde>
        __asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60bb      	str	r3, [r7, #8]
    }
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <vTaskDelete+0xdc>
                portYIELD_WITHIN_API();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <vTaskDelete+0x11c>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
    }
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000250 	.word	0x20000250
 8003848:	20000254 	.word	0x20000254
 800384c:	20000330 	.word	0x20000330
 8003850:	20000344 	.word	0x20000344
 8003854:	200002fc 	.word	0x200002fc
 8003858:	20000310 	.word	0x20000310
 800385c:	20000328 	.word	0x20000328
 8003860:	20000334 	.word	0x20000334
 8003864:	20000350 	.word	0x20000350
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <vTaskDelay>:
    {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <vTaskDelay+0x42>
            configASSERT( uxSchedulerSuspended == 0 );
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <vTaskDelay+0x60>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <vTaskDelay+0x30>
        __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60bb      	str	r3, [r7, #8]
    }
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800389c:	f000 fc64 	bl	8004168 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a0:	2100      	movs	r1, #0
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f002 f8f0 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80038a8:	f000 fc6c 	bl	8004184 <xTaskResumeAll>
 80038ac:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <vTaskDelay+0x58>
            portYIELD_WITHIN_API();
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <vTaskDelay+0x64>)
 80038b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	f3bf 8f6f 	isb	sy
    }
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000350 	.word	0x20000350
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <xTaskDelayUntil>:
    {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxPreviousWakeTime );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xTaskDelayUntil+0x2a>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	617b      	str	r3, [r7, #20]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xTaskDelayUntil+0x46>
        __asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	613b      	str	r3, [r7, #16]
    }
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800391a:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <xTaskDelayUntil+0xf0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <xTaskDelayUntil+0x64>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
    }
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 8003938:	f000 fc16 	bl	8004168 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <xTaskDelayUntil+0xf4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	623b      	str	r3, [r7, #32]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
            if( xConstTickCount < *pxPreviousWakeTime )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	429a      	cmp	r2, r3
 8003954:	d20b      	bcs.n	800396e <xTaskDelayUntil+0x9a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d211      	bcs.n	8003984 <xTaskDelayUntil+0xb0>
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	429a      	cmp	r2, r3
 8003966:	d90d      	bls.n	8003984 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e00a      	b.n	8003984 <xTaskDelayUntil+0xb0>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	429a      	cmp	r2, r3
 8003976:	d303      	bcc.n	8003980 <xTaskDelayUntil+0xac>
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	429a      	cmp	r2, r3
 800397e:	d901      	bls.n	8003984 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
            *pxPreviousWakeTime = xTimeToWake;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <xTaskDelayUntil+0xca>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f002 f875 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 800399e:	f000 fbf1 	bl	8004184 <xTaskResumeAll>
 80039a2:	61b8      	str	r0, [r7, #24]
        if( xAlreadyYielded == pdFALSE )
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <xTaskDelayUntil+0xe6>
            portYIELD_WITHIN_API();
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <xTaskDelayUntil+0xf8>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
        return xShouldDelay;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000350 	.word	0x20000350
 80039c8:	2000032c 	.word	0x2000032c
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <xTaskAbortDelay>:
    {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB = xTask;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	613b      	str	r3, [r7, #16]
        configASSERT( pxTCB );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <xTaskAbortDelay+0x28>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
    }
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <xTaskAbortDelay+0x26>
        vTaskSuspendAll();
 80039f8:	f000 fbb6 	bl	8004168 <vTaskSuspendAll>
            if( eTaskGetState( xTask ) == eBlocked )
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f895 	bl	8003b2c <eTaskGetState>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d139      	bne.n	8003a7c <xTaskAbortDelay+0xac>
                xReturn = pdPASS;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	332c      	adds	r3, #44	; 0x2c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd f92b 	bl	8000c6c <uxListRemove>
                taskENTER_CRITICAL();
 8003a16:	f008 fb31 	bl	800c07c <vPortEnterCritical>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <xTaskAbortDelay+0x64>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3340      	adds	r3, #64	; 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd f920 	bl	8000c6c <uxListRemove>
                        pxTCB->ucDelayAborted = pdTRUE;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                taskEXIT_CRITICAL();
 8003a34:	f008 fb40 	bl	800c0b8 <vPortExitCritical>
                prvAddTaskToReadyList( pxTCB );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <xTaskAbortDelay+0xc0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <xTaskAbortDelay+0xc0>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <xTaskAbortDelay+0xc4>)
 8003a58:	441a      	add	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	332c      	adds	r3, #44	; 0x2c
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7fd f8e0 	bl	8000c26 <vListInsertEnd>
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <xTaskAbortDelay+0xc8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d905      	bls.n	8003a80 <xTaskAbortDelay+0xb0>
                            xYieldPending = pdTRUE;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <xTaskAbortDelay+0xcc>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e001      	b.n	8003a80 <xTaskAbortDelay+0xb0>
                xReturn = pdFAIL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
        ( void ) xTaskResumeAll();
 8003a80:	f000 fb80 	bl	8004184 <xTaskResumeAll>
        return xReturn;
 8003a84:	697b      	ldr	r3, [r7, #20]
    }
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000330 	.word	0x20000330
 8003a94:	20000254 	.word	0x20000254
 8003a98:	20000250 	.word	0x20000250
 8003a9c:	2000033c 	.word	0x2000033c

08003aa0 <uxTaskPriorityGet>:
    {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003aa8:	f008 fae8 	bl	800c07c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <uxTaskPriorityGet+0x18>
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <uxTaskPriorityGet+0x30>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <uxTaskPriorityGet+0x1a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 8003ac2:	f008 faf9 	bl	800c0b8 <vPortExitCritical>
        return uxReturn;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
    }
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000250 	.word	0x20000250

08003ad4 <uxTaskPriorityGetFromISR>:
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003adc:	f008 fb4a 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 8003ae0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	613a      	str	r2, [r7, #16]
 8003af6:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8003af8:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8003afa:	61fb      	str	r3, [r7, #28]
            pxTCB = prvGetTCBFromHandle( xTask );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <uxTaskPriorityGetFromISR+0x34>
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <uxTaskPriorityGetFromISR+0x54>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	e000      	b.n	8003b0a <uxTaskPriorityGetFromISR+0x36>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	61bb      	str	r3, [r7, #24]
            uxReturn = pxTCB->uxPriority;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f383 8811 	msr	BASEPRI, r3
    }
 8003b1c:	bf00      	nop
        return uxReturn;
 8003b1e:	697b      	ldr	r3, [r7, #20]
    }
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000250 	.word	0x20000250

08003b2c <eTaskGetState>:
    {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB );
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <eTaskGetState+0x28>
        __asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60fb      	str	r3, [r7, #12]
    }
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <eTaskGetState+0x26>
        if( pxTCB == pxCurrentTCB )
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <eTaskGetState+0xe0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d103      	bne.n	8003b66 <eTaskGetState+0x3a>
            eReturn = eRunning;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b64:	e04b      	b.n	8003bfe <eTaskGetState+0xd2>
            taskENTER_CRITICAL();
 8003b66:	f008 fa89 	bl	800c07c <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <eTaskGetState+0xe4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003b76:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <eTaskGetState+0xe8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	613b      	str	r3, [r7, #16]
            taskEXIT_CRITICAL();
 8003b7c:	f008 fa9c 	bl	800c0b8 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d003      	beq.n	8003b90 <eTaskGetState+0x64>
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d103      	bne.n	8003b98 <eTaskGetState+0x6c>
                eReturn = eBlocked;
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b96:	e032      	b.n	8003bfe <eTaskGetState+0xd2>
                else if( pxStateList == &xSuspendedTaskList )
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <eTaskGetState+0xec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d120      	bne.n	8003be2 <eTaskGetState+0xb6>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d118      	bne.n	8003bda <eTaskGetState+0xae>
                                eReturn = eSuspended;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	e00e      	b.n	8003bd2 <eTaskGetState+0xa6>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3384      	adds	r3, #132	; 0x84
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d103      	bne.n	8003bcc <eTaskGetState+0xa0>
                                        eReturn = eBlocked;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        break;
 8003bca:	e018      	b.n	8003bfe <eTaskGetState+0xd2>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	dded      	ble.n	8003bb4 <eTaskGetState+0x88>
 8003bd8:	e011      	b.n	8003bfe <eTaskGetState+0xd2>
                        eReturn = eBlocked;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003be0:	e00d      	b.n	8003bfe <eTaskGetState+0xd2>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <eTaskGetState+0xf0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d002      	beq.n	8003bf0 <eTaskGetState+0xc4>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <eTaskGetState+0xcc>
                    eReturn = eDeleted;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bf6:	e002      	b.n	8003bfe <eTaskGetState+0xd2>
                eReturn = eReady;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return eReturn;
 8003bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000250 	.word	0x20000250
 8003c10:	200002e0 	.word	0x200002e0
 8003c14:	200002e4 	.word	0x200002e4
 8003c18:	20000314 	.word	0x20000314
 8003c1c:	200002fc 	.word	0x200002fc

08003c20 <vTaskPrioritySet>:
    {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d90a      	bls.n	8003c4a <vTaskPrioritySet+0x2a>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
    }
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <vTaskPrioritySet+0x28>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d901      	bls.n	8003c54 <vTaskPrioritySet+0x34>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c50:	2304      	movs	r3, #4
 8003c52:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8003c54:	f008 fa12 	bl	800c07c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <vTaskPrioritySet+0x44>
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <vTaskPrioritySet+0x144>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e000      	b.n	8003c66 <vTaskPrioritySet+0x46>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6c:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d06f      	beq.n	8003d56 <vTaskPrioritySet+0x136>
                if( uxNewPriority > uxCurrentBasePriority )
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d90d      	bls.n	8003c9a <vTaskPrioritySet+0x7a>
                    if( pxTCB != pxCurrentTCB )
 8003c7e:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <vTaskPrioritySet+0x144>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d00f      	beq.n	8003ca8 <vTaskPrioritySet+0x88>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <vTaskPrioritySet+0x144>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d309      	bcc.n	8003ca8 <vTaskPrioritySet+0x88>
                            xYieldRequired = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e006      	b.n	8003ca8 <vTaskPrioritySet+0x88>
                else if( pxTCB == pxCurrentTCB )
 8003c9a:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <vTaskPrioritySet+0x144>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d101      	bne.n	8003ca8 <vTaskPrioritySet+0x88>
                    xYieldRequired = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	613b      	str	r3, [r7, #16]
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d102      	bne.n	8003cc0 <vTaskPrioritySet+0xa0>
                            pxTCB->uxPriority = uxNewPriority;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
                        pxTCB->uxBasePriority = uxNewPriority;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	669a      	str	r2, [r3, #104]	; 0x68
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db04      	blt.n	8003cd8 <vTaskPrioritySet+0xb8>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	f1c3 0205 	rsb	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <vTaskPrioritySet+0x148>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	4299      	cmp	r1, r3
 8003cec:	d128      	bne.n	8003d40 <vTaskPrioritySet+0x120>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	332c      	adds	r3, #44	; 0x2c
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc ffba 	bl	8000c6c <uxListRemove>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <vTaskPrioritySet+0xf2>
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003cfe:	2201      	movs	r2, #1
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <vTaskPrioritySet+0x14c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <vTaskPrioritySet+0x14c>)
 8003d10:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <vTaskPrioritySet+0x14c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <vTaskPrioritySet+0x14c>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <vTaskPrioritySet+0x148>)
 8003d32:	441a      	add	r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	332c      	adds	r3, #44	; 0x2c
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fc ff73 	bl	8000c26 <vListInsertEnd>
                if( xYieldRequired != pdFALSE )
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <vTaskPrioritySet+0x136>
                    taskYIELD_IF_USING_PREEMPTION();
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <vTaskPrioritySet+0x150>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003d56:	f008 f9af 	bl	800c0b8 <vPortExitCritical>
    }
 8003d5a:	bf00      	nop
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000250 	.word	0x20000250
 8003d68:	20000254 	.word	0x20000254
 8003d6c:	20000330 	.word	0x20000330
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <vTaskSuspend>:
    {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003d7c:	f008 f97e 	bl	800c07c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <vTaskSuspend+0x18>
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <vTaskSuspend+0x120>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e000      	b.n	8003d8e <vTaskSuspend+0x1a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	613b      	str	r3, [r7, #16]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	332c      	adds	r3, #44	; 0x2c
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc ff69 	bl	8000c6c <uxListRemove>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <vTaskSuspend+0x58>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003da4:	493c      	ldr	r1, [pc, #240]	; (8003e98 <vTaskSuspend+0x124>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <vTaskSuspend+0x58>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	2201      	movs	r2, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <vTaskSuspend+0x128>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <vTaskSuspend+0x128>)
 8003dca:	6013      	str	r3, [r2, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <vTaskSuspend+0x6a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3340      	adds	r3, #64	; 0x40
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc ff47 	bl	8000c6c <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	332c      	adds	r3, #44	; 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	482e      	ldr	r0, [pc, #184]	; (8003ea0 <vTaskSuspend+0x12c>)
 8003de6:	f7fc ff1e 	bl	8000c26 <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e010      	b.n	8003e12 <vTaskSuspend+0x9e>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4413      	add	r3, r2
 8003df6:	3384      	adds	r3, #132	; 0x84
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <vTaskSuspend+0x98>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4413      	add	r3, r2
 8003e06:	3384      	adds	r3, #132	; 0x84
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	ddeb      	ble.n	8003df0 <vTaskSuspend+0x7c>
        taskEXIT_CRITICAL();
 8003e18:	f008 f94e 	bl	800c0b8 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <vTaskSuspend+0x130>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <vTaskSuspend+0xbc>
            taskENTER_CRITICAL();
 8003e24:	f008 f92a 	bl	800c07c <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003e28:	f001 ff32 	bl	8005c90 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8003e2c:	f008 f944 	bl	800c0b8 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <vTaskSuspend+0x120>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d127      	bne.n	8003e8a <vTaskSuspend+0x116>
            if( xSchedulerRunning != pdFALSE )
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <vTaskSuspend+0x130>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <vTaskSuspend+0xfe>
                configASSERT( uxSchedulerSuspended == 0 );
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <vTaskSuspend+0x134>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <vTaskSuspend+0xec>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60fb      	str	r3, [r7, #12]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8003e60:	4b12      	ldr	r3, [pc, #72]	; (8003eac <vTaskSuspend+0x138>)
 8003e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
    }
 8003e70:	e00b      	b.n	8003e8a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <vTaskSuspend+0x12c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <vTaskSuspend+0x13c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d103      	bne.n	8003e86 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <vTaskSuspend+0x120>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    }
 8003e84:	e001      	b.n	8003e8a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8003e86:	f001 fa91 	bl	80053ac <vTaskSwitchContext>
    }
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000250 	.word	0x20000250
 8003e98:	20000254 	.word	0x20000254
 8003e9c:	20000330 	.word	0x20000330
 8003ea0:	20000314 	.word	0x20000314
 8003ea4:	20000334 	.word	0x20000334
 8003ea8:	20000350 	.word	0x20000350
 8003eac:	e000ed04 	.word	0xe000ed04
 8003eb0:	20000328 	.word	0x20000328

08003eb4 <vTaskResume>:
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
        configASSERT( xTaskToResume );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <vTaskResume+0x28>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60bb      	str	r3, [r7, #8]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <vTaskResume+0x26>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003edc:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <vTaskResume+0xac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d037      	beq.n	8003f56 <vTaskResume+0xa2>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d034      	beq.n	8003f56 <vTaskResume+0xa2>
            taskENTER_CRITICAL();
 8003eec:	f008 f8c6 	bl	800c07c <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f001 fcef 	bl	80058d4 <prvTaskIsTaskSuspended>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02a      	beq.n	8003f52 <vTaskResume+0x9e>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	332c      	adds	r3, #44	; 0x2c
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc feb3 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <vTaskResume+0xb0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <vTaskResume+0xb0>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4a10      	ldr	r2, [pc, #64]	; (8003f68 <vTaskResume+0xb4>)
 8003f26:	441a      	add	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	332c      	adds	r3, #44	; 0x2c
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fc fe79 	bl	8000c26 <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <vTaskResume+0xac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d307      	bcc.n	8003f52 <vTaskResume+0x9e>
                        taskYIELD_IF_USING_PREEMPTION();
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <vTaskResume+0xb8>)
 8003f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
 8003f52:	f008 f8b1 	bl	800c0b8 <vPortExitCritical>
    }
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000250 	.word	0x20000250
 8003f64:	20000330 	.word	0x20000330
 8003f68:	20000254 	.word	0x20000254
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xTaskResumeFromISR>:
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	623b      	str	r3, [r7, #32]
        configASSERT( xTaskToResume );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <xTaskResumeFromISR+0x2c>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	61bb      	str	r3, [r7, #24]
    }
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xTaskResumeFromISR+0x2a>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f9c:	f008 f8ea 	bl	800c174 <vPortValidateInterruptPriority>
        __asm volatile
 8003fa0:	f3ef 8211 	mrs	r2, BASEPRI
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	617a      	str	r2, [r7, #20]
 8003fb6:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8003fb8:	697b      	ldr	r3, [r7, #20]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fba:	61fb      	str	r3, [r7, #28]
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003fbc:	6a38      	ldr	r0, [r7, #32]
 8003fbe:	f001 fc89 	bl	80058d4 <prvTaskIsTaskSuspended>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d032      	beq.n	800402e <xTaskResumeFromISR+0xbe>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <xTaskResumeFromISR+0xd4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d128      	bne.n	8004022 <xTaskResumeFromISR+0xb2>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <xTaskResumeFromISR+0xd8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d304      	bcc.n	8003fe8 <xTaskResumeFromISR+0x78>
                        xYieldRequired = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
                        xYieldPending = pdTRUE;
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <xTaskResumeFromISR+0xdc>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	332c      	adds	r3, #44	; 0x2c
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fe3d 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <xTaskResumeFromISR+0xe0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <xTaskResumeFromISR+0xe0>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a10      	ldr	r2, [pc, #64]	; (8004054 <xTaskResumeFromISR+0xe4>)
 8004012:	441a      	add	r2, r3
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	332c      	adds	r3, #44	; 0x2c
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7fc fe03 	bl	8000c26 <vListInsertEnd>
 8004020:	e005      	b.n	800402e <xTaskResumeFromISR+0xbe>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	3340      	adds	r3, #64	; 0x40
 8004026:	4619      	mov	r1, r3
 8004028:	480b      	ldr	r0, [pc, #44]	; (8004058 <xTaskResumeFromISR+0xe8>)
 800402a:	f7fc fdfc 	bl	8000c26 <vListInsertEnd>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f383 8811 	msr	BASEPRI, r3
    }
 8004038:	bf00      	nop
        return xYieldRequired;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000350 	.word	0x20000350
 8004048:	20000250 	.word	0x20000250
 800404c:	2000033c 	.word	0x2000033c
 8004050:	20000330 	.word	0x20000330
 8004054:	20000254 	.word	0x20000254
 8004058:	200002e8 	.word	0x200002e8

0800405c <vTaskStartScheduler>:
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af04      	add	r7, sp, #16
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800406a:	463a      	mov	r2, r7
 800406c:	1d39      	adds	r1, r7, #4
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4618      	mov	r0, r3
 8004074:	f005 fe16 	bl	8009ca4 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	9202      	str	r2, [sp, #8]
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	460a      	mov	r2, r1
 800408c:	4923      	ldr	r1, [pc, #140]	; (800411c <vTaskStartScheduler+0xc0>)
 800408e:	4824      	ldr	r0, [pc, #144]	; (8004120 <vTaskStartScheduler+0xc4>)
 8004090:	f7ff f9bd 	bl	800340e <xTaskCreateStatic>
 8004094:	4603      	mov	r3, r0
 8004096:	4a23      	ldr	r2, [pc, #140]	; (8004124 <vTaskStartScheduler+0xc8>)
 8004098:	6013      	str	r3, [r2, #0]
            if( xIdleTaskHandle != NULL )
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <vTaskStartScheduler+0xc8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <vTaskStartScheduler+0x4c>
                xReturn = pdPASS;
 80040a2:	2301      	movs	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e001      	b.n	80040ac <vTaskStartScheduler+0x50>
                xReturn = pdFAIL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
            	vStartDMATask();
 80040ac:	f007 fa90 	bl	800b5d0 <vStartDMATask>
            if( xReturn == pdPASS )
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d102      	bne.n	80040bc <vTaskStartScheduler+0x60>
                xReturn = xTimerCreateTimerTask();
 80040b6:	f002 f8c2 	bl	800623e <xTimerCreateTimerTask>
 80040ba:	6178      	str	r0, [r7, #20]
    if( xReturn == pdPASS )
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d116      	bne.n	80040f0 <vTaskStartScheduler+0x94>
        __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	613b      	str	r3, [r7, #16]
    }
 80040d4:	bf00      	nop
        xNextTaskUnblockTime = portMAX_DELAY;
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <vTaskStartScheduler+0xcc>)
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <vTaskStartScheduler+0xd0>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <vTaskStartScheduler+0xd4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 80040ea:	f002 fc4f 	bl	800698c <xPortStartScheduler>
 80040ee:	e00e      	b.n	800410e <vTaskStartScheduler+0xb2>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d10a      	bne.n	800410e <vTaskStartScheduler+0xb2>
        __asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
    }
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <vTaskStartScheduler+0xb0>
    ( void ) uxTopUsedPriority;
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <vTaskStartScheduler+0xd8>)
 8004110:	681b      	ldr	r3, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	08010534 	.word	0x08010534
 8004120:	080059b5 	.word	0x080059b5
 8004124:	2000034c 	.word	0x2000034c
 8004128:	20000348 	.word	0x20000348
 800412c:	20000334 	.word	0x20000334
 8004130:	2000032c 	.word	0x2000032c
 8004134:	20008000 	.word	0x20008000

08004138 <vTaskEndScheduler>:
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
    }
 8004150:	bf00      	nop
    xSchedulerRunning = pdFALSE;
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <vTaskEndScheduler+0x2c>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8004158:	f002 fca6 	bl	8006aa8 <vPortEndScheduler>
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000334 	.word	0x20000334

08004168 <vTaskSuspendAll>:
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <vTaskSuspendAll+0x18>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <vTaskSuspendAll+0x18>)
 8004174:	6013      	str	r3, [r2, #0]
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000350 	.word	0x20000350

08004184 <xTaskResumeAll>:
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
    configASSERT( uxSchedulerSuspended );
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <xTaskResumeAll+0x114>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <xTaskResumeAll+0x2c>
        __asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	603b      	str	r3, [r7, #0]
    }
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <xTaskResumeAll+0x2a>
    taskENTER_CRITICAL();
 80041b0:	f007 ff64 	bl	800c07c <vPortEnterCritical>
        --uxSchedulerSuspended;
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <xTaskResumeAll+0x114>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a37      	ldr	r2, [pc, #220]	; (8004298 <xTaskResumeAll+0x114>)
 80041bc:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <xTaskResumeAll+0x114>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d161      	bne.n	800428a <xTaskResumeAll+0x106>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <xTaskResumeAll+0x118>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d05d      	beq.n	800428a <xTaskResumeAll+0x106>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ce:	e02e      	b.n	800422e <xTaskResumeAll+0xaa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d0:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <xTaskResumeAll+0x11c>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3340      	adds	r3, #64	; 0x40
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc fd45 	bl	8000c6c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	332c      	adds	r3, #44	; 0x2c
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fd40 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	2201      	movs	r2, #1
 80041f2:	409a      	lsls	r2, r3
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <xTaskResumeAll+0x120>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <xTaskResumeAll+0x120>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <xTaskResumeAll+0x124>)
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	332c      	adds	r3, #44	; 0x2c
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fc fd06 	bl	8000c26 <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <xTaskResumeAll+0x128>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <xTaskResumeAll+0xaa>
                        xYieldPending = pdTRUE;
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <xTaskResumeAll+0x12c>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <xTaskResumeAll+0x11c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1cc      	bne.n	80041d0 <xTaskResumeAll+0x4c>
                if( pxTCB != NULL )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <xTaskResumeAll+0xbc>
                    prvResetNextTaskUnblockTime();
 800423c:	f001 fd28 	bl	8005c90 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <xTaskResumeAll+0x130>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	607b      	str	r3, [r7, #4]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <xTaskResumeAll+0xea>
                            if( xTaskIncrementTick() != pdFALSE )
 800424c:	f000 fea6 	bl	8004f9c <xTaskIncrementTick>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <xTaskResumeAll+0xd8>
                                xYieldPending = pdTRUE;
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <xTaskResumeAll+0x12c>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f1      	bne.n	800424c <xTaskResumeAll+0xc8>
                        xPendedTicks = 0;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <xTaskResumeAll+0x130>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <xTaskResumeAll+0x12c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <xTaskResumeAll+0x106>
                            xAlreadyYielded = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
                    taskYIELD_IF_USING_PREEMPTION();
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <xTaskResumeAll+0x134>)
 800427c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
 800428a:	f007 ff15 	bl	800c0b8 <vPortExitCritical>
    return xAlreadyYielded;
 800428e:	68bb      	ldr	r3, [r7, #8]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000350 	.word	0x20000350
 800429c:	20000328 	.word	0x20000328
 80042a0:	200002e8 	.word	0x200002e8
 80042a4:	20000330 	.word	0x20000330
 80042a8:	20000254 	.word	0x20000254
 80042ac:	20000250 	.word	0x20000250
 80042b0:	2000033c 	.word	0x2000033c
 80042b4:	20000338 	.word	0x20000338
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <xTaskGetTickCount>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <xTaskGetTickCount+0x18>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	607b      	str	r3, [r7, #4]
    return xTicks;
 80042c8:	687b      	ldr	r3, [r7, #4]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	2000032c 	.word	0x2000032c

080042d8 <xTaskGetTickCountFromISR>:
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042de:	f007 ff49 	bl	800c174 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <xTaskGetTickCountFromISR+0x20>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	603b      	str	r3, [r7, #0]
    return xReturn;
 80042ec:	683b      	ldr	r3, [r7, #0]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000032c 	.word	0x2000032c

080042fc <uxTaskGetNumberOfTasks>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 8004300:	4b02      	ldr	r3, [pc, #8]	; (800430c <uxTaskGetNumberOfTasks+0x10>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000328 	.word	0x20000328

08004310 <pcTaskGetName>:
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <pcTaskGetName+0x14>
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <pcTaskGetName+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	e000      	b.n	8004326 <pcTaskGetName+0x16>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <pcTaskGetName+0x34>
        __asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60bb      	str	r3, [r7, #8]
    }
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	335c      	adds	r3, #92	; 0x5c
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000250 	.word	0x20000250

08004358 <xTaskGetHandle>:
    {
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8004360:	2305      	movs	r3, #5
 8004362:	617b      	str	r3, [r7, #20]
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f004 fe6b 	bl	8009040 <strlen>
 800436a:	4603      	mov	r3, r0
 800436c:	2b09      	cmp	r3, #9
 800436e:	d90a      	bls.n	8004386 <xTaskGetHandle+0x2e>
        __asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
    }
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xTaskGetHandle+0x2c>
        vTaskSuspendAll();
 8004386:	f7ff feef 	bl	8004168 <vTaskSuspendAll>
                uxQueue--;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3b01      	subs	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <xTaskGetHandle+0xb8>)
 800439c:	4413      	add	r3, r2
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fbdb 	bl	8005b5c <prvSearchForNameWithinSingleList>
 80043a6:	6138      	str	r0, [r7, #16]
                if( pxTCB != NULL )
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <xTaskGetHandle+0x5e>
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ea      	bne.n	800438a <xTaskGetHandle+0x32>
 80043b4:	e000      	b.n	80043b8 <xTaskGetHandle+0x60>
                    break;
 80043b6:	bf00      	nop
            if( pxTCB == NULL )
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <xTaskGetHandle+0x74>
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <xTaskGetHandle+0xbc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 fbc9 	bl	8005b5c <prvSearchForNameWithinSingleList>
 80043ca:	6138      	str	r0, [r7, #16]
            if( pxTCB == NULL )
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <xTaskGetHandle+0x88>
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <xTaskGetHandle+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fbbf 	bl	8005b5c <prvSearchForNameWithinSingleList>
 80043de:	6138      	str	r0, [r7, #16]
                    if( pxTCB == NULL )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d104      	bne.n	80043f0 <xTaskGetHandle+0x98>
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	480c      	ldr	r0, [pc, #48]	; (800441c <xTaskGetHandle+0xc4>)
 80043ea:	f001 fbb7 	bl	8005b5c <prvSearchForNameWithinSingleList>
 80043ee:	6138      	str	r0, [r7, #16]
                    if( pxTCB == NULL )
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <xTaskGetHandle+0xa8>
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4809      	ldr	r0, [pc, #36]	; (8004420 <xTaskGetHandle+0xc8>)
 80043fa:	f001 fbaf 	bl	8005b5c <prvSearchForNameWithinSingleList>
 80043fe:	6138      	str	r0, [r7, #16]
        ( void ) xTaskResumeAll();
 8004400:	f7ff fec0 	bl	8004184 <xTaskResumeAll>
        return pxTCB;
 8004404:	693b      	ldr	r3, [r7, #16]
    }
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000254 	.word	0x20000254
 8004414:	200002e0 	.word	0x200002e0
 8004418:	200002e4 	.word	0x200002e4
 800441c:	20000314 	.word	0x20000314
 8004420:	200002fc 	.word	0x200002fc

08004424 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <uxTaskGetStackHighWaterMark+0x14>
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <uxTaskGetStackHighWaterMark+0x34>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e000      	b.n	800443a <uxTaskGetStackHighWaterMark+0x16>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f001 fbf7 	bl	8005c36 <prvTaskCheckFreeStackSpace>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800444c:	68fb      	ldr	r3, [r7, #12]
    }
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000250 	.word	0x20000250

0800445c <vTaskSetApplicationTaskTag>:
    {
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
        if( xTask == NULL )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <vTaskSetApplicationTaskTag+0x18>
            xTCB = ( TCB_t * ) pxCurrentTCB;
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <vTaskSetApplicationTaskTag+0x34>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e001      	b.n	8004478 <vTaskSetApplicationTaskTag+0x1c>
            xTCB = xTask;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60fb      	str	r3, [r7, #12]
        taskENTER_CRITICAL();
 8004478:	f007 fe00 	bl	800c07c <vPortEnterCritical>
            xTCB->pxTaskTag = pxHookFunction;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	671a      	str	r2, [r3, #112]	; 0x70
        taskEXIT_CRITICAL();
 8004482:	f007 fe19 	bl	800c0b8 <vPortExitCritical>
    }
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000250 	.word	0x20000250

08004494 <xTaskGetApplicationTaskTag>:
    {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <xTaskGetApplicationTaskTag+0x14>
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <xTaskGetApplicationTaskTag+0x30>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	e000      	b.n	80044aa <xTaskGetApplicationTaskTag+0x16>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60fb      	str	r3, [r7, #12]
        taskENTER_CRITICAL();
 80044ac:	f007 fde6 	bl	800c07c <vPortEnterCritical>
            xReturn = pxTCB->pxTaskTag;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 80044b6:	f007 fdff 	bl	800c0b8 <vPortExitCritical>
        return xReturn;
 80044ba:	68bb      	ldr	r3, [r7, #8]
    }
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000250 	.word	0x20000250

080044c8 <xTaskGetApplicationTaskTagFromISR>:
    {
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <xTaskGetApplicationTaskTagFromISR+0x14>
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <xTaskGetApplicationTaskTagFromISR+0x54>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	e000      	b.n	80044de <xTaskGetApplicationTaskTagFromISR+0x16>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	61fb      	str	r3, [r7, #28]
        __asm volatile
 80044e0:	f3ef 8211 	mrs	r2, BASEPRI
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fa      	str	r2, [r7, #12]
 80044f6:	60bb      	str	r3, [r7, #8]
        return ulOriginalBASEPRI;
 80044f8:	68fb      	ldr	r3, [r7, #12]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044fa:	61bb      	str	r3, [r7, #24]
            xReturn = pxTCB->pxTaskTag;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f383 8811 	msr	BASEPRI, r3
    }
 800450c:	bf00      	nop
        return xReturn;
 800450e:	697b      	ldr	r3, [r7, #20]
    }
 8004510:	4618      	mov	r0, r3
 8004512:	3724      	adds	r7, #36	; 0x24
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000250 	.word	0x20000250

08004520 <vTaskSetThreadLocalStoragePointer>:
    {
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
        if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b01      	cmp	r3, #1
 8004530:	dc1c      	bgt.n	800456c <vTaskSetThreadLocalStoragePointer+0x4c>
            pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <vTaskSetThreadLocalStoragePointer+0x1e>
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <vTaskSetThreadLocalStoragePointer+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	e000      	b.n	8004540 <vTaskSetThreadLocalStoragePointer+0x20>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <vTaskSetThreadLocalStoragePointer+0x3e>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	613b      	str	r3, [r7, #16]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vTaskSetThreadLocalStoragePointer+0x3c>
            pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331c      	adds	r3, #28
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]
    }
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000250 	.word	0x20000250

0800457c <pvTaskGetThreadLocalStoragePointer>:
    {
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
        void * pvReturn = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
        if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	dc0f      	bgt.n	80045b0 <pvTaskGetThreadLocalStoragePointer+0x34>
            pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <pvTaskGetThreadLocalStoragePointer+0x20>
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <pvTaskGetThreadLocalStoragePointer+0x44>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	e000      	b.n	800459e <pvTaskGetThreadLocalStoragePointer+0x22>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60bb      	str	r3, [r7, #8]
            pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	331c      	adds	r3, #28
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e001      	b.n	80045b4 <pvTaskGetThreadLocalStoragePointer+0x38>
            pvReturn = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
        return pvReturn;
 80045b4:	68fb      	ldr	r3, [r7, #12]
    }
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	20000250 	.word	0x20000250

080045c4 <xTaskCallApplicationTaskHook>:
    {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
        if( xTask == NULL )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <xTaskCallApplicationTaskHook+0x18>
            xTCB = pxCurrentTCB;
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <xTaskCallApplicationTaskHook+0x40>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e001      	b.n	80045e0 <xTaskCallApplicationTaskHook+0x1c>
            xTCB = xTask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60fb      	str	r3, [r7, #12]
        if( xTCB->pxTaskTag != NULL )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <xTaskCallApplicationTaskHook+0x30>
            xReturn = xTCB->pxTaskTag( pvParameter );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	4798      	blx	r3
 80045f0:	60b8      	str	r0, [r7, #8]
 80045f2:	e001      	b.n	80045f8 <xTaskCallApplicationTaskHook+0x34>
            xReturn = pdFAIL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60bb      	str	r3, [r7, #8]
        return xReturn;
 80045f8:	68bb      	ldr	r3, [r7, #8]
    }
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000250 	.word	0x20000250

08004608 <xTaskGetIdleTaskHandle>:
    {
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
        configASSERT( ( xIdleTaskHandle != NULL ) );
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <xTaskGetIdleTaskHandle+0x34>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xTaskGetIdleTaskHandle+0x24>
        __asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	607b      	str	r3, [r7, #4]
    }
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xTaskGetIdleTaskHandle+0x22>
        return xIdleTaskHandle;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <xTaskGetIdleTaskHandle+0x34>)
 800462e:	681b      	ldr	r3, [r3, #0]
    }
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2000034c 	.word	0x2000034c

08004640 <ulTaskGetIdleRunTimeCounter>:
/*-----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )

    uint32_t ulTaskGetIdleRunTimeCounter( void )
    {
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
        return xIdleTaskHandle->ulRunTimeCounter;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <ulTaskGetIdleRunTimeCounter+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    }
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	2000034c 	.word	0x2000034c

08004658 <xTaskGenericNotify>:
    {
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	; 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdPASS;
 8004666:	2301      	movs	r3, #1
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <xTaskGenericNotify+0x2e>
        __asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	623b      	str	r3, [r7, #32]
    }
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xTaskGenericNotify+0x4a>
        __asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61fb      	str	r3, [r7, #28]
    }
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
        taskENTER_CRITICAL();
 80046a6:	f007 fce9 	bl	800c07c <vPortEnterCritical>
            if( pulPreviousNotificationValue != NULL )
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <xTaskGenericNotify+0x66>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	3220      	adds	r2, #32
 80046b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	601a      	str	r2, [r3, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4413      	add	r3, r2
 80046c4:	3384      	adds	r3, #132	; 0x84
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80046cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4413      	add	r3, r2
 80046d2:	3384      	adds	r3, #132	; 0x84
 80046d4:	2202      	movs	r2, #2
 80046d6:	701a      	strb	r2, [r3, #0]
            switch( eAction )
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d83b      	bhi.n	8004756 <xTaskGenericNotify+0xfe>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <xTaskGenericNotify+0x8c>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004775 	.word	0x08004775
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800472d 	.word	0x0800472d
 80046f4:	0800473b 	.word	0x0800473b
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	3220      	adds	r2, #32
 80046fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	ea42 0103 	orr.w	r1, r2, r3
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	3220      	adds	r2, #32
 800470e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004712:	e032      	b.n	800477a <xTaskGenericNotify+0x122>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	3220      	adds	r2, #32
 800471a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	3220      	adds	r2, #32
 8004726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800472a:	e026      	b.n	800477a <xTaskGenericNotify+0x122>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	3220      	adds	r2, #32
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004738:	e01f      	b.n	800477a <xTaskGenericNotify+0x122>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800473a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800473e:	2b02      	cmp	r3, #2
 8004740:	d006      	beq.n	8004750 <xTaskGenericNotify+0xf8>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	3220      	adds	r2, #32
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800474e:	e014      	b.n	800477a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004754:	e011      	b.n	800477a <xTaskGenericNotify+0x122>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <xTaskGenericNotify+0x1ac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <xTaskGenericNotify+0x120>
        __asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61bb      	str	r3, [r7, #24]
    }
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <xTaskGenericNotify+0x11a>
                    break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <xTaskGenericNotify+0x122>
                    break;
 8004778:	bf00      	nop
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800477a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800477e:	2b01      	cmp	r3, #1
 8004780:	d139      	bne.n	80047f6 <xTaskGenericNotify+0x19e>
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	332c      	adds	r3, #44	; 0x2c
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fa70 	bl	8000c6c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	4b1c      	ldr	r3, [pc, #112]	; (8004808 <xTaskGenericNotify+0x1b0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <xTaskGenericNotify+0x1b0>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <xTaskGenericNotify+0x1b4>)
 80047ac:	441a      	add	r2, r3
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	332c      	adds	r3, #44	; 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fc fa36 	bl	8000c26 <vListInsertEnd>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <xTaskGenericNotify+0x180>
        __asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	617b      	str	r3, [r7, #20]
    }
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <xTaskGenericNotify+0x17e>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <xTaskGenericNotify+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d907      	bls.n	80047f6 <xTaskGenericNotify+0x19e>
                    taskYIELD_IF_USING_PREEMPTION();
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <xTaskGenericNotify+0x1bc>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80047f6:	f007 fc5f 	bl	800c0b8 <vPortExitCritical>
        return xReturn;
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80047fc:	4618      	mov	r0, r3
 80047fe:	3730      	adds	r7, #48	; 0x30
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000032c 	.word	0x2000032c
 8004808:	20000330 	.word	0x20000330
 800480c:	20000254 	.word	0x20000254
 8004810:	20000250 	.word	0x20000250
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xTaskGenericNotifyFromISR>:
    {
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	; 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdPASS;
 8004826:	2301      	movs	r3, #1
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
        configASSERT( xTaskToNotify );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xTaskGenericNotifyFromISR+0x48>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004862:	f007 fc87 	bl	800c174 <vPortValidateInterruptPriority>
        pxTCB = xTaskToNotify;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800486a:	f3ef 8211 	mrs	r2, BASEPRI
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	627a      	str	r2, [r7, #36]	; 0x24
 8004880:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
            if( pulPreviousNotificationValue != NULL )
 8004886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004888:	2b00      	cmp	r3, #0
 800488a:	d006      	beq.n	800489a <xTaskGenericNotifyFromISR+0x82>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	3220      	adds	r2, #32
 8004892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004898:	601a      	str	r2, [r3, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800489a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4413      	add	r3, r2
 80048a0:	3384      	adds	r3, #132	; 0x84
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80048a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4413      	add	r3, r2
 80048ae:	3384      	adds	r3, #132	; 0x84
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
            switch( eAction )
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d83b      	bhi.n	8004932 <xTaskGenericNotifyFromISR+0x11a>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <xTaskGenericNotifyFromISR+0xa8>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	08004951 	.word	0x08004951
 80048c4:	080048d5 	.word	0x080048d5
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004917 	.word	0x08004917
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	3220      	adds	r2, #32
 80048da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	ea42 0103 	orr.w	r1, r2, r3
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	3220      	adds	r2, #32
 80048ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80048ee:	e032      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	3220      	adds	r2, #32
 80048f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	3220      	adds	r2, #32
 8004902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004906:	e026      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	3220      	adds	r2, #32
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004914:	e01f      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	2b02      	cmp	r3, #2
 800491c:	d006      	beq.n	800492c <xTaskGenericNotifyFromISR+0x114>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	3220      	adds	r2, #32
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800492a:	e014      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800492c:	2300      	movs	r3, #0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004930:	e011      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <xTaskGenericNotifyFromISR+0x1e8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61fb      	str	r3, [r7, #28]
    }
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004954:	bf00      	nop
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800495a:	2b01      	cmp	r3, #1
 800495c:	d145      	bne.n	80049ea <xTaskGenericNotifyFromISR+0x1d2>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	61bb      	str	r3, [r7, #24]
    }
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <xTaskGenericNotifyFromISR+0x162>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <xTaskGenericNotifyFromISR+0x1ec>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11c      	bne.n	80049be <xTaskGenericNotifyFromISR+0x1a6>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	332c      	adds	r3, #44	; 0x2c
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc f96f 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <xTaskGenericNotifyFromISR+0x1f0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <xTaskGenericNotifyFromISR+0x1f0>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <xTaskGenericNotifyFromISR+0x1f4>)
 80049ae:	441a      	add	r2, r3
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	332c      	adds	r3, #44	; 0x2c
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fc f935 	bl	8000c26 <vListInsertEnd>
 80049bc:	e005      	b.n	80049ca <xTaskGenericNotifyFromISR+0x1b2>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	4619      	mov	r1, r3
 80049c4:	4812      	ldr	r0, [pc, #72]	; (8004a10 <xTaskGenericNotifyFromISR+0x1f8>)
 80049c6:	f7fc f92e 	bl	8000c26 <vListInsertEnd>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <xTaskGenericNotifyFromISR+0x1fc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d908      	bls.n	80049ea <xTaskGenericNotifyFromISR+0x1d2>
                    if( pxHigherPriorityTaskWoken != NULL )
 80049d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <xTaskGenericNotifyFromISR+0x1cc>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	2201      	movs	r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
                    xYieldPending = pdTRUE;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xTaskGenericNotifyFromISR+0x200>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	617b      	str	r3, [r7, #20]
        __asm volatile
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f383 8811 	msr	BASEPRI, r3
    }
 80049f4:	bf00      	nop
        return xReturn;
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80049f8:	4618      	mov	r0, r3
 80049fa:	3740      	adds	r7, #64	; 0x40
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2000032c 	.word	0x2000032c
 8004a04:	20000350 	.word	0x20000350
 8004a08:	20000330 	.word	0x20000330
 8004a0c:	20000254 	.word	0x20000254
 8004a10:	200002e8 	.word	0x200002e8
 8004a14:	20000250 	.word	0x20000250
 8004a18:	2000033c 	.word	0x2000033c

08004a1c <xTaskGenericNotifyWait>:
    {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
    }
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTaskGenericNotifyWait+0x28>
        taskENTER_CRITICAL();
 8004a46:	f007 fb19 	bl	800c07c <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	3384      	adds	r3, #132	; 0x84
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d022      	beq.n	8004aa2 <xTaskGenericNotifyWait+0x86>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	3220      	adds	r2, #32
 8004a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	43d2      	mvns	r2, r2
 8004a6c:	4011      	ands	r1, r2
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	3220      	adds	r2, #32
 8004a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3384      	adds	r3, #132	; 0x84
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <xTaskGenericNotifyWait+0x86>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6a38      	ldr	r0, [r7, #32]
 8004a8e:	f000 fffb 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8004a92:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <xTaskGenericNotifyWait+0xfc>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004aa2:	f007 fb09 	bl	800c0b8 <vPortExitCritical>
        taskENTER_CRITICAL();
 8004aa6:	f007 fae9 	bl	800c07c <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <xTaskGenericNotifyWait+0xa4>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	3220      	adds	r2, #32
 8004ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	; 0x84
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d002      	beq.n	8004ad8 <xTaskGenericNotifyWait+0xbc>
                xReturn = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e00e      	b.n	8004af6 <xTaskGenericNotifyWait+0xda>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	3220      	adds	r2, #32
 8004ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	43d2      	mvns	r2, r2
 8004ae8:	4011      	ands	r1, r2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	3220      	adds	r2, #32
 8004aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004af2:	2301      	movs	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <xTaskGenericNotifyWait+0xf8>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	3384      	adds	r3, #132	; 0x84
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004b04:	f007 fad8 	bl	800c0b8 <vPortExitCritical>
        return xReturn;
 8004b08:	697b      	ldr	r3, [r7, #20]
    }
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000250 	.word	0x20000250
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <vTaskGenericNotifyGiveFromISR>:
    {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
        configASSERT( xTaskToNotify );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vTaskGenericNotifyGiveFromISR+0x42>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b60:	f007 fb08 	bl	800c174 <vPortValidateInterruptPriority>
        pxTCB = xTaskToNotify;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 8004b68:	f3ef 8211 	mrs	r2, BASEPRI
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	623a      	str	r2, [r7, #32]
 8004b7e:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004b80:	6a3b      	ldr	r3, [r7, #32]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	3384      	adds	r3, #132	; 0x84
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4413      	add	r3, r2
 8004b98:	3384      	adds	r3, #132	; 0x84
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	3220      	adds	r2, #32
 8004ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba8:	1c59      	adds	r1, r3, #1
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	3220      	adds	r2, #32
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d145      	bne.n	8004c48 <vTaskGenericNotifyGiveFromISR+0x12c>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <vTaskGenericNotifyGiveFromISR+0xbe>
        __asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61bb      	str	r3, [r7, #24]
    }
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <vTaskGenericNotifyGiveFromISR+0xbc>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <vTaskGenericNotifyGiveFromISR+0x140>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11c      	bne.n	8004c1c <vTaskGenericNotifyGiveFromISR+0x100>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	332c      	adds	r3, #44	; 0x2c
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc f840 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <vTaskGenericNotifyGiveFromISR+0x144>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <vTaskGenericNotifyGiveFromISR+0x144>)
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <vTaskGenericNotifyGiveFromISR+0x148>)
 8004c0c:	441a      	add	r2, r3
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	332c      	adds	r3, #44	; 0x2c
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f7fc f806 	bl	8000c26 <vListInsertEnd>
 8004c1a:	e005      	b.n	8004c28 <vTaskGenericNotifyGiveFromISR+0x10c>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	3340      	adds	r3, #64	; 0x40
 8004c20:	4619      	mov	r1, r3
 8004c22:	4811      	ldr	r0, [pc, #68]	; (8004c68 <vTaskGenericNotifyGiveFromISR+0x14c>)
 8004c24:	f7fb ffff 	bl	8000c26 <vListInsertEnd>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vTaskGenericNotifyGiveFromISR+0x150>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d908      	bls.n	8004c48 <vTaskGenericNotifyGiveFromISR+0x12c>
                    if( pxHigherPriorityTaskWoken != NULL )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <vTaskGenericNotifyGiveFromISR+0x126>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
                    xYieldPending = pdTRUE;
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vTaskGenericNotifyGiveFromISR+0x154>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f383 8811 	msr	BASEPRI, r3
    }
 8004c52:	bf00      	nop
    }
 8004c54:	bf00      	nop
 8004c56:	3738      	adds	r7, #56	; 0x38
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000350 	.word	0x20000350
 8004c60:	20000330 	.word	0x20000330
 8004c64:	20000254 	.word	0x20000254
 8004c68:	200002e8 	.word	0x200002e8
 8004c6c:	20000250 	.word	0x20000250
 8004c70:	2000033c 	.word	0x2000033c

08004c74 <ulTaskGenericNotifyTake>:
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	613b      	str	r3, [r7, #16]
    }
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <ulTaskGenericNotifyTake+0x26>
        taskENTER_CRITICAL();
 8004c9c:	f007 f9ee 	bl	800c07c <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8004ca0:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	3220      	adds	r2, #32
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d115      	bne.n	8004cdc <ulTaskGenericNotifyTake+0x68>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004cb0:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3384      	adds	r3, #132	; 0x84
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <ulTaskGenericNotifyTake+0x68>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fede 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <ulTaskGenericNotifyTake+0xcc>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004cdc:	f007 f9ec 	bl	800c0b8 <vPortExitCritical>
        taskENTER_CRITICAL();
 8004ce0:	f007 f9cc 	bl	800c07c <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	3220      	adds	r2, #32
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <ulTaskGenericNotifyTake+0xaa>
                if( xClearCountOnExit != pdFALSE )
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <ulTaskGenericNotifyTake+0x9a>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	3220      	adds	r2, #32
 8004d06:	2100      	movs	r1, #0
 8004d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d0c:	e007      	b.n	8004d1e <ulTaskGenericNotifyTake+0xaa>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	1e51      	subs	r1, r2, #1
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	3220      	adds	r2, #32
 8004d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <ulTaskGenericNotifyTake+0xc8>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	3384      	adds	r3, #132	; 0x84
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004d2c:	f007 f9c4 	bl	800c0b8 <vPortExitCritical>
        return ulReturn;
 8004d30:	697b      	ldr	r3, [r7, #20]
    }
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000250 	.word	0x20000250
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <xTaskGenericNotifyStateClear>:
    {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60fb      	str	r3, [r7, #12]
    }
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xTaskGenericNotifyStateClear+0x24>
        pxTCB = prvGetTCBFromHandle( xTask );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <xTaskGenericNotifyStateClear+0x32>
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xTaskGenericNotifyStateClear+0x70>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	e000      	b.n	8004d78 <xTaskGenericNotifyStateClear+0x34>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	613b      	str	r3, [r7, #16]
        taskENTER_CRITICAL();
 8004d7a:	f007 f97f 	bl	800c07c <vPortEnterCritical>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	3384      	adds	r3, #132	; 0x84
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d108      	bne.n	8004da0 <xTaskGenericNotifyStateClear+0x5c>
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	3384      	adds	r3, #132	; 0x84
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e001      	b.n	8004da4 <xTaskGenericNotifyStateClear+0x60>
                xReturn = pdFAIL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8004da4:	f007 f988 	bl	800c0b8 <vPortExitCritical>
        return xReturn;
 8004da8:	697b      	ldr	r3, [r7, #20]
    }
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000250 	.word	0x20000250

08004db8 <ulTaskGenericNotifyValueClear>:
    {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <ulTaskGenericNotifyValueClear+0x18>
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <ulTaskGenericNotifyValueClear+0x58>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	e000      	b.n	8004dd2 <ulTaskGenericNotifyValueClear+0x1a>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	617b      	str	r3, [r7, #20]
        taskENTER_CRITICAL();
 8004dd4:	f007 f952 	bl	800c07c <vPortEnterCritical>
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	3220      	adds	r2, #32
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	3220      	adds	r2, #32
 8004dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	ea02 0103 	and.w	r1, r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	3220      	adds	r2, #32
 8004dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        taskEXIT_CRITICAL();
 8004e00:	f007 f95a 	bl	800c0b8 <vPortExitCritical>
        return ulReturn;
 8004e04:	693b      	ldr	r3, [r7, #16]
    }
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000250 	.word	0x20000250

08004e14 <vTaskSetTimeOutState>:
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <vTaskSetTimeOutState+0x24>
        __asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60fb      	str	r3, [r7, #12]
    }
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8004e38:	f007 f920 	bl	800c07c <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <vTaskSetTimeOutState+0x44>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <vTaskSetTimeOutState+0x48>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8004e4c:	f007 f934 	bl	800c0b8 <vPortExitCritical>
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000340 	.word	0x20000340
 8004e5c:	2000032c 	.word	0x2000032c

08004e60 <xTaskCheckForTimeOut>:
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
    }
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
    }
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskCheckForTimeOut+0x40>
    taskENTER_CRITICAL();
 8004ea2:	f007 f8eb 	bl	800c07c <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004ea6:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <xTaskCheckForTimeOut+0xe0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8004eb6:	4b23      	ldr	r3, [pc, #140]	; (8004f44 <xTaskCheckForTimeOut+0xe4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <xTaskCheckForTimeOut+0x72>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <xTaskCheckForTimeOut+0xe4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                xReturn = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e02e      	b.n	8004f30 <xTaskCheckForTimeOut+0xd0>
            if( *pxTicksToWait == portMAX_DELAY )
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d102      	bne.n	8004ee2 <xTaskCheckForTimeOut+0x82>
                xReturn = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e026      	b.n	8004f30 <xTaskCheckForTimeOut+0xd0>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <xTaskCheckForTimeOut+0xe8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d00a      	beq.n	8004f04 <xTaskCheckForTimeOut+0xa4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d305      	bcc.n	8004f04 <xTaskCheckForTimeOut+0xa4>
            xReturn = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e015      	b.n	8004f30 <xTaskCheckForTimeOut+0xd0>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d20b      	bcs.n	8004f26 <xTaskCheckForTimeOut+0xc6>
            *pxTicksToWait -= xElapsedTime;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fcc4 	bl	80058a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e004      	b.n	8004f30 <xTaskCheckForTimeOut+0xd0>
            *pxTicksToWait = ( TickType_t ) 0;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
    taskEXIT_CRITICAL();
 8004f30:	f007 f8c2 	bl	800c0b8 <vPortExitCritical>
    return xReturn;
 8004f34:	69fb      	ldr	r3, [r7, #28]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000032c 	.word	0x2000032c
 8004f44:	20000250 	.word	0x20000250
 8004f48:	20000340 	.word	0x20000340

08004f4c <xTaskCatchUpTicks>:
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <xTaskCatchUpTicks+0x48>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <xTaskCatchUpTicks+0x26>
        __asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
    }
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xTaskCatchUpTicks+0x24>
    vTaskSuspendAll();
 8004f72:	f7ff f8f9 	bl	8004168 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <xTaskCatchUpTicks+0x4c>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <xTaskCatchUpTicks+0x4c>)
 8004f80:	6013      	str	r3, [r2, #0]
    xYieldOccurred = xTaskResumeAll();
 8004f82:	f7ff f8ff 	bl	8004184 <xTaskResumeAll>
 8004f86:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000350 	.word	0x20000350
 8004f98:	20000338 	.word	0x20000338

08004f9c <xTaskIncrementTick>:
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa6:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <xTaskIncrementTick+0x144>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 808e 	bne.w	80050cc <xTaskIncrementTick+0x130>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fb0:	4b4c      	ldr	r3, [pc, #304]	; (80050e4 <xTaskIncrementTick+0x148>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
        xTickCount = xConstTickCount;
 8004fb8:	4a4a      	ldr	r2, [pc, #296]	; (80050e4 <xTaskIncrementTick+0x148>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d120      	bne.n	8005006 <xTaskIncrementTick+0x6a>
            taskSWITCH_DELAYED_LISTS();
 8004fc4:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <xTaskIncrementTick+0x48>
        __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	603b      	str	r3, [r7, #0]
    }
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <xTaskIncrementTick+0x46>
 8004fe4:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4b40      	ldr	r3, [pc, #256]	; (80050ec <xTaskIncrementTick+0x150>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3e      	ldr	r2, [pc, #248]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4a3e      	ldr	r2, [pc, #248]	; (80050ec <xTaskIncrementTick+0x150>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <xTaskIncrementTick+0x154>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a3c      	ldr	r2, [pc, #240]	; (80050f0 <xTaskIncrementTick+0x154>)
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	f000 fe45 	bl	8005c90 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005006:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <xTaskIncrementTick+0x158>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d348      	bcc.n	80050a2 <xTaskIncrementTick+0x106>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <xTaskIncrementTick+0x88>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <xTaskIncrementTick+0x158>)
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	601a      	str	r2, [r3, #0]
                    break;
 8005022:	e03e      	b.n	80050a2 <xTaskIncrementTick+0x106>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	607b      	str	r3, [r7, #4]
                    if( xConstTickCount < xItemValue )
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d203      	bcs.n	8005044 <xTaskIncrementTick+0xa8>
                        xNextTaskUnblockTime = xItemValue;
 800503c:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <xTaskIncrementTick+0x158>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005042:	e02e      	b.n	80050a2 <xTaskIncrementTick+0x106>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	332c      	adds	r3, #44	; 0x2c
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fe0f 	bl	8000c6c <uxListRemove>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <xTaskIncrementTick+0xc4>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3340      	adds	r3, #64	; 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fe06 	bl	8000c6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	2201      	movs	r2, #1
 8005066:	409a      	lsls	r2, r3
 8005068:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <xTaskIncrementTick+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <xTaskIncrementTick+0x15c>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <xTaskIncrementTick+0x160>)
 8005080:	441a      	add	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	332c      	adds	r3, #44	; 0x2c
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fb fdcc 	bl	8000c26 <vListInsertEnd>
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005092:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <xTaskIncrementTick+0x164>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	429a      	cmp	r2, r3
 800509a:	d3b9      	bcc.n	8005010 <xTaskIncrementTick+0x74>
                                xSwitchRequired = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050a0:	e7b6      	b.n	8005010 <xTaskIncrementTick+0x74>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <xTaskIncrementTick+0x164>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a8:	4914      	ldr	r1, [pc, #80]	; (80050fc <xTaskIncrementTick+0x160>)
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d901      	bls.n	80050be <xTaskIncrementTick+0x122>
                    xSwitchRequired = pdTRUE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
                if( xYieldPending != pdFALSE )
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <xTaskIncrementTick+0x168>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <xTaskIncrementTick+0x13a>
                    xSwitchRequired = pdTRUE;
 80050c6:	2301      	movs	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e004      	b.n	80050d6 <xTaskIncrementTick+0x13a>
        ++xPendedTicks;
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <xTaskIncrementTick+0x16c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <xTaskIncrementTick+0x16c>)
 80050d4:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000350 	.word	0x20000350
 80050e4:	2000032c 	.word	0x2000032c
 80050e8:	200002e0 	.word	0x200002e0
 80050ec:	200002e4 	.word	0x200002e4
 80050f0:	20000340 	.word	0x20000340
 80050f4:	20000348 	.word	0x20000348
 80050f8:	20000330 	.word	0x20000330
 80050fc:	20000254 	.word	0x20000254
 8005100:	20000250 	.word	0x20000250
 8005104:	2000033c 	.word	0x2000033c
 8005108:	20000338 	.word	0x20000338

0800510c <vTaskPlaceOnEventList>:
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	60fb      	str	r3, [r7, #12]
    }
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <vTaskPlaceOnEventList+0x24>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005132:	4b07      	ldr	r3, [pc, #28]	; (8005150 <vTaskPlaceOnEventList+0x44>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3340      	adds	r3, #64	; 0x40
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fb fd3b 	bl	8000bb6 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005140:	2101      	movs	r1, #1
 8005142:	6838      	ldr	r0, [r7, #0]
 8005144:	f000 fca0 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000250 	.word	0x20000250

08005154 <vTaskPlaceOnUnorderedEventList>:
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <vTaskPlaceOnUnorderedEventList+0x28>
        __asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	617b      	str	r3, [r7, #20]
    }
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <vTaskPlaceOnUnorderedEventList+0x26>
    configASSERT( uxSchedulerSuspended != 0 );
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <vTaskPlaceOnUnorderedEventList+0x46>
        __asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	613b      	str	r3, [r7, #16]
    }
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <vTaskPlaceOnUnorderedEventList+0x44>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3340      	adds	r3, #64	; 0x40
 80051ac:	4619      	mov	r1, r3
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7fb fd39 	bl	8000c26 <vListInsertEnd>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051b4:	2101      	movs	r1, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fc66 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000350 	.word	0x20000350
 80051c8:	20000250 	.word	0x20000250

080051cc <vTaskPlaceOnEventListRestricted>:
    {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
    }
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <vTaskPlaceOnEventListRestricted+0x26>
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <vTaskPlaceOnEventListRestricted+0x54>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3340      	adds	r3, #64	; 0x40
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7fb fd12 	bl	8000c26 <vListInsertEnd>
        if( xWaitIndefinitely != pdFALSE )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <vTaskPlaceOnEventListRestricted+0x42>
            xTicksToWait = portMAX_DELAY;
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	68b8      	ldr	r0, [r7, #8]
 8005212:	f000 fc39 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
    }
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000250 	.word	0x20000250

08005224 <xTaskRemoveFromEventList>:
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
    }
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3340      	adds	r3, #64	; 0x40
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb fd09 	bl	8000c6c <uxListRemove>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <xTaskRemoveFromEventList+0xac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11c      	bne.n	800529c <xTaskRemoveFromEventList+0x78>
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	332c      	adds	r3, #44	; 0x2c
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb fd00 	bl	8000c6c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	2201      	movs	r2, #1
 8005272:	409a      	lsls	r2, r3
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <xTaskRemoveFromEventList+0xb0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4313      	orrs	r3, r2
 800527a:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <xTaskRemoveFromEventList+0xb0>)
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <xTaskRemoveFromEventList+0xb4>)
 800528c:	441a      	add	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	332c      	adds	r3, #44	; 0x2c
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7fb fcc6 	bl	8000c26 <vListInsertEnd>
 800529a:	e005      	b.n	80052a8 <xTaskRemoveFromEventList+0x84>
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	3340      	adds	r3, #64	; 0x40
 80052a0:	4619      	mov	r1, r3
 80052a2:	480e      	ldr	r0, [pc, #56]	; (80052dc <xTaskRemoveFromEventList+0xb8>)
 80052a4:	f7fb fcbf 	bl	8000c26 <vListInsertEnd>
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <xTaskRemoveFromEventList+0xbc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d905      	bls.n	80052c2 <xTaskRemoveFromEventList+0x9e>
        xReturn = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
        xYieldPending = pdTRUE;
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <xTaskRemoveFromEventList+0xc0>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e001      	b.n	80052c6 <xTaskRemoveFromEventList+0xa2>
        xReturn = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
    return xReturn;
 80052c6:	697b      	ldr	r3, [r7, #20]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000350 	.word	0x20000350
 80052d4:	20000330 	.word	0x20000330
 80052d8:	20000254 	.word	0x20000254
 80052dc:	200002e8 	.word	0x200002e8
 80052e0:	20000250 	.word	0x20000250
 80052e4:	2000033c 	.word	0x2000033c

080052e8 <vTaskRemoveFromUnorderedEventList>:
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	613b      	str	r3, [r7, #16]
    }
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <vTaskRemoveFromUnorderedEventList+0x26>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60fb      	str	r3, [r7, #12]
    }
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskRemoveFromUnorderedEventList+0x52>
    ( void ) uxListRemove( pxEventListItem );
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fb fc95 	bl	8000c6c <uxListRemove>
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	332c      	adds	r3, #44	; 0x2c
 8005346:	4618      	mov	r0, r3
 8005348:	f7fb fc90 	bl	8000c6c <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	4b11      	ldr	r3, [pc, #68]	; (800539c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4313      	orrs	r3, r2
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	332c      	adds	r3, #44	; 0x2c
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f7fb fc56 	bl	8000c26 <vListInsertEnd>
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	429a      	cmp	r2, r3
 8005386:	d902      	bls.n	800538e <vTaskRemoveFromUnorderedEventList+0xa6>
        xYieldPending = pdTRUE;
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000350 	.word	0x20000350
 800539c:	20000330 	.word	0x20000330
 80053a0:	20000254 	.word	0x20000254
 80053a4:	20000250 	.word	0x20000250
 80053a8:	2000033c 	.word	0x2000033c

080053ac <vTaskSwitchContext>:
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053b2:	4b45      	ldr	r3, [pc, #276]	; (80054c8 <vTaskSwitchContext+0x11c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 80053ba:	4b44      	ldr	r3, [pc, #272]	; (80054cc <vTaskSwitchContext+0x120>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
}
 80053c0:	e07d      	b.n	80054be <vTaskSwitchContext+0x112>
        xYieldPending = pdFALSE;
 80053c2:	4b42      	ldr	r3, [pc, #264]	; (80054cc <vTaskSwitchContext+0x120>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80053c8:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <vTaskSwitchContext+0x124>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <vTaskSwitchContext+0x124>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b40      	ldr	r3, [pc, #256]	; (80054d4 <vTaskSwitchContext+0x128>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d909      	bls.n	80053ee <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80053da:	4b3d      	ldr	r3, [pc, #244]	; (80054d0 <vTaskSwitchContext+0x124>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b3d      	ldr	r3, [pc, #244]	; (80054d4 <vTaskSwitchContext+0x128>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1ad1      	subs	r1, r2, r3
 80053e4:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <vTaskSwitchContext+0x12c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80053ea:	440a      	add	r2, r1
 80053ec:	67da      	str	r2, [r3, #124]	; 0x7c
                ulTaskSwitchedInTime = ulTotalRunTime;
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <vTaskSwitchContext+0x124>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <vTaskSwitchContext+0x128>)
 80053f4:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80053f6:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <vTaskSwitchContext+0x12c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	429a      	cmp	r2, r3
 800540c:	d111      	bne.n	8005432 <vTaskSwitchContext+0x86>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	3304      	adds	r3, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	429a      	cmp	r2, r3
 8005418:	d10b      	bne.n	8005432 <vTaskSwitchContext+0x86>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3308      	adds	r3, #8
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d105      	bne.n	8005432 <vTaskSwitchContext+0x86>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	330c      	adds	r3, #12
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d008      	beq.n	8005444 <vTaskSwitchContext+0x98>
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <vTaskSwitchContext+0x12c>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <vTaskSwitchContext+0x12c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	335c      	adds	r3, #92	; 0x5c
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f004 fc27 	bl	8009c92 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <vTaskSwitchContext+0x130>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	f1c3 031f 	rsb	r3, r3, #31
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	4921      	ldr	r1, [pc, #132]	; (80054e0 <vTaskSwitchContext+0x134>)
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <vTaskSwitchContext+0xd8>
        __asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
    }
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vTaskSwitchContext+0xd6>
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <vTaskSwitchContext+0x134>)
 8005490:	4413      	add	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3308      	adds	r3, #8
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d104      	bne.n	80054b4 <vTaskSwitchContext+0x108>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a07      	ldr	r2, [pc, #28]	; (80054d8 <vTaskSwitchContext+0x12c>)
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000350 	.word	0x20000350
 80054cc:	2000033c 	.word	0x2000033c
 80054d0:	20000358 	.word	0x20000358
 80054d4:	20000354 	.word	0x20000354
 80054d8:	20000250 	.word	0x20000250
 80054dc:	20000330 	.word	0x20000330
 80054e0:	20000254 	.word	0x20000254

080054e4 <uxTaskResetEventItemValue>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <uxTaskResetEventItemValue+0x2c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <uxTaskResetEventItemValue+0x2c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <uxTaskResetEventItemValue+0x2c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f1c2 0205 	rsb	r2, r2, #5
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
    return uxReturn;
 8005502:	687b      	ldr	r3, [r7, #4]
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000250 	.word	0x20000250

08005514 <xTaskGetCurrentTaskHandle>:
    {
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 800551a:	4b04      	ldr	r3, [pc, #16]	; (800552c <xTaskGetCurrentTaskHandle+0x18>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	607b      	str	r3, [r7, #4]
        return xReturn;
 8005520:	687b      	ldr	r3, [r7, #4]
    }
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	20000250 	.word	0x20000250

08005530 <vTaskMissedYield>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <vTaskMissedYield+0x14>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000033c 	.word	0x2000033c

08005548 <xTaskGetSchedulerState>:
    {
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <xTaskGetSchedulerState+0x34>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005556:	2301      	movs	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	e008      	b.n	800556e <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <xTaskGetSchedulerState+0x38>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 8005564:	2302      	movs	r3, #2
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e001      	b.n	800556e <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
        return xReturn;
 800556e:	687b      	ldr	r3, [r7, #4]
    }
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000334 	.word	0x20000334
 8005580:	20000350 	.word	0x20000350

08005584 <xTaskPriorityInherit>:
    {
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
        if( pxMutexHolder != NULL )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d05e      	beq.n	8005658 <xTaskPriorityInherit+0xd4>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559e:	4b31      	ldr	r3, [pc, #196]	; (8005664 <xTaskPriorityInherit+0xe0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d24e      	bcs.n	8005646 <xTaskPriorityInherit+0xc2>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db06      	blt.n	80055be <xTaskPriorityInherit+0x3a>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b0:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <xTaskPriorityInherit+0xe0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f1c3 0205 	rsb	r2, r3, #5
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <xTaskPriorityInherit+0xe4>)
 80055d0:	4413      	add	r3, r2
 80055d2:	4299      	cmp	r1, r3
 80055d4:	d12f      	bne.n	8005636 <xTaskPriorityInherit+0xb2>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	332c      	adds	r3, #44	; 0x2c
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb fb46 	bl	8000c6c <uxListRemove>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xTaskPriorityInherit+0x78>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	2201      	movs	r2, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43da      	mvns	r2, r3
 80055f2:	4b1e      	ldr	r3, [pc, #120]	; (800566c <xTaskPriorityInherit+0xe8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4013      	ands	r3, r2
 80055f8:	4a1c      	ldr	r2, [pc, #112]	; (800566c <xTaskPriorityInherit+0xe8>)
 80055fa:	6013      	str	r3, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <xTaskPriorityInherit+0xe0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	4b17      	ldr	r3, [pc, #92]	; (800566c <xTaskPriorityInherit+0xe8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <xTaskPriorityInherit+0xe8>)
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a10      	ldr	r2, [pc, #64]	; (8005668 <xTaskPriorityInherit+0xe4>)
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	332c      	adds	r3, #44	; 0x2c
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fb faf9 	bl	8000c26 <vListInsertEnd>
 8005634:	e004      	b.n	8005640 <xTaskPriorityInherit+0xbc>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005636:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <xTaskPriorityInherit+0xe0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
                xReturn = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e008      	b.n	8005658 <xTaskPriorityInherit+0xd4>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <xTaskPriorityInherit+0xe0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	429a      	cmp	r2, r3
 8005652:	d201      	bcs.n	8005658 <xTaskPriorityInherit+0xd4>
                    xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
        return xReturn;
 8005658:	68fb      	ldr	r3, [r7, #12]
    }
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000250 	.word	0x20000250
 8005668:	20000254 	.word	0x20000254
 800566c:	20000330 	.word	0x20000330

08005670 <xTaskPriorityDisinherit>:
    {
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d063      	beq.n	800574e <xTaskPriorityDisinherit+0xde>
            configASSERT( pxTCB == pxCurrentTCB );
 8005686:	4b34      	ldr	r3, [pc, #208]	; (8005758 <xTaskPriorityDisinherit+0xe8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	429a      	cmp	r2, r3
 800568e:	d00a      	beq.n	80056a6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
    }
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60bb      	str	r3, [r7, #8]
    }
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	66da      	str	r2, [r3, #108]	; 0x6c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d039      	beq.n	800574e <xTaskPriorityDisinherit+0xde>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d135      	bne.n	800574e <xTaskPriorityDisinherit+0xde>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	332c      	adds	r3, #44	; 0x2c
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fb fac0 	bl	8000c6c <uxListRemove>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <xTaskPriorityDisinherit+0x98>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	2201      	movs	r2, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43da      	mvns	r2, r3
 80056fe:	4b17      	ldr	r3, [pc, #92]	; (800575c <xTaskPriorityDisinherit+0xec>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4013      	ands	r3, r2
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <xTaskPriorityDisinherit+0xec>)
 8005706:	6013      	str	r3, [r2, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f1c3 0205 	rsb	r2, r3, #5
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
                    prvAddTaskToReadyList( pxTCB );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	2201      	movs	r2, #1
 8005722:	409a      	lsls	r2, r3
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <xTaskPriorityDisinherit+0xec>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4313      	orrs	r3, r2
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <xTaskPriorityDisinherit+0xec>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4a09      	ldr	r2, [pc, #36]	; (8005760 <xTaskPriorityDisinherit+0xf0>)
 800573c:	441a      	add	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	332c      	adds	r3, #44	; 0x2c
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7fb fa6e 	bl	8000c26 <vListInsertEnd>
                    xReturn = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
        return xReturn;
 800574e:	697b      	ldr	r3, [r7, #20]
    }
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000250 	.word	0x20000250
 800575c:	20000330 	.word	0x20000330
 8005760:	20000254 	.word	0x20000254

08005764 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	61bb      	str	r3, [r7, #24]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d077      	beq.n	800586c <vTaskPriorityDisinheritAfterTimeout+0x108>
            configASSERT( pxTCB->uxMutexesHeld );
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
    }
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vTaskPriorityDisinheritAfterTimeout+0x34>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d902      	bls.n	80057aa <vTaskPriorityDisinheritAfterTimeout+0x46>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e002      	b.n	80057b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
                uxPriorityToUse = pxTCB->uxBasePriority;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ae:	61fb      	str	r3, [r7, #28]
            if( pxTCB->uxPriority != uxPriorityToUse )
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d058      	beq.n	800586c <vTaskPriorityDisinheritAfterTimeout+0x108>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d153      	bne.n	800586c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    configASSERT( pxTCB != pxCurrentTCB );
 80057c4:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10a      	bne.n	80057e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60bb      	str	r3, [r7, #8]
    }
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db04      	blt.n	8005802 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f1c3 0205 	rsb	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a19      	ldr	r2, [pc, #100]	; (8005878 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005812:	4413      	add	r3, r2
 8005814:	4299      	cmp	r1, r3
 8005816:	d129      	bne.n	800586c <vTaskPriorityDisinheritAfterTimeout+0x108>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	332c      	adds	r3, #44	; 0x2c
 800581c:	4618      	mov	r0, r3
 800581e:	f7fb fa25 	bl	8000c6c <uxListRemove>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <vTaskPriorityDisinheritAfterTimeout+0xda>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	2201      	movs	r2, #1
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43da      	mvns	r2, r3
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800583c:	6013      	str	r3, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	4a0b      	ldr	r2, [pc, #44]	; (800587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a06      	ldr	r2, [pc, #24]	; (8005878 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800585e:	441a      	add	r2, r3
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	332c      	adds	r3, #44	; 0x2c
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fb f9dd 	bl	8000c26 <vListInsertEnd>
    }
 800586c:	bf00      	nop
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000250 	.word	0x20000250
 8005878:	20000254 	.word	0x20000254
 800587c:	20000330 	.word	0x20000330

08005880 <pvTaskIncrementMutexHeldCount>:
    {
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <pvTaskIncrementMutexHeldCount+0x16>
            ( pxCurrentTCB->uxMutexesHeld )++;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005892:	3201      	adds	r2, #1
 8005894:	66da      	str	r2, [r3, #108]	; 0x6c
        return pxCurrentTCB;
 8005896:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005898:	681b      	ldr	r3, [r3, #0]
    }
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000250 	.word	0x20000250

080058a8 <vTaskInternalSetTimeOutState>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <vTaskInternalSetTimeOutState+0x24>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <vTaskInternalSetTimeOutState+0x28>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000340 	.word	0x20000340
 80058d0:	2000032c 	.word	0x2000032c

080058d4 <prvTaskIsTaskSuspended>:
    {
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	613b      	str	r3, [r7, #16]
        configASSERT( xTask );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
    }
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <prvTaskIsTaskSuspended+0x2a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	4a09      	ldr	r2, [pc, #36]	; (800592c <prvTaskIsTaskSuspended+0x58>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10a      	bne.n	8005920 <prvTaskIsTaskSuspended+0x4c>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <prvTaskIsTaskSuspended+0x5c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d005      	beq.n	8005920 <prvTaskIsTaskSuspended+0x4c>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <prvTaskIsTaskSuspended+0x4c>
                    xReturn = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005920:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005922:	4618      	mov	r0, r3
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	20000314 	.word	0x20000314
 8005930:	200002e8 	.word	0x200002e8

08005934 <prvInitialiseTaskLists>:
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e00c      	b.n	800595a <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <prvInitialiseTaskLists+0x60>)
 800594c:	4413      	add	r3, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb f906 	bl	8000b60 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3301      	adds	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d9ef      	bls.n	8005940 <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005962:	f7fb f8fd 	bl	8000b60 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005968:	f7fb f8fa 	bl	8000b60 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800596c:	480c      	ldr	r0, [pc, #48]	; (80059a0 <prvInitialiseTaskLists+0x6c>)
 800596e:	f7fb f8f7 	bl	8000b60 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8005972:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x70>)
 8005974:	f7fb f8f4 	bl	8000b60 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8005978:	480b      	ldr	r0, [pc, #44]	; (80059a8 <prvInitialiseTaskLists+0x74>)
 800597a:	f7fb f8f1 	bl	8000b60 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x78>)
 8005980:	4a05      	ldr	r2, [pc, #20]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005982:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvInitialiseTaskLists+0x7c>)
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000254 	.word	0x20000254
 8005998:	200002b8 	.word	0x200002b8
 800599c:	200002cc 	.word	0x200002cc
 80059a0:	200002e8 	.word	0x200002e8
 80059a4:	200002fc 	.word	0x200002fc
 80059a8:	20000314 	.word	0x20000314
 80059ac:	200002e0 	.word	0x200002e0
 80059b0:	200002e4 	.word	0x200002e4

080059b4 <prvIdleTask>:
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 80059bc:	f000 f837 	bl	8005a2e <prvCheckTasksWaitingTermination>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <prvIdleTask+0x18>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d9f9      	bls.n	80059bc <prvIdleTask+0x8>
                    taskYIELD();
 80059c8:	df01      	svc	1
        prvCheckTasksWaitingTermination();
 80059ca:	e7f7      	b.n	80059bc <prvIdleTask+0x8>
 80059cc:	20000254 	.word	0x20000254

080059d0 <prvDeleteTCB>:
    {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <prvDeleteTCB+0x24>
                    vPortFree( pxTCB->pxStack );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fc0a 	bl	8007200 <vPortFree>
                    vPortFree( pxTCB );
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fc07 	bl	8007200 <vPortFree>
    }
 80059f2:	e018      	b.n	8005a26 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d103      	bne.n	8005a06 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fbfe 	bl	8007200 <vPortFree>
    }
 8005a04:	e00f      	b.n	8005a26 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d00a      	beq.n	8005a26 <prvDeleteTCB+0x56>
        __asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
    }
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <prvDeleteTCB+0x54>
    }
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <prvCheckTasksWaitingTermination>:
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a34:	e019      	b.n	8005a6a <prvCheckTasksWaitingTermination+0x3c>
                taskENTER_CRITICAL();
 8005a36:	f006 fb21 	bl	800c07c <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3a:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <prvCheckTasksWaitingTermination+0x4e>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	332c      	adds	r3, #44	; 0x2c
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fb f910 	bl	8000c6c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <prvCheckTasksWaitingTermination+0x52>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a0b      	ldr	r2, [pc, #44]	; (8005a80 <prvCheckTasksWaitingTermination+0x52>)
 8005a54:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <prvCheckTasksWaitingTermination+0x56>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <prvCheckTasksWaitingTermination+0x56>)
 8005a5e:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 8005a60:	f006 fb2a 	bl	800c0b8 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ffb3 	bl	80059d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <prvCheckTasksWaitingTermination+0x56>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e1      	bne.n	8005a36 <prvCheckTasksWaitingTermination+0x8>
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200002fc 	.word	0x200002fc
 8005a80:	20000328 	.word	0x20000328
 8005a84:	20000310 	.word	0x20000310

08005a88 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8005a98:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa2:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	332c      	adds	r3, #44	; 0x2c
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fb f8df 	bl	8000c6c <uxListRemove>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ab4:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	2201      	movs	r2, #1
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005aca:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d10a      	bne.n	8005aea <prvAddCurrentTaskToDelayedList+0x62>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	332c      	adds	r3, #44	; 0x2c
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	481a      	ldr	r0, [pc, #104]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ae4:	f7fb f89f 	bl	8000c26 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005ae8:	e026      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0xb0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
                if( xTimeToWake < xConstTickCount )
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d209      	bcs.n	8005b16 <prvAddCurrentTaskToDelayedList+0x8e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	332c      	adds	r3, #44	; 0x2c
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fb f851 	bl	8000bb6 <vListInsert>
}
 8005b14:	e010      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0xb0>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	332c      	adds	r3, #44	; 0x2c
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fb f847 	bl	8000bb6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d202      	bcs.n	8005b38 <prvAddCurrentTaskToDelayedList+0xb0>
                        xNextTaskUnblockTime = xTimeToWake;
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000032c 	.word	0x2000032c
 8005b44:	20000250 	.word	0x20000250
 8005b48:	20000330 	.word	0x20000330
 8005b4c:	20000314 	.word	0x20000314
 8005b50:	200002e4 	.word	0x200002e4
 8005b54:	200002e0 	.word	0x200002e0
 8005b58:	20000348 	.word	0x20000348

08005b5c <prvSearchForNameWithinSingleList>:
    {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b08b      	sub	sp, #44	; 0x2c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d05b      	beq.n	8005c2a <prvSearchForNameWithinSingleList+0xce>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	3308      	adds	r3, #8
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d104      	bne.n	8005b96 <prvSearchForNameWithinSingleList+0x3a>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	617b      	str	r3, [r7, #20]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	605a      	str	r2, [r3, #4]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d104      	bne.n	8005bc2 <prvSearchForNameWithinSingleList+0x66>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	60fb      	str	r3, [r7, #12]
                xBreakLoop = pdFALSE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	e01c      	b.n	8005c0e <prvSearchForNameWithinSingleList+0xb2>
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4413      	add	r3, r2
 8005bda:	335c      	adds	r3, #92	; 0x5c
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	72fb      	strb	r3, [r7, #11]
                    if( cNextChar != pcNameToQuery[ x ] )
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d002      	beq.n	8005bf4 <prvSearchForNameWithinSingleList+0x98>
                        xBreakLoop = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	e006      	b.n	8005c02 <prvSearchForNameWithinSingleList+0xa6>
                    else if( cNextChar == ( char ) 0x00 )
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <prvSearchForNameWithinSingleList+0xa6>
                        pxReturn = pxNextTCB;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
                    if( xBreakLoop != pdFALSE )
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	d9df      	bls.n	8005bd4 <prvSearchForNameWithinSingleList+0x78>
 8005c14:	e000      	b.n	8005c18 <prvSearchForNameWithinSingleList+0xbc>
                        break;
 8005c16:	bf00      	nop
                if( pxReturn != NULL )
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <prvSearchForNameWithinSingleList+0xcc>
            } while( pxNextTCB != pxFirstTCB );
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d1bb      	bne.n	8005b9e <prvSearchForNameWithinSingleList+0x42>
 8005c26:	e000      	b.n	8005c2a <prvSearchForNameWithinSingleList+0xce>
                    break;
 8005c28:	bf00      	nop
        return pxReturn;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	372c      	adds	r7, #44	; 0x2c
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <prvTaskCheckFreeStackSpace>:
    {
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c3e:	e012      	b.n	8005c66 <prvTaskCheckFreeStackSpace+0x30>
            pucStackByte -= portSTACK_GROWTH;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3301      	adds	r3, #1
 8005c44:	607b      	str	r3, [r7, #4]
            ulCount++;
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c4e:	6013      	str	r3, [r2, #0]
            if(ulCount ==1204){
 8005c50:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d104      	bne.n	8005c66 <prvTaskCheckFreeStackSpace+0x30>
            	ulCount2+=1;
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <prvTaskCheckFreeStackSpace+0x56>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <prvTaskCheckFreeStackSpace+0x56>)
 8005c64:	6013      	str	r3, [r2, #0]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2ba5      	cmp	r3, #165	; 0xa5
 8005c6c:	d0e8      	beq.n	8005c40 <prvTaskCheckFreeStackSpace+0xa>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c76:	6013      	str	r3, [r2, #0]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <prvTaskCheckFreeStackSpace+0x52>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
    }
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr
 8005c88:	20009c00 	.word	0x20009c00
 8005c8c:	20009c04 	.word	0x20009c04

08005c90 <prvResetNextTaskUnblockTime>:
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <prvResetNextTaskUnblockTime+0x2c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <prvResetNextTaskUnblockTime+0x30>)
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca4:	601a      	str	r2, [r3, #0]
}
 8005ca6:	e005      	b.n	8005cb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <prvResetNextTaskUnblockTime+0x2c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a03      	ldr	r2, [pc, #12]	; (8005cc0 <prvResetNextTaskUnblockTime+0x30>)
 8005cb2:	6013      	str	r3, [r2, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	200002e0 	.word	0x200002e0
 8005cc0:	20000348 	.word	0x20000348

08005cc4 <prvInitialiseNewTask>:
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da02      	bge.n	8005cde <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e001      	b.n	8005ce2 <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
        uxPriority &= ~portPRIVILEGE_BIT;
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	21a5      	movs	r1, #165	; 0xa5
 8005cf6:	f00a fbbd 	bl	8010474 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d04:	3b01      	subs	r3, #1
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	617b      	str	r3, [r7, #20]
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <prvInitialiseNewTask+0x70>
        __asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	613b      	str	r3, [r7, #16]
    }
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <prvInitialiseNewTask+0x6e>
    if( pcName != NULL )
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01f      	beq.n	8005d7a <prvInitialiseNewTask+0xb6>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	e012      	b.n	8005d66 <prvInitialiseNewTask+0xa2>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	7819      	ldrb	r1, [r3, #0]
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	335c      	adds	r3, #92	; 0x5c
 8005d50:	460a      	mov	r2, r1
 8005d52:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d006      	beq.n	8005d6e <prvInitialiseNewTask+0xaa>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3301      	adds	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d9e9      	bls.n	8005d40 <prvInitialiseNewTask+0x7c>
 8005d6c:	e000      	b.n	8005d70 <prvInitialiseNewTask+0xac>
                break;
 8005d6e:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8005d78:	e003      	b.n	8005d82 <prvInitialiseNewTask+0xbe>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d901      	bls.n	8005d8c <prvInitialiseNewTask+0xc8>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d88:	2304      	movs	r3, #4
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    pxNewTCB->uxPriority = uxPriority;
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
            pxNewTCB->uxBasePriority = uxPriority;
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d96:	669a      	str	r2, [r3, #104]	; 0x68
            pxNewTCB->uxMutexesHeld = 0;
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	66da      	str	r2, [r3, #108]	; 0x6c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	332c      	adds	r3, #44	; 0x2c
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fa fefb 	bl	8000b9e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	3340      	adds	r3, #64	; 0x40
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fa fef6 	bl	8000b9e <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f1c3 0205 	rsb	r2, r3, #5
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc6:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->pxTaskTag = NULL;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	671a      	str	r2, [r3, #112]	; 0x70
            pxNewTCB->ulRunTimeCounter = 0UL;
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	67da      	str	r2, [r3, #124]	; 0x7c
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	1d18      	adds	r0, r3, #4
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005de0:	f000 fe7c 	bl	8006adc <vPortStoreTaskMPUSettings>
            pxNewTCB->pxPeripheralPermissions = xPeripheralPermissions;
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	3374      	adds	r3, #116	; 0x74
 8005df0:	2208      	movs	r2, #8
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00a fb3d 	bl	8010474 <memset>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	3380      	adds	r3, #128	; 0x80
 8005dfe:	2204      	movs	r2, #4
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00a fb36 	bl	8010474 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	3384      	adds	r3, #132	; 0x84
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f00a fb2f 	bl	8010474 <memset>
            pxNewTCB->ucDelayAborted = pdFALSE;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f000 fd7b 	bl	8006920 <pxPortInitialiseStack>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <prvInitialiseNewTask+0x178>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3a:	601a      	str	r2, [r3, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <prvAddNewTaskToReadyList>:
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8005e4c:	f006 f916 	bl	800c07c <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <prvAddNewTaskToReadyList+0xb8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a29      	ldr	r2, [pc, #164]	; (8005efc <prvAddNewTaskToReadyList+0xb8>)
 8005e58:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8005e5a:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <prvAddNewTaskToReadyList+0xbc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8005e62:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <prvAddNewTaskToReadyList+0xbc>)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <prvAddNewTaskToReadyList+0xb8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d110      	bne.n	8005e92 <prvAddNewTaskToReadyList+0x4e>
                prvInitialiseTaskLists();
 8005e70:	f7ff fd60 	bl	8005934 <prvInitialiseTaskLists>
 8005e74:	e00d      	b.n	8005e92 <prvAddNewTaskToReadyList+0x4e>
            if( xSchedulerRunning == pdFALSE )
 8005e76:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <prvAddNewTaskToReadyList+0xc0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <prvAddNewTaskToReadyList+0x4e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <prvAddNewTaskToReadyList+0xbc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d802      	bhi.n	8005e92 <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <prvAddNewTaskToReadyList+0xbc>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <prvAddNewTaskToReadyList+0xc4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <prvAddNewTaskToReadyList+0xc4>)
 8005e9a:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <prvAddNewTaskToReadyList+0xc8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <prvAddNewTaskToReadyList+0xc8>)
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <prvAddNewTaskToReadyList+0xcc>)
 8005ebc:	441a      	add	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	332c      	adds	r3, #44	; 0x2c
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fa feae 	bl	8000c26 <vListInsertEnd>
    taskEXIT_CRITICAL();
 8005eca:	f006 f8f5 	bl	800c0b8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <prvAddNewTaskToReadyList+0xc0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <prvAddNewTaskToReadyList+0xb0>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <prvAddNewTaskToReadyList+0xbc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d207      	bcs.n	8005ef4 <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <prvAddNewTaskToReadyList+0xd0>)
 8005ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	f3bf 8f6f 	isb	sy
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000328 	.word	0x20000328
 8005f00:	20000250 	.word	0x20000250
 8005f04:	20000334 	.word	0x20000334
 8005f08:	20000344 	.word	0x20000344
 8005f0c:	20000330 	.word	0x20000330
 8005f10:	20000254 	.word	0x20000254
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005f26:	2028      	movs	r0, #40	; 0x28
 8005f28:	f001 f89a 	bl	8007060 <pvPortMalloc>
 8005f2c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fcaa 	bl	80068a4 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005f50:	697b      	ldr	r3, [r7, #20]
        }
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b08a      	sub	sp, #40	; 0x28
 8005f5e:	af02      	add	r7, sp, #8
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticTimer_t equals the size of the real timer
                     * structure. */
                    volatile size_t xSize = sizeof( StaticTimer_t );
 8005f68:	2328      	movs	r3, #40	; 0x28
 8005f6a:	613b      	str	r3, [r7, #16]
                    configASSERT( xSize == sizeof( Timer_t ) );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b28      	cmp	r3, #40	; 0x28
 8005f70:	d00a      	beq.n	8005f88 <xTimerCreateStatic+0x2e>
        __asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	61bb      	str	r3, [r7, #24]
    }
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xTimerCreateStatic+0x2c>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f88:	693b      	ldr	r3, [r7, #16]
                }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xTimerCreateStatic+0x4c>
        __asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	617b      	str	r3, [r7, #20]
    }
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xTimerCreateStatic+0x4a>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fc6c 	bl	80068a4 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
        }
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <pvTimerGetTimerID+0x28>
        __asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	60fb      	str	r3, [r7, #12]
    }
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8005ffe:	f006 f83d 	bl	800c07c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006008:	f006 f856 	bl	800c0b8 <vPortExitCritical>

        return pvReturn;
 800600c:	693b      	ldr	r3, [r7, #16]
    }
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTimerSetTimerID+0x2a>
        __asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60bb      	str	r3, [r7, #8]
    }
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 8006040:	f006 f81c 	bl	800c07c <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 800604a:	f006 f835 	bl	800c0b8 <vPortExitCritical>
    }
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <xTimerIsTimerActive>:
    {
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xTimerIsTimerActive+0x28>
        __asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	60fb      	str	r3, [r7, #12]
    }
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xTimerIsTimerActive+0x26>
        taskENTER_CRITICAL();
 800607e:	f005 fffd 	bl	800c07c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <xTimerIsTimerActive+0x40>
                xReturn = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e001      	b.n	800609a <xTimerIsTimerActive+0x44>
                xReturn = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 800609a:	f006 f80d 	bl	800c0b8 <vPortExitCritical>
        return xReturn;
 800609e:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <xTimerGetTimerDaemonTaskHandle>:
    {
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <xTimerGetTimerDaemonTaskHandle+0x34>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <xTimerGetTimerDaemonTaskHandle+0x24>
        __asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	607b      	str	r3, [r7, #4]
    }
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTimerGetTimerDaemonTaskHandle+0x22>
        return xTimerTaskHandle;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <xTimerGetTimerDaemonTaskHandle+0x34>)
 80060ce:	681b      	ldr	r3, [r3, #0]
    }
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000390 	.word	0x20000390

080060e0 <pcTimerGetName>:
    {
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <pcTimerGetName+0x28>
        __asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
    }
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <pcTimerGetName+0x26>
        return pxTimer->pcTimerName;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
    }
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <vTimerSetReloadMode>:
    {
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <vTimerSetReloadMode+0x2a>
        __asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60bb      	str	r3, [r7, #8]
    }
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 8006140:	f005 ff9c 	bl	800c07c <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <vTimerSetReloadMode+0x48>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800615c:	e008      	b.n	8006170 <vTimerSetReloadMode+0x5a>
                pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006164:	f023 0304 	bic.w	r3, r3, #4
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        taskEXIT_CRITICAL();
 8006170:	f005 ffa2 	bl	800c0b8 <vPortExitCritical>
    }
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <uxTimerGetReloadMode>:
    {
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <uxTimerGetReloadMode+0x28>
        __asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
    }
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <uxTimerGetReloadMode+0x26>
        taskENTER_CRITICAL();
 80061a4:	f005 ff6a 	bl	800c07c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <uxTimerGetReloadMode+0x40>
                uxReturn = ( UBaseType_t ) pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e001      	b.n	80061c0 <uxTimerGetReloadMode+0x44>
                uxReturn = ( UBaseType_t ) pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 80061c0:	f005 ff7a 	bl	800c0b8 <vPortExitCritical>
        return uxReturn;
 80061c4:	697b      	ldr	r3, [r7, #20]
    }
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <xTimerGetPeriod>:
    {
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xTimerGetPeriod+0x28>
        __asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60bb      	str	r3, [r7, #8]
    }
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xTimerGetPeriod+0x26>
        return pxTimer->xTimerPeriodInTicks;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
    }
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <xTimerGetExpiryTime>:
    {
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	617b      	str	r3, [r7, #20]
        configASSERT( xTimer );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <xTimerGetExpiryTime+0x28>
        __asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
    }
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]
        return xReturn;
 8006232:	693b      	ldr	r3, [r7, #16]
    }
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <xTimerCreateTimerTask>:
    {
 800623e:	b580      	push	{r7, lr}
 8006240:	b08a      	sub	sp, #40	; 0x28
 8006242:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
        prvCheckForValidListAndQueue();
 8006248:	f000 f892 	bl	8006370 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800624c:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <xTimerCreateTimerTask+0x82>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d021      	beq.n	8006298 <xTimerCreateTimerTask+0x5a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	60bb      	str	r3, [r7, #8]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800625c:	1d3a      	adds	r2, r7, #4
 800625e:	f107 0108 	add.w	r1, r7, #8
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	4618      	mov	r0, r3
 8006268:	f003 fd36 	bl	8009cd8 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <xTimerCreateTimerTask+0x86>)
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	2300      	movs	r3, #0
 800627c:	460a      	mov	r2, r1
 800627e:	4912      	ldr	r1, [pc, #72]	; (80062c8 <xTimerCreateTimerTask+0x8a>)
 8006280:	4812      	ldr	r0, [pc, #72]	; (80062cc <xTimerCreateTimerTask+0x8e>)
 8006282:	f7fd f8c4 	bl	800340e <xTaskCreateStatic>
 8006286:	4603      	mov	r3, r0
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <xTimerCreateTimerTask+0x92>)
 800628a:	6013      	str	r3, [r2, #0]
                    if( xTimerTaskHandle != NULL )
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xTimerCreateTimerTask+0x92>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <xTimerCreateTimerTask+0x5a>
                        xReturn = pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
        configASSERT( xReturn );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	613b      	str	r3, [r7, #16]
    }
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80062b4:	697b      	ldr	r3, [r7, #20]
    }
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000038c 	.word	0x2000038c
 80062c4:	80000002 	.word	0x80000002
 80062c8:	0801053c 	.word	0x0801053c
 80062cc:	080063f1 	.word	0x080063f1
 80062d0:	20000390 	.word	0x20000390

080062d4 <xTimerGenericCommand>:
    {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <xTimerGenericCommand+0x2e>
        __asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	623b      	str	r3, [r7, #32]
    }
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xTimerGenericCommand+0x2c>
        if( xTimerQueue != NULL )
 8006302:	4b1a      	ldr	r3, [pc, #104]	; (800636c <xTimerGenericCommand+0x98>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d02a      	beq.n	8006360 <xTimerGenericCommand+0x8c>
            xMessage.xMessageID = xCommandID;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	61fb      	str	r3, [r7, #28]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b05      	cmp	r3, #5
 800631a:	dc18      	bgt.n	800634e <xTimerGenericCommand+0x7a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800631c:	f7ff f914 	bl	8005548 <xTaskGetSchedulerState>
 8006320:	4603      	mov	r3, r0
 8006322:	2b02      	cmp	r3, #2
 8006324:	d109      	bne.n	800633a <xTimerGenericCommand+0x66>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <xTimerGenericCommand+0x98>)
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	f107 0114 	add.w	r1, r7, #20
 800632e:	2300      	movs	r3, #0
 8006330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006332:	f7fa fcc5 	bl	8000cc0 <xQueueGenericSend>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24
 8006338:	e012      	b.n	8006360 <xTimerGenericCommand+0x8c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <xTimerGenericCommand+0x98>)
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f107 0114 	add.w	r1, r7, #20
 8006342:	2300      	movs	r3, #0
 8006344:	2200      	movs	r2, #0
 8006346:	f7fa fcbb 	bl	8000cc0 <xQueueGenericSend>
 800634a:	6278      	str	r0, [r7, #36]	; 0x24
 800634c:	e008      	b.n	8006360 <xTimerGenericCommand+0x8c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <xTimerGenericCommand+0x98>)
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	f107 0114 	add.w	r1, r7, #20
 8006356:	2300      	movs	r3, #0
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	f7fb f859 	bl	8001410 <xQueueGenericSendFromISR>
 800635e:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006362:	4618      	mov	r0, r3
 8006364:	3728      	adds	r7, #40	; 0x28
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	2000038c 	.word	0x2000038c

08006370 <prvCheckForValidListAndQueue>:
    {
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af02      	add	r7, sp, #8
        taskENTER_CRITICAL();
 8006376:	f005 fe81 	bl	800c07c <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <prvCheckForValidListAndQueue+0x60>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d120      	bne.n	80063c4 <prvCheckForValidListAndQueue+0x54>
                vListInitialise( &xActiveTimerList1 );
 8006382:	4814      	ldr	r0, [pc, #80]	; (80063d4 <prvCheckForValidListAndQueue+0x64>)
 8006384:	f7fa fbec 	bl	8000b60 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006388:	4813      	ldr	r0, [pc, #76]	; (80063d8 <prvCheckForValidListAndQueue+0x68>)
 800638a:	f7fa fbe9 	bl	8000b60 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <prvCheckForValidListAndQueue+0x6c>)
 8006390:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <prvCheckForValidListAndQueue+0x64>)
 8006392:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <prvCheckForValidListAndQueue+0x70>)
 8006396:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <prvCheckForValidListAndQueue+0x68>)
 8006398:	601a      	str	r2, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800639a:	2300      	movs	r3, #0
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <prvCheckForValidListAndQueue+0x74>)
 80063a0:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <prvCheckForValidListAndQueue+0x78>)
 80063a2:	210c      	movs	r1, #12
 80063a4:	2005      	movs	r0, #5
 80063a6:	f7fb fdaf 	bl	8001f08 <xQueueGenericCreateStatic>
 80063aa:	4603      	mov	r3, r0
 80063ac:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <prvCheckForValidListAndQueue+0x60>)
 80063ae:	6013      	str	r3, [r2, #0]
                        if( xTimerQueue != NULL )
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <prvCheckForValidListAndQueue+0x60>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <prvCheckForValidListAndQueue+0x54>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <prvCheckForValidListAndQueue+0x60>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	490b      	ldr	r1, [pc, #44]	; (80063ec <prvCheckForValidListAndQueue+0x7c>)
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fb fcd5 	bl	8001d6e <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 80063c4:	f005 fe78 	bl	800c0b8 <vPortExitCritical>
    }
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000038c 	.word	0x2000038c
 80063d4:	2000035c 	.word	0x2000035c
 80063d8:	20000370 	.word	0x20000370
 80063dc:	20000384 	.word	0x20000384
 80063e0:	20000388 	.word	0x20000388
 80063e4:	20000398 	.word	0x20000398
 80063e8:	200003e4 	.word	0x200003e4
 80063ec:	08010544 	.word	0x08010544

080063f0 <prvTimerTask>:
    {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f9e1 	bl	80067c4 <prvGetNextExpireTime>
 8006402:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4619      	mov	r1, r3
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f9fd 	bl	8006808 <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 800640e:	f000 f801 	bl	8006414 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006412:	e7f1      	b.n	80063f8 <prvTimerTask+0x8>

08006414 <prvProcessReceivedCommands>:
    {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af02      	add	r7, sp, #8
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641a:	e0ae      	b.n	800657a <prvProcessReceivedCommands+0x166>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f2c0 80aa 	blt.w	8006578 <prvProcessReceivedCommands+0x164>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <prvProcessReceivedCommands+0x26>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fa fc19 	bl	8000c6c <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f9a1 	bl	8006784 <prvSampleTimeNow>
 8006442:	6238      	str	r0, [r7, #32]
                switch( xMessage.xMessageID )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b09      	cmp	r3, #9
 8006448:	f200 8097 	bhi.w	800657a <prvProcessReceivedCommands+0x166>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <prvProcessReceivedCommands+0x40>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	0800647d 	.word	0x0800647d
 8006458:	0800647d 	.word	0x0800647d
 800645c:	0800647d 	.word	0x0800647d
 8006460:	080064f1 	.word	0x080064f1
 8006464:	08006505 	.word	0x08006505
 8006468:	0800654f 	.word	0x0800654f
 800646c:	0800647d 	.word	0x0800647d
 8006470:	0800647d 	.word	0x0800647d
 8006474:	080064f1 	.word	0x080064f1
 8006478:	08006505 	.word	0x08006505
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	18d1      	adds	r1, r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649c:	f000 f880 	bl	80065a0 <prvInsertTimerInActiveList>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d069      	beq.n	800657a <prvProcessReceivedCommands+0x166>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ac:	4798      	blx	r3
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05e      	beq.n	800657a <prvProcessReceivedCommands+0x166>
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	441a      	add	r2, r3
 80064c4:	2300      	movs	r3, #0
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2300      	movs	r3, #0
 80064ca:	2100      	movs	r1, #0
 80064cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ce:	f7ff ff01 	bl	80062d4 <xTimerGenericCommand>
 80064d2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d14f      	bne.n	800657a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	61bb      	str	r3, [r7, #24]
    }
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvProcessReceivedCommands+0xda>
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8006502:	e03a      	b.n	800657a <prvProcessReceivedCommands+0x166>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	617b      	str	r3, [r7, #20]
    }
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <prvProcessReceivedCommands+0x124>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	18d1      	adds	r1, r2, r3
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006548:	f000 f82a 	bl	80065a0 <prvInsertTimerInActiveList>
                        break;
 800654c:	e015      	b.n	800657a <prvProcessReceivedCommands+0x166>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <prvProcessReceivedCommands+0x150>
                                    vPortFree( pxTimer );
 800655c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800655e:	f000 fe4f 	bl	8007200 <vPortFree>
 8006562:	e00a      	b.n	800657a <prvProcessReceivedCommands+0x166>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8006576:	e000      	b.n	800657a <prvProcessReceivedCommands+0x166>
            }
 8006578:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800657a:	4b08      	ldr	r3, [pc, #32]	; (800659c <prvProcessReceivedCommands+0x188>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f107 0108 	add.w	r1, r7, #8
 8006582:	2200      	movs	r2, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f7fa fe00 	bl	800118a <xQueueReceive>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	f47f af45 	bne.w	800641c <prvProcessReceivedCommands+0x8>
    }
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	3728      	adds	r7, #40	; 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	2000038c 	.word	0x2000038c

080065a0 <prvInsertTimerInActiveList>:
    {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d812      	bhi.n	80065ec <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d302      	bcc.n	80065da <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e01b      	b.n	8006612 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <prvInsertTimerInActiveList+0x7c>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7fa fae6 	bl	8000bb6 <vListInsert>
 80065ea:	e012      	b.n	8006612 <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d206      	bcs.n	8006602 <prvInsertTimerInActiveList+0x62>
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d302      	bcc.n	8006602 <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e007      	b.n	8006612 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <prvInsertTimerInActiveList+0x80>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fa fad2 	bl	8000bb6 <vListInsert>
        return xProcessTimerNow;
 8006612:	697b      	ldr	r3, [r7, #20]
    }
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000388 	.word	0x20000388
 8006620:	20000384 	.word	0x20000384

08006624 <prvProcessExpiredTimer>:
    {
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <prvProcessExpiredTimer+0x94>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	617b      	str	r3, [r7, #20]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fa fb15 	bl	8000c6c <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d022      	beq.n	8006696 <prvProcessExpiredTimer+0x72>
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	18d1      	adds	r1, r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f7ff ff9f 	bl	80065a0 <prvInsertTimerInActiveList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01f      	beq.n	80066a8 <prvProcessExpiredTimer+0x84>
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	2100      	movs	r1, #0
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff fe2e 	bl	80062d4 <xTimerGenericCommand>
 8006678:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d113      	bne.n	80066a8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
    }
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <prvProcessExpiredTimer+0x70>
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	6978      	ldr	r0, [r7, #20]
 80066ae:	4798      	blx	r3
    }
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000384 	.word	0x20000384

080066bc <prvSwitchTimerLists>:
    {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066c2:	e048      	b.n	8006756 <prvSwitchTimerLists+0x9a>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066c4:	4b2d      	ldr	r3, [pc, #180]	; (800677c <prvSwitchTimerLists+0xc0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	613b      	str	r3, [r7, #16]
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ce:	4b2b      	ldr	r3, [pc, #172]	; (800677c <prvSwitchTimerLists+0xc0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3304      	adds	r3, #4
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fa fac5 	bl	8000c6c <uxListRemove>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	4798      	blx	r3
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02e      	beq.n	8006756 <prvSwitchTimerLists+0x9a>
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	60bb      	str	r3, [r7, #8]
                if( xReloadTime > xNextExpireTime )
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	429a      	cmp	r2, r3
 8006708:	d90e      	bls.n	8006728 <prvSwitchTimerLists+0x6c>
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <prvSwitchTimerLists+0xc0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fa fa48 	bl	8000bb6 <vListInsert>
 8006726:	e016      	b.n	8006756 <prvSwitchTimerLists+0x9a>
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006728:	2300      	movs	r3, #0
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2300      	movs	r3, #0
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	2100      	movs	r1, #0
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fdce 	bl	80062d4 <xTimerGenericCommand>
 8006738:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	603b      	str	r3, [r7, #0]
    }
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <prvSwitchTimerLists+0xc0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1b1      	bne.n	80066c4 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <prvSwitchTimerLists+0xc0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <prvSwitchTimerLists+0xc4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a04      	ldr	r2, [pc, #16]	; (800677c <prvSwitchTimerLists+0xc0>)
 800676c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800676e:	4a04      	ldr	r2, [pc, #16]	; (8006780 <prvSwitchTimerLists+0xc4>)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6013      	str	r3, [r2, #0]
    }
 8006774:	bf00      	nop
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000384 	.word	0x20000384
 8006780:	20000388 	.word	0x20000388

08006784 <prvSampleTimeNow>:
    {
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 800678c:	f7fd fd96 	bl	80042bc <xTaskGetTickCount>
 8006790:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <prvSampleTimeNow+0x3c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d205      	bcs.n	80067a8 <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 800679c:	f7ff ff8e 	bl	80066bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e002      	b.n	80067ae <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 80067ae:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <prvSampleTimeNow+0x3c>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 80067b4:	68fb      	ldr	r3, [r7, #12]
    }
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000394 	.word	0x20000394

080067c4 <prvGetNextExpireTime>:
    {
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <prvGetNextExpireTime+0x40>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <prvGetNextExpireTime+0x16>
 80067d6:	2201      	movs	r2, #1
 80067d8:	e000      	b.n	80067dc <prvGetNextExpireTime+0x18>
 80067da:	2200      	movs	r2, #0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d105      	bne.n	80067f4 <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <prvGetNextExpireTime+0x40>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e001      	b.n	80067f8 <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 80067f8:	68fb      	ldr	r3, [r7, #12]
    }
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	20000384 	.word	0x20000384

08006808 <prvProcessTimerOrBlockTask>:
    {
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8006812:	f7fd fca9 	bl	8004168 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff ffb2 	bl	8006784 <prvSampleTimeNow>
 8006820:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d130      	bne.n	800688a <prvProcessTimerOrBlockTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <prvProcessTimerOrBlockTask+0x3c>
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	429a      	cmp	r2, r3
 8006834:	d806      	bhi.n	8006844 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 8006836:	f7fd fca5 	bl	8004184 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fef1 	bl	8006624 <prvProcessExpiredTimer>
    }
 8006842:	e024      	b.n	800688e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <prvProcessTimerOrBlockTask+0x90>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <prvProcessTimerOrBlockTask+0x50>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <prvProcessTimerOrBlockTask+0x52>
 8006858:	2300      	movs	r3, #0
 800685a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <prvProcessTimerOrBlockTask+0x94>)
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	f7fb fc3e 	bl	80020ea <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800686e:	f7fd fc89 	bl	8004184 <xTaskResumeAll>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <prvProcessTimerOrBlockTask+0x98>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
    }
 8006888:	e001      	b.n	800688e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800688a:	f7fd fc7b 	bl	8004184 <xTaskResumeAll>
    }
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000388 	.word	0x20000388
 800689c:	2000038c 	.word	0x2000038c
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <prvInitialiseNewTimer>:
    {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	617b      	str	r3, [r7, #20]
    }
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <prvInitialiseNewTimer+0x28>
        if( pxNewTimer != NULL )
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01e      	beq.n	8006912 <prvInitialiseNewTimer+0x6e>
            prvCheckForValidListAndQueue();
 80068d4:	f7ff fd4c 	bl	8006370 <prvCheckForValidListAndQueue>
            pxNewTimer->pcTimerName = pcTimerName;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fa f952 	bl	8000b9e <vListInitialiseItem>
            if( uxAutoReload != pdFALSE )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <prvInitialiseNewTimer+0x6e>
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006906:	f043 0304 	orr.w	r3, r3, #4
 800690a:	b2da      	uxtb	r2, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8006912:	bf00      	nop
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	0000      	movs	r0, r0
	...

08006920 <pxPortInitialiseStack>:
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters,
                                     BaseType_t xRunPrivileged )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b04      	subs	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800693a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b04      	subs	r3, #4
 8006940:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f023 0201 	bic.w	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3b04      	subs	r3, #4
 8006950:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = 0;                                                   /* LR */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3b14      	subs	r3, #20
 800695c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 9;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3b24      	subs	r3, #36	; 0x24
 8006968:	60fb      	str	r3, [r7, #12]

    if( xRunPrivileged == pdTRUE )
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d103      	bne.n	8006978 <pxPortInitialiseStack+0x58>
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_PRIVILEGED;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2202      	movs	r2, #2
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e002      	b.n	800697e <pxPortInitialiseStack+0x5e>
    }
    else
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2203      	movs	r2, #3
 800697c:	601a      	str	r2, [r3, #0]
    }

    return pxTopOfStack;
 800697e:	68fb      	ldr	r3, [r7, #12]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop

0800698c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
    configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006992:	4b40      	ldr	r3, [pc, #256]	; (8006a94 <xPortStartScheduler+0x108>)
 8006994:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions
             * to ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <xPortStartScheduler+0x10c>)
 80069b8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069ba:	4b38      	ldr	r3, [pc, #224]	; (8006a9c <xPortStartScheduler+0x110>)
 80069bc:	2207      	movs	r2, #7
 80069be:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c0:	e009      	b.n	80069d6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80069c2:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <xPortStartScheduler+0x110>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a34      	ldr	r2, [pc, #208]	; (8006a9c <xPortStartScheduler+0x110>)
 80069ca:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d0ef      	beq.n	80069c2 <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <xPortStartScheduler+0x110>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1c3 0307 	rsb	r3, r3, #7
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d00a      	beq.n	8006a04 <xPortStartScheduler+0x78>
        __asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	613b      	str	r3, [r7, #16]
    }
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <xPortStartScheduler+0x110>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f1c3 0307 	rsb	r3, r3, #7
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d00a      	beq.n	8006a26 <xPortStartScheduler+0x9a>
        __asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
    }
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xPortStartScheduler+0x98>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <xPortStartScheduler+0x110>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <xPortStartScheduler+0x110>)
 8006a2e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <xPortStartScheduler+0x110>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <xPortStartScheduler+0x110>)
 8006a3a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	701a      	strb	r2, [r3, #0]
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the same priority as the kernel, and the SVC
     * handler higher priority so it can be used to exit a critical section (where
     * lower priorities are masked). */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a44:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <xPortStartScheduler+0x114>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <xPortStartScheduler+0x114>)
 8006a4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a4e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006a50:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <xPortStartScheduler+0x114>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <xPortStartScheduler+0x114>)
 8006a56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a5a:	6013      	str	r3, [r2, #0]

    /* Configure the regions in the MPU that are common to all tasks. */
    prvSetupMPU();
 8006a5c:	f000 f99c 	bl	8006d98 <prvSetupMPU>

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a60:	f005 fb58 	bl	800c114 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <xPortStartScheduler+0x118>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    __asm volatile (
 8006a6a:	4806      	ldr	r0, [pc, #24]	; (8006a84 <xPortStartScheduler+0xf8>)
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	f380 8808 	msr	MSP, r0
 8006a74:	b662      	cpsie	i
 8006a76:	b661      	cpsie	f
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	df00      	svc	0
 8006a82:	bf00      	nop
 8006a84:	e000ed08 	.word	0xe000ed08
        " nop					\n"
        " .ltorg				\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory" );

    /* Should not get here! */
    return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	e000e400 	.word	0xe000e400
 8006a98:	20009c08 	.word	0x20009c08
 8006a9c:	20009c0c 	.word	0x20009c0c
 8006aa0:	e000ed20 	.word	0xe000ed20
 8006aa4:	20008004 	.word	0x20008004

08006aa8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <vPortEndScheduler+0x30>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab6:	d00a      	beq.n	8006ace <vPortEndScheduler+0x26>
        __asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	607b      	str	r3, [r7, #4]
    }
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <vPortEndScheduler+0x24>
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr
 8006ad8:	20008004 	.word	0x20008004

08006adc <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 8006adc:	b590      	push	{r4, r7, lr}
 8006ade:	b08d      	sub	sp, #52	; 0x34
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]

    int32_t lIndex;

    uint32_t ul;

    if( xRegions == NULL )
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d137      	bne.n	8006b60 <vPortStoreTaskMPUSettings+0x84>
    {
        /* No MPU regions are specified so allow access to all RAM including task stack. */
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8006af0:	4b9f      	ldr	r3, [pc, #636]	; (8006d70 <vPortStoreTaskMPUSettings+0x294>)
            ( portMPU_REGION_VALID ) |
 8006af2:	f043 0212 	orr.w	r2, r3, #18
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]
            ( portSTACK_REGION );

        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
            ( portMPU_REGION_READ_WRITE ) |
            ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 8006afa:	4a9e      	ldr	r2, [pc, #632]	; (8006d74 <vPortStoreTaskMPUSettings+0x298>)
 8006afc:	4b9c      	ldr	r3, [pc, #624]	; (8006d70 <vPortStoreTaskMPUSettings+0x294>)
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f9ab 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006b06:	4602      	mov	r2, r0
 8006b08:	4b9b      	ldr	r3, [pc, #620]	; (8006d78 <vPortStoreTaskMPUSettings+0x29c>)
 8006b0a:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	6053      	str	r3, [r2, #4]
            ( portMPU_REGION_ENABLE );

		#if configUSE_DMA_CONTAINER ==1
        /* Give access to the whole  flash memory, the kernel is still protected since it is using a higher MPU region number */
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
            ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8006b10:	4b9a      	ldr	r3, [pc, #616]	; (8006d7c <vPortStoreTaskMPUSettings+0x2a0>)
            ( portMPU_REGION_VALID ) |
 8006b12:	f043 0211 	orr.w	r2, r3, #17
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	609a      	str	r2, [r3, #8]
            ( portUNPRIVILEGED_FLASH_REGION);

        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
        		(portMPU_REGION_READ_ONLY ) |
        		( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
            prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) |
 8006b1a:	4a99      	ldr	r2, [pc, #612]	; (8006d80 <vPortStoreTaskMPUSettings+0x2a4>)
 8006b1c:	4b97      	ldr	r3, [pc, #604]	; (8006d7c <vPortStoreTaskMPUSettings+0x2a0>)
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f99b 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006b26:	4602      	mov	r2, r0
 8006b28:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <vPortStoreTaskMPUSettings+0x2a8>)
 8006b2a:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	60d3      	str	r3, [r2, #12]

		#endif


        /* Invalidate all other regions. */
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006b30:	2302      	movs	r3, #2
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	e010      	b.n	8006b58 <vPortStoreTaskMPUSettings+0x7c>
        {
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	f043 0110 	orr.w	r1, r3, #16
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	3301      	adds	r3, #1
 8006b56:	623b      	str	r3, [r7, #32]
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d9eb      	bls.n	8006b36 <vPortStoreTaskMPUSettings+0x5a>

    	            lIndex++;
    	        }

    }
}
 8006b5e:	e103      	b.n	8006d68 <vPortStoreTaskMPUSettings+0x28c>
    	        if( ulStackDepth > 0 )
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01e      	beq.n	8006ba4 <vPortStoreTaskMPUSettings+0xc8>
    	                ( ( uint32_t ) pxBottomOfStack ) |
 8006b66:	687b      	ldr	r3, [r7, #4]
    	                ( portMPU_REGION_VALID ) |
 8006b68:	f043 0212 	orr.w	r2, r3, #18
    	            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]
    	                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 f971 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006b7a:	4602      	mov	r2, r0
    	                ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	; (8006d78 <vPortStoreTaskMPUSettings+0x29c>)
 8006b7e:	4313      	orrs	r3, r2
    	            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	6053      	str	r3, [r2, #4]
    	                          ( ( uint32_t ) __FLASH_segment_start__ ) |
 8006b84:	4b7d      	ldr	r3, [pc, #500]	; (8006d7c <vPortStoreTaskMPUSettings+0x2a0>)
    	                          ( portMPU_REGION_VALID ) |
 8006b86:	f043 0211 	orr.w	r2, r3, #17
    	            xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	609a      	str	r2, [r3, #8]
    	                          ( prvGetMPURegionSizeSetting((uint32_t ) __FLASH_segment_end__  -  (uint32_t) __FLASH_segment_start__  )) |
 8006b8e:	4a7c      	ldr	r2, [pc, #496]	; (8006d80 <vPortStoreTaskMPUSettings+0x2a4>)
 8006b90:	4b7a      	ldr	r3, [pc, #488]	; (8006d7c <vPortStoreTaskMPUSettings+0x2a0>)
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 f961 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006b9a:	4602      	mov	r2, r0
    	                          ( portMPU_REGION_CACHEABLE_BUFFERABLE ) |
 8006b9c:	4b79      	ldr	r3, [pc, #484]	; (8006d84 <vPortStoreTaskMPUSettings+0x2a8>)
 8006b9e:	4313      	orrs	r3, r2
    	            xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	60d3      	str	r3, [r2, #12]
    	        lIndex = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
    	        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006ba8:	2302      	movs	r3, #2
 8006baa:	623b      	str	r3, [r7, #32]
 8006bac:	e0d8      	b.n	8006d60 <vPortStoreTaskMPUSettings+0x284>
    	            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 8006bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80b9 	beq.w	8006d38 <vPortStoreTaskMPUSettings+0x25c>
    	            	ulValidRegion = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    	            	ulEndRegion2 =  (uint32_t) xRegions[ lIndex ].pvBaseAddress + xRegions[ lIndex ].ulLengthInBytes;
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be0:	4613      	mov	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	440b      	add	r3, r1
 8006bf2:	61fb      	str	r3, [r7, #28]
    	            	if( portDMA_START_ADDRESS  < ulEndRegion2 &&  (uint32_t) ( xRegions[ lIndex ] ).pvBaseAddress <  portDMA_END_ADDRESS )
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4a64      	ldr	r2, [pc, #400]	; (8006d88 <vPortStoreTaskMPUSettings+0x2ac>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	dd0f      	ble.n	8006c1c <vPortStoreTaskMPUSettings+0x140>
 8006bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfe:	4613      	mov	r3, r2
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	461a      	mov	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b5e      	ldr	r3, [pc, #376]	; (8006d8c <vPortStoreTaskMPUSettings+0x2b0>)
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d802      	bhi.n	8006c1c <vPortStoreTaskMPUSettings+0x140>
    	            		ulValidRegion = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	e04a      	b.n	8006cb2 <vPortStoreTaskMPUSettings+0x1d6>
    	            		for (lIndexTask = 0; lIndexTask < ulNumberRestrictedTask ; lIndexTask++ )
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c20:	e042      	b.n	8006ca8 <vPortStoreTaskMPUSettings+0x1cc>
    	            			if( (uint32_t) xSTackRegions[lIndexTask].ulTCB  !=  (uint32_t) xTaskGetCurrentTaskHandle() )
 8006c22:	495b      	ldr	r1, [pc, #364]	; (8006d90 <vPortStoreTaskMPUSettings+0x2b4>)
 8006c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c26:	4613      	mov	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461c      	mov	r4, r3
 8006c34:	f7fe fc6e 	bl	8005514 <xTaskGetCurrentTaskHandle>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d031      	beq.n	8006ca2 <vPortStoreTaskMPUSettings+0x1c6>
    	            				ulEndRegion1 = (uint32_t)xSTackRegions[lIndexTask].ulStackAddress + xSTackRegions[lIndexTask].ulStackSize;
 8006c3e:	4954      	ldr	r1, [pc, #336]	; (8006d90 <vPortStoreTaskMPUSettings+0x2b4>)
 8006c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	494f      	ldr	r1, [pc, #316]	; (8006d90 <vPortStoreTaskMPUSettings+0x2b4>)
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	4613      	mov	r3, r2
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3308      	adds	r3, #8
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4403      	add	r3, r0
 8006c66:	61bb      	str	r3, [r7, #24]
    	            		      	if((uint32_t) xSTackRegions[lIndexTask].ulStackAddress < ulEndRegion2 && (uint32_t) ( xRegions[ lIndex ] ).pvBaseAddress < ulEndRegion1 )
 8006c68:	4949      	ldr	r1, [pc, #292]	; (8006d90 <vPortStoreTaskMPUSettings+0x2b4>)
 8006c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3304      	adds	r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d20f      	bcs.n	8006ca2 <vPortStoreTaskMPUSettings+0x1c6>
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d202      	bcs.n	8006ca2 <vPortStoreTaskMPUSettings+0x1c6>
    	            		            ulValidRegion = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    	            		            break;
 8006ca0:	e007      	b.n	8006cb2 <vPortStoreTaskMPUSettings+0x1d6>
    	            		for (lIndexTask = 0; lIndexTask < ulNumberRestrictedTask ; lIndexTask++ )
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006caa:	4b3a      	ldr	r3, [pc, #232]	; (8006d94 <vPortStoreTaskMPUSettings+0x2b8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3b7      	bcc.n	8006c22 <vPortStoreTaskMPUSettings+0x146>
    	            	if (ulValidRegion)
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d031      	beq.n	8006d1c <vPortStoreTaskMPUSettings+0x240>
    							( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) |
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
    							( portSTACK_REGION + ul ); /* Region number. */
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	3302      	adds	r3, #2
    							( portMPU_REGION_VALID ) |
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f043 0110 	orr.w	r1, r3, #16
    						xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    							( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8006cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f8b3 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006cf6:	4601      	mov	r1, r0
    							( xRegions[ lIndex ].ulParameters ) |
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4413      	add	r3, r2
 8006d08:	689b      	ldr	r3, [r3, #8]
    							( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8006d0a:	430b      	orrs	r3, r1
    							( xRegions[ lIndex ].ulParameters ) |
 8006d0c:	f043 0201 	orr.w	r2, r3, #1
    						xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	440b      	add	r3, r1
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e01b      	b.n	8006d54 <vPortStoreTaskMPUSettings+0x278>
    	            		configASSERT(ulValidRegion);
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d118      	bne.n	8006d54 <vPortStoreTaskMPUSettings+0x278>
        __asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	617b      	str	r3, [r7, #20]
    }
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vPortStoreTaskMPUSettings+0x25a>
    	                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	3302      	adds	r3, #2
 8006d3c:	f043 0110 	orr.w	r1, r3, #16
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    	                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4413      	add	r3, r2
 8006d50:	2200      	movs	r2, #0
 8006d52:	605a      	str	r2, [r3, #4]
    	            lIndex++;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	3301      	adds	r3, #1
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
    	        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	f67f af23 	bls.w	8006bae <vPortStoreTaskMPUSettings+0xd2>
}
 8006d68:	bf00      	nop
 8006d6a:	3734      	adds	r7, #52	; 0x34
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}
 8006d70:	20000000 	.word	0x20000000
 8006d74:	20010000 	.word	0x20010000
 8006d78:	03070001 	.word	0x03070001
 8006d7c:	08000000 	.word	0x08000000
 8006d80:	08080000 	.word	0x08080000
 8006d84:	06070001 	.word	0x06070001
 8006d88:	40026000 	.word	0x40026000
 8006d8c:	400267fe 	.word	0x400267fe
 8006d90:	20000198 	.word	0x20000198
 8006d94:	200001f8 	.word	0x200001f8

08006d98 <prvSetupMPU>:
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 8006d9c:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <prvSetupMPU+0x90>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da4:	d13d      	bne.n	8006e22 <prvSetupMPU+0x8a>
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __syscalls_flash_start__ ) | /* Base address. */
 8006da6:	4b21      	ldr	r3, [pc, #132]	; (8006e2c <prvSetupMPU+0x94>)
 8006da8:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <prvSetupMPU+0x98>)
                                            ( portMPU_REGION_VALID ) |
 8006daa:	f043 0310 	orr.w	r3, r3, #16
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __syscalls_flash_start__ ) | /* Base address. */
 8006dae:	6013      	str	r3, [r2, #0]
                                         ( prvGetMPURegionSizeSetting( ( uint32_t ) __syscalls_flash_end__ - ( uint32_t ) __syscalls_flash_start__ ) ) |
 8006db0:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <prvSetupMPU+0x9c>)
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <prvSetupMPU+0x94>)
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f850 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006dbc:	4602      	mov	r2, r0
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 8006dbe:	491e      	ldr	r1, [pc, #120]	; (8006e38 <prvSetupMPU+0xa0>)
                                         ( prvGetMPURegionSizeSetting( ( uint32_t ) __syscalls_flash_end__ - ( uint32_t ) __syscalls_flash_start__ ) ) |
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <prvSetupMPU+0xa4>)
 8006dc2:	4313      	orrs	r3, r2
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 8006dc4:	600b      	str	r3, [r1, #0]
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 8006dc6:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <prvSetupMPU+0xa8>)
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <prvSetupMPU+0x98>)
                                            ( portMPU_REGION_VALID ) |
 8006dca:	f043 0316 	orr.w	r3, r3, #22
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 8006dce:	6013      	str	r3, [r2, #0]
                                         ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <prvSetupMPU+0xac>)
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <prvSetupMPU+0xa8>)
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f840 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006ddc:	4602      	mov	r2, r0
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 8006dde:	4916      	ldr	r1, [pc, #88]	; (8006e38 <prvSetupMPU+0xa0>)
                                         ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <prvSetupMPU+0xb0>)
 8006de2:	4313      	orrs	r3, r2
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 8006de4:	600b      	str	r3, [r1, #0]
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 8006de6:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <prvSetupMPU+0xb4>)
 8006de8:	4a11      	ldr	r2, [pc, #68]	; (8006e30 <prvSetupMPU+0x98>)
                                            ( portMPU_REGION_VALID ) |
 8006dea:	f043 0317 	orr.w	r3, r3, #23
          portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 8006dee:	6013      	str	r3, [r2, #0]
                                         prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8006df0:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <prvSetupMPU+0xb8>)
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <prvSetupMPU+0xb4>)
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f830 	bl	8006e5c <prvGetMPURegionSizeSetting>
 8006dfc:	4603      	mov	r3, r0
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <prvSetupMPU+0xa0>)
                                         prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8006e00:	f043 7383 	orr.w	r3, r3, #17170432	; 0x1060000
 8006e04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
          portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 8006e08:	6013      	str	r3, [r2, #0]
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <prvSetupMPU+0xbc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a11      	ldr	r2, [pc, #68]	; (8006e54 <prvSetupMPU+0xbc>)
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e14:	6013      	str	r3, [r2, #0]
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <prvSetupMPU+0xc0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <prvSetupMPU+0xc0>)
 8006e1c:	f043 0305 	orr.w	r3, r3, #5
 8006e20:	6013      	str	r3, [r2, #0]
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	e000ed90 	.word	0xe000ed90
 8006e2c:	08008000 	.word	0x08008000
 8006e30:	e000ed9c 	.word	0xe000ed9c
 8006e34:	08009000 	.word	0x08009000
 8006e38:	e000eda0 	.word	0xe000eda0
 8006e3c:	06070001 	.word	0x06070001
 8006e40:	08000000 	.word	0x08000000
 8006e44:	08008000 	.word	0x08008000
 8006e48:	05070001 	.word	0x05070001
 8006e4c:	20000000 	.word	0x20000000
 8006e50:	20008000 	.word	0x20008000
 8006e54:	e000ed24 	.word	0xe000ed24
 8006e58:	e000ed94 	.word	0xe000ed94

08006e5c <prvGetMPURegionSizeSetting>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
    uint32_t ulRegionSize, ulReturnValue = 4;
 8006e64:	2304      	movs	r3, #4
 8006e66:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8006e68:	2320      	movs	r3, #32
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e009      	b.n	8006e82 <prvGetMPURegionSizeSetting+0x26>
        if( ulActualSizeInBytes <= ulRegionSize )
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d909      	bls.n	8006e8a <prvGetMPURegionSizeSetting+0x2e>
            ulReturnValue++;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b1e      	cmp	r3, #30
 8006e86:	d9f2      	bls.n	8006e6e <prvGetMPURegionSizeSetting+0x12>
 8006e88:	e000      	b.n	8006e8c <prvGetMPURegionSizeSetting+0x30>
            break;
 8006e8a:	bf00      	nop
    return( ulReturnValue << 1UL );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	005b      	lsls	r3, r3, #1
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <PendSV_Handler>:
    __asm volatile
 8006e9c:	f3ef 8009 	mrs	r0, PSP
 8006ea0:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <pxCurrentTCBConst>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f3ef 8114 	mrs	r1, CONTROL
 8006ea8:	e920 0ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp}
 8006eac:	6010      	str	r0, [r2, #0]
 8006eae:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006eb2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f7fe fa73 	bl	80053ac <vTaskSwitchContext>
 8006ec6:	f04f 0000 	mov.w	r0, #0
 8006eca:	f380 8811 	msr	BASEPRI, r0
 8006ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	f101 0104 	add.w	r1, r1, #4
 8006eda:	f3bf 8f5f 	dmb	sy
 8006ede:	4a5d      	ldr	r2, [pc, #372]	; (8007054 <prvSVCHandler+0x8c>)
 8006ee0:	6813      	ldr	r3, [r2, #0]
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	4a5b      	ldr	r2, [pc, #364]	; (8007058 <prvSVCHandler+0x90>)
 8006eea:	c930      	ldmia	r1!, {r4, r5}
 8006eec:	c230      	stmia	r2!, {r4, r5}
 8006eee:	4a5a      	ldr	r2, [pc, #360]	; (8007058 <prvSVCHandler+0x90>)
 8006ef0:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ef4:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ef8:	4a56      	ldr	r2, [pc, #344]	; (8007054 <prvSVCHandler+0x8c>)
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	e8b0 0ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8006f0a:	f383 8814 	msr	CONTROL, r3
 8006f0e:	f380 8809 	msr	PSP, r0
 8006f12:	4770      	bx	lr
 8006f14:	f3af 8000 	nop.w
 8006f18:	f3af 8000 	nop.w
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst>:
 8006f20:	20000250 	.word	0x20000250
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <SysTick_Handler>:
{
 8006f28:	b510      	push	{r4, lr}
        __asm volatile
 8006f2a:	f3ef 8411 	mrs	r4, BASEPRI
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 8006f3e:	f7fe f82d 	bl	8004f9c <xTaskIncrementTick>
 8006f42:	b118      	cbz	r0, 8006f4c <SysTick_Handler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <SysTick_Handler+0x2c>)
 8006f4a:	601a      	str	r2, [r3, #0]
        __asm volatile
 8006f4c:	f384 8811 	msr	BASEPRI, r4
}
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	e000ed04 	.word	0xe000ed04

08006f58 <SVC_Handler>:
    __asm volatile
 8006f58:	f01e 0f04 	tst.w	lr, #4
 8006f5c:	bf0c      	ite	eq
 8006f5e:	f3ef 8008 	mrseq	r0, MSP
 8006f62:	f3ef 8009 	mrsne	r0, PSP
 8006f66:	e02f      	b.n	8006fc8 <prvSVCHandler>
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop

08006f6c <prvRestoreContextOfFirstTask>:
    __asm volatile
 8006f6c:	483b      	ldr	r0, [pc, #236]	; (800705c <prvSVCHandler+0x94>)
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	6800      	ldr	r0, [r0, #0]
 8006f72:	f380 8808 	msr	MSP, r0
 8006f76:	4b12      	ldr	r3, [pc, #72]	; (8006fc0 <pxCurrentTCBConst2>)
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	6808      	ldr	r0, [r1, #0]
 8006f7c:	f101 0104 	add.w	r1, r1, #4
 8006f80:	f3bf 8f5f 	dmb	sy
 8006f84:	4a33      	ldr	r2, [pc, #204]	; (8007054 <prvSVCHandler+0x8c>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4a32      	ldr	r2, [pc, #200]	; (8007058 <prvSVCHandler+0x90>)
 8006f90:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f94:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f98:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <prvSVCHandler+0x8c>)
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	e8b0 0ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8006faa:	f383 8814 	msr	CONTROL, r3
 8006fae:	f380 8809 	msr	PSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	f06f 0e02 	mvn.w	lr, #2
 8006fbe:	4770      	bx	lr

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	20000250 	.word	0x20000250
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <prvSVCHandler>:
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
    ulPC = pulParam[ portOFFSET_TO_PC ];
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b02      	subs	r3, #2
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d018      	beq.n	8007016 <prvSVCHandler+0x4e>
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	dc25      	bgt.n	8007034 <prvSVCHandler+0x6c>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <prvSVCHandler+0x2a>
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d009      	beq.n	8007004 <prvSVCHandler+0x3c>
                    break;
 8006ff0:	e020      	b.n	8007034 <prvSVCHandler+0x6c>
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <prvSVCHandler+0x7c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	; (8007044 <prvSVCHandler+0x7c>)
 8006ff8:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 8006ffc:	6013      	str	r3, [r2, #0]
            prvRestoreContextOfFirstTask();
 8006ffe:	f7ff ffb5 	bl	8006f6c <prvRestoreContextOfFirstTask>
            break;
 8007002:	e01a      	b.n	800703a <prvSVCHandler+0x72>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <prvSVCHandler+0x80>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
            __asm volatile ( "dsb" ::: "memory" );
 800700c:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8007010:	f3bf 8f6f 	isb	sy
            break;
 8007014:	e011      	b.n	800703a <prvSVCHandler+0x72>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8007016:	4a0d      	ldr	r2, [pc, #52]	; (800704c <prvSVCHandler+0x84>)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4293      	cmp	r3, r2
 800701c:	d30c      	bcc.n	8007038 <prvSVCHandler+0x70>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 800701e:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <prvSVCHandler+0x88>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4293      	cmp	r3, r2
 8007024:	d808      	bhi.n	8007038 <prvSVCHandler+0x70>
                    	__asm volatile
 8007026:	f3ef 8114 	mrs	r1, CONTROL
 800702a:	f021 0101 	bic.w	r1, r1, #1
 800702e:	f381 8814 	msr	CONTROL, r1
                    break;
 8007032:	e001      	b.n	8007038 <prvSVCHandler+0x70>
                    break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <prvSVCHandler+0x72>
                    break;
 8007038:	bf00      	nop
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	e000ed1c 	.word	0xe000ed1c
 8007048:	e000ed04 	.word	0xe000ed04
 800704c:	08008000 	.word	0x08008000
 8007050:	08009000 	.word	0x08009000
 8007054:	e000ed94 	.word	0xe000ed94
 8007058:	e000ed9c 	.word	0xe000ed9c
 800705c:	e000ed08 	.word	0xe000ed08

08007060 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800706c:	f7fd f87c 	bl	8004168 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007070:	4b5d      	ldr	r3, [pc, #372]	; (80071e8 <pvPortMalloc+0x188>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007078:	f000 f996 	bl	80073a8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800707c:	4b5b      	ldr	r3, [pc, #364]	; (80071ec <pvPortMalloc+0x18c>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 8093 	bne.w	80071b0 <pvPortMalloc+0x150>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01d      	beq.n	80070cc <pvPortMalloc+0x6c>
            {
                xWantedSize += xHeapStructSize;
 8007090:	2208      	movs	r2, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d014      	beq.n	80070cc <pvPortMalloc+0x6c>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	3308      	adds	r3, #8
 80070aa:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <pvPortMalloc+0x6c>
        __asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	617b      	str	r3, [r7, #20]
    }
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d06e      	beq.n	80071b0 <pvPortMalloc+0x150>
 80070d2:	4b47      	ldr	r3, [pc, #284]	; (80071f0 <pvPortMalloc+0x190>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d869      	bhi.n	80071b0 <pvPortMalloc+0x150>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80070dc:	4b45      	ldr	r3, [pc, #276]	; (80071f4 <pvPortMalloc+0x194>)
 80070de:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80070e0:	4b44      	ldr	r3, [pc, #272]	; (80071f4 <pvPortMalloc+0x194>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070e6:	e004      	b.n	80070f2 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d903      	bls.n	8007104 <pvPortMalloc+0xa4>
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f1      	bne.n	80070e8 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8007104:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <pvPortMalloc+0x188>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	429a      	cmp	r2, r3
 800710c:	d050      	beq.n	80071b0 <pvPortMalloc+0x150>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2208      	movs	r2, #8
 8007114:	4413      	add	r3, r2
 8007116:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	1ad2      	subs	r2, r2, r3
 8007128:	2308      	movs	r3, #8
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	429a      	cmp	r2, r3
 800712e:	d91f      	bls.n	8007170 <pvPortMalloc+0x110>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4413      	add	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <pvPortMalloc+0xf8>
        __asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	613b      	str	r3, [r7, #16]
    }
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <pvPortMalloc+0xf6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800716a:	69b8      	ldr	r0, [r7, #24]
 800716c:	f000 f8c4 	bl	80072f8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007170:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <pvPortMalloc+0x190>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <pvPortMalloc+0x190>)
 800717c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800717e:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <pvPortMalloc+0x190>)
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <pvPortMalloc+0x198>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d203      	bcs.n	8007192 <pvPortMalloc+0x132>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800718a:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <pvPortMalloc+0x190>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <pvPortMalloc+0x198>)
 8007190:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4b15      	ldr	r3, [pc, #84]	; (80071ec <pvPortMalloc+0x18c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	431a      	orrs	r2, r3
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <pvPortMalloc+0x19c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <pvPortMalloc+0x19c>)
 80071ae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80071b0:	f7fc ffe8 	bl	8004184 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <pvPortMalloc+0x15e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 80071ba:	f002 fd70 	bl	8009c9e <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <pvPortMalloc+0x17e>
        __asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
    }
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <pvPortMalloc+0x17c>
    return pvReturn;
 80071de:	69fb      	ldr	r3, [r7, #28]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20004428 	.word	0x20004428
 80071ec:	2000443c 	.word	0x2000443c
 80071f0:	2000442c 	.word	0x2000442c
 80071f4:	20004420 	.word	0x20004420
 80071f8:	20004430 	.word	0x20004430
 80071fc:	20004434 	.word	0x20004434

08007200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04d      	beq.n	80072ae <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007212:	2308      	movs	r3, #8
 8007214:	425b      	negs	r3, r3
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <vPortFree+0xb8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <vPortFree+0x44>
        __asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	60fb      	str	r3, [r7, #12]
    }
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <vPortFree+0x62>
        __asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60bb      	str	r3, [r7, #8]
    }
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <vPortFree+0xb8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11a      	bne.n	80072ae <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <vPortFree+0xb8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	43db      	mvns	r3, r3
 8007282:	401a      	ands	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007288:	f7fc ff6e 	bl	8004168 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <vPortFree+0xbc>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4413      	add	r3, r2
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <vPortFree+0xbc>)
 8007298:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800729a:	6938      	ldr	r0, [r7, #16]
 800729c:	f000 f82c 	bl	80072f8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <vPortFree+0xc0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a06      	ldr	r2, [pc, #24]	; (80072c0 <vPortFree+0xc0>)
 80072a8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80072aa:	f7fc ff6b 	bl	8004184 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	2000443c 	.word	0x2000443c
 80072bc:	2000442c 	.word	0x2000442c
 80072c0:	20004438 	.word	0x20004438

080072c4 <vPortInitialiseBlocks>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
    /* This just exists to keep the linker quiet. */
}
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <xPortGetFreeHeapSize>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <xPortGetFreeHeapSize+0x10>)
 80072d6:	681b      	ldr	r3, [r3, #0]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr
 80072e0:	2000442c 	.word	0x2000442c

080072e4 <xPortGetMinimumEverFreeHeapSize>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <xPortGetMinimumEverFreeHeapSize+0x10>)
 80072ea:	681b      	ldr	r3, [r3, #0]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	20004430 	.word	0x20004430

080072f8 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007300:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <prvInsertBlockIntoFreeList+0xa8>)
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e002      	b.n	800730c <prvInsertBlockIntoFreeList+0x14>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d8f7      	bhi.n	8007306 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d108      	bne.n	800733a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d118      	bne.n	8007380 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <prvInsertBlockIntoFreeList+0xac>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d00d      	beq.n	8007376 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	441a      	add	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e008      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <prvInsertBlockIntoFreeList+0xac>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e003      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d002      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr
 80073a0:	20004420 	.word	0x20004420
 80073a4:	20004428 	.word	0x20004428

080073a8 <prvHeapInit>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b2:	60bb      	str	r3, [r7, #8]
    uxAddress = ( size_t ) ucHeap;
 80073b4:	4b27      	ldr	r3, [pc, #156]	; (8007454 <prvHeapInit+0xac>)
 80073b6:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00c      	beq.n	80073dc <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3307      	adds	r3, #7
 80073c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <prvHeapInit+0xac>)
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073e0:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <prvHeapInit+0xb0>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <prvHeapInit+0xb0>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80073f4:	2208      	movs	r2, #8
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0307 	bic.w	r3, r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4a15      	ldr	r2, [pc, #84]	; (800745c <prvHeapInit+0xb4>)
 8007408:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800740a:	4b14      	ldr	r3, [pc, #80]	; (800745c <prvHeapInit+0xb4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007412:	4b12      	ldr	r3, [pc, #72]	; (800745c <prvHeapInit+0xb4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	1ad2      	subs	r2, r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <prvHeapInit+0xb4>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <prvHeapInit+0xb8>)
 8007436:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4a09      	ldr	r2, [pc, #36]	; (8007464 <prvHeapInit+0xbc>)
 800743e:	6013      	str	r3, [r2, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <prvHeapInit+0xc0>)
 8007442:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007446:	601a      	str	r2, [r3, #0]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000420 	.word	0x20000420
 8007458:	20004420 	.word	0x20004420
 800745c:	20004428 	.word	0x20004428
 8007460:	20004430 	.word	0x20004430
 8007464:	2000442c 	.word	0x2000442c
 8007468:	2000443c 	.word	0x2000443c
 800746c:	addeadde 	.word	0xaddeadde
 8007470:	addeadde 	.word	0xaddeadde
 8007474:	addeadde 	.word	0xaddeadde
 8007478:	addeadde 	.word	0xaddeadde
 800747c:	addeadde 	.word	0xaddeadde
 8007480:	addeadde 	.word	0xaddeadde
 8007484:	addeadde 	.word	0xaddeadde
 8007488:	addeadde 	.word	0xaddeadde
 800748c:	addeadde 	.word	0xaddeadde
 8007490:	addeadde 	.word	0xaddeadde
 8007494:	addeadde 	.word	0xaddeadde
 8007498:	addeadde 	.word	0xaddeadde
 800749c:	addeadde 	.word	0xaddeadde
 80074a0:	addeadde 	.word	0xaddeadde
 80074a4:	addeadde 	.word	0xaddeadde
 80074a8:	addeadde 	.word	0xaddeadde
 80074ac:	addeadde 	.word	0xaddeadde
 80074b0:	addeadde 	.word	0xaddeadde
 80074b4:	addeadde 	.word	0xaddeadde
 80074b8:	addeadde 	.word	0xaddeadde
 80074bc:	addeadde 	.word	0xaddeadde
 80074c0:	addeadde 	.word	0xaddeadde
 80074c4:	addeadde 	.word	0xaddeadde
 80074c8:	addeadde 	.word	0xaddeadde
 80074cc:	addeadde 	.word	0xaddeadde
 80074d0:	addeadde 	.word	0xaddeadde
 80074d4:	addeadde 	.word	0xaddeadde
 80074d8:	addeadde 	.word	0xaddeadde
 80074dc:	addeadde 	.word	0xaddeadde
 80074e0:	addeadde 	.word	0xaddeadde
 80074e4:	addeadde 	.word	0xaddeadde
 80074e8:	addeadde 	.word	0xaddeadde
 80074ec:	addeadde 	.word	0xaddeadde
 80074f0:	addeadde 	.word	0xaddeadde
 80074f4:	addeadde 	.word	0xaddeadde
 80074f8:	addeadde 	.word	0xaddeadde
 80074fc:	addeadde 	.word	0xaddeadde
 8007500:	addeadde 	.word	0xaddeadde
 8007504:	addeadde 	.word	0xaddeadde
 8007508:	addeadde 	.word	0xaddeadde
 800750c:	addeadde 	.word	0xaddeadde
 8007510:	addeadde 	.word	0xaddeadde
 8007514:	addeadde 	.word	0xaddeadde
 8007518:	addeadde 	.word	0xaddeadde
 800751c:	addeadde 	.word	0xaddeadde
 8007520:	addeadde 	.word	0xaddeadde
 8007524:	addeadde 	.word	0xaddeadde
 8007528:	addeadde 	.word	0xaddeadde
 800752c:	addeadde 	.word	0xaddeadde
 8007530:	addeadde 	.word	0xaddeadde
 8007534:	addeadde 	.word	0xaddeadde
 8007538:	addeadde 	.word	0xaddeadde
 800753c:	addeadde 	.word	0xaddeadde
 8007540:	addeadde 	.word	0xaddeadde
 8007544:	addeadde 	.word	0xaddeadde
 8007548:	addeadde 	.word	0xaddeadde
 800754c:	addeadde 	.word	0xaddeadde
 8007550:	addeadde 	.word	0xaddeadde
 8007554:	addeadde 	.word	0xaddeadde
 8007558:	addeadde 	.word	0xaddeadde
 800755c:	addeadde 	.word	0xaddeadde
 8007560:	addeadde 	.word	0xaddeadde
 8007564:	addeadde 	.word	0xaddeadde
 8007568:	addeadde 	.word	0xaddeadde
 800756c:	addeadde 	.word	0xaddeadde
 8007570:	addeadde 	.word	0xaddeadde
 8007574:	addeadde 	.word	0xaddeadde
 8007578:	addeadde 	.word	0xaddeadde
 800757c:	addeadde 	.word	0xaddeadde
 8007580:	addeadde 	.word	0xaddeadde
 8007584:	addeadde 	.word	0xaddeadde
 8007588:	addeadde 	.word	0xaddeadde
 800758c:	addeadde 	.word	0xaddeadde
 8007590:	addeadde 	.word	0xaddeadde
 8007594:	addeadde 	.word	0xaddeadde
 8007598:	addeadde 	.word	0xaddeadde
 800759c:	addeadde 	.word	0xaddeadde
 80075a0:	addeadde 	.word	0xaddeadde
 80075a4:	addeadde 	.word	0xaddeadde
 80075a8:	addeadde 	.word	0xaddeadde
 80075ac:	addeadde 	.word	0xaddeadde
 80075b0:	addeadde 	.word	0xaddeadde
 80075b4:	addeadde 	.word	0xaddeadde
 80075b8:	addeadde 	.word	0xaddeadde
 80075bc:	addeadde 	.word	0xaddeadde
 80075c0:	addeadde 	.word	0xaddeadde
 80075c4:	addeadde 	.word	0xaddeadde
 80075c8:	addeadde 	.word	0xaddeadde
 80075cc:	addeadde 	.word	0xaddeadde
 80075d0:	addeadde 	.word	0xaddeadde
 80075d4:	addeadde 	.word	0xaddeadde
 80075d8:	addeadde 	.word	0xaddeadde
 80075dc:	addeadde 	.word	0xaddeadde
 80075e0:	addeadde 	.word	0xaddeadde
 80075e4:	addeadde 	.word	0xaddeadde
 80075e8:	addeadde 	.word	0xaddeadde
 80075ec:	addeadde 	.word	0xaddeadde
 80075f0:	addeadde 	.word	0xaddeadde
 80075f4:	addeadde 	.word	0xaddeadde
 80075f8:	addeadde 	.word	0xaddeadde
 80075fc:	addeadde 	.word	0xaddeadde
 8007600:	addeadde 	.word	0xaddeadde
 8007604:	addeadde 	.word	0xaddeadde
 8007608:	addeadde 	.word	0xaddeadde
 800760c:	addeadde 	.word	0xaddeadde
 8007610:	addeadde 	.word	0xaddeadde
 8007614:	addeadde 	.word	0xaddeadde
 8007618:	addeadde 	.word	0xaddeadde
 800761c:	addeadde 	.word	0xaddeadde
 8007620:	addeadde 	.word	0xaddeadde
 8007624:	addeadde 	.word	0xaddeadde
 8007628:	addeadde 	.word	0xaddeadde
 800762c:	addeadde 	.word	0xaddeadde
 8007630:	addeadde 	.word	0xaddeadde
 8007634:	addeadde 	.word	0xaddeadde
 8007638:	addeadde 	.word	0xaddeadde
 800763c:	addeadde 	.word	0xaddeadde
 8007640:	addeadde 	.word	0xaddeadde
 8007644:	addeadde 	.word	0xaddeadde
 8007648:	addeadde 	.word	0xaddeadde
 800764c:	addeadde 	.word	0xaddeadde
 8007650:	addeadde 	.word	0xaddeadde
 8007654:	addeadde 	.word	0xaddeadde
 8007658:	addeadde 	.word	0xaddeadde
 800765c:	addeadde 	.word	0xaddeadde
 8007660:	addeadde 	.word	0xaddeadde
 8007664:	addeadde 	.word	0xaddeadde
 8007668:	addeadde 	.word	0xaddeadde
 800766c:	addeadde 	.word	0xaddeadde
 8007670:	addeadde 	.word	0xaddeadde
 8007674:	addeadde 	.word	0xaddeadde
 8007678:	addeadde 	.word	0xaddeadde
 800767c:	addeadde 	.word	0xaddeadde
 8007680:	addeadde 	.word	0xaddeadde
 8007684:	addeadde 	.word	0xaddeadde
 8007688:	addeadde 	.word	0xaddeadde
 800768c:	addeadde 	.word	0xaddeadde
 8007690:	addeadde 	.word	0xaddeadde
 8007694:	addeadde 	.word	0xaddeadde
 8007698:	addeadde 	.word	0xaddeadde
 800769c:	addeadde 	.word	0xaddeadde
 80076a0:	addeadde 	.word	0xaddeadde
 80076a4:	addeadde 	.word	0xaddeadde
 80076a8:	addeadde 	.word	0xaddeadde
 80076ac:	addeadde 	.word	0xaddeadde
 80076b0:	addeadde 	.word	0xaddeadde
 80076b4:	addeadde 	.word	0xaddeadde
 80076b8:	addeadde 	.word	0xaddeadde
 80076bc:	addeadde 	.word	0xaddeadde
 80076c0:	addeadde 	.word	0xaddeadde
 80076c4:	addeadde 	.word	0xaddeadde
 80076c8:	addeadde 	.word	0xaddeadde
 80076cc:	addeadde 	.word	0xaddeadde
 80076d0:	addeadde 	.word	0xaddeadde
 80076d4:	addeadde 	.word	0xaddeadde
 80076d8:	addeadde 	.word	0xaddeadde
 80076dc:	addeadde 	.word	0xaddeadde
 80076e0:	addeadde 	.word	0xaddeadde
 80076e4:	addeadde 	.word	0xaddeadde
 80076e8:	addeadde 	.word	0xaddeadde
 80076ec:	addeadde 	.word	0xaddeadde
 80076f0:	addeadde 	.word	0xaddeadde
 80076f4:	addeadde 	.word	0xaddeadde
 80076f8:	addeadde 	.word	0xaddeadde
 80076fc:	addeadde 	.word	0xaddeadde
 8007700:	addeadde 	.word	0xaddeadde
 8007704:	addeadde 	.word	0xaddeadde
 8007708:	addeadde 	.word	0xaddeadde
 800770c:	addeadde 	.word	0xaddeadde
 8007710:	addeadde 	.word	0xaddeadde
 8007714:	addeadde 	.word	0xaddeadde
 8007718:	addeadde 	.word	0xaddeadde
 800771c:	addeadde 	.word	0xaddeadde
 8007720:	addeadde 	.word	0xaddeadde
 8007724:	addeadde 	.word	0xaddeadde
 8007728:	addeadde 	.word	0xaddeadde
 800772c:	addeadde 	.word	0xaddeadde
 8007730:	addeadde 	.word	0xaddeadde
 8007734:	addeadde 	.word	0xaddeadde
 8007738:	addeadde 	.word	0xaddeadde
 800773c:	addeadde 	.word	0xaddeadde
 8007740:	addeadde 	.word	0xaddeadde
 8007744:	addeadde 	.word	0xaddeadde
 8007748:	addeadde 	.word	0xaddeadde
 800774c:	addeadde 	.word	0xaddeadde
 8007750:	addeadde 	.word	0xaddeadde
 8007754:	addeadde 	.word	0xaddeadde
 8007758:	addeadde 	.word	0xaddeadde
 800775c:	addeadde 	.word	0xaddeadde
 8007760:	addeadde 	.word	0xaddeadde
 8007764:	addeadde 	.word	0xaddeadde
 8007768:	addeadde 	.word	0xaddeadde
 800776c:	addeadde 	.word	0xaddeadde
 8007770:	addeadde 	.word	0xaddeadde
 8007774:	addeadde 	.word	0xaddeadde
 8007778:	addeadde 	.word	0xaddeadde
 800777c:	addeadde 	.word	0xaddeadde
 8007780:	addeadde 	.word	0xaddeadde
 8007784:	addeadde 	.word	0xaddeadde
 8007788:	addeadde 	.word	0xaddeadde
 800778c:	addeadde 	.word	0xaddeadde
 8007790:	addeadde 	.word	0xaddeadde
 8007794:	addeadde 	.word	0xaddeadde
 8007798:	addeadde 	.word	0xaddeadde
 800779c:	addeadde 	.word	0xaddeadde
 80077a0:	addeadde 	.word	0xaddeadde
 80077a4:	addeadde 	.word	0xaddeadde
 80077a8:	addeadde 	.word	0xaddeadde
 80077ac:	addeadde 	.word	0xaddeadde
 80077b0:	addeadde 	.word	0xaddeadde
 80077b4:	addeadde 	.word	0xaddeadde
 80077b8:	addeadde 	.word	0xaddeadde
 80077bc:	addeadde 	.word	0xaddeadde
 80077c0:	addeadde 	.word	0xaddeadde
 80077c4:	addeadde 	.word	0xaddeadde
 80077c8:	addeadde 	.word	0xaddeadde
 80077cc:	addeadde 	.word	0xaddeadde
 80077d0:	addeadde 	.word	0xaddeadde
 80077d4:	addeadde 	.word	0xaddeadde
 80077d8:	addeadde 	.word	0xaddeadde
 80077dc:	addeadde 	.word	0xaddeadde
 80077e0:	addeadde 	.word	0xaddeadde
 80077e4:	addeadde 	.word	0xaddeadde
 80077e8:	addeadde 	.word	0xaddeadde
 80077ec:	addeadde 	.word	0xaddeadde
 80077f0:	addeadde 	.word	0xaddeadde
 80077f4:	addeadde 	.word	0xaddeadde
 80077f8:	addeadde 	.word	0xaddeadde
 80077fc:	addeadde 	.word	0xaddeadde
 8007800:	addeadde 	.word	0xaddeadde
 8007804:	addeadde 	.word	0xaddeadde
 8007808:	addeadde 	.word	0xaddeadde
 800780c:	addeadde 	.word	0xaddeadde
 8007810:	addeadde 	.word	0xaddeadde
 8007814:	addeadde 	.word	0xaddeadde
 8007818:	addeadde 	.word	0xaddeadde
 800781c:	addeadde 	.word	0xaddeadde
 8007820:	addeadde 	.word	0xaddeadde
 8007824:	addeadde 	.word	0xaddeadde
 8007828:	addeadde 	.word	0xaddeadde
 800782c:	addeadde 	.word	0xaddeadde
 8007830:	addeadde 	.word	0xaddeadde
 8007834:	addeadde 	.word	0xaddeadde
 8007838:	addeadde 	.word	0xaddeadde
 800783c:	addeadde 	.word	0xaddeadde
 8007840:	addeadde 	.word	0xaddeadde
 8007844:	addeadde 	.word	0xaddeadde
 8007848:	addeadde 	.word	0xaddeadde
 800784c:	addeadde 	.word	0xaddeadde
 8007850:	addeadde 	.word	0xaddeadde
 8007854:	addeadde 	.word	0xaddeadde
 8007858:	addeadde 	.word	0xaddeadde
 800785c:	addeadde 	.word	0xaddeadde
 8007860:	addeadde 	.word	0xaddeadde
 8007864:	addeadde 	.word	0xaddeadde
 8007868:	addeadde 	.word	0xaddeadde
 800786c:	addeadde 	.word	0xaddeadde
 8007870:	addeadde 	.word	0xaddeadde
 8007874:	addeadde 	.word	0xaddeadde
 8007878:	addeadde 	.word	0xaddeadde
 800787c:	addeadde 	.word	0xaddeadde
 8007880:	addeadde 	.word	0xaddeadde
 8007884:	addeadde 	.word	0xaddeadde
 8007888:	addeadde 	.word	0xaddeadde
 800788c:	addeadde 	.word	0xaddeadde
 8007890:	addeadde 	.word	0xaddeadde
 8007894:	addeadde 	.word	0xaddeadde
 8007898:	addeadde 	.word	0xaddeadde
 800789c:	addeadde 	.word	0xaddeadde
 80078a0:	addeadde 	.word	0xaddeadde
 80078a4:	addeadde 	.word	0xaddeadde
 80078a8:	addeadde 	.word	0xaddeadde
 80078ac:	addeadde 	.word	0xaddeadde
 80078b0:	addeadde 	.word	0xaddeadde
 80078b4:	addeadde 	.word	0xaddeadde
 80078b8:	addeadde 	.word	0xaddeadde
 80078bc:	addeadde 	.word	0xaddeadde
 80078c0:	addeadde 	.word	0xaddeadde
 80078c4:	addeadde 	.word	0xaddeadde
 80078c8:	addeadde 	.word	0xaddeadde
 80078cc:	addeadde 	.word	0xaddeadde
 80078d0:	addeadde 	.word	0xaddeadde
 80078d4:	addeadde 	.word	0xaddeadde
 80078d8:	addeadde 	.word	0xaddeadde
 80078dc:	addeadde 	.word	0xaddeadde
 80078e0:	addeadde 	.word	0xaddeadde
 80078e4:	addeadde 	.word	0xaddeadde
 80078e8:	addeadde 	.word	0xaddeadde
 80078ec:	addeadde 	.word	0xaddeadde
 80078f0:	addeadde 	.word	0xaddeadde
 80078f4:	addeadde 	.word	0xaddeadde
 80078f8:	addeadde 	.word	0xaddeadde
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008010:	f000 ff71 	bl	8008ef6 <xPortRaisePrivilege>
 8008014:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fb f9ab 	bl	8003380 <xTaskCreate>
 800802a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800802c:	6978      	ldr	r0, [r7, #20]
 800802e:	f003 ffc9 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008032:	693b      	ldr	r3, [r7, #16]
    }
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	; 0x28
 8008040:	af04      	add	r7, sp, #16
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800804a:	f000 ff54 	bl	8008ef6 <xPortRaisePrivilege>
 800804e:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7fb f9d3 	bl	800340e <xTaskCreateStatic>
 8008068:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f003 ffaa 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008070:	693b      	ldr	r3, [r7, #16]
    }
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <MPU_xTaskCreateRestricted>:
    {
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008084:	f000 ff37 	bl	8008ef6 <xPortRaisePrivilege>
 8008088:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCreateRestricted( pxTaskDefinition, pxCreatedTask );
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fb fa41 	bl	8003514 <xTaskCreateRestricted>
 8008092:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f003 ff95 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800809a:	68bb      	ldr	r3, [r7, #8]
    }
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <MPU_xTaskCreateRestrictedStatic>:
    {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080ae:	f000 ff22 	bl	8008ef6 <xPortRaisePrivilege>
 80080b2:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCreateRestrictedStatic( pxTaskDefinition, pxCreatedTask );
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fb faa8 	bl	800360c <xTaskCreateRestrictedStatic>
 80080bc:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f003 ff80 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80080c4:	68bb      	ldr	r3, [r7, #8]
    }
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <MPU_vTaskAllocateMPURegions>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask,
                                  const MemoryRegion_t * const xRegions ) /* FREERTOS_SYSTEM_CALL */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080d8:	f000 ff0d 	bl	8008ef6 <xPortRaisePrivilege>
 80080dc:	60f8      	str	r0, [r7, #12]

    vTaskAllocateMPURegions( xTask, xRegions );
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fb fb19 	bl	8003718 <vTaskAllocateMPURegions>
    vPortResetPrivilege( xRunningPrivileged );
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f003 ff6c 	bl	800bfc4 <vPortResetPrivilege>
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <MPU_vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080fc:	f000 fefb 	bl	8008ef6 <xPortRaisePrivilege>
 8008100:	60f8      	str	r0, [r7, #12]

        vTaskDelete( pxTaskToDelete );
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fb fb22 	bl	800374c <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f003 ff5b 	bl	800bfc4 <vPortResetPrivilege>
    }
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
    	//*(uint32_t *)0xE0001004 = 0;
    	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800811e:	f000 feea 	bl	8008ef6 <xPortRaisePrivilege>
 8008122:	60f8      	str	r0, [r7, #12]

        vTaskDelay( xTicksToDelay );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fb fba1 	bl	800386c <vTaskDelay>
        //*(uint32_t *)0xE0001004 = 0;
        vPortResetPrivilege( xRunningPrivileged );
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f003 ff4a 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <MPU_xTaskDelayUntil>:
    {
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008142:	f000 fed8 	bl	8008ef6 <xPortRaisePrivilege>
 8008146:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fb fbc2 	bl	80038d4 <xTaskDelayUntil>
 8008150:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f003 ff36 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008158:	68bb      	ldr	r3, [r7, #8]
    }
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <MPU_xTaskAbortDelay>:
    {
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800816a:	f000 fec4 	bl	8008ef6 <xPortRaisePrivilege>
 800816e:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskAbortDelay( xTask );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fb fc2d 	bl	80039d0 <xTaskAbortDelay>
 8008176:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f003 ff23 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800817e:	68bb      	ldr	r3, [r7, #8]
    }
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008190:	f000 feb1 	bl	8008ef6 <xPortRaisePrivilege>
 8008194:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskPriorityGet( pxTask );
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fb fc82 	bl	8003aa0 <uxTaskPriorityGet>
 800819c:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f003 ff10 	bl	800bfc4 <vPortResetPrivilege>
        return uxReturn;
 80081a4:	68bb      	ldr	r3, [r7, #8]
    }
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081b6:	f000 fe9e 	bl	8008ef6 <xPortRaisePrivilege>
 80081ba:	60f8      	str	r0, [r7, #12]
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fb fcb5 	bl	8003b2c <eTaskGetState>
 80081c2:	4603      	mov	r3, r0
 80081c4:	72fb      	strb	r3, [r7, #11]
        vPortResetPrivilege( xRunningPrivileged );
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f003 fefc 	bl	800bfc4 <vPortResetPrivilege>
        return eReturn;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
    }
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <MPU_vTaskPrioritySet>:
    {
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081e0:	f000 fe89 	bl	8008ef6 <xPortRaisePrivilege>
 80081e4:	60f8      	str	r0, [r7, #12]
        vTaskPrioritySet( pxTask, uxNewPriority );
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fb fd19 	bl	8003c20 <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f003 fee8 	bl	800bfc4 <vPortResetPrivilege>
    }
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008204:	f000 fe77 	bl	8008ef6 <xPortRaisePrivilege>
 8008208:	60f8      	str	r0, [r7, #12]

        vTaskSuspend( pxTaskToSuspend );
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fb fdb2 	bl	8003d74 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f003 fed7 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008226:	f000 fe66 	bl	8008ef6 <xPortRaisePrivilege>
 800822a:	60f8      	str	r0, [r7, #12]

        vTaskResume( pxTaskToResume );
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fb fe41 	bl	8003eb4 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f003 fec6 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008246:	f000 fe56 	bl	8008ef6 <xPortRaisePrivilege>
 800824a:	6078      	str	r0, [r7, #4]

    vTaskSuspendAll();
 800824c:	f7fb ff8c 	bl	8004168 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f003 feb7 	bl	800bfc4 <vPortResetPrivilege>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008264:	f000 fe47 	bl	8008ef6 <xPortRaisePrivilege>
 8008268:	6078      	str	r0, [r7, #4]

    xReturn = xTaskResumeAll();
 800826a:	f7fb ff8b 	bl	8004184 <xTaskResumeAll>
 800826e:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f003 fea7 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008276:	683b      	ldr	r3, [r7, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008286:	f000 fe36 	bl	8008ef6 <xPortRaisePrivilege>
 800828a:	6078      	str	r0, [r7, #4]

    xReturn = xTaskGetTickCount();
 800828c:	f7fc f816 	bl	80042bc <xTaskGetTickCount>
 8008290:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f003 fe96 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008298:	683b      	ldr	r3, [r7, #0]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082a8:	f000 fe25 	bl	8008ef6 <xPortRaisePrivilege>
 80082ac:	6078      	str	r0, [r7, #4]

    uxReturn = uxTaskGetNumberOfTasks();
 80082ae:	f7fc f825 	bl	80042fc <uxTaskGetNumberOfTasks>
 80082b2:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f003 fe85 	bl	800bfc4 <vPortResetPrivilege>
    return uxReturn;
 80082ba:	683b      	ldr	r3, [r7, #0]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082cc:	f000 fe13 	bl	8008ef6 <xPortRaisePrivilege>
 80082d0:	60f8      	str	r0, [r7, #12]

    pcReturn = pcTaskGetName( xTaskToQuery );
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fc f81c 	bl	8004310 <pcTaskGetName>
 80082d8:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f003 fe72 	bl	800bfc4 <vPortResetPrivilege>
    return pcReturn;
 80082e0:	68bb      	ldr	r3, [r7, #8]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <MPU_xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )
    TaskHandle_t MPU_xTaskGetHandle( const char * pcNameToQuery ) /* FREERTOS_SYSTEM_CALL */
    {
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082f2:	f000 fe00 	bl	8008ef6 <xPortRaisePrivilege>
 80082f6:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGetHandle( pcNameToQuery );
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fc f82d 	bl	8004358 <xTaskGetHandle>
 80082fe:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f003 fe5f 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008306:	68bb      	ldr	r3, [r7, #8]
    }
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008318:	f000 fded 	bl	8008ef6 <xPortRaisePrivilege>
 800831c:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fc f880 	bl	8004424 <uxTaskGetStackHighWaterMark>
 8008324:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f003 fe4c 	bl	800bfc4 <vPortResetPrivilege>
        return uxReturn;
 800832c:	68bb      	ldr	r3, [r7, #8]
    }
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <MPU_vTaskSetApplicationTaskTag>:
    {
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008340:	f000 fdd9 	bl	8008ef6 <xPortRaisePrivilege>
 8008344:	60f8      	str	r0, [r7, #12]
        vTaskSetApplicationTaskTag( xTask, pxTagValue );
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fc f887 	bl	800445c <vTaskSetApplicationTaskTag>
        vPortResetPrivilege( xRunningPrivileged );
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f003 fe38 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <MPU_xTaskGetApplicationTaskTag>:
    {
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008364:	f000 fdc7 	bl	8008ef6 <xPortRaisePrivilege>
 8008368:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskGetApplicationTaskTag( xTask );
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fc f892 	bl	8004494 <xTaskGetApplicationTaskTag>
 8008370:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f003 fe26 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008378:	68bb      	ldr	r3, [r7, #8]
    }
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <MPU_vTaskSetThreadLocalStoragePointer>:
    {
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800838e:	f000 fdb2 	bl	8008ef6 <xPortRaisePrivilege>
 8008392:	6178      	str	r0, [r7, #20]
        vTaskSetThreadLocalStoragePointer( xTaskToSet, xIndex, pvValue );
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7fc f8c1 	bl	8004520 <vTaskSetThreadLocalStoragePointer>
        vPortResetPrivilege( xRunningPrivileged );
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f003 fe10 	bl	800bfc4 <vPortResetPrivilege>
    }
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <MPU_pvTaskGetThreadLocalStoragePointer>:
    {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083b6:	f000 fd9e 	bl	8008ef6 <xPortRaisePrivilege>
 80083ba:	60f8      	str	r0, [r7, #12]
        pvReturn = pvTaskGetThreadLocalStoragePointer( xTaskToQuery, xIndex );
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fc f8dc 	bl	800457c <pvTaskGetThreadLocalStoragePointer>
 80083c4:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f003 fdfc 	bl	800bfc4 <vPortResetPrivilege>
        return pvReturn;
 80083cc:	68bb      	ldr	r3, [r7, #8]
    }
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <MPU_xTaskCallApplicationTaskHook>:
    {
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083e0:	f000 fd89 	bl	8008ef6 <xPortRaisePrivilege>
 80083e4:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskCallApplicationTaskHook( xTask, pvParameter );
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7fc f8eb 	bl	80045c4 <xTaskCallApplicationTaskHook>
 80083ee:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f003 fde7 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80083f6:	68bb      	ldr	r3, [r7, #8]
    }
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <MPU_xTaskGetIdleTaskHandle>:
    {
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008406:	f000 fd76 	bl	8008ef6 <xPortRaisePrivilege>
 800840a:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetIdleTaskHandle();
 800840c:	f7fc f8fc 	bl	8004608 <xTaskGetIdleTaskHandle>
 8008410:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 fdd6 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008418:	683b      	ldr	r3, [r7, #0]
    }
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <MPU_ulTaskGetIdleRunTimeCounter>:
    {
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008428:	f000 fd65 	bl	8008ef6 <xPortRaisePrivilege>
 800842c:	6078      	str	r0, [r7, #4]
        xReturn = ulTaskGetIdleRunTimeCounter();
 800842e:	f7fc f907 	bl	8004640 <ulTaskGetIdleRunTimeCounter>
 8008432:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f003 fdc5 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800843a:	683b      	ldr	r3, [r7, #0]
    }
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008452:	f000 fd50 	bl	8008ef6 <xPortRaisePrivilege>
 8008456:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7fc f8f7 	bl	8004658 <xTaskGenericNotify>
 800846a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800846c:	6978      	ldr	r0, [r7, #20]
 800846e:	f003 fda9 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008472:	693b      	ldr	r3, [r7, #16]
    }
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800848a:	f000 fd34 	bl	8008ef6 <xPortRaisePrivilege>
 800848e:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7fc fabe 	bl	8004a1c <xTaskGenericNotifyWait>
 80084a0:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80084a2:	6978      	ldr	r0, [r7, #20]
 80084a4:	f003 fd8e 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80084a8:	693b      	ldr	r3, [r7, #16]
    }
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084be:	f000 fd1a 	bl	8008ef6 <xPortRaisePrivilege>
 80084c2:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7fc fbd3 	bl	8004c74 <ulTaskGenericNotifyTake>
 80084ce:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f003 fd77 	bl	800bfc4 <vPortResetPrivilege>
        return ulReturn;
 80084d6:	693b      	ldr	r3, [r7, #16]
    }
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084ea:	f000 fd04 	bl	8008ef6 <xPortRaisePrivilege>
 80084ee:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fc fc26 	bl	8004d44 <xTaskGenericNotifyStateClear>
 80084f8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f003 fd62 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008500:	68bb      	ldr	r3, [r7, #8]
    }
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008516:	f000 fcee 	bl	8008ef6 <xPortRaisePrivilege>
 800851a:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fc fc49 	bl	8004db8 <ulTaskGenericNotifyValueClear>
 8008526:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008528:	6978      	ldr	r0, [r7, #20]
 800852a:	f003 fd4b 	bl	800bfc4 <vPortResetPrivilege>
        return ulReturn;
 800852e:	693b      	ldr	r3, [r7, #16]
    }
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <MPU_xTaskGetCurrentTaskHandle>:
    {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800853e:	f000 fcda 	bl	8008ef6 <xPortRaisePrivilege>
 8008542:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetCurrentTaskHandle();
 8008544:	f7fc ffe6 	bl	8005514 <xTaskGetCurrentTaskHandle>
 8008548:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f003 fd3a 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008550:	683b      	ldr	r3, [r7, #0]
    }
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <MPU_vTaskSetTimeOutState>:
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008562:	f000 fcc8 	bl	8008ef6 <xPortRaisePrivilege>
 8008566:	60f8      	str	r0, [r7, #12]
    vTaskSetTimeOutState( pxTimeOut );
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fc fc53 	bl	8004e14 <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f003 fd28 	bl	800bfc4 <vPortResetPrivilege>
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <MPU_xTaskCheckForTimeOut>:
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008586:	f000 fcb6 	bl	8008ef6 <xPortRaisePrivilege>
 800858a:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fc fc66 	bl	8004e60 <xTaskCheckForTimeOut>
 8008594:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f003 fd14 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 800859c:	68bb      	ldr	r3, [r7, #8]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <MPU_xTaskGetSchedulerState>:
    {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085ac:	f000 fca3 	bl	8008ef6 <xPortRaisePrivilege>
 80085b0:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetSchedulerState();
 80085b2:	f7fc ffc9 	bl	8005548 <xTaskGetSchedulerState>
 80085b6:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f003 fd03 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80085be:	683b      	ldr	r3, [r7, #0]
    }
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <MPU_xTaskCatchUpTicks>:
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d0:	f000 fc91 	bl	8008ef6 <xPortRaisePrivilege>
 80085d4:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fc fcb8 	bl	8004f4c <xTaskCatchUpTicks>
 80085dc:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f003 fcf0 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 80085e4:	68bb      	ldr	r3, [r7, #8]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085fc:	f000 fc7b 	bl	8008ef6 <xPortRaisePrivilege>
 8008600:	6178      	str	r0, [r7, #20]

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7f8 fb59 	bl	8000cc0 <xQueueGenericSend>
 800860e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f003 fcd7 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008616:	693b      	ldr	r3, [r7, #16]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800862c:	f000 fc63 	bl	8008ef6 <xPortRaisePrivilege>
 8008630:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f8 fda7 	bl	800118a <xQueueReceive>
 800863c:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f003 fcc0 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008644:	693b      	ldr	r3, [r7, #16]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800865a:	f000 fc4c 	bl	8008ef6 <xPortRaisePrivilege>
 800865e:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7f8 fc45 	bl	8000ef4 <xQueuePeek>
 800866a:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 800866c:	6978      	ldr	r0, [r7, #20]
 800866e:	f003 fca9 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008672:	693b      	ldr	r3, [r7, #16]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008686:	f000 fc36 	bl	8008ef6 <xPortRaisePrivilege>
 800868a:	60f8      	str	r0, [r7, #12]
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f9 f9bd 	bl	8001a0e <xQueueSemaphoreTake>
 8008694:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f003 fc94 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 800869c:	68bb      	ldr	r3, [r7, #8]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <MPU_uxQueueMessagesWaiting>:
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086ae:	f000 fc22 	bl	8008ef6 <xPortRaisePrivilege>
 80086b2:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7f8 fe47 	bl	8001348 <uxQueueMessagesWaiting>
 80086ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f003 fc81 	bl	800bfc4 <vPortResetPrivilege>
    return uxReturn;
 80086c2:	68bb      	ldr	r3, [r7, #8]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <MPU_uxQueueSpacesAvailable>:
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086d4:	f000 fc0f 	bl	8008ef6 <xPortRaisePrivilege>
 80086d8:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7f8 fe52 	bl	8001384 <uxQueueSpacesAvailable>
 80086e0:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f003 fc6e 	bl	800bfc4 <vPortResetPrivilege>
    return uxReturn;
 80086e8:	68bb      	ldr	r3, [r7, #8]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086fa:	f000 fbfc 	bl	8008ef6 <xPortRaisePrivilege>
 80086fe:	60f8      	str	r0, [r7, #12]

    vQueueDelete( xQueue );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f8 fe62 	bl	80013ca <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f003 fc5c 	bl	800bfc4 <vPortResetPrivilege>
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <MPU_xQueueCreateMutex>:
    {
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800871e:	f000 fbea 	bl	8008ef6 <xPortRaisePrivilege>
 8008722:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutex( ucQueueType );
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	4618      	mov	r0, r3
 8008728:	f7f9 f8d4 	bl	80018d4 <xQueueCreateMutex>
 800872c:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f003 fc48 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008734:	68bb      	ldr	r3, [r7, #8]
    }
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <MPU_xQueueCreateMutexStatic>:
    {
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	4603      	mov	r3, r0
 8008746:	6039      	str	r1, [r7, #0]
 8008748:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800874a:	f000 fbd4 	bl	8008ef6 <xPortRaisePrivilege>
 800874e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f7f9 f8d5 	bl	8001904 <xQueueCreateMutexStatic>
 800875a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f003 fc31 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008762:	68bb      	ldr	r3, [r7, #8]
    }
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <MPU_xQueueCreateCountingSemaphore>:
    {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008776:	f000 fbbe 	bl	8008ef6 <xPortRaisePrivilege>
 800877a:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7f9 f8db 	bl	800193a <xQueueCreateCountingSemaphore>
 8008784:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f003 fc1c 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800878c:	68bb      	ldr	r3, [r7, #8]
    }
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087a2:	f000 fba8 	bl	8008ef6 <xPortRaisePrivilege>
 80087a6:	6178      	str	r0, [r7, #20]
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7f9 f8f7 	bl	80019a0 <xQueueCreateCountingSemaphoreStatic>
 80087b2:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f003 fc05 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80087ba:	693b      	ldr	r3, [r7, #16]
    }
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <MPU_xQueueGetMutexHolder>:
    {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087cc:	f000 fb93 	bl	8008ef6 <xPortRaisePrivilege>
 80087d0:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f9 fa26 	bl	8001c24 <xQueueGetMutexHolder>
 80087d8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f003 fbf2 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80087e0:	68bb      	ldr	r3, [r7, #8]
    }
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <MPU_xQueueTakeMutexRecursive>:
    {
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087f4:	f000 fb7f 	bl	8008ef6 <xPortRaisePrivilege>
 80087f8:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7f9 fa4c 	bl	8001c9a <xQueueTakeMutexRecursive>
 8008802:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f003 fbdd 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800880a:	68bb      	ldr	r3, [r7, #8]
    }
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <MPU_xQueueGiveMutexRecursive>:
    {
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800881c:	f000 fb6b 	bl	8008ef6 <xPortRaisePrivilege>
 8008820:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7f9 fa6f 	bl	8001d06 <xQueueGiveMutexRecursive>
 8008828:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f003 fbca 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008830:	68bb      	ldr	r3, [r7, #8]
    }
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <MPU_vQueueAddToRegistry>:
    {
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008844:	f000 fb57 	bl	8008ef6 <xPortRaisePrivilege>
 8008848:	60f8      	str	r0, [r7, #12]
        vQueueAddToRegistry( xQueue, pcName );
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7f9 fa8e 	bl	8001d6e <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f003 fbb6 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <MPU_vQueueUnregisterQueue>:
    {
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008868:	f000 fb45 	bl	8008ef6 <xPortRaisePrivilege>
 800886c:	60f8      	str	r0, [r7, #12]
        vQueueUnregisterQueue( xQueue );
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7f9 faa6 	bl	8001dc0 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f003 fba5 	bl	800bfc4 <vPortResetPrivilege>
    }
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <MPU_pcQueueGetName>:
    {
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800888a:	f000 fb34 	bl	8008ef6 <xPortRaisePrivilege>
 800888e:	60f8      	str	r0, [r7, #12]
        pcReturn = pcQueueGetName( xQueue );
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7f9 fabf 	bl	8001e14 <pcQueueGetName>
 8008896:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f003 fb93 	bl	800bfc4 <vPortResetPrivilege>
        return pcReturn;
 800889e:	68bb      	ldr	r3, [r7, #8]
    }
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <MPU_xQueueGenericCreate>:
    {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088b6:	f000 fb1e 	bl	8008ef6 <xPortRaisePrivilege>
 80088ba:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	461a      	mov	r2, r3
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7f9 facc 	bl	8001e60 <xQueueGenericCreate>
 80088c8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f003 fb7a 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80088d0:	693b      	ldr	r3, [r7, #16]
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <MPU_xQueueGenericCreateStatic>:
    {
 80088da:	b580      	push	{r7, lr}
 80088dc:	b088      	sub	sp, #32
 80088de:	af02      	add	r7, sp, #8
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088e8:	f000 fb05 	bl	8008ef6 <xPortRaisePrivilege>
 80088ec:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 80088ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7f9 fb04 	bl	8001f08 <xQueueGenericCreateStatic>
 8008900:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	f003 fb5e 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008908:	693b      	ldr	r3, [r7, #16]
    }
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <MPU_xQueueCreateSet>:
    {
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800891a:	f000 faec 	bl	8008ef6 <xPortRaisePrivilege>
 800891e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateSet( uxEventQueueLength );
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f9 fb69 	bl	8001ff8 <xQueueCreateSet>
 8008926:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f003 fb4b 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 800892e:	68bb      	ldr	r3, [r7, #8]
    }
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <MPU_xQueueAddToSet>:
    {
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008942:	f000 fad8 	bl	8008ef6 <xPortRaisePrivilege>
 8008946:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueAddToSet( xQueueOrSemaphore, xQueueSet );
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7f9 fb63 	bl	8002016 <xQueueAddToSet>
 8008950:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f003 fb36 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008958:	68bb      	ldr	r3, [r7, #8]
    }
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <MPU_xQueueRemoveFromSet>:
    {
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800896c:	f000 fac3 	bl	8008ef6 <xPortRaisePrivilege>
 8008970:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueRemoveFromSet( xQueueOrSemaphore, xQueueSet );
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7f9 fb6f 	bl	8002058 <xQueueRemoveFromSet>
 800897a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f003 fb21 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 8008982:	68bb      	ldr	r3, [r7, #8]
    }
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <MPU_xQueueSelectFromSet>:
    {
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008996:	f000 faae 	bl	8008ef6 <xPortRaisePrivilege>
 800899a:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueSelectFromSet( xQueueSet, xBlockTimeTicks );
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f9 fb7e 	bl	80020a0 <xQueueSelectFromSet>
 80089a4:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f003 fb0c 	bl	800bfc4 <vPortResetPrivilege>
        return xReturn;
 80089ac:	68bb      	ldr	r3, [r7, #8]
    }
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <MPU_xQueueGenericReset>:
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089c0:	f000 fa99 	bl	8008ef6 <xPortRaisePrivilege>
 80089c4:	60f8      	str	r0, [r7, #12]
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7f9 fbc2 	bl	8002152 <xQueueGenericReset>
 80089ce:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f003 faf7 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 80089d6:	68bb      	ldr	r3, [r7, #8]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ee:	f000 fa82 	bl	8008ef6 <xPortRaisePrivilege>
 80089f2:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7fd fa8a 	bl	8005f18 <xTimerCreate>
 8008a04:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f003 fadc 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008a0c:	693b      	ldr	r3, [r7, #16]
    }
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af02      	add	r7, sp, #8
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a24:	f000 fa67 	bl	8008ef6 <xPortRaisePrivilege>
 8008a28:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7fd fa8e 	bl	8005f5a <xTimerCreateStatic>
 8008a3e:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f003 fabf 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008a46:	693b      	ldr	r3, [r7, #16]
    }
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a58:	f000 fa4d 	bl	8008ef6 <xPortRaisePrivilege>
 8008a5c:	60f8      	str	r0, [r7, #12]

        pvReturn = pvTimerGetTimerID( xTimer );
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fd fab9 	bl	8005fd6 <pvTimerGetTimerID>
 8008a64:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f003 faac 	bl	800bfc4 <vPortResetPrivilege>

        return pvReturn;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
    }
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a80:	f000 fa39 	bl	8008ef6 <xPortRaisePrivilege>
 8008a84:	60f8      	str	r0, [r7, #12]

        vTimerSetTimerID( xTimer, pvNewID );
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fd fac4 	bl	8006016 <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f003 fa98 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008aa4:	f000 fa27 	bl	8008ef6 <xPortRaisePrivilege>
 8008aa8:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerIsTimerActive( xTimer );
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fd fad3 	bl	8006056 <xTimerIsTimerActive>
 8008ab0:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f003 fa86 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
    }
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ac8:	f000 fa15 	bl	8008ef6 <xPortRaisePrivilege>
 8008acc:	6078      	str	r0, [r7, #4]

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008ace:	f7fd faeb 	bl	80060a8 <xTimerGetTimerDaemonTaskHandle>
 8008ad2:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f003 fa75 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008ada:	683b      	ldr	r3, [r7, #0]
    }
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008aec:	f000 fa03 	bl	8008ef6 <xPortRaisePrivilege>
 8008af0:	60f8      	str	r0, [r7, #12]

        pcReturn = pcTimerGetName( xTimer );
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fd faf4 	bl	80060e0 <pcTimerGetName>
 8008af8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f003 fa62 	bl	800bfc4 <vPortResetPrivilege>

        return pcReturn;
 8008b00:	68bb      	ldr	r3, [r7, #8]
    }
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <MPU_vTimerSetReloadMode>:
    {
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b14:	f000 f9ef 	bl	8008ef6 <xPortRaisePrivilege>
 8008b18:	60f8      	str	r0, [r7, #12]
        vTimerSetReloadMode( xTimer, uxAutoReload );
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fd fafa 	bl	8006116 <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f003 fa4e 	bl	800bfc4 <vPortResetPrivilege>
    }
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <MPU_uxTimerGetReloadMode>:
    {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b38:	f000 f9dd 	bl	8008ef6 <xPortRaisePrivilege>
 8008b3c:	60f8      	str	r0, [r7, #12]
        uxReturn = uxTimerGetReloadMode( xTimer );
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fd fb1c 	bl	800617c <uxTimerGetReloadMode>
 8008b44:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f003 fa3c 	bl	800bfc4 <vPortResetPrivilege>
        return uxReturn;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
    }
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b5e:	f000 f9ca 	bl	8008ef6 <xPortRaisePrivilege>
 8008b62:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetPeriod( xTimer );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fd fb32 	bl	80061ce <xTimerGetPeriod>
 8008b6a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f003 fa29 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008b72:	68bb      	ldr	r3, [r7, #8]
    }
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b84:	f000 f9b7 	bl	8008ef6 <xPortRaisePrivilege>
 8008b88:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetExpiryTime( xTimer );
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fd fb3a 	bl	8006204 <xTimerGetExpiryTime>
 8008b90:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f003 fa16 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008b98:	68bb      	ldr	r3, [r7, #8]
    }
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b088      	sub	sp, #32
 8008ba6:	af02      	add	r7, sp, #8
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bb0:	f000 f9a1 	bl	8008ef6 <xPortRaisePrivilege>
 8008bb4:	6178      	str	r0, [r7, #20]

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fd fb87 	bl	80062d4 <xTimerGenericCommand>
 8008bc6:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f003 f9fb 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008bce:	693b      	ldr	r3, [r7, #16]
    }
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bde:	f000 f98a 	bl	8008ef6 <xPortRaisePrivilege>
 8008be2:	6078      	str	r0, [r7, #4]

        xReturn = xEventGroupCreate();
 8008be4:	f7f7 fc96 	bl	8000514 <xEventGroupCreate>
 8008be8:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f003 f9ea 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008bf0:	683b      	ldr	r3, [r7, #0]
    }
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c02:	f000 f978 	bl	8008ef6 <xPortRaisePrivilege>
 8008c06:	60f8      	str	r0, [r7, #12]

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7f7 fc9d 	bl	8000548 <xEventGroupCreateStatic>
 8008c0e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f003 f9d7 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008c16:	68bb      	ldr	r3, [r7, #8]
    }
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c2e:	f000 f962 	bl	8008ef6 <xPortRaisePrivilege>
 8008c32:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7f7 fcb9 	bl	80005b6 <xEventGroupWaitBits>
 8008c44:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f003 f9bc 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008c4c:	693b      	ldr	r3, [r7, #16]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c60:	f000 f949 	bl	8008ef6 <xPortRaisePrivilege>
 8008c64:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f7 fd73 	bl	8000754 <xEventGroupClearBits>
 8008c6e:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f003 f9a7 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008c76:	68bb      	ldr	r3, [r7, #8]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c8a:	f000 f934 	bl	8008ef6 <xPortRaisePrivilege>
 8008c8e:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f7 fd96 	bl	80007c4 <xEventGroupSetBits>
 8008c98:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f003 f992 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cb8:	f000 f91d 	bl	8008ef6 <xPortRaisePrivilege>
 8008cbc:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7f7 fe08 	bl	80008da <xEventGroupSync>
 8008cca:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008ccc:	6978      	ldr	r0, [r7, #20]
 8008cce:	f003 f979 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008cd2:	693b      	ldr	r3, [r7, #16]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ce4:	f000 f907 	bl	8008ef6 <xPortRaisePrivilege>
 8008ce8:	60f8      	str	r0, [r7, #12]

    vEventGroupDelete( xEventGroup );
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f7 fec7 	bl	8000a7e <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f003 f967 	bl	800bfc4 <vPortResetPrivilege>
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d0c:	f000 f8f3 	bl	8008ef6 <xPortRaisePrivilege>
 8008d10:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7f9 fc5b 	bl	80025d4 <xStreamBufferSend>
 8008d1e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008d20:	6978      	ldr	r0, [r7, #20]
 8008d22:	f003 f94f 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008d26:	693b      	ldr	r3, [r7, #16]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d3e:	f000 f8da 	bl	8008ef6 <xPortRaisePrivilege>
 8008d42:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7f9 fd80 	bl	8002850 <xStreamBufferReceive>
 8008d50:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f003 f936 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008d58:	693b      	ldr	r3, [r7, #16]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d6a:	f000 f8c4 	bl	8008ef6 <xPortRaisePrivilege>
 8008d6e:	60f8      	str	r0, [r7, #12]
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7fa f90e 	bl	8002f92 <xStreamBufferNextMessageLengthBytes>
 8008d76:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f003 f923 	bl	800bfc4 <vPortResetPrivilege>
    return xReturn;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d90:	f000 f8b1 	bl	8008ef6 <xPortRaisePrivilege>
 8008d94:	60f8      	str	r0, [r7, #12]

    vStreamBufferDelete( xStreamBuffer );
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f9 fe65 	bl	8002a66 <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f003 f911 	bl	800bfc4 <vPortResetPrivilege>
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008db2:	f000 f8a0 	bl	8008ef6 <xPortRaisePrivilege>
 8008db6:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7f9 fe7b 	bl	8002ab4 <xStreamBufferIsFull>
 8008dbe:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f003 f8ff 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dd8:	f000 f88d 	bl	8008ef6 <xPortRaisePrivilege>
 8008ddc:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f9 fe98 	bl	8002b14 <xStreamBufferIsEmpty>
 8008de4:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f003 f8ec 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008dec:	68bb      	ldr	r3, [r7, #8]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dfe:	f000 f87a 	bl	8008ef6 <xPortRaisePrivilege>
 8008e02:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7f9 feac 	bl	8002b62 <xStreamBufferReset>
 8008e0a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f003 f8d9 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008e12:	68bb      	ldr	r3, [r7, #8]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e24:	f000 f867 	bl	8008ef6 <xPortRaisePrivilege>
 8008e28:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7f9 fecf 	bl	8002bce <xStreamBufferSpacesAvailable>
 8008e30:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f003 f8c6 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008e38:	68bb      	ldr	r3, [r7, #8]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e4a:	f000 f854 	bl	8008ef6 <xPortRaisePrivilege>
 8008e4e:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7f9 feee 	bl	8002c32 <xStreamBufferBytesAvailable>
 8008e56:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f003 f8b3 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e72:	f000 f840 	bl	8008ef6 <xPortRaisePrivilege>
 8008e76:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7f9 fef6 	bl	8002c6c <xStreamBufferSetTriggerLevel>
 8008e80:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f003 f89e 	bl	800bfc4 <vPortResetPrivilege>

    return xReturn;
 8008e88:	68bb      	ldr	r3, [r7, #8]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e9e:	f000 f82a 	bl	8008ef6 <xPortRaisePrivilege>
 8008ea2:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7f9 ff96 	bl	8002dda <xStreamBufferGenericCreate>
 8008eae:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008eb0:	6978      	ldr	r0, [r7, #20]
 8008eb2:	f003 f887 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008eb6:	693b      	ldr	r3, [r7, #16]
    }
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ece:	f000 f812 	bl	8008ef6 <xPortRaisePrivilege>
 8008ed2:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7f9 ffd6 	bl	8002e90 <xStreamBufferGenericCreateStatic>
 8008ee4:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f003 f86c 	bl	800bfc4 <vPortResetPrivilege>

        return xReturn;
 8008eec:	693b      	ldr	r3, [r7, #16]
    }
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <xPortRaisePrivilege>:
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008efc:	f003 f928 	bl	800c150 <xIsPrivileged>
 8008f00:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d100      	bne.n	8008f0a <xPortRaisePrivilege+0x14>
        portRAISE_PRIVILEGE();
 8008f08:	df02      	svc	2
    return xRunningPrivileged;
 8008f0a:	687b      	ldr	r3, [r7, #4]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	adde      	add	r5, sp, #888	; 0x378
 8008f16:	adde      	add	r5, sp, #888	; 0x378
 8008f18:	adde      	add	r5, sp, #888	; 0x378
 8008f1a:	adde      	add	r5, sp, #888	; 0x378
 8008f1c:	adde      	add	r5, sp, #888	; 0x378
 8008f1e:	adde      	add	r5, sp, #888	; 0x378
 8008f20:	adde      	add	r5, sp, #888	; 0x378
 8008f22:	adde      	add	r5, sp, #888	; 0x378
 8008f24:	adde      	add	r5, sp, #888	; 0x378
 8008f26:	adde      	add	r5, sp, #888	; 0x378
 8008f28:	adde      	add	r5, sp, #888	; 0x378
 8008f2a:	adde      	add	r5, sp, #888	; 0x378
 8008f2c:	adde      	add	r5, sp, #888	; 0x378
 8008f2e:	adde      	add	r5, sp, #888	; 0x378
 8008f30:	adde      	add	r5, sp, #888	; 0x378
 8008f32:	adde      	add	r5, sp, #888	; 0x378
 8008f34:	adde      	add	r5, sp, #888	; 0x378
 8008f36:	adde      	add	r5, sp, #888	; 0x378
 8008f38:	adde      	add	r5, sp, #888	; 0x378
 8008f3a:	adde      	add	r5, sp, #888	; 0x378
 8008f3c:	adde      	add	r5, sp, #888	; 0x378
 8008f3e:	adde      	add	r5, sp, #888	; 0x378
 8008f40:	adde      	add	r5, sp, #888	; 0x378
 8008f42:	adde      	add	r5, sp, #888	; 0x378
 8008f44:	adde      	add	r5, sp, #888	; 0x378
 8008f46:	adde      	add	r5, sp, #888	; 0x378
 8008f48:	adde      	add	r5, sp, #888	; 0x378
 8008f4a:	adde      	add	r5, sp, #888	; 0x378
 8008f4c:	adde      	add	r5, sp, #888	; 0x378
 8008f4e:	adde      	add	r5, sp, #888	; 0x378
 8008f50:	adde      	add	r5, sp, #888	; 0x378
 8008f52:	adde      	add	r5, sp, #888	; 0x378
 8008f54:	adde      	add	r5, sp, #888	; 0x378
 8008f56:	adde      	add	r5, sp, #888	; 0x378
 8008f58:	adde      	add	r5, sp, #888	; 0x378
 8008f5a:	adde      	add	r5, sp, #888	; 0x378
 8008f5c:	adde      	add	r5, sp, #888	; 0x378
 8008f5e:	adde      	add	r5, sp, #888	; 0x378
 8008f60:	adde      	add	r5, sp, #888	; 0x378
 8008f62:	adde      	add	r5, sp, #888	; 0x378
 8008f64:	adde      	add	r5, sp, #888	; 0x378
 8008f66:	adde      	add	r5, sp, #888	; 0x378
 8008f68:	adde      	add	r5, sp, #888	; 0x378
 8008f6a:	adde      	add	r5, sp, #888	; 0x378
 8008f6c:	adde      	add	r5, sp, #888	; 0x378
 8008f6e:	adde      	add	r5, sp, #888	; 0x378
 8008f70:	adde      	add	r5, sp, #888	; 0x378
 8008f72:	adde      	add	r5, sp, #888	; 0x378
 8008f74:	adde      	add	r5, sp, #888	; 0x378
 8008f76:	adde      	add	r5, sp, #888	; 0x378
 8008f78:	adde      	add	r5, sp, #888	; 0x378
 8008f7a:	adde      	add	r5, sp, #888	; 0x378
 8008f7c:	adde      	add	r5, sp, #888	; 0x378
 8008f7e:	adde      	add	r5, sp, #888	; 0x378
 8008f80:	adde      	add	r5, sp, #888	; 0x378
 8008f82:	adde      	add	r5, sp, #888	; 0x378
 8008f84:	adde      	add	r5, sp, #888	; 0x378
 8008f86:	adde      	add	r5, sp, #888	; 0x378
 8008f88:	adde      	add	r5, sp, #888	; 0x378
 8008f8a:	adde      	add	r5, sp, #888	; 0x378
 8008f8c:	adde      	add	r5, sp, #888	; 0x378
 8008f8e:	adde      	add	r5, sp, #888	; 0x378
 8008f90:	adde      	add	r5, sp, #888	; 0x378
 8008f92:	adde      	add	r5, sp, #888	; 0x378
 8008f94:	adde      	add	r5, sp, #888	; 0x378
 8008f96:	adde      	add	r5, sp, #888	; 0x378
 8008f98:	adde      	add	r5, sp, #888	; 0x378
 8008f9a:	adde      	add	r5, sp, #888	; 0x378
 8008f9c:	adde      	add	r5, sp, #888	; 0x378
 8008f9e:	adde      	add	r5, sp, #888	; 0x378
 8008fa0:	adde      	add	r5, sp, #888	; 0x378
 8008fa2:	adde      	add	r5, sp, #888	; 0x378
 8008fa4:	adde      	add	r5, sp, #888	; 0x378
 8008fa6:	adde      	add	r5, sp, #888	; 0x378
 8008fa8:	adde      	add	r5, sp, #888	; 0x378
 8008faa:	adde      	add	r5, sp, #888	; 0x378
 8008fac:	adde      	add	r5, sp, #888	; 0x378
 8008fae:	adde      	add	r5, sp, #888	; 0x378
 8008fb0:	adde      	add	r5, sp, #888	; 0x378
 8008fb2:	adde      	add	r5, sp, #888	; 0x378
 8008fb4:	adde      	add	r5, sp, #888	; 0x378
 8008fb6:	adde      	add	r5, sp, #888	; 0x378
 8008fb8:	adde      	add	r5, sp, #888	; 0x378
 8008fba:	adde      	add	r5, sp, #888	; 0x378
 8008fbc:	adde      	add	r5, sp, #888	; 0x378
 8008fbe:	adde      	add	r5, sp, #888	; 0x378
 8008fc0:	adde      	add	r5, sp, #888	; 0x378
 8008fc2:	adde      	add	r5, sp, #888	; 0x378
 8008fc4:	adde      	add	r5, sp, #888	; 0x378
 8008fc6:	adde      	add	r5, sp, #888	; 0x378
 8008fc8:	adde      	add	r5, sp, #888	; 0x378
 8008fca:	adde      	add	r5, sp, #888	; 0x378
 8008fcc:	adde      	add	r5, sp, #888	; 0x378
 8008fce:	adde      	add	r5, sp, #888	; 0x378
 8008fd0:	adde      	add	r5, sp, #888	; 0x378
 8008fd2:	adde      	add	r5, sp, #888	; 0x378
 8008fd4:	adde      	add	r5, sp, #888	; 0x378
 8008fd6:	adde      	add	r5, sp, #888	; 0x378
 8008fd8:	adde      	add	r5, sp, #888	; 0x378
 8008fda:	adde      	add	r5, sp, #888	; 0x378
 8008fdc:	adde      	add	r5, sp, #888	; 0x378
 8008fde:	adde      	add	r5, sp, #888	; 0x378
 8008fe0:	adde      	add	r5, sp, #888	; 0x378
 8008fe2:	adde      	add	r5, sp, #888	; 0x378
 8008fe4:	adde      	add	r5, sp, #888	; 0x378
 8008fe6:	adde      	add	r5, sp, #888	; 0x378
 8008fe8:	adde      	add	r5, sp, #888	; 0x378
 8008fea:	adde      	add	r5, sp, #888	; 0x378
 8008fec:	adde      	add	r5, sp, #888	; 0x378
 8008fee:	adde      	add	r5, sp, #888	; 0x378
 8008ff0:	adde      	add	r5, sp, #888	; 0x378
 8008ff2:	adde      	add	r5, sp, #888	; 0x378
 8008ff4:	adde      	add	r5, sp, #888	; 0x378
 8008ff6:	adde      	add	r5, sp, #888	; 0x378
 8008ff8:	adde      	add	r5, sp, #888	; 0x378
 8008ffa:	adde      	add	r5, sp, #888	; 0x378
 8008ffc:	adde      	add	r5, sp, #888	; 0x378
 8008ffe:	adde      	add	r5, sp, #888	; 0x378

08009000 <__do_global_dtors_aux>:
 8009000:	b510      	push	{r4, lr}
 8009002:	4c05      	ldr	r4, [pc, #20]	; (8009018 <__do_global_dtors_aux+0x18>)
 8009004:	7823      	ldrb	r3, [r4, #0]
 8009006:	b933      	cbnz	r3, 8009016 <__do_global_dtors_aux+0x16>
 8009008:	4b04      	ldr	r3, [pc, #16]	; (800901c <__do_global_dtors_aux+0x1c>)
 800900a:	b113      	cbz	r3, 8009012 <__do_global_dtors_aux+0x12>
 800900c:	4804      	ldr	r0, [pc, #16]	; (8009020 <__do_global_dtors_aux+0x20>)
 800900e:	f3af 8000 	nop.w
 8009012:	2301      	movs	r3, #1
 8009014:	7023      	strb	r3, [r4, #0]
 8009016:	bd10      	pop	{r4, pc}
 8009018:	20008400 	.word	0x20008400
 800901c:	00000000 	.word	0x00000000
 8009020:	08010484 	.word	0x08010484

08009024 <frame_dummy>:
 8009024:	b508      	push	{r3, lr}
 8009026:	4b03      	ldr	r3, [pc, #12]	; (8009034 <frame_dummy+0x10>)
 8009028:	b11b      	cbz	r3, 8009032 <frame_dummy+0xe>
 800902a:	4903      	ldr	r1, [pc, #12]	; (8009038 <frame_dummy+0x14>)
 800902c:	4803      	ldr	r0, [pc, #12]	; (800903c <frame_dummy+0x18>)
 800902e:	f3af 8000 	nop.w
 8009032:	bd08      	pop	{r3, pc}
 8009034:	00000000 	.word	0x00000000
 8009038:	20008404 	.word	0x20008404
 800903c:	08010484 	.word	0x08010484

08009040 <strlen>:
 8009040:	4603      	mov	r3, r0
 8009042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009046:	2a00      	cmp	r2, #0
 8009048:	d1fb      	bne.n	8009042 <strlen+0x2>
 800904a:	1a18      	subs	r0, r3, r0
 800904c:	3801      	subs	r0, #1
 800904e:	4770      	bx	lr

08009050 <__aeabi_drsub>:
 8009050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8009054:	e002      	b.n	800905c <__adddf3>
 8009056:	bf00      	nop

08009058 <__aeabi_dsub>:
 8009058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800905c <__adddf3>:
 800905c:	b530      	push	{r4, r5, lr}
 800905e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8009062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8009066:	ea94 0f05 	teq	r4, r5
 800906a:	bf08      	it	eq
 800906c:	ea90 0f02 	teqeq	r0, r2
 8009070:	bf1f      	itttt	ne
 8009072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8009076:	ea55 0c02 	orrsne.w	ip, r5, r2
 800907a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800907e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009082:	f000 80e2 	beq.w	800924a <__adddf3+0x1ee>
 8009086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800908a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800908e:	bfb8      	it	lt
 8009090:	426d      	neglt	r5, r5
 8009092:	dd0c      	ble.n	80090ae <__adddf3+0x52>
 8009094:	442c      	add	r4, r5
 8009096:	ea80 0202 	eor.w	r2, r0, r2
 800909a:	ea81 0303 	eor.w	r3, r1, r3
 800909e:	ea82 0000 	eor.w	r0, r2, r0
 80090a2:	ea83 0101 	eor.w	r1, r3, r1
 80090a6:	ea80 0202 	eor.w	r2, r0, r2
 80090aa:	ea81 0303 	eor.w	r3, r1, r3
 80090ae:	2d36      	cmp	r5, #54	; 0x36
 80090b0:	bf88      	it	hi
 80090b2:	bd30      	pophi	{r4, r5, pc}
 80090b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80090b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80090bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80090c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80090c4:	d002      	beq.n	80090cc <__adddf3+0x70>
 80090c6:	4240      	negs	r0, r0
 80090c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80090cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80090d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80090d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80090d8:	d002      	beq.n	80090e0 <__adddf3+0x84>
 80090da:	4252      	negs	r2, r2
 80090dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80090e0:	ea94 0f05 	teq	r4, r5
 80090e4:	f000 80a7 	beq.w	8009236 <__adddf3+0x1da>
 80090e8:	f1a4 0401 	sub.w	r4, r4, #1
 80090ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80090f0:	db0d      	blt.n	800910e <__adddf3+0xb2>
 80090f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80090f6:	fa22 f205 	lsr.w	r2, r2, r5
 80090fa:	1880      	adds	r0, r0, r2
 80090fc:	f141 0100 	adc.w	r1, r1, #0
 8009100:	fa03 f20e 	lsl.w	r2, r3, lr
 8009104:	1880      	adds	r0, r0, r2
 8009106:	fa43 f305 	asr.w	r3, r3, r5
 800910a:	4159      	adcs	r1, r3
 800910c:	e00e      	b.n	800912c <__adddf3+0xd0>
 800910e:	f1a5 0520 	sub.w	r5, r5, #32
 8009112:	f10e 0e20 	add.w	lr, lr, #32
 8009116:	2a01      	cmp	r2, #1
 8009118:	fa03 fc0e 	lsl.w	ip, r3, lr
 800911c:	bf28      	it	cs
 800911e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009122:	fa43 f305 	asr.w	r3, r3, r5
 8009126:	18c0      	adds	r0, r0, r3
 8009128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800912c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009130:	d507      	bpl.n	8009142 <__adddf3+0xe6>
 8009132:	f04f 0e00 	mov.w	lr, #0
 8009136:	f1dc 0c00 	rsbs	ip, ip, #0
 800913a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800913e:	eb6e 0101 	sbc.w	r1, lr, r1
 8009142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009146:	d31b      	bcc.n	8009180 <__adddf3+0x124>
 8009148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800914c:	d30c      	bcc.n	8009168 <__adddf3+0x10c>
 800914e:	0849      	lsrs	r1, r1, #1
 8009150:	ea5f 0030 	movs.w	r0, r0, rrx
 8009154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8009158:	f104 0401 	add.w	r4, r4, #1
 800915c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8009164:	f080 809a 	bcs.w	800929c <__adddf3+0x240>
 8009168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800916c:	bf08      	it	eq
 800916e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009172:	f150 0000 	adcs.w	r0, r0, #0
 8009176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800917a:	ea41 0105 	orr.w	r1, r1, r5
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8009184:	4140      	adcs	r0, r0
 8009186:	eb41 0101 	adc.w	r1, r1, r1
 800918a:	3c01      	subs	r4, #1
 800918c:	bf28      	it	cs
 800918e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8009192:	d2e9      	bcs.n	8009168 <__adddf3+0x10c>
 8009194:	f091 0f00 	teq	r1, #0
 8009198:	bf04      	itt	eq
 800919a:	4601      	moveq	r1, r0
 800919c:	2000      	moveq	r0, #0
 800919e:	fab1 f381 	clz	r3, r1
 80091a2:	bf08      	it	eq
 80091a4:	3320      	addeq	r3, #32
 80091a6:	f1a3 030b 	sub.w	r3, r3, #11
 80091aa:	f1b3 0220 	subs.w	r2, r3, #32
 80091ae:	da0c      	bge.n	80091ca <__adddf3+0x16e>
 80091b0:	320c      	adds	r2, #12
 80091b2:	dd08      	ble.n	80091c6 <__adddf3+0x16a>
 80091b4:	f102 0c14 	add.w	ip, r2, #20
 80091b8:	f1c2 020c 	rsb	r2, r2, #12
 80091bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80091c0:	fa21 f102 	lsr.w	r1, r1, r2
 80091c4:	e00c      	b.n	80091e0 <__adddf3+0x184>
 80091c6:	f102 0214 	add.w	r2, r2, #20
 80091ca:	bfd8      	it	le
 80091cc:	f1c2 0c20 	rsble	ip, r2, #32
 80091d0:	fa01 f102 	lsl.w	r1, r1, r2
 80091d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80091d8:	bfdc      	itt	le
 80091da:	ea41 010c 	orrle.w	r1, r1, ip
 80091de:	4090      	lslle	r0, r2
 80091e0:	1ae4      	subs	r4, r4, r3
 80091e2:	bfa2      	ittt	ge
 80091e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80091e8:	4329      	orrge	r1, r5
 80091ea:	bd30      	popge	{r4, r5, pc}
 80091ec:	ea6f 0404 	mvn.w	r4, r4
 80091f0:	3c1f      	subs	r4, #31
 80091f2:	da1c      	bge.n	800922e <__adddf3+0x1d2>
 80091f4:	340c      	adds	r4, #12
 80091f6:	dc0e      	bgt.n	8009216 <__adddf3+0x1ba>
 80091f8:	f104 0414 	add.w	r4, r4, #20
 80091fc:	f1c4 0220 	rsb	r2, r4, #32
 8009200:	fa20 f004 	lsr.w	r0, r0, r4
 8009204:	fa01 f302 	lsl.w	r3, r1, r2
 8009208:	ea40 0003 	orr.w	r0, r0, r3
 800920c:	fa21 f304 	lsr.w	r3, r1, r4
 8009210:	ea45 0103 	orr.w	r1, r5, r3
 8009214:	bd30      	pop	{r4, r5, pc}
 8009216:	f1c4 040c 	rsb	r4, r4, #12
 800921a:	f1c4 0220 	rsb	r2, r4, #32
 800921e:	fa20 f002 	lsr.w	r0, r0, r2
 8009222:	fa01 f304 	lsl.w	r3, r1, r4
 8009226:	ea40 0003 	orr.w	r0, r0, r3
 800922a:	4629      	mov	r1, r5
 800922c:	bd30      	pop	{r4, r5, pc}
 800922e:	fa21 f004 	lsr.w	r0, r1, r4
 8009232:	4629      	mov	r1, r5
 8009234:	bd30      	pop	{r4, r5, pc}
 8009236:	f094 0f00 	teq	r4, #0
 800923a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800923e:	bf06      	itte	eq
 8009240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8009244:	3401      	addeq	r4, #1
 8009246:	3d01      	subne	r5, #1
 8009248:	e74e      	b.n	80090e8 <__adddf3+0x8c>
 800924a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800924e:	bf18      	it	ne
 8009250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009254:	d029      	beq.n	80092aa <__adddf3+0x24e>
 8009256:	ea94 0f05 	teq	r4, r5
 800925a:	bf08      	it	eq
 800925c:	ea90 0f02 	teqeq	r0, r2
 8009260:	d005      	beq.n	800926e <__adddf3+0x212>
 8009262:	ea54 0c00 	orrs.w	ip, r4, r0
 8009266:	bf04      	itt	eq
 8009268:	4619      	moveq	r1, r3
 800926a:	4610      	moveq	r0, r2
 800926c:	bd30      	pop	{r4, r5, pc}
 800926e:	ea91 0f03 	teq	r1, r3
 8009272:	bf1e      	ittt	ne
 8009274:	2100      	movne	r1, #0
 8009276:	2000      	movne	r0, #0
 8009278:	bd30      	popne	{r4, r5, pc}
 800927a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800927e:	d105      	bne.n	800928c <__adddf3+0x230>
 8009280:	0040      	lsls	r0, r0, #1
 8009282:	4149      	adcs	r1, r1
 8009284:	bf28      	it	cs
 8009286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800928a:	bd30      	pop	{r4, r5, pc}
 800928c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8009290:	bf3c      	itt	cc
 8009292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009296:	bd30      	popcc	{r4, r5, pc}
 8009298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800929c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80092a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092a4:	f04f 0000 	mov.w	r0, #0
 80092a8:	bd30      	pop	{r4, r5, pc}
 80092aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80092ae:	bf1a      	itte	ne
 80092b0:	4619      	movne	r1, r3
 80092b2:	4610      	movne	r0, r2
 80092b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80092b8:	bf1c      	itt	ne
 80092ba:	460b      	movne	r3, r1
 80092bc:	4602      	movne	r2, r0
 80092be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80092c2:	bf06      	itte	eq
 80092c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80092c8:	ea91 0f03 	teqeq	r1, r3
 80092cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80092d0:	bd30      	pop	{r4, r5, pc}
 80092d2:	bf00      	nop

080092d4 <__aeabi_ui2d>:
 80092d4:	f090 0f00 	teq	r0, #0
 80092d8:	bf04      	itt	eq
 80092da:	2100      	moveq	r1, #0
 80092dc:	4770      	bxeq	lr
 80092de:	b530      	push	{r4, r5, lr}
 80092e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80092e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80092e8:	f04f 0500 	mov.w	r5, #0
 80092ec:	f04f 0100 	mov.w	r1, #0
 80092f0:	e750      	b.n	8009194 <__adddf3+0x138>
 80092f2:	bf00      	nop

080092f4 <__aeabi_i2d>:
 80092f4:	f090 0f00 	teq	r0, #0
 80092f8:	bf04      	itt	eq
 80092fa:	2100      	moveq	r1, #0
 80092fc:	4770      	bxeq	lr
 80092fe:	b530      	push	{r4, r5, lr}
 8009300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800930c:	bf48      	it	mi
 800930e:	4240      	negmi	r0, r0
 8009310:	f04f 0100 	mov.w	r1, #0
 8009314:	e73e      	b.n	8009194 <__adddf3+0x138>
 8009316:	bf00      	nop

08009318 <__aeabi_f2d>:
 8009318:	0042      	lsls	r2, r0, #1
 800931a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800931e:	ea4f 0131 	mov.w	r1, r1, rrx
 8009322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8009326:	bf1f      	itttt	ne
 8009328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800932c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009334:	4770      	bxne	lr
 8009336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800933a:	bf08      	it	eq
 800933c:	4770      	bxeq	lr
 800933e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8009342:	bf04      	itt	eq
 8009344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8009348:	4770      	bxeq	lr
 800934a:	b530      	push	{r4, r5, lr}
 800934c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009358:	e71c      	b.n	8009194 <__adddf3+0x138>
 800935a:	bf00      	nop

0800935c <__aeabi_ul2d>:
 800935c:	ea50 0201 	orrs.w	r2, r0, r1
 8009360:	bf08      	it	eq
 8009362:	4770      	bxeq	lr
 8009364:	b530      	push	{r4, r5, lr}
 8009366:	f04f 0500 	mov.w	r5, #0
 800936a:	e00a      	b.n	8009382 <__aeabi_l2d+0x16>

0800936c <__aeabi_l2d>:
 800936c:	ea50 0201 	orrs.w	r2, r0, r1
 8009370:	bf08      	it	eq
 8009372:	4770      	bxeq	lr
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800937a:	d502      	bpl.n	8009382 <__aeabi_l2d+0x16>
 800937c:	4240      	negs	r0, r0
 800937e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800938a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800938e:	f43f aed8 	beq.w	8009142 <__adddf3+0xe6>
 8009392:	f04f 0203 	mov.w	r2, #3
 8009396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800939a:	bf18      	it	ne
 800939c:	3203      	addne	r2, #3
 800939e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80093a2:	bf18      	it	ne
 80093a4:	3203      	addne	r2, #3
 80093a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80093aa:	f1c2 0320 	rsb	r3, r2, #32
 80093ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80093b2:	fa20 f002 	lsr.w	r0, r0, r2
 80093b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80093ba:	ea40 000e 	orr.w	r0, r0, lr
 80093be:	fa21 f102 	lsr.w	r1, r1, r2
 80093c2:	4414      	add	r4, r2
 80093c4:	e6bd      	b.n	8009142 <__adddf3+0xe6>
 80093c6:	bf00      	nop

080093c8 <__aeabi_dmul>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80093ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80093d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80093d6:	bf1d      	ittte	ne
 80093d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80093dc:	ea94 0f0c 	teqne	r4, ip
 80093e0:	ea95 0f0c 	teqne	r5, ip
 80093e4:	f000 f8de 	bleq	80095a4 <__aeabi_dmul+0x1dc>
 80093e8:	442c      	add	r4, r5
 80093ea:	ea81 0603 	eor.w	r6, r1, r3
 80093ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80093f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80093f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80093fa:	bf18      	it	ne
 80093fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8009400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009408:	d038      	beq.n	800947c <__aeabi_dmul+0xb4>
 800940a:	fba0 ce02 	umull	ip, lr, r0, r2
 800940e:	f04f 0500 	mov.w	r5, #0
 8009412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8009416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800941a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800941e:	f04f 0600 	mov.w	r6, #0
 8009422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8009426:	f09c 0f00 	teq	ip, #0
 800942a:	bf18      	it	ne
 800942c:	f04e 0e01 	orrne.w	lr, lr, #1
 8009430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8009434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800943c:	d204      	bcs.n	8009448 <__aeabi_dmul+0x80>
 800943e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8009442:	416d      	adcs	r5, r5
 8009444:	eb46 0606 	adc.w	r6, r6, r6
 8009448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800944c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800945c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009460:	bf88      	it	hi
 8009462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009466:	d81e      	bhi.n	80094a6 <__aeabi_dmul+0xde>
 8009468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800946c:	bf08      	it	eq
 800946e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009472:	f150 0000 	adcs.w	r0, r0, #0
 8009476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009480:	ea46 0101 	orr.w	r1, r6, r1
 8009484:	ea40 0002 	orr.w	r0, r0, r2
 8009488:	ea81 0103 	eor.w	r1, r1, r3
 800948c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8009490:	bfc2      	ittt	gt
 8009492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800949a:	bd70      	popgt	{r4, r5, r6, pc}
 800949c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80094a0:	f04f 0e00 	mov.w	lr, #0
 80094a4:	3c01      	subs	r4, #1
 80094a6:	f300 80ab 	bgt.w	8009600 <__aeabi_dmul+0x238>
 80094aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80094ae:	bfde      	ittt	le
 80094b0:	2000      	movle	r0, #0
 80094b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80094b6:	bd70      	pople	{r4, r5, r6, pc}
 80094b8:	f1c4 0400 	rsb	r4, r4, #0
 80094bc:	3c20      	subs	r4, #32
 80094be:	da35      	bge.n	800952c <__aeabi_dmul+0x164>
 80094c0:	340c      	adds	r4, #12
 80094c2:	dc1b      	bgt.n	80094fc <__aeabi_dmul+0x134>
 80094c4:	f104 0414 	add.w	r4, r4, #20
 80094c8:	f1c4 0520 	rsb	r5, r4, #32
 80094cc:	fa00 f305 	lsl.w	r3, r0, r5
 80094d0:	fa20 f004 	lsr.w	r0, r0, r4
 80094d4:	fa01 f205 	lsl.w	r2, r1, r5
 80094d8:	ea40 0002 	orr.w	r0, r0, r2
 80094dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80094e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80094e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80094e8:	fa21 f604 	lsr.w	r6, r1, r4
 80094ec:	eb42 0106 	adc.w	r1, r2, r6
 80094f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80094f4:	bf08      	it	eq
 80094f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f1c4 040c 	rsb	r4, r4, #12
 8009500:	f1c4 0520 	rsb	r5, r4, #32
 8009504:	fa00 f304 	lsl.w	r3, r0, r4
 8009508:	fa20 f005 	lsr.w	r0, r0, r5
 800950c:	fa01 f204 	lsl.w	r2, r1, r4
 8009510:	ea40 0002 	orr.w	r0, r0, r2
 8009514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800951c:	f141 0100 	adc.w	r1, r1, #0
 8009520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009524:	bf08      	it	eq
 8009526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	f1c4 0520 	rsb	r5, r4, #32
 8009530:	fa00 f205 	lsl.w	r2, r0, r5
 8009534:	ea4e 0e02 	orr.w	lr, lr, r2
 8009538:	fa20 f304 	lsr.w	r3, r0, r4
 800953c:	fa01 f205 	lsl.w	r2, r1, r5
 8009540:	ea43 0302 	orr.w	r3, r3, r2
 8009544:	fa21 f004 	lsr.w	r0, r1, r4
 8009548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800954c:	fa21 f204 	lsr.w	r2, r1, r4
 8009550:	ea20 0002 	bic.w	r0, r0, r2
 8009554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800955c:	bf08      	it	eq
 800955e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	f094 0f00 	teq	r4, #0
 8009568:	d10f      	bne.n	800958a <__aeabi_dmul+0x1c2>
 800956a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800956e:	0040      	lsls	r0, r0, #1
 8009570:	eb41 0101 	adc.w	r1, r1, r1
 8009574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009578:	bf08      	it	eq
 800957a:	3c01      	subeq	r4, #1
 800957c:	d0f7      	beq.n	800956e <__aeabi_dmul+0x1a6>
 800957e:	ea41 0106 	orr.w	r1, r1, r6
 8009582:	f095 0f00 	teq	r5, #0
 8009586:	bf18      	it	ne
 8009588:	4770      	bxne	lr
 800958a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800958e:	0052      	lsls	r2, r2, #1
 8009590:	eb43 0303 	adc.w	r3, r3, r3
 8009594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009598:	bf08      	it	eq
 800959a:	3d01      	subeq	r5, #1
 800959c:	d0f7      	beq.n	800958e <__aeabi_dmul+0x1c6>
 800959e:	ea43 0306 	orr.w	r3, r3, r6
 80095a2:	4770      	bx	lr
 80095a4:	ea94 0f0c 	teq	r4, ip
 80095a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80095ac:	bf18      	it	ne
 80095ae:	ea95 0f0c 	teqne	r5, ip
 80095b2:	d00c      	beq.n	80095ce <__aeabi_dmul+0x206>
 80095b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80095b8:	bf18      	it	ne
 80095ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80095be:	d1d1      	bne.n	8009564 <__aeabi_dmul+0x19c>
 80095c0:	ea81 0103 	eor.w	r1, r1, r3
 80095c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80095c8:	f04f 0000 	mov.w	r0, #0
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
 80095ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80095d2:	bf06      	itte	eq
 80095d4:	4610      	moveq	r0, r2
 80095d6:	4619      	moveq	r1, r3
 80095d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80095dc:	d019      	beq.n	8009612 <__aeabi_dmul+0x24a>
 80095de:	ea94 0f0c 	teq	r4, ip
 80095e2:	d102      	bne.n	80095ea <__aeabi_dmul+0x222>
 80095e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80095e8:	d113      	bne.n	8009612 <__aeabi_dmul+0x24a>
 80095ea:	ea95 0f0c 	teq	r5, ip
 80095ee:	d105      	bne.n	80095fc <__aeabi_dmul+0x234>
 80095f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80095f4:	bf1c      	itt	ne
 80095f6:	4610      	movne	r0, r2
 80095f8:	4619      	movne	r1, r3
 80095fa:	d10a      	bne.n	8009612 <__aeabi_dmul+0x24a>
 80095fc:	ea81 0103 	eor.w	r1, r1, r3
 8009600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800960c:	f04f 0000 	mov.w	r0, #0
 8009610:	bd70      	pop	{r4, r5, r6, pc}
 8009612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800961a:	bd70      	pop	{r4, r5, r6, pc}

0800961c <__aeabi_ddiv>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800962a:	bf1d      	ittte	ne
 800962c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009630:	ea94 0f0c 	teqne	r4, ip
 8009634:	ea95 0f0c 	teqne	r5, ip
 8009638:	f000 f8a7 	bleq	800978a <__aeabi_ddiv+0x16e>
 800963c:	eba4 0405 	sub.w	r4, r4, r5
 8009640:	ea81 0e03 	eor.w	lr, r1, r3
 8009644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800964c:	f000 8088 	beq.w	8009760 <__aeabi_ddiv+0x144>
 8009650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800965c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800966c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8009670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009674:	429d      	cmp	r5, r3
 8009676:	bf08      	it	eq
 8009678:	4296      	cmpeq	r6, r2
 800967a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800967e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8009682:	d202      	bcs.n	800968a <__aeabi_ddiv+0x6e>
 8009684:	085b      	lsrs	r3, r3, #1
 8009686:	ea4f 0232 	mov.w	r2, r2, rrx
 800968a:	1ab6      	subs	r6, r6, r2
 800968c:	eb65 0503 	sbc.w	r5, r5, r3
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	ea4f 0232 	mov.w	r2, r2, rrx
 8009696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800969a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800969e:	ebb6 0e02 	subs.w	lr, r6, r2
 80096a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80096a6:	bf22      	ittt	cs
 80096a8:	1ab6      	subcs	r6, r6, r2
 80096aa:	4675      	movcs	r5, lr
 80096ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80096b0:	085b      	lsrs	r3, r3, #1
 80096b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80096b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80096ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80096be:	bf22      	ittt	cs
 80096c0:	1ab6      	subcs	r6, r6, r2
 80096c2:	4675      	movcs	r5, lr
 80096c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80096ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80096d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80096d6:	bf22      	ittt	cs
 80096d8:	1ab6      	subcs	r6, r6, r2
 80096da:	4675      	movcs	r5, lr
 80096dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80096e0:	085b      	lsrs	r3, r3, #1
 80096e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80096e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80096ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80096ee:	bf22      	ittt	cs
 80096f0:	1ab6      	subcs	r6, r6, r2
 80096f2:	4675      	movcs	r5, lr
 80096f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80096f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80096fc:	d018      	beq.n	8009730 <__aeabi_ddiv+0x114>
 80096fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8009702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800970a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800970e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8009712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800971a:	d1c0      	bne.n	800969e <__aeabi_ddiv+0x82>
 800971c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009720:	d10b      	bne.n	800973a <__aeabi_ddiv+0x11e>
 8009722:	ea41 0100 	orr.w	r1, r1, r0
 8009726:	f04f 0000 	mov.w	r0, #0
 800972a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800972e:	e7b6      	b.n	800969e <__aeabi_ddiv+0x82>
 8009730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009734:	bf04      	itt	eq
 8009736:	4301      	orreq	r1, r0
 8009738:	2000      	moveq	r0, #0
 800973a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800973e:	bf88      	it	hi
 8009740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009744:	f63f aeaf 	bhi.w	80094a6 <__aeabi_dmul+0xde>
 8009748:	ebb5 0c03 	subs.w	ip, r5, r3
 800974c:	bf04      	itt	eq
 800974e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8009752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009756:	f150 0000 	adcs.w	r0, r0, #0
 800975a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800976c:	bfc2      	ittt	gt
 800976e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009776:	bd70      	popgt	{r4, r5, r6, pc}
 8009778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800977c:	f04f 0e00 	mov.w	lr, #0
 8009780:	3c01      	subs	r4, #1
 8009782:	e690      	b.n	80094a6 <__aeabi_dmul+0xde>
 8009784:	ea45 0e06 	orr.w	lr, r5, r6
 8009788:	e68d      	b.n	80094a6 <__aeabi_dmul+0xde>
 800978a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800978e:	ea94 0f0c 	teq	r4, ip
 8009792:	bf08      	it	eq
 8009794:	ea95 0f0c 	teqeq	r5, ip
 8009798:	f43f af3b 	beq.w	8009612 <__aeabi_dmul+0x24a>
 800979c:	ea94 0f0c 	teq	r4, ip
 80097a0:	d10a      	bne.n	80097b8 <__aeabi_ddiv+0x19c>
 80097a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80097a6:	f47f af34 	bne.w	8009612 <__aeabi_dmul+0x24a>
 80097aa:	ea95 0f0c 	teq	r5, ip
 80097ae:	f47f af25 	bne.w	80095fc <__aeabi_dmul+0x234>
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	e72c      	b.n	8009612 <__aeabi_dmul+0x24a>
 80097b8:	ea95 0f0c 	teq	r5, ip
 80097bc:	d106      	bne.n	80097cc <__aeabi_ddiv+0x1b0>
 80097be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80097c2:	f43f aefd 	beq.w	80095c0 <__aeabi_dmul+0x1f8>
 80097c6:	4610      	mov	r0, r2
 80097c8:	4619      	mov	r1, r3
 80097ca:	e722      	b.n	8009612 <__aeabi_dmul+0x24a>
 80097cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80097d0:	bf18      	it	ne
 80097d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80097d6:	f47f aec5 	bne.w	8009564 <__aeabi_dmul+0x19c>
 80097da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80097de:	f47f af0d 	bne.w	80095fc <__aeabi_dmul+0x234>
 80097e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80097e6:	f47f aeeb 	bne.w	80095c0 <__aeabi_dmul+0x1f8>
 80097ea:	e712      	b.n	8009612 <__aeabi_dmul+0x24a>

080097ec <__gedf2>:
 80097ec:	f04f 3cff 	mov.w	ip, #4294967295
 80097f0:	e006      	b.n	8009800 <__cmpdf2+0x4>
 80097f2:	bf00      	nop

080097f4 <__ledf2>:
 80097f4:	f04f 0c01 	mov.w	ip, #1
 80097f8:	e002      	b.n	8009800 <__cmpdf2+0x4>
 80097fa:	bf00      	nop

080097fc <__cmpdf2>:
 80097fc:	f04f 0c01 	mov.w	ip, #1
 8009800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800980c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009810:	bf18      	it	ne
 8009812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8009816:	d01b      	beq.n	8009850 <__cmpdf2+0x54>
 8009818:	b001      	add	sp, #4
 800981a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800981e:	bf0c      	ite	eq
 8009820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8009824:	ea91 0f03 	teqne	r1, r3
 8009828:	bf02      	ittt	eq
 800982a:	ea90 0f02 	teqeq	r0, r2
 800982e:	2000      	moveq	r0, #0
 8009830:	4770      	bxeq	lr
 8009832:	f110 0f00 	cmn.w	r0, #0
 8009836:	ea91 0f03 	teq	r1, r3
 800983a:	bf58      	it	pl
 800983c:	4299      	cmppl	r1, r3
 800983e:	bf08      	it	eq
 8009840:	4290      	cmpeq	r0, r2
 8009842:	bf2c      	ite	cs
 8009844:	17d8      	asrcs	r0, r3, #31
 8009846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800984a:	f040 0001 	orr.w	r0, r0, #1
 800984e:	4770      	bx	lr
 8009850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009858:	d102      	bne.n	8009860 <__cmpdf2+0x64>
 800985a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800985e:	d107      	bne.n	8009870 <__cmpdf2+0x74>
 8009860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009868:	d1d6      	bne.n	8009818 <__cmpdf2+0x1c>
 800986a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800986e:	d0d3      	beq.n	8009818 <__cmpdf2+0x1c>
 8009870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop

08009878 <__aeabi_cdrcmple>:
 8009878:	4684      	mov	ip, r0
 800987a:	4610      	mov	r0, r2
 800987c:	4662      	mov	r2, ip
 800987e:	468c      	mov	ip, r1
 8009880:	4619      	mov	r1, r3
 8009882:	4663      	mov	r3, ip
 8009884:	e000      	b.n	8009888 <__aeabi_cdcmpeq>
 8009886:	bf00      	nop

08009888 <__aeabi_cdcmpeq>:
 8009888:	b501      	push	{r0, lr}
 800988a:	f7ff ffb7 	bl	80097fc <__cmpdf2>
 800988e:	2800      	cmp	r0, #0
 8009890:	bf48      	it	mi
 8009892:	f110 0f00 	cmnmi.w	r0, #0
 8009896:	bd01      	pop	{r0, pc}

08009898 <__aeabi_dcmpeq>:
 8009898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800989c:	f7ff fff4 	bl	8009888 <__aeabi_cdcmpeq>
 80098a0:	bf0c      	ite	eq
 80098a2:	2001      	moveq	r0, #1
 80098a4:	2000      	movne	r0, #0
 80098a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80098aa:	bf00      	nop

080098ac <__aeabi_dcmplt>:
 80098ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80098b0:	f7ff ffea 	bl	8009888 <__aeabi_cdcmpeq>
 80098b4:	bf34      	ite	cc
 80098b6:	2001      	movcc	r0, #1
 80098b8:	2000      	movcs	r0, #0
 80098ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80098be:	bf00      	nop

080098c0 <__aeabi_dcmple>:
 80098c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80098c4:	f7ff ffe0 	bl	8009888 <__aeabi_cdcmpeq>
 80098c8:	bf94      	ite	ls
 80098ca:	2001      	movls	r0, #1
 80098cc:	2000      	movhi	r0, #0
 80098ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80098d2:	bf00      	nop

080098d4 <__aeabi_dcmpge>:
 80098d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80098d8:	f7ff ffce 	bl	8009878 <__aeabi_cdrcmple>
 80098dc:	bf94      	ite	ls
 80098de:	2001      	movls	r0, #1
 80098e0:	2000      	movhi	r0, #0
 80098e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80098e6:	bf00      	nop

080098e8 <__aeabi_dcmpgt>:
 80098e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80098ec:	f7ff ffc4 	bl	8009878 <__aeabi_cdrcmple>
 80098f0:	bf34      	ite	cc
 80098f2:	2001      	movcc	r0, #1
 80098f4:	2000      	movcs	r0, #0
 80098f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80098fa:	bf00      	nop

080098fc <__aeabi_d2iz>:
 80098fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009904:	d215      	bcs.n	8009932 <__aeabi_d2iz+0x36>
 8009906:	d511      	bpl.n	800992c <__aeabi_d2iz+0x30>
 8009908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800990c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009910:	d912      	bls.n	8009938 <__aeabi_d2iz+0x3c>
 8009912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800991a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800991e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009922:	fa23 f002 	lsr.w	r0, r3, r2
 8009926:	bf18      	it	ne
 8009928:	4240      	negne	r0, r0
 800992a:	4770      	bx	lr
 800992c:	f04f 0000 	mov.w	r0, #0
 8009930:	4770      	bx	lr
 8009932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8009936:	d105      	bne.n	8009944 <__aeabi_d2iz+0x48>
 8009938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800993c:	bf08      	it	eq
 800993e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009942:	4770      	bx	lr
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop

0800994c <__aeabi_d2uiz>:
 800994c:	004a      	lsls	r2, r1, #1
 800994e:	d211      	bcs.n	8009974 <__aeabi_d2uiz+0x28>
 8009950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009954:	d211      	bcs.n	800997a <__aeabi_d2uiz+0x2e>
 8009956:	d50d      	bpl.n	8009974 <__aeabi_d2uiz+0x28>
 8009958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800995c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009960:	d40e      	bmi.n	8009980 <__aeabi_d2uiz+0x34>
 8009962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800996a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800996e:	fa23 f002 	lsr.w	r0, r3, r2
 8009972:	4770      	bx	lr
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	4770      	bx	lr
 800997a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800997e:	d102      	bne.n	8009986 <__aeabi_d2uiz+0x3a>
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	4770      	bx	lr
 8009986:	f04f 0000 	mov.w	r0, #0
 800998a:	4770      	bx	lr

0800998c <__aeabi_uldivmod>:
 800998c:	b953      	cbnz	r3, 80099a4 <__aeabi_uldivmod+0x18>
 800998e:	b94a      	cbnz	r2, 80099a4 <__aeabi_uldivmod+0x18>
 8009990:	2900      	cmp	r1, #0
 8009992:	bf08      	it	eq
 8009994:	2800      	cmpeq	r0, #0
 8009996:	bf1c      	itt	ne
 8009998:	f04f 31ff 	movne.w	r1, #4294967295
 800999c:	f04f 30ff 	movne.w	r0, #4294967295
 80099a0:	f000 b96e 	b.w	8009c80 <__aeabi_idiv0>
 80099a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80099a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80099ac:	f000 f806 	bl	80099bc <__udivmoddi4>
 80099b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80099b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b8:	b004      	add	sp, #16
 80099ba:	4770      	bx	lr

080099bc <__udivmoddi4>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	9e08      	ldr	r6, [sp, #32]
 80099c2:	460d      	mov	r5, r1
 80099c4:	4604      	mov	r4, r0
 80099c6:	468e      	mov	lr, r1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 8083 	bne.w	8009ad4 <__udivmoddi4+0x118>
 80099ce:	428a      	cmp	r2, r1
 80099d0:	4617      	mov	r7, r2
 80099d2:	d947      	bls.n	8009a64 <__udivmoddi4+0xa8>
 80099d4:	fab2 f382 	clz	r3, r2
 80099d8:	b14b      	cbz	r3, 80099ee <__udivmoddi4+0x32>
 80099da:	f1c3 0120 	rsb	r1, r3, #32
 80099de:	fa05 fe03 	lsl.w	lr, r5, r3
 80099e2:	fa20 f101 	lsr.w	r1, r0, r1
 80099e6:	409f      	lsls	r7, r3
 80099e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80099ec:	409c      	lsls	r4, r3
 80099ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80099f2:	fbbe fcf8 	udiv	ip, lr, r8
 80099f6:	fa1f f987 	uxth.w	r9, r7
 80099fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80099fe:	fb0c f009 	mul.w	r0, ip, r9
 8009a02:	0c21      	lsrs	r1, r4, #16
 8009a04:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8009a08:	4290      	cmp	r0, r2
 8009a0a:	d90a      	bls.n	8009a22 <__udivmoddi4+0x66>
 8009a0c:	18ba      	adds	r2, r7, r2
 8009a0e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009a12:	f080 8118 	bcs.w	8009c46 <__udivmoddi4+0x28a>
 8009a16:	4290      	cmp	r0, r2
 8009a18:	f240 8115 	bls.w	8009c46 <__udivmoddi4+0x28a>
 8009a1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8009a20:	443a      	add	r2, r7
 8009a22:	1a12      	subs	r2, r2, r0
 8009a24:	fbb2 f0f8 	udiv	r0, r2, r8
 8009a28:	fb08 2210 	mls	r2, r8, r0, r2
 8009a2c:	fb00 f109 	mul.w	r1, r0, r9
 8009a30:	b2a4      	uxth	r4, r4
 8009a32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a36:	42a1      	cmp	r1, r4
 8009a38:	d909      	bls.n	8009a4e <__udivmoddi4+0x92>
 8009a3a:	193c      	adds	r4, r7, r4
 8009a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8009a40:	f080 8103 	bcs.w	8009c4a <__udivmoddi4+0x28e>
 8009a44:	42a1      	cmp	r1, r4
 8009a46:	f240 8100 	bls.w	8009c4a <__udivmoddi4+0x28e>
 8009a4a:	3802      	subs	r0, #2
 8009a4c:	443c      	add	r4, r7
 8009a4e:	1a64      	subs	r4, r4, r1
 8009a50:	2100      	movs	r1, #0
 8009a52:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8009a56:	b11e      	cbz	r6, 8009a60 <__udivmoddi4+0xa4>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	40dc      	lsrs	r4, r3
 8009a5c:	e9c6 4200 	strd	r4, r2, [r6]
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	b902      	cbnz	r2, 8009a68 <__udivmoddi4+0xac>
 8009a66:	deff      	udf	#255	; 0xff
 8009a68:	fab2 f382 	clz	r3, r2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d14f      	bne.n	8009b10 <__udivmoddi4+0x154>
 8009a70:	1a8d      	subs	r5, r1, r2
 8009a72:	2101      	movs	r1, #1
 8009a74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a78:	fa1f f882 	uxth.w	r8, r2
 8009a7c:	fbb5 fcfe 	udiv	ip, r5, lr
 8009a80:	fb0e 551c 	mls	r5, lr, ip, r5
 8009a84:	fb08 f00c 	mul.w	r0, r8, ip
 8009a88:	0c22      	lsrs	r2, r4, #16
 8009a8a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009a8e:	42a8      	cmp	r0, r5
 8009a90:	d907      	bls.n	8009aa2 <__udivmoddi4+0xe6>
 8009a92:	197d      	adds	r5, r7, r5
 8009a94:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009a98:	d202      	bcs.n	8009aa0 <__udivmoddi4+0xe4>
 8009a9a:	42a8      	cmp	r0, r5
 8009a9c:	f200 80e9 	bhi.w	8009c72 <__udivmoddi4+0x2b6>
 8009aa0:	4694      	mov	ip, r2
 8009aa2:	1a2d      	subs	r5, r5, r0
 8009aa4:	fbb5 f0fe 	udiv	r0, r5, lr
 8009aa8:	fb0e 5510 	mls	r5, lr, r0, r5
 8009aac:	fb08 f800 	mul.w	r8, r8, r0
 8009ab0:	b2a4      	uxth	r4, r4
 8009ab2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009ab6:	45a0      	cmp	r8, r4
 8009ab8:	d907      	bls.n	8009aca <__udivmoddi4+0x10e>
 8009aba:	193c      	adds	r4, r7, r4
 8009abc:	f100 32ff 	add.w	r2, r0, #4294967295
 8009ac0:	d202      	bcs.n	8009ac8 <__udivmoddi4+0x10c>
 8009ac2:	45a0      	cmp	r8, r4
 8009ac4:	f200 80d9 	bhi.w	8009c7a <__udivmoddi4+0x2be>
 8009ac8:	4610      	mov	r0, r2
 8009aca:	eba4 0408 	sub.w	r4, r4, r8
 8009ace:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8009ad2:	e7c0      	b.n	8009a56 <__udivmoddi4+0x9a>
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	d908      	bls.n	8009aea <__udivmoddi4+0x12e>
 8009ad8:	2e00      	cmp	r6, #0
 8009ada:	f000 80b1 	beq.w	8009c40 <__udivmoddi4+0x284>
 8009ade:	2100      	movs	r1, #0
 8009ae0:	e9c6 0500 	strd	r0, r5, [r6]
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aea:	fab3 f183 	clz	r1, r3
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d14b      	bne.n	8009b8a <__udivmoddi4+0x1ce>
 8009af2:	42ab      	cmp	r3, r5
 8009af4:	d302      	bcc.n	8009afc <__udivmoddi4+0x140>
 8009af6:	4282      	cmp	r2, r0
 8009af8:	f200 80b9 	bhi.w	8009c6e <__udivmoddi4+0x2b2>
 8009afc:	1a84      	subs	r4, r0, r2
 8009afe:	eb65 0303 	sbc.w	r3, r5, r3
 8009b02:	2001      	movs	r0, #1
 8009b04:	469e      	mov	lr, r3
 8009b06:	2e00      	cmp	r6, #0
 8009b08:	d0aa      	beq.n	8009a60 <__udivmoddi4+0xa4>
 8009b0a:	e9c6 4e00 	strd	r4, lr, [r6]
 8009b0e:	e7a7      	b.n	8009a60 <__udivmoddi4+0xa4>
 8009b10:	409f      	lsls	r7, r3
 8009b12:	f1c3 0220 	rsb	r2, r3, #32
 8009b16:	40d1      	lsrs	r1, r2
 8009b18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8009b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8009b20:	fa1f f887 	uxth.w	r8, r7
 8009b24:	fb0e 1110 	mls	r1, lr, r0, r1
 8009b28:	fa24 f202 	lsr.w	r2, r4, r2
 8009b2c:	409d      	lsls	r5, r3
 8009b2e:	fb00 fc08 	mul.w	ip, r0, r8
 8009b32:	432a      	orrs	r2, r5
 8009b34:	0c15      	lsrs	r5, r2, #16
 8009b36:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8009b3a:	45ac      	cmp	ip, r5
 8009b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8009b40:	d909      	bls.n	8009b56 <__udivmoddi4+0x19a>
 8009b42:	197d      	adds	r5, r7, r5
 8009b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8009b48:	f080 808f 	bcs.w	8009c6a <__udivmoddi4+0x2ae>
 8009b4c:	45ac      	cmp	ip, r5
 8009b4e:	f240 808c 	bls.w	8009c6a <__udivmoddi4+0x2ae>
 8009b52:	3802      	subs	r0, #2
 8009b54:	443d      	add	r5, r7
 8009b56:	eba5 050c 	sub.w	r5, r5, ip
 8009b5a:	fbb5 f1fe 	udiv	r1, r5, lr
 8009b5e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8009b62:	fb01 f908 	mul.w	r9, r1, r8
 8009b66:	b295      	uxth	r5, r2
 8009b68:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8009b6c:	45a9      	cmp	r9, r5
 8009b6e:	d907      	bls.n	8009b80 <__udivmoddi4+0x1c4>
 8009b70:	197d      	adds	r5, r7, r5
 8009b72:	f101 32ff 	add.w	r2, r1, #4294967295
 8009b76:	d274      	bcs.n	8009c62 <__udivmoddi4+0x2a6>
 8009b78:	45a9      	cmp	r9, r5
 8009b7a:	d972      	bls.n	8009c62 <__udivmoddi4+0x2a6>
 8009b7c:	3902      	subs	r1, #2
 8009b7e:	443d      	add	r5, r7
 8009b80:	eba5 0509 	sub.w	r5, r5, r9
 8009b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b88:	e778      	b.n	8009a7c <__udivmoddi4+0xc0>
 8009b8a:	f1c1 0720 	rsb	r7, r1, #32
 8009b8e:	408b      	lsls	r3, r1
 8009b90:	fa22 fc07 	lsr.w	ip, r2, r7
 8009b94:	ea4c 0c03 	orr.w	ip, ip, r3
 8009b98:	fa25 f407 	lsr.w	r4, r5, r7
 8009b9c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009ba0:	fbb4 f9fe 	udiv	r9, r4, lr
 8009ba4:	fa1f f88c 	uxth.w	r8, ip
 8009ba8:	fb0e 4419 	mls	r4, lr, r9, r4
 8009bac:	fa20 f307 	lsr.w	r3, r0, r7
 8009bb0:	fb09 fa08 	mul.w	sl, r9, r8
 8009bb4:	408d      	lsls	r5, r1
 8009bb6:	431d      	orrs	r5, r3
 8009bb8:	0c2b      	lsrs	r3, r5, #16
 8009bba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009bbe:	45a2      	cmp	sl, r4
 8009bc0:	fa02 f201 	lsl.w	r2, r2, r1
 8009bc4:	fa00 f301 	lsl.w	r3, r0, r1
 8009bc8:	d909      	bls.n	8009bde <__udivmoddi4+0x222>
 8009bca:	eb1c 0404 	adds.w	r4, ip, r4
 8009bce:	f109 30ff 	add.w	r0, r9, #4294967295
 8009bd2:	d248      	bcs.n	8009c66 <__udivmoddi4+0x2aa>
 8009bd4:	45a2      	cmp	sl, r4
 8009bd6:	d946      	bls.n	8009c66 <__udivmoddi4+0x2aa>
 8009bd8:	f1a9 0902 	sub.w	r9, r9, #2
 8009bdc:	4464      	add	r4, ip
 8009bde:	eba4 040a 	sub.w	r4, r4, sl
 8009be2:	fbb4 f0fe 	udiv	r0, r4, lr
 8009be6:	fb0e 4410 	mls	r4, lr, r0, r4
 8009bea:	fb00 fa08 	mul.w	sl, r0, r8
 8009bee:	b2ad      	uxth	r5, r5
 8009bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009bf4:	45a2      	cmp	sl, r4
 8009bf6:	d908      	bls.n	8009c0a <__udivmoddi4+0x24e>
 8009bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8009bfc:	f100 35ff 	add.w	r5, r0, #4294967295
 8009c00:	d22d      	bcs.n	8009c5e <__udivmoddi4+0x2a2>
 8009c02:	45a2      	cmp	sl, r4
 8009c04:	d92b      	bls.n	8009c5e <__udivmoddi4+0x2a2>
 8009c06:	3802      	subs	r0, #2
 8009c08:	4464      	add	r4, ip
 8009c0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8009c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8009c12:	eba4 040a 	sub.w	r4, r4, sl
 8009c16:	454c      	cmp	r4, r9
 8009c18:	46c6      	mov	lr, r8
 8009c1a:	464d      	mov	r5, r9
 8009c1c:	d319      	bcc.n	8009c52 <__udivmoddi4+0x296>
 8009c1e:	d016      	beq.n	8009c4e <__udivmoddi4+0x292>
 8009c20:	b15e      	cbz	r6, 8009c3a <__udivmoddi4+0x27e>
 8009c22:	ebb3 020e 	subs.w	r2, r3, lr
 8009c26:	eb64 0405 	sbc.w	r4, r4, r5
 8009c2a:	fa04 f707 	lsl.w	r7, r4, r7
 8009c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8009c32:	431f      	orrs	r7, r3
 8009c34:	40cc      	lsrs	r4, r1
 8009c36:	e9c6 7400 	strd	r7, r4, [r6]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c40:	4631      	mov	r1, r6
 8009c42:	4630      	mov	r0, r6
 8009c44:	e70c      	b.n	8009a60 <__udivmoddi4+0xa4>
 8009c46:	468c      	mov	ip, r1
 8009c48:	e6eb      	b.n	8009a22 <__udivmoddi4+0x66>
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	e6ff      	b.n	8009a4e <__udivmoddi4+0x92>
 8009c4e:	4543      	cmp	r3, r8
 8009c50:	d2e6      	bcs.n	8009c20 <__udivmoddi4+0x264>
 8009c52:	ebb8 0e02 	subs.w	lr, r8, r2
 8009c56:	eb69 050c 	sbc.w	r5, r9, ip
 8009c5a:	3801      	subs	r0, #1
 8009c5c:	e7e0      	b.n	8009c20 <__udivmoddi4+0x264>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	e7d3      	b.n	8009c0a <__udivmoddi4+0x24e>
 8009c62:	4611      	mov	r1, r2
 8009c64:	e78c      	b.n	8009b80 <__udivmoddi4+0x1c4>
 8009c66:	4681      	mov	r9, r0
 8009c68:	e7b9      	b.n	8009bde <__udivmoddi4+0x222>
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	e773      	b.n	8009b56 <__udivmoddi4+0x19a>
 8009c6e:	4608      	mov	r0, r1
 8009c70:	e749      	b.n	8009b06 <__udivmoddi4+0x14a>
 8009c72:	f1ac 0c02 	sub.w	ip, ip, #2
 8009c76:	443d      	add	r5, r7
 8009c78:	e713      	b.n	8009aa2 <__udivmoddi4+0xe6>
 8009c7a:	3802      	subs	r0, #2
 8009c7c:	443c      	add	r4, r7
 8009c7e:	e724      	b.n	8009aca <__udivmoddi4+0x10e>

08009c80 <__aeabi_idiv0>:
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop

08009c84 <app_main>:

#include "container.h"


void app_main( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0

	/* Start the DMA peripheral task*/


	/* Start the MPU demo. */
	vStartMPUDemo();
 8009c88:	f000 f922 	bl	8009ed0 <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 8009c8c:	f7fa f9e6 	bl	800405c <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009c90:	e7fe      	b.n	8009c90 <app_main+0xc>

08009c92 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009c9c:	e7fe      	b.n	8009c9c <vApplicationStackOverflowHook+0xa>

08009c9e <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009ca2:	e7fe      	b.n	8009ca2 <vApplicationMallocFailedHook+0x4>

08009ca4 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4a07      	ldr	r2, [pc, #28]	; (8009cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009cb4:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	4a06      	ldr	r2, [pc, #24]	; (8009cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8009cba:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	2000841c 	.word	0x2000841c
 8009cd4:	200084a8 	.word	0x200084a8

08009cd8 <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ce8:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a06      	ldr	r2, [pc, #24]	; (8009d08 <vApplicationGetTimerTaskMemory+0x30>)
 8009cee:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cf6:	601a      	str	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bc80      	pop	{r7}
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	200088a8 	.word	0x200088a8
 8009d08:	20008934 	.word	0x20008934

08009d0c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	bf0c      	ite	eq
 8009d20:	2301      	moveq	r3, #1
 8009d22:	2300      	movne	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	605a      	str	r2, [r3, #4]
}
 8009d42:	bf00      	nop
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bc80      	pop	{r7}
 8009d4a:	4770      	bx	lr

08009d4c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	619a      	str	r2, [r3, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr

08009d66 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	629a      	str	r2, [r3, #40]	; 0x28
#else
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
#endif /* GPIO_BRR_BR_0 */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr

08009d80 <prvTestTask>:
extern void MPU_xContainerEnableDWTcounter();
extern void MPU_xContainerSetDWTcounter(uint32_t val);
extern uint32_t MPU_xContainerGetDWTcounter();

static void prvTestTask( void * pvParameters )
{
 8009d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d82:	b0b1      	sub	sp, #196	; 0xc4
 8009d84:	af04      	add	r7, sp, #16
 8009d86:	6078      	str	r0, [r7, #4]


#if ADCBENCHMARK == 1
	 uint8_t cStringTest[]= "IxQxebhGMz4cI9JdRjsP9rCjGIvAMewsJqohA3KxyV4lmFzWuXVsSbnKA4LggQJKLCJW0ueyh0H4Z8ToLYaDvQ0SUK7vhWsfAySBIxQxebhGMz4cI9JdRjsP9rCjGIvAMewsJqohA3KxyV4lmFzWuXVsSbnKA4LggQJKLCJW0ueyh0H4Z8ToLYaDvQ0SUK7vhWsfAySB";
#else
	 uint8_t cStringTest[]="IxQxebhGMz4cI9JdRjsP9rCjGIvAMewsJqohA3KxyV4lmFzWuXVsSbnKA4LggQJKLCJW0ueyh0H4Z8ToLYaDvQ0SUK7vhWsfAySB";
 8009d88:	4a4d      	ldr	r2, [pc, #308]	; (8009ec0 <prvTestTask+0x140>)
 8009d8a:	f107 0308 	add.w	r3, r7, #8
 8009d8e:	4611      	mov	r1, r2
 8009d90:	2265      	movs	r2, #101	; 0x65
 8009d92:	4618      	mov	r0, r3
 8009d94:	f006 fb60 	bl	8010458 <memcpy>

#endif



    uint8_t ucSize = 1;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    uint64_t uLTotalCycles = 0;
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	f04f 0300 	mov.w	r3, #0
 8009da6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    uint8_t ucIterations = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    uint32_t bytesRX;

	//uint8_t ucIndex;
	BaseType_t xNotificationValue;

	LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);   //signal the data capturing interface for power measuring
 8009db0:	2120      	movs	r1, #32
 8009db2:	4844      	ldr	r0, [pc, #272]	; (8009ec4 <prvTestTask+0x144>)
 8009db4:	f7ff ffca 	bl	8009d4c <LL_GPIO_SetOutputPin>
	vTaskDelay(5);                                  //if power is not measured these lines can be ignored
 8009db8:	2005      	movs	r0, #5
 8009dba:	f7fe f9ac 	bl	8008116 <MPU_vTaskDelay>
	LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8009dbe:	2120      	movs	r1, #32
 8009dc0:	4840      	ldr	r0, [pc, #256]	; (8009ec4 <prvTestTask+0x144>)
 8009dc2:	f7ff ffd0 	bl	8009d66 <LL_GPIO_ResetOutputPin>
	{

#if USARTBENCHMARK ==1

#if configUSE_TRACE_FACILITY == 0
		        MPU_xContainerSetDWTcounter(0);
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f002 f930 	bl	800c02c <MPU_xContainerSetDWTcounter>
#endif
				// Structure initialization for D-Box request
		        xPeripheralRequest.pulPeripheral =  (uint32_t *)USART2; //peripheral reference
 8009dcc:	4b3e      	ldr	r3, [pc, #248]	; (8009ec8 <prvTestTask+0x148>)
 8009dce:	673b      	str	r3, [r7, #112]	; 0x70
				xPeripheralRequest.ucOperation = eWrite; // writing operation
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
				xPeripheralRequest.ulAddress = (uint32_t)cStringTest; // source address
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	67fb      	str	r3, [r7, #124]	; 0x7c
				xPeripheralRequest.ulSize = ucSize;  //size of transfer
 8009ddc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8009de0:	677b      	str	r3, [r7, #116]	; 0x74
				xPeripheralRequest.ulRegionNumber = portSTACK_REGION_NUMBER;
 8009de2:	2300      	movs	r3, #0
 8009de4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
				xPeripheralRequest.ulOption1 = OPT_NULL;
 8009de8:	23ff      	movs	r3, #255	; 0xff
 8009dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


				if( MPU_xContainerSendRequest(xPeripheralRequest) == pdFREERTOS_ERRNO_EACCES  )
 8009dee:	466e      	mov	r6, sp
 8009df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009df6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8009dfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e00:	f002 f8ef 	bl	800bfe2 <MPU_xContainerSendRequest>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b0d      	cmp	r3, #13
 8009e08:	d100      	bne.n	8009e0c <prvTestTask+0x8c>
				{
					while(1);
 8009e0a:	e7fe      	b.n	8009e0a <prvTestTask+0x8a>
				}

				xNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);;
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	2101      	movs	r1, #1
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7fe fb4d 	bl	80084b2 <MPU_ulTaskGenericNotifyTake>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

#if configUSE_TRACE_FACILITY == 0
				ulCycles = MPU_xContainerGetDWTcounter();
 8009e1e:	f002 f919 	bl	800c054 <MPU_xContainerGetDWTcounter>
 8009e22:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
#endif



		        if( ( xNotificationValue & 0xff )== pdFREERTOS_ERRNO_ETIMEDOUT)
 8009e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b74      	cmp	r3, #116	; 0x74
 8009e2e:	d100      	bne.n	8009e32 <prvTestTask+0xb2>
				{
						//error
						while(1);
 8009e30:	e7fe      	b.n	8009e30 <prvTestTask+0xb0>
				}
		        bytesRX = xNotificationValue>>8;
 8009e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e36:	121b      	asrs	r3, r3, #8
 8009e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		        //ulCycles = ulCyclesEnd - ulCycles;
 				uLTotalCycles = uLTotalCycles + ulCycles;
 8009e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e40:	461a      	mov	r2, r3
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009e4a:	1884      	adds	r4, r0, r2
 8009e4c:	eb41 0503 	adc.w	r5, r1, r3
 8009e50:	e9c7 4528 	strd	r4, r5, [r7, #160]	; 0xa0
 				ucIterations++;
 8009e54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

 				if(ucIterations == 10)
 8009e5e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009e62:	2b0a      	cmp	r3, #10
 8009e64:	d120      	bne.n	8009ea8 <prvTestTask+0x128>
 				{
 					uLTotalCycles = uLTotalCycles/10;
 8009e66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009e6a:	f04f 020a 	mov.w	r2, #10
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	f7ff fd8b 	bl	800998c <__aeabi_uldivmod>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 					printf("%u, %llu \n", ucSize,   uLTotalCycles);
 8009e7e:	f897 10af 	ldrb.w	r1, [r7, #175]	; 0xaf
 8009e82:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009e86:	4811      	ldr	r0, [pc, #68]	; (8009ecc <prvTestTask+0x14c>)
 8009e88:	f006 fa72 	bl	8010370 <printf_>
 					uLTotalCycles = 0;
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 					ucSize++;
 8009e98:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 					ucIterations = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

 				}


 				if(ucSize>10)
 8009ea8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8009eac:	2b0a      	cmp	r3, #10
 8009eae:	d902      	bls.n	8009eb6 <prvTestTask+0x136>
 				{

 					ucSize = 1;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 				}

				vTaskDelay(5);
 8009eb6:	2005      	movs	r0, #5
 8009eb8:	f7fe f92d 	bl	8008116 <MPU_vTaskDelay>
		        MPU_xContainerSetDWTcounter(0);
 8009ebc:	e783      	b.n	8009dc6 <prvTestTask+0x46>
 8009ebe:	bf00      	nop
 8009ec0:	080104ac 	.word	0x080104ac
 8009ec4:	40020000 	.word	0x40020000
 8009ec8:	40004400 	.word	0x40004400
 8009ecc:	080104a0 	.word	0x080104a0

08009ed0 <vStartMPUDemo>:
}
/*-----------------------------------------------------------*/


void vStartMPUDemo( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b094      	sub	sp, #80	; 0x50
 8009ed4:	af00      	add	r7, sp, #0





TaskParameters_t xTestTaskParameters =
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	2250      	movs	r2, #80	; 0x50
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f006 fac9 	bl	8010474 <memset>
 8009ee2:	4b16      	ldr	r3, [pc, #88]	; (8009f3c <vStartMPUDemo+0x6c>)
 8009ee4:	603b      	str	r3, [r7, #0]
 8009ee6:	4b16      	ldr	r3, [pc, #88]	; (8009f40 <vStartMPUDemo+0x70>)
 8009ee8:	607b      	str	r3, [r7, #4]
 8009eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eee:	813b      	strh	r3, [r7, #8]
 8009ef0:	230a      	movs	r3, #10
 8009ef2:	613b      	str	r3, [r7, #16]
 8009ef4:	4b13      	ldr	r3, [pc, #76]	; (8009f44 <vStartMPUDemo+0x74>)
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	4b13      	ldr	r3, [pc, #76]	; (8009f48 <vStartMPUDemo+0x78>)
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	2320      	movs	r3, #32
 8009efe:	61fb      	str	r3, [r7, #28]
 8009f00:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f04:	623b      	str	r3, [r7, #32]
 8009f06:	4b11      	ldr	r3, [pc, #68]	; (8009f4c <vStartMPUDemo+0x7c>)
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f10:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f16:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <vStartMPUDemo+0x80>)
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
 8009f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f20:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <vStartMPUDemo+0x84>)
 8009f28:	64fb      	str	r3, [r7, #76]	; 0x4c

	//xTaskCreateRestricted( &( xRWPrivilegedTaskParameters ), NULL );

    /* Create privileged task*/
	// *(uint32_t *)0xE0001004 = 0;
    xTaskCreateRestricted( &( xTestTaskParameters ), NULL );
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe f8a3 	bl	800807a <MPU_xTaskCreateRestricted>
  //                    ( void * ) 1,    /* Parameter passed into the task. */
  //                    tskIDLE_PRIORITY,/* Priority at which the task is created. */
  //                    xStack,          /* Array to use as the task's stack. */
  //                    &xTaskBuffer );  /* Variable to hold the task's data structure. */
  //
}
 8009f34:	bf00      	nop
 8009f36:	3750      	adds	r7, #80	; 0x50
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	08009d81 	.word	0x08009d81
 8009f40:	08010514 	.word	0x08010514
 8009f44:	20009000 	.word	0x20009000
 8009f48:	20009fe0 	.word	0x20009fe0
 8009f4c:	40004c00 	.word	0x40004c00
 8009f50:	40020000 	.word	0x40020000
 8009f54:	0800013c 	.word	0x0800013c

08009f58 <vHandleMemoryFault>:
/*-----------------------------------------------------------*/

portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	uint32_t ulPC;
	uint16_t usOffendingInstruction;
    ulPC = pulFaultStackAddress[ 6 ];
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	60fb      	str	r3, [r7, #12]
	/* Is this an expected fault? */
	if( ucROTaskFaultTracker[ 0 ] == 1 )
 8009f66:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <vHandleMemoryFault+0x70>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d125      	bne.n	8009fbc <vHandleMemoryFault+0x64>
	{
		/* Read program counter. */
		ulPC = pulFaultStackAddress[ 6 ];
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	60fb      	str	r3, [r7, #12]

		/* Read the offending instruction. */
		usOffendingInstruction = *( uint16_t * )ulPC;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	817b      	strh	r3, [r7, #10]
		 * - 0b11111.
		 * Otherwise, the halfword is a 16-bit instruction.
		 */

		/* Extract bits[15:11] of the offending instruction. */
		usOffendingInstruction = usOffendingInstruction & 0xF800;
 8009f7c:	897b      	ldrh	r3, [r7, #10]
 8009f7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f82:	f023 0307 	bic.w	r3, r3, #7
 8009f86:	817b      	strh	r3, [r7, #10]
		usOffendingInstruction = ( usOffendingInstruction >> 11 );
 8009f88:	897b      	ldrh	r3, [r7, #10]
 8009f8a:	0adb      	lsrs	r3, r3, #11
 8009f8c:	817b      	strh	r3, [r7, #10]

		/* Determine if the offending instruction is a 32-bit instruction or
		 * a 16-bit instruction. */
		if( usOffendingInstruction == 0x001F ||
 8009f8e:	897b      	ldrh	r3, [r7, #10]
 8009f90:	2b1f      	cmp	r3, #31
 8009f92:	d005      	beq.n	8009fa0 <vHandleMemoryFault+0x48>
 8009f94:	897b      	ldrh	r3, [r7, #10]
 8009f96:	2b1e      	cmp	r3, #30
 8009f98:	d002      	beq.n	8009fa0 <vHandleMemoryFault+0x48>
			usOffendingInstruction == 0x001E ||
 8009f9a:	897b      	ldrh	r3, [r7, #10]
 8009f9c:	2b1d      	cmp	r3, #29
 8009f9e:	d103      	bne.n	8009fa8 <vHandleMemoryFault+0x50>
			usOffendingInstruction == 0x001D )
		{
			/* Since the offending instruction is a 32-bit instruction,
			 * increment the program counter by 4 to move to the next
			 * instruction. */
			ulPC += 4;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e002      	b.n	8009fae <vHandleMemoryFault+0x56>
		else
		{
			/* Since the offending instruction is a 16-bit instruction,
			 * increment the program counter by 2 to move to the next
			 * instruction. */
			ulPC += 2;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3302      	adds	r3, #2
 8009fac:	60fb      	str	r3, [r7, #12]
		}

		/* Save the new program counter on the stack. */
		pulFaultStackAddress[ 6 ] = ulPC;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3318      	adds	r3, #24
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]

		/* Mark the fault as handled. */
		ucROTaskFaultTracker[ 0 ] = 0;
 8009fb6:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <vHandleMemoryFault+0x70>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
		//{
		//}


	}
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bc80      	pop	{r7}
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20009400 	.word	0x20009400

08009fcc <_putchar>:

/*-----------------------------------------------------------*/

void _putchar(char character)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	71fb      	strb	r3, [r7, #7]
  LL_USART_TransmitData8(UART4, character);
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4807      	ldr	r0, [pc, #28]	; (8009ff8 <_putchar+0x2c>)
 8009fdc:	f7ff fea8 	bl	8009d30 <LL_USART_TransmitData8>
  while(!LL_USART_IsActiveFlag_TXE(UART4));
 8009fe0:	bf00      	nop
 8009fe2:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <_putchar+0x2c>)
 8009fe4:	f7ff fe92 	bl	8009d0c <LL_USART_IsActiveFlag_TXE>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0f9      	beq.n	8009fe2 <_putchar+0x16>
}
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40004c00 	.word	0x40004c00

08009ffc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	3b01      	subs	r3, #1
 800a00a:	4a0a      	ldr	r2, [pc, #40]	; (800a034 <LL_DMA_EnableChannel+0x38>)
 800a00c:	5cd3      	ldrb	r3, [r2, r3]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	3a01      	subs	r2, #1
 800a01a:	4906      	ldr	r1, [pc, #24]	; (800a034 <LL_DMA_EnableChannel+0x38>)
 800a01c:	5c8a      	ldrb	r2, [r1, r2]
 800a01e:	4611      	mov	r1, r2
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	440a      	add	r2, r1
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	6013      	str	r3, [r2, #0]
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	bc80      	pop	{r7}
 800a032:	4770      	bx	lr
 800a034:	08010564 	.word	0x08010564

0800a038 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3b01      	subs	r3, #1
 800a046:	4a0a      	ldr	r2, [pc, #40]	; (800a070 <LL_DMA_DisableChannel+0x38>)
 800a048:	5cd3      	ldrb	r3, [r2, r3]
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	3a01      	subs	r2, #1
 800a056:	4906      	ldr	r1, [pc, #24]	; (800a070 <LL_DMA_DisableChannel+0x38>)
 800a058:	5c8a      	ldrb	r2, [r1, r2]
 800a05a:	4611      	mov	r1, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	440a      	add	r2, r1
 800a060:	f023 0301 	bic.w	r3, r3, #1
 800a064:	6013      	str	r3, [r2, #0]
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr
 800a070:	08010564 	.word	0x08010564

0800a074 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	3b01      	subs	r3, #1
 800a082:	4a07      	ldr	r2, [pc, #28]	; (800a0a0 <LL_DMA_GetDataTransferDirection+0x2c>)
 800a084:	5cd3      	ldrb	r3, [r2, r3]
 800a086:	461a      	mov	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4413      	add	r3, r2
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	f244 0310 	movw	r3, #16400	; 0x4010
 800a092:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	08010564 	.word	0x08010564

0800a0a4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	4a0b      	ldr	r2, [pc, #44]	; (800a0e4 <LL_DMA_SetDataLength+0x40>)
 800a0b6:	5cd3      	ldrb	r3, [r2, r3]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	0c1b      	lsrs	r3, r3, #16
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	3a01      	subs	r2, #1
 800a0c8:	4906      	ldr	r1, [pc, #24]	; (800a0e4 <LL_DMA_SetDataLength+0x40>)
 800a0ca:	5c8a      	ldrb	r2, [r1, r2]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr
 800a0e4:	08010564 	.word	0x08010564

0800a0e8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	4a06      	ldr	r2, [pc, #24]	; (800a110 <LL_DMA_GetDataLength+0x28>)
 800a0f8:	5cd3      	ldrb	r3, [r2, r3]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	bc80      	pop	{r7}
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	08010564 	.word	0x08010564

0800a114 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	2b10      	cmp	r3, #16
 800a126:	d114      	bne.n	800a152 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	4a15      	ldr	r2, [pc, #84]	; (800a184 <LL_DMA_ConfigAddresses+0x70>)
 800a12e:	5cd3      	ldrb	r3, [r2, r3]
 800a130:	461a      	mov	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	4a10      	ldr	r2, [pc, #64]	; (800a184 <LL_DMA_ConfigAddresses+0x70>)
 800a142:	5cd3      	ldrb	r3, [r2, r3]
 800a144:	461a      	mov	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	461a      	mov	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 800a150:	e013      	b.n	800a17a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	3b01      	subs	r3, #1
 800a156:	4a0b      	ldr	r2, [pc, #44]	; (800a184 <LL_DMA_ConfigAddresses+0x70>)
 800a158:	5cd3      	ldrb	r3, [r2, r3]
 800a15a:	461a      	mov	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	3b01      	subs	r3, #1
 800a16a:	4a06      	ldr	r2, [pc, #24]	; (800a184 <LL_DMA_ConfigAddresses+0x70>)
 800a16c:	5cd3      	ldrb	r3, [r2, r3]
 800a16e:	461a      	mov	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	461a      	mov	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	60d3      	str	r3, [r2, #12]
}
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr
 800a184:	08010564 	.word	0x08010564

0800a188 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	3b01      	subs	r3, #1
 800a198:	4a06      	ldr	r2, [pc, #24]	; (800a1b4 <LL_DMA_SetMemoryAddress+0x2c>)
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60d3      	str	r3, [r2, #12]
}
 800a1a8:	bf00      	nop
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	08010564 	.word	0x08010564

0800a1b8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4a06      	ldr	r2, [pc, #24]	; (800a1e4 <LL_DMA_SetPeriphAddress+0x2c>)
 800a1ca:	5cd3      	ldrb	r3, [r2, r3]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6093      	str	r3, [r2, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	08010564 	.word	0x08010564

0800a1e8 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2301      	moveq	r3, #1
 800a1fe:	2300      	movne	r3, #0
 800a200:	b2db      	uxtb	r3, r3
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	bc80      	pop	{r7}
 800a20a:	4770      	bx	lr

0800a20c <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	bf0c      	ite	eq
 800a220:	2301      	moveq	r3, #1
 800a222:	2300      	movne	r3, #0
 800a224:	b2db      	uxtb	r3, r3
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a244:	bf0c      	ite	eq
 800a246:	2301      	moveq	r3, #1
 800a248:	2300      	movne	r3, #0
 800a24a:	b2db      	uxtb	r3, r3
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	bc80      	pop	{r7}
 800a254:	4770      	bx	lr

0800a256 <LL_DMA_IsActiveFlag_TC4>:
  * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr

0800a27c <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a290:	bf0c      	ite	eq
 800a292:	2301      	moveq	r3, #1
 800a294:	2300      	movne	r3, #0
 800a296:	b2db      	uxtb	r3, r3
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bc80      	pop	{r7}
 800a2a0:	4770      	bx	lr

0800a2a2 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2b6:	bf0c      	ite	eq
 800a2b8:	2301      	moveq	r3, #1
 800a2ba:	2300      	movne	r3, #0
 800a2bc:	b2db      	uxtb	r3, r3
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bc80      	pop	{r7}
 800a2c6:	4770      	bx	lr

0800a2c8 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2dc:	bf0c      	ite	eq
 800a2de:	2301      	moveq	r3, #1
 800a2e0:	2300      	movne	r3, #0
 800a2e2:	b2db      	uxtb	r3, r3
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr

0800a2ee <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	bf0c      	ite	eq
 800a302:	2301      	moveq	r3, #1
 800a304:	2300      	movne	r3, #0
 800a306:	b2db      	uxtb	r3, r3
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr

0800a312 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a322:	2b80      	cmp	r3, #128	; 0x80
 800a324:	bf0c      	ite	eq
 800a326:	2301      	moveq	r3, #1
 800a328:	2300      	movne	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	bc80      	pop	{r7}
 800a334:	4770      	bx	lr

0800a336 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34a:	bf0c      	ite	eq
 800a34c:	2301      	moveq	r3, #1
 800a34e:	2300      	movne	r3, #0
 800a350:	b2db      	uxtb	r3, r3
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	bc80      	pop	{r7}
 800a35a:	4770      	bx	lr

0800a35c <LL_DMA_IsActiveFlag_TE4>:
  * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a370:	bf0c      	ite	eq
 800a372:	2301      	moveq	r3, #1
 800a374:	2300      	movne	r3, #0
 800a376:	b2db      	uxtb	r3, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bc80      	pop	{r7}
 800a380:	4770      	bx	lr

0800a382 <LL_DMA_IsActiveFlag_TE5>:
  * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a392:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a396:	bf0c      	ite	eq
 800a398:	2301      	moveq	r3, #1
 800a39a:	2300      	movne	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3bc:	bf0c      	ite	eq
 800a3be:	2301      	moveq	r3, #1
 800a3c0:	2300      	movne	r3, #0
 800a3c2:	b2db      	uxtb	r3, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <LL_DMA_IsActiveFlag_TE7>:
  * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3e2:	bf0c      	ite	eq
 800a3e4:	2301      	moveq	r3, #1
 800a3e6:	2300      	movne	r3, #0
 800a3e8:	b2db      	uxtb	r3, r3
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bc80      	pop	{r7}
 800a3f2:	4770      	bx	lr

0800a3f4 <LL_DMA_ClearFlag_GI4>:
  * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CGIF4);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	605a      	str	r2, [r3, #4]
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bc80      	pop	{r7}
 800a410:	4770      	bx	lr

0800a412 <LL_DMA_ClearFlag_GI5>:
  * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CGIF5);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	605a      	str	r2, [r3, #4]
}
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bc80      	pop	{r7}
 800a42e:	4770      	bx	lr

0800a430 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f043 0202 	orr.w	r2, r3, #2
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	605a      	str	r2, [r3, #4]
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr

0800a44e <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f043 0220 	orr.w	r2, r3, #32
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	605a      	str	r2, [r3, #4]
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	605a      	str	r2, [r3, #4]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr

0800a48a <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr

0800a4a8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	605a      	str	r2, [r3, #4]
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bc80      	pop	{r7}
 800a4c4:	4770      	bx	lr
 800a4c6:	adde      	add	r5, sp, #888	; 0x378

0800a4c8 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	4a0a      	ldr	r2, [pc, #40]	; (800a500 <LL_DMA_DisableIT_TC+0x38>)
 800a4d8:	5cd3      	ldrb	r3, [r2, r3]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4413      	add	r3, r2
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	3a01      	subs	r2, #1
 800a4e6:	4906      	ldr	r1, [pc, #24]	; (800a500 <LL_DMA_DisableIT_TC+0x38>)
 800a4e8:	5c8a      	ldrb	r2, [r1, r2]
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f023 0302 	bic.w	r3, r3, #2
 800a4f4:	6013      	str	r3, [r2, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bc80      	pop	{r7}
 800a4fe:	4770      	bx	lr
 800a500:	08010564 	.word	0x08010564

0800a504 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	3b01      	subs	r3, #1
 800a512:	4a09      	ldr	r2, [pc, #36]	; (800a538 <LL_DMA_IsEnabledIT_TC+0x34>)
 800a514:	5cd3      	ldrb	r3, [r2, r3]
 800a516:	461a      	mov	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4413      	add	r3, r2
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0302 	and.w	r3, r3, #2
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE));
 800a522:	2b02      	cmp	r3, #2
 800a524:	bf0c      	ite	eq
 800a526:	2301      	moveq	r3, #1
 800a528:	2300      	movne	r3, #0
 800a52a:	b2db      	uxtb	r3, r3
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	08010564 	.word	0x08010564

0800a53c <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	3b01      	subs	r3, #1
 800a54a:	4a09      	ldr	r2, [pc, #36]	; (800a570 <LL_DMA_IsEnabledIT_TE+0x34>)
 800a54c:	5cd3      	ldrb	r3, [r2, r3]
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0308 	and.w	r3, r3, #8
                   DMA_CCR_TEIE) == (DMA_CCR_TEIE));
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	08010564 	.word	0x08010564

0800a574 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <LL_RCC_HSI_Enable+0x18>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a03      	ldr	r2, [pc, #12]	; (800a58c <LL_RCC_HSI_Enable+0x18>)
 800a57e:	f043 0301 	orr.w	r3, r3, #1
 800a582:	6013      	str	r3, [r2, #0]
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	bc80      	pop	{r7}
 800a58a:	4770      	bx	lr
 800a58c:	40023800 	.word	0x40023800

0800a590 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <LL_RCC_HSI_IsReady+0x20>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d101      	bne.n	800a5a4 <LL_RCC_HSI_IsReady+0x14>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e000      	b.n	800a5a6 <LL_RCC_HSI_IsReady+0x16>
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bc80      	pop	{r7}
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40023800 	.word	0x40023800

0800a5b4 <LL_USART_IsActiveFlag_IDLE>:
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	bf0c      	ite	eq
 800a5c8:	2301      	moveq	r3, #1
 800a5ca:	2300      	movne	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr

0800a5d8 <LL_USART_IsActiveFlag_TC>:
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e8:	2b40      	cmp	r3, #64	; 0x40
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bc80      	pop	{r7}
 800a5fa:	4770      	bx	lr

0800a5fc <LL_USART_ClearFlag_IDLE>:
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800a60a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800a612:	68fb      	ldr	r3, [r7, #12]
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <LL_USART_ClearFlag_TC>:
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a62c:	601a      	str	r2, [r3, #0]
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	bc80      	pop	{r7}
 800a636:	4770      	bx	lr

0800a638 <LL_USART_EnableIT_IDLE>:
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f043 0210 	orr.w	r2, r3, #16
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60da      	str	r2, [r3, #12]
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	bc80      	pop	{r7}
 800a654:	4770      	bx	lr

0800a656 <LL_USART_EnableIT_TC>:
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60da      	str	r2, [r3, #12]
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	bc80      	pop	{r7}
 800a672:	4770      	bx	lr

0800a674 <LL_USART_DisableIT_IDLE>:
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f023 0210 	bic.w	r2, r3, #16
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60da      	str	r2, [r3, #12]
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bc80      	pop	{r7}
 800a690:	4770      	bx	lr

0800a692 <LL_USART_DisableIT_TC>:
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60da      	str	r2, [r3, #12]
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bc80      	pop	{r7}
 800a6ae:	4770      	bx	lr

0800a6b0 <LL_USART_IsEnabledIT_IDLE>:
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b10      	cmp	r3, #16
 800a6c2:	bf0c      	ite	eq
 800a6c4:	2301      	moveq	r3, #1
 800a6c6:	2300      	movne	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <LL_USART_IsEnabledIT_TC>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2301      	moveq	r3, #1
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr

0800a6f8 <LL_USART_EnableDMAReq_RX>:
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	615a      	str	r2, [r3, #20]
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	bc80      	pop	{r7}
 800a714:	4770      	bx	lr

0800a716 <LL_USART_EnableDMAReq_TX>:
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	615a      	str	r2, [r3, #20]
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr

0800a752 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	601a      	str	r2, [r3, #0]
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bc80      	pop	{r7}
 800a76e:	4770      	bx	lr

0800a770 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	bc80      	pop	{r7}
 800a792:	4770      	bx	lr

0800a794 <LL_SPI_GetTransferDirection>:
  *         @arg @ref LL_SPI_SIMPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  */
__STATIC_INLINE uint32_t LL_SPI_GetTransferDirection(SPI_TypeDef *SPIx)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 4344 	and.w	r3, r3, #50176	; 0xc400
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr

0800a7ae <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr

0800a7d2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d101      	bne.n	800a7ea <LL_SPI_IsActiveFlag_TXE+0x18>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <LL_SPI_IsActiveFlag_TXE+0x1a>
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr

0800a7f6 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a806:	2b80      	cmp	r3, #128	; 0x80
 800a808:	d101      	bne.n	800a80e <LL_SPI_IsActiveFlag_BSY+0x18>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr

0800a81a <LL_SPI_EnableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_EnableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	605a      	str	r2, [r3, #4]
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	bc80      	pop	{r7}
 800a836:	4770      	bx	lr

0800a838 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	605a      	str	r2, [r3, #4]
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	bc80      	pop	{r7}
 800a854:	4770      	bx	lr

0800a856 <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d101      	bne.n	800a86e <LL_SPI_IsEnabledIT_TXE+0x18>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <LL_SPI_IsEnabledIT_TXE+0x1a>
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f043 0201 	orr.w	r2, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	bc80      	pop	{r7}
 800a896:	4770      	bx	lr

0800a898 <LL_SPI_DisableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f023 0201 	bic.w	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	605a      	str	r2, [r3, #4]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr

0800a8b6 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f043 0202 	orr.w	r2, r3, #2
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	605a      	str	r2, [r3, #4]
}
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bc80      	pop	{r7}
 800a8d2:	4770      	bx	lr

0800a8d4 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	330c      	adds	r3, #12
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr

0800a8ea <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	b2db      	uxtb	r3, r3
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bc80      	pop	{r7}
 800a900:	4770      	bx	lr

0800a902 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f043 0201 	orr.w	r2, r3, #1
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	601a      	str	r2, [r3, #0]
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bc80      	pop	{r7}
 800a91e:	4770      	bx	lr

0800a920 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f023 0201 	bic.w	r2, r3, #1
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr

0800a93e <LL_I2C_EnableDMAReq_TX>:
  * @rmtoll CR2          DMAEN         LL_I2C_EnableDMAReq_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableDMAReq_TX(I2C_TypeDef *I2Cx)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	605a      	str	r2, [r3, #4]
}
 800a952:	bf00      	nop
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	bc80      	pop	{r7}
 800a95a:	4770      	bx	lr

0800a95c <LL_I2C_DisableDMAReq_TX>:
  * @rmtoll CR2          DMAEN         LL_I2C_DisableDMAReq_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableDMAReq_TX(I2C_TypeDef *I2Cx)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	605a      	str	r2, [r3, #4]
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	bc80      	pop	{r7}
 800a978:	4770      	bx	lr

0800a97a <LL_I2C_IsEnabledDMAReq_TX>:
  * @rmtoll CR2          DMAEN         LL_I2C_IsEnabledDMAReq_TX
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_TX(I2C_TypeDef *I2Cx)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR2, I2C_CR2_DMAEN) == (I2C_CR2_DMAEN));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a98a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a98e:	bf0c      	ite	eq
 800a990:	2301      	moveq	r3, #1
 800a992:	2300      	movne	r3, #0
 800a994:	b2db      	uxtb	r3, r3
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr

0800a9a0 <LL_I2C_EnableDMAReq_RX>:
  * @rmtoll CR2          DMAEN         LL_I2C_EnableDMAReq_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableDMAReq_RX(I2C_TypeDef *I2Cx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	605a      	str	r2, [r3, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <LL_I2C_DisableDMAReq_RX>:
  * @rmtoll CR2          DMAEN         LL_I2C_DisableDMAReq_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableDMAReq_RX(I2C_TypeDef *I2Cx)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr

0800a9dc <LL_I2C_IsEnabledDMAReq_RX>:
  * @rmtoll CR2          DMAEN         LL_I2C_IsEnabledDMAReq_RX
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_RX(I2C_TypeDef *I2Cx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR2, I2C_CR2_DMAEN) == (I2C_CR2_DMAEN));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9f0:	bf0c      	ite	eq
 800a9f2:	2301      	moveq	r3, #1
 800a9f4:	2300      	movne	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr

0800aa02 <LL_I2C_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_I2C_DMA_GetRegAddr
  * @param  I2Cx I2C Instance.
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  return (uint32_t) & (I2Cx->DR);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3310      	adds	r3, #16
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bc80      	pop	{r7}
 800aa16:	4770      	bx	lr

0800aa18 <LL_I2C_EnableIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_EnableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	605a      	str	r2, [r3, #4]
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <LL_I2C_DisableIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr

0800aa54 <LL_I2C_IsEnabledIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_IsEnabledIT_TX
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aa68:	bf0c      	ite	eq
 800aa6a:	2301      	moveq	r3, #1
 800aa6c:	2300      	movne	r3, #0
 800aa6e:	b2db      	uxtb	r3, r3
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bc80      	pop	{r7}
 800aa78:	4770      	bx	lr

0800aa7a <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	605a      	str	r2, [r3, #4]
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr

0800aa98 <LL_I2C_DisableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_DisableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_EVT(I2C_TypeDef *I2Cx)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr

0800aab6 <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]
}
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr

0800aad4 <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	605a      	str	r2, [r3, #4]
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bc80      	pop	{r7}
 800aaf0:	4770      	bx	lr

0800aaf2 <LL_I2C_IsEnabledIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_IsEnabledIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_BUF(I2C_TypeDef *I2Cx)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN) == (I2C_CR2_ITBUFEN));
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab06:	bf0c      	ite	eq
 800ab08:	2301      	moveq	r3, #1
 800ab0a:	2300      	movne	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bc80      	pop	{r7}
 800ab16:	4770      	bx	lr

0800ab18 <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	605a      	str	r2, [r3, #4]
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr

0800ab36 <LL_I2C_DisableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_DisableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_ERR(I2C_TypeDef *I2Cx)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	605a      	str	r2, [r3, #4]
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bc80      	pop	{r7}
 800ab52:	4770      	bx	lr

0800ab54 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	bf0c      	ite	eq
 800ab68:	2301      	moveq	r3, #1
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	b2db      	uxtb	r3, r3
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr

0800ab78 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2301      	moveq	r3, #1
 800ab8e:	2300      	movne	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr

0800ab9c <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	bf0c      	ite	eq
 800abb0:	2301      	moveq	r3, #1
 800abb2:	2300      	movne	r3, #0
 800abb4:	b2db      	uxtb	r3, r3
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	bf0c      	ite	eq
 800abd4:	2301      	moveq	r3, #1
 800abd6:	2300      	movne	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	bc80      	pop	{r7}
 800abe2:	4770      	bx	lr

0800abe4 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800abf2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800abfa:	68fb      	ldr	r3, [r7, #12]
}
 800abfc:	bf00      	nop
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bc80      	pop	{r7}
 800ac04:	4770      	bx	lr

0800ac06 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	601a      	str	r2, [r3, #0]
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr

0800ac2a <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bc80      	pop	{r7}
 800ac46:	4770      	bx	lr

0800ac48 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	601a      	str	r2, [r3, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr

0800ac66 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	f003 0304 	and.w	r3, r3, #4
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <LL_I2C_EnableLastDMA>:
  * @rmtoll CR2          LAST          LL_I2C_EnableLastDMA
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableLastDMA(I2C_TypeDef *I2Cx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_LAST);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	605a      	str	r2, [r3, #4]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bc80      	pop	{r7}
 800ac9c:	4770      	bx	lr

0800ac9e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	431a      	orrs	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	611a      	str	r2, [r3, #16]
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bc80      	pop	{r7}
 800acc2:	4770      	bx	lr

0800acc4 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3358      	adds	r3, #88	; 0x58
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr

0800acdc <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acea:	f023 72f8 	bic.w	r2, r3, #32505856	; 0x1f00000
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	431a      	orrs	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bc80      	pop	{r7}
 800acfe:	4770      	bx	lr

0800ad00 <LL_ADC_REG_SetSequencerRanks>:
  *         (4) On STM32L1, parameter not available on all devices: only on STM32L1 Cat.4 and Cat.5.\n
  *         (5) On STM32L1, parameter not available on all devices: OPAMP1 and OPAMP2 available only on STM32L1 Cat.3, Cat.4 and Cat.5, OPAMP3 available only on STM32L1 Cat.4 and Cat.5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b089      	sub	sp, #36	; 0x24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3330      	adds	r3, #48	; 0x30
 800ad10:	4619      	mov	r1, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ad1c:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	fa92 f2a2 	rbit	r2, r2
 800ad24:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	fab2 f282 	clz	r2, r2
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	40d3      	lsrs	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	f003 031f 	and.w	r3, r3, #31
 800ad40:	211f      	movs	r1, #31
 800ad42:	fa01 f303 	lsl.w	r3, r1, r3
 800ad46:	43db      	mvns	r3, r3
 800ad48:	401a      	ands	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f003 011f 	and.w	r1, r3, #31
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f003 031f 	and.w	r3, r3, #31
 800ad56:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ad60:	bf00      	nop
 800ad62:	3724      	adds	r7, #36	; 0x24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bc80      	pop	{r7}
 800ad68:	4770      	bx	lr

0800ad6a <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA | ADC_CR2_DDS, DMATransfer);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	431a      	orrs	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	609a      	str	r2, [r3, #8]
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bc80      	pop	{r7}
 800ad8c:	4770      	bx	lr

0800ad8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_192CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_384CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b08d      	sub	sp, #52	; 0x34
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	330c      	adds	r3, #12
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f003 5338 	and.w	r3, r3, #771751936	; 0x2e000000
 800ada6:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 800adaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	fa92 f2a2 	rbit	r2, r2
 800adb2:	617a      	str	r2, [r7, #20]
  return result;
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	fab2 f282 	clz	r2, r2
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	40d3      	lsrs	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800adce:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800add2:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add4:	6a39      	ldr	r1, [r7, #32]
 800add6:	fa91 f1a1 	rbit	r1, r1
 800adda:	61f9      	str	r1, [r7, #28]
  return result;
 800addc:	69f9      	ldr	r1, [r7, #28]
 800adde:	fab1 f181 	clz	r1, r1
 800ade2:	b2c9      	uxtb	r1, r1
 800ade4:	40cb      	lsrs	r3, r1
 800ade6:	2107      	movs	r1, #7
 800ade8:	fa01 f303 	lsl.w	r3, r1, r3
 800adec:	43db      	mvns	r3, r3
 800adee:	401a      	ands	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800adf6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800adfa:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adfe:	fa91 f1a1 	rbit	r1, r1
 800ae02:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800ae04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae06:	fab1 f181 	clz	r1, r1
 800ae0a:	b2c9      	uxtb	r1, r1
 800ae0c:	40cb      	lsrs	r3, r1
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	fa01 f303 	lsl.w	r3, r1, r3
 800ae14:	431a      	orrs	r2, r3
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	601a      	str	r2, [r3, #0]
             ADC_SMPR3_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800ae1a:	bf00      	nop
 800ae1c:	3734      	adds	r7, #52	; 0x34
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr

0800ae24 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	f043 0201 	orr.w	r2, r3, #1
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	609a      	str	r2, [r3, #8]
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bc80      	pop	{r7}
 800ae40:	4770      	bx	lr

0800ae42 <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f023 0201 	bic.w	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	609a      	str	r2, [r3, #8]
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bc80      	pop	{r7}
 800ae5e:	4770      	bx	lr

0800ae60 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	bf0c      	ite	eq
 800ae74:	2301      	moveq	r3, #1
 800ae76:	2300      	movne	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr

0800ae84 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	609a      	str	r2, [r3, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bc80      	pop	{r7}
 800aea0:	4770      	bx	lr

0800aea2 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	bf0c      	ite	eq
 800aeb6:	2301      	moveq	r3, #1
 800aeb8:	2300      	movne	r3, #0
 800aeba:	b2db      	uxtb	r3, r3
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr

0800aec6 <LL_ADC_IsActiveFlag_OVR>:
  * @rmtoll SR       OVR            LL_ADC_IsActiveFlag_OVR
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	bf0c      	ite	eq
 800aeda:	2301      	moveq	r3, #1
 800aedc:	2300      	movne	r3, #0
 800aede:	b2db      	uxtb	r3, r3
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bc80      	pop	{r7}
 800aee8:	4770      	bx	lr

0800aeea <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f06f 0202 	mvn.w	r2, #2
 800aef8:	601a      	str	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr

0800af04 <LL_ADC_ClearFlag_OVR>:
  * @rmtoll SR       OVR            LL_ADC_ClearFlag_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_OVR);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f06f 0220 	mvn.w	r2, #32
 800af12:	601a      	str	r2, [r3, #0]
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr

0800af1e <LL_GPIO_SetOutputPin>:
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	619a      	str	r2, [r3, #24]
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr

0800af38 <LL_GPIO_ResetOutputPin>:
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	629a      	str	r2, [r3, #40]	; 0x28
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr
 800af52:	adde      	add	r5, sp, #888	; 0x378

0800af54 <prvDMATask>:



static void prvDMATask( void * pvParameters );
static void prvDMATask( void * pvParameters )
{
 800af54:	b5b0      	push	{r4, r5, r7, lr}
 800af56:	b090      	sub	sp, #64	; 0x40
 800af58:	af02      	add	r7, sp, #8
 800af5a:	6078      	str	r0, [r7, #4]


	for( ; ; )
			{
			    /* wait for a request forever */
				if( xQueueReceive( xQueueDMA, &(xPeripheralRequest), portMAX_DELAY ) == pdPASS )
 800af5c:	4b9d      	ldr	r3, [pc, #628]	; (800b1d4 <prvDMATask+0x280>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	f04f 32ff 	mov.w	r2, #4294967295
 800af68:	4618      	mov	r0, r3
 800af6a:	f7f6 f90e 	bl	800118a <xQueueReceive>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b01      	cmp	r3, #1
 800af72:	f040 830e 	bne.w	800b592 <prvDMATask+0x63e>
			    {
					 xTaskToNotify = xTaskGetCurrentTaskHandle();
 800af76:	f7fa facd 	bl	8005514 <xTaskGetCurrentTaskHandle>
 800af7a:	4603      	mov	r3, r0
 800af7c:	4a96      	ldr	r2, [pc, #600]	; (800b1d8 <prvDMATask+0x284>)
 800af7e:	6013      	str	r3, [r2, #0]


					 if (xPeripheralRequest.ucOperation == eWrite)
 800af80:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f040 80a4 	bne.w	800b0d2 <prvDMATask+0x17e>
					 {

						 switch ((uint32_t)xPeripheralRequest.pulPeripheral)
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	4a93      	ldr	r2, [pc, #588]	; (800b1dc <prvDMATask+0x288>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d036      	beq.n	800b000 <prvDMATask+0xac>
 800af92:	4a92      	ldr	r2, [pc, #584]	; (800b1dc <prvDMATask+0x288>)
 800af94:	4293      	cmp	r3, r2
 800af96:	f200 82fe 	bhi.w	800b596 <prvDMATask+0x642>
 800af9a:	4a91      	ldr	r2, [pc, #580]	; (800b1e0 <prvDMATask+0x28c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d063      	beq.n	800b068 <prvDMATask+0x114>
 800afa0:	4a8f      	ldr	r2, [pc, #572]	; (800b1e0 <prvDMATask+0x28c>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f200 82f7 	bhi.w	800b596 <prvDMATask+0x642>
 800afa8:	4a8e      	ldr	r2, [pc, #568]	; (800b1e4 <prvDMATask+0x290>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d004      	beq.n	800afb8 <prvDMATask+0x64>
 800afae:	4a8e      	ldr	r2, [pc, #568]	; (800b1e8 <prvDMATask+0x294>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	f000 82f2 	beq.w	800b59a <prvDMATask+0x646>

						    	break;
							 #endif

						 	 default:
								break;
 800afb6:	e2ee      	b.n	800b596 <prvDMATask+0x642>
						    	 if(xTaskUSART2NotifyTX != NULL)
 800afb8:	4b8c      	ldr	r3, [pc, #560]	; (800b1ec <prvDMATask+0x298>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d008      	beq.n	800afd2 <prvDMATask+0x7e>
						    		 xQueueSend(xQueueDMA, &(xPeripheralRequest), ( TickType_t ) 10 );
 800afc0:	4b84      	ldr	r3, [pc, #528]	; (800b1d4 <prvDMATask+0x280>)
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	f107 0108 	add.w	r1, r7, #8
 800afc8:	2300      	movs	r3, #0
 800afca:	220a      	movs	r2, #10
 800afcc:	f7f5 fe78 	bl	8000cc0 <xQueueGenericSend>
						    		 break;
 800afd0:	e2ea      	b.n	800b5a8 <prvDMATask+0x654>
						         LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, xPeripheralRequest.ulAddress);  // set address
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	461a      	mov	r2, r3
 800afd6:	2107      	movs	r1, #7
 800afd8:	4885      	ldr	r0, [pc, #532]	; (800b1f0 <prvDMATask+0x29c>)
 800afda:	f7ff f8d5 	bl	800a188 <LL_DMA_SetMemoryAddress>
						         LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7,  xPeripheralRequest.ulSize);		// set size
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	461a      	mov	r2, r3
 800afe2:	2107      	movs	r1, #7
 800afe4:	4882      	ldr	r0, [pc, #520]	; (800b1f0 <prvDMATask+0x29c>)
 800afe6:	f7ff f85d 	bl	800a0a4 <LL_DMA_SetDataLength>
						         LL_USART_EnableDMAReq_TX(USART2); // Enable TX request of USART2
 800afea:	487e      	ldr	r0, [pc, #504]	; (800b1e4 <prvDMATask+0x290>)
 800afec:	f7ff fb93 	bl	800a716 <LL_USART_EnableDMAReq_TX>
						         LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800aff0:	2107      	movs	r1, #7
 800aff2:	487f      	ldr	r0, [pc, #508]	; (800b1f0 <prvDMATask+0x29c>)
 800aff4:	f7ff f802 	bl	8009ffc <LL_DMA_EnableChannel>
						         xTaskUSART2NotifyTX = xPeripheralRequest.ulTask;
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4a7c      	ldr	r2, [pc, #496]	; (800b1ec <prvDMATask+0x298>)
 800affc:	6013      	str	r3, [r2, #0]
								break;
 800affe:	e2d3      	b.n	800b5a8 <prvDMATask+0x654>
						         LL_SPI_SetTransferDirection(SPI1,LL_SPI_HALF_DUPLEX_TX);
 800b000:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800b004:	4875      	ldr	r0, [pc, #468]	; (800b1dc <prvDMATask+0x288>)
 800b006:	f7ff fbb3 	bl	800a770 <LL_SPI_SetTransferDirection>
					     	     LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, xPeripheralRequest.ulAddress, LL_SPI_DMA_GetRegAddr(SPI1), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));
 800b00a:	697c      	ldr	r4, [r7, #20]
 800b00c:	4873      	ldr	r0, [pc, #460]	; (800b1dc <prvDMATask+0x288>)
 800b00e:	f7ff fc61 	bl	800a8d4 <LL_SPI_DMA_GetRegAddr>
 800b012:	4605      	mov	r5, r0
 800b014:	2103      	movs	r1, #3
 800b016:	4876      	ldr	r0, [pc, #472]	; (800b1f0 <prvDMATask+0x29c>)
 800b018:	f7ff f82c 	bl	800a074 <LL_DMA_GetDataTransferDirection>
 800b01c:	4603      	mov	r3, r0
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	462b      	mov	r3, r5
 800b022:	4622      	mov	r2, r4
 800b024:	2103      	movs	r1, #3
 800b026:	4872      	ldr	r0, [pc, #456]	; (800b1f0 <prvDMATask+0x29c>)
 800b028:	f7ff f874 	bl	800a114 <LL_DMA_ConfigAddresses>
						     	 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, xPeripheralRequest.ulSize);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	461a      	mov	r2, r3
 800b030:	2103      	movs	r1, #3
 800b032:	486f      	ldr	r0, [pc, #444]	; (800b1f0 <prvDMATask+0x29c>)
 800b034:	f7ff f836 	bl	800a0a4 <LL_DMA_SetDataLength>
						     	 LL_SPI_EnableDMAReq_TX(SPI1);
 800b038:	4868      	ldr	r0, [pc, #416]	; (800b1dc <prvDMATask+0x288>)
 800b03a:	f7ff fc3c 	bl	800a8b6 <LL_SPI_EnableDMAReq_TX>
						     	 xContainerGPIOwrite( (uint8_t)xPeripheralRequest.ulOption1, 0);
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2100      	movs	r1, #0
 800b044:	4618      	mov	r0, r3
 800b046:	f000 fb63 	bl	800b710 <xContainerGPIOwrite>
						     	 ucCSSP1 = (uint8_t)xPeripheralRequest.ulOption1;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	4b69      	ldr	r3, [pc, #420]	; (800b1f4 <prvDMATask+0x2a0>)
 800b050:	701a      	strb	r2, [r3, #0]
						         xTaskSPI1NotifyTX = xPeripheralRequest.ulTask;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	4a68      	ldr	r2, [pc, #416]	; (800b1f8 <prvDMATask+0x2a4>)
 800b056:	6013      	str	r3, [r2, #0]
						     	 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800b058:	2103      	movs	r1, #3
 800b05a:	4865      	ldr	r0, [pc, #404]	; (800b1f0 <prvDMATask+0x29c>)
 800b05c:	f7fe ffce 	bl	8009ffc <LL_DMA_EnableChannel>
						     	 LL_SPI_Enable(SPI1);
 800b060:	485e      	ldr	r0, [pc, #376]	; (800b1dc <prvDMATask+0x288>)
 800b062:	f7ff fb67 	bl	800a734 <LL_SPI_Enable>
						         break;
 800b066:	e29f      	b.n	800b5a8 <prvDMATask+0x654>
							    	 LL_I2C_Enable(I2C2);
 800b068:	485d      	ldr	r0, [pc, #372]	; (800b1e0 <prvDMATask+0x28c>)
 800b06a:	f7ff fc4a 	bl	800a902 <LL_I2C_Enable>
							    	 LL_I2C_EnableIT_EVT(I2C2);
 800b06e:	485c      	ldr	r0, [pc, #368]	; (800b1e0 <prvDMATask+0x28c>)
 800b070:	f7ff fd03 	bl	800aa7a <LL_I2C_EnableIT_EVT>
							    	 LL_I2C_EnableIT_ERR(I2C2);
 800b074:	485a      	ldr	r0, [pc, #360]	; (800b1e0 <prvDMATask+0x28c>)
 800b076:	f7ff fd4f 	bl	800ab18 <LL_I2C_EnableIT_ERR>
							    	 LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_4, LL_I2C_DMA_GetRegAddr(I2C2));
 800b07a:	4859      	ldr	r0, [pc, #356]	; (800b1e0 <prvDMATask+0x28c>)
 800b07c:	f7ff fcc1 	bl	800aa02 <LL_I2C_DMA_GetRegAddr>
 800b080:	4603      	mov	r3, r0
 800b082:	461a      	mov	r2, r3
 800b084:	2104      	movs	r1, #4
 800b086:	485a      	ldr	r0, [pc, #360]	; (800b1f0 <prvDMATask+0x29c>)
 800b088:	f7ff f896 	bl	800a1b8 <LL_DMA_SetPeriphAddress>
							    	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, xPeripheralRequest.ulAddress);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	461a      	mov	r2, r3
 800b090:	2104      	movs	r1, #4
 800b092:	4857      	ldr	r0, [pc, #348]	; (800b1f0 <prvDMATask+0x29c>)
 800b094:	f7ff f878 	bl	800a188 <LL_DMA_SetMemoryAddress>
							    	 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, xPeripheralRequest.ulSize);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	461a      	mov	r2, r3
 800b09c:	2104      	movs	r1, #4
 800b09e:	4854      	ldr	r0, [pc, #336]	; (800b1f0 <prvDMATask+0x29c>)
 800b0a0:	f7ff f800 	bl	800a0a4 <LL_DMA_SetDataLength>
							    	 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 800b0a4:	2104      	movs	r1, #4
 800b0a6:	4852      	ldr	r0, [pc, #328]	; (800b1f0 <prvDMATask+0x29c>)
 800b0a8:	f7fe ffa8 	bl	8009ffc <LL_DMA_EnableChannel>
							    	 ucMasterRequestDirection = I2C_REQUEST_WRITE;
 800b0ac:	4b53      	ldr	r3, [pc, #332]	; (800b1fc <prvDMATask+0x2a8>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	701a      	strb	r2, [r3, #0]
							    	 ucSlaveOwnAddress = (uint8_t)xPeripheralRequest.ulOption1 <<1; // option1 is the slave address, it is shifted left per I2C address + read/write schema
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	4b51      	ldr	r3, [pc, #324]	; (800b200 <prvDMATask+0x2ac>)
 800b0bc:	701a      	strb	r2, [r3, #0]
							    	 ucGenerateStop = true; // this flag must be true to generate a stop condition in the TXE event
 800b0be:	4b51      	ldr	r3, [pc, #324]	; (800b204 <prvDMATask+0x2b0>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	701a      	strb	r2, [r3, #0]
							    	 LL_I2C_GenerateStartCondition(I2C2);
 800b0c4:	4846      	ldr	r0, [pc, #280]	; (800b1e0 <prvDMATask+0x28c>)
 800b0c6:	f7ff fdb0 	bl	800ac2a <LL_I2C_GenerateStartCondition>
							    	 xTaskI2C2NotifyTX = xPeripheralRequest.ulTask;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4a4e      	ldr	r2, [pc, #312]	; (800b208 <prvDMATask+0x2b4>)
 800b0ce:	6013      	str	r3, [r2, #0]
						    	break;
 800b0d0:	e26a      	b.n	800b5a8 <prvDMATask+0x654>
						}

					 }
					 else if(xPeripheralRequest.ucOperation == eRead)
 800b0d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	f040 815c 	bne.w	800b394 <prvDMATask+0x440>
					 {
						 switch ((uint32_t)xPeripheralRequest.pulPeripheral)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4a3f      	ldr	r2, [pc, #252]	; (800b1dc <prvDMATask+0x288>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d036      	beq.n	800b152 <prvDMATask+0x1fe>
 800b0e4:	4a3d      	ldr	r2, [pc, #244]	; (800b1dc <prvDMATask+0x288>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	f200 8259 	bhi.w	800b59e <prvDMATask+0x64a>
 800b0ec:	4a47      	ldr	r2, [pc, #284]	; (800b20c <prvDMATask+0x2b8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	f000 80d5 	beq.w	800b29e <prvDMATask+0x34a>
 800b0f4:	4a45      	ldr	r2, [pc, #276]	; (800b20c <prvDMATask+0x2b8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	f200 8251 	bhi.w	800b59e <prvDMATask+0x64a>
 800b0fc:	4a39      	ldr	r2, [pc, #228]	; (800b1e4 <prvDMATask+0x290>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d004      	beq.n	800b10c <prvDMATask+0x1b8>
 800b102:	4a37      	ldr	r2, [pc, #220]	; (800b1e0 <prvDMATask+0x28c>)
 800b104:	4293      	cmp	r3, r2
 800b106:	f000 8089 	beq.w	800b21c <prvDMATask+0x2c8>

								    		 #endif


								     default:
								    	 break;
 800b10a:	e248      	b.n	800b59e <prvDMATask+0x64a>
								    		 xTaskUSART2NotifyRX =  xPeripheralRequest.ulTask;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	4a40      	ldr	r2, [pc, #256]	; (800b210 <prvDMATask+0x2bc>)
 800b110:	6013      	str	r3, [r2, #0]
								    		 ulUSART2SizeRX = xPeripheralRequest.ulSize;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4a3f      	ldr	r2, [pc, #252]	; (800b214 <prvDMATask+0x2c0>)
 800b116:	6013      	str	r3, [r2, #0]
								     	 	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, xPeripheralRequest.ulAddress);  // set address
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	461a      	mov	r2, r3
 800b11c:	2106      	movs	r1, #6
 800b11e:	4834      	ldr	r0, [pc, #208]	; (800b1f0 <prvDMATask+0x29c>)
 800b120:	f7ff f832 	bl	800a188 <LL_DMA_SetMemoryAddress>
								             LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6,  xPeripheralRequest.ulSize);		// set peripheral address
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	461a      	mov	r2, r3
 800b128:	2106      	movs	r1, #6
 800b12a:	4831      	ldr	r0, [pc, #196]	; (800b1f0 <prvDMATask+0x29c>)
 800b12c:	f7fe ffba 	bl	800a0a4 <LL_DMA_SetDataLength>
								             LL_USART_EnableDMAReq_RX(USART2); // Enable RX request of USART2
 800b130:	482c      	ldr	r0, [pc, #176]	; (800b1e4 <prvDMATask+0x290>)
 800b132:	f7ff fae1 	bl	800a6f8 <LL_USART_EnableDMAReq_RX>
								     	 	 LL_DMA_ClearFlag_TC6(DMA1);
 800b136:	482e      	ldr	r0, [pc, #184]	; (800b1f0 <prvDMATask+0x29c>)
 800b138:	f7ff f9a7 	bl	800a48a <LL_DMA_ClearFlag_TC6>
								             LL_USART_ClearFlag_IDLE(USART2);
 800b13c:	4829      	ldr	r0, [pc, #164]	; (800b1e4 <prvDMATask+0x290>)
 800b13e:	f7ff fa5d 	bl	800a5fc <LL_USART_ClearFlag_IDLE>
								             LL_USART_EnableIT_IDLE(USART2);
 800b142:	4828      	ldr	r0, [pc, #160]	; (800b1e4 <prvDMATask+0x290>)
 800b144:	f7ff fa78 	bl	800a638 <LL_USART_EnableIT_IDLE>
								     	 	 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800b148:	2106      	movs	r1, #6
 800b14a:	4829      	ldr	r0, [pc, #164]	; (800b1f0 <prvDMATask+0x29c>)
 800b14c:	f7fe ff56 	bl	8009ffc <LL_DMA_EnableChannel>
								     	 	 break;
 800b150:	e22a      	b.n	800b5a8 <prvDMATask+0x654>
								    		 LL_SPI_Disable(SPI1);
 800b152:	4822      	ldr	r0, [pc, #136]	; (800b1dc <prvDMATask+0x288>)
 800b154:	f7ff fafd 	bl	800a752 <LL_SPI_Disable>
								    		 LL_SPI_SetTransferDirection(SPI1,LL_SPI_SIMPLEX_RX);
 800b158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b15c:	481f      	ldr	r0, [pc, #124]	; (800b1dc <prvDMATask+0x288>)
 800b15e:	f7ff fb07 	bl	800a770 <LL_SPI_SetTransferDirection>
								             LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(SPI1), xPeripheralRequest.ulAddress, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
 800b162:	481e      	ldr	r0, [pc, #120]	; (800b1dc <prvDMATask+0x288>)
 800b164:	f7ff fbb6 	bl	800a8d4 <LL_SPI_DMA_GetRegAddr>
 800b168:	4605      	mov	r5, r0
 800b16a:	697c      	ldr	r4, [r7, #20]
 800b16c:	2102      	movs	r1, #2
 800b16e:	4820      	ldr	r0, [pc, #128]	; (800b1f0 <prvDMATask+0x29c>)
 800b170:	f7fe ff80 	bl	800a074 <LL_DMA_GetDataTransferDirection>
 800b174:	4603      	mov	r3, r0
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	4623      	mov	r3, r4
 800b17a:	462a      	mov	r2, r5
 800b17c:	2102      	movs	r1, #2
 800b17e:	481c      	ldr	r0, [pc, #112]	; (800b1f0 <prvDMATask+0x29c>)
 800b180:	f7fe ffc8 	bl	800a114 <LL_DMA_ConfigAddresses>
								    		 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, xPeripheralRequest.ulSize);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	461a      	mov	r2, r3
 800b188:	2102      	movs	r1, #2
 800b18a:	4819      	ldr	r0, [pc, #100]	; (800b1f0 <prvDMATask+0x29c>)
 800b18c:	f7fe ff8a 	bl	800a0a4 <LL_DMA_SetDataLength>
								    		 LL_SPI_EnableDMAReq_RX(SPI1);
 800b190:	4812      	ldr	r0, [pc, #72]	; (800b1dc <prvDMATask+0x288>)
 800b192:	f7ff fb72 	bl	800a87a <LL_SPI_EnableDMAReq_RX>
								    		 while(LL_SPI_IsActiveFlag_RXNE(SPI1))
 800b196:	e002      	b.n	800b19e <prvDMATask+0x24a>
								    		 				LL_SPI_ReceiveData8(SPI1);
 800b198:	4810      	ldr	r0, [pc, #64]	; (800b1dc <prvDMATask+0x288>)
 800b19a:	f7ff fba6 	bl	800a8ea <LL_SPI_ReceiveData8>
								    		 while(LL_SPI_IsActiveFlag_RXNE(SPI1))
 800b19e:	480f      	ldr	r0, [pc, #60]	; (800b1dc <prvDMATask+0x288>)
 800b1a0:	f7ff fb05 	bl	800a7ae <LL_SPI_IsActiveFlag_RXNE>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1f6      	bne.n	800b198 <prvDMATask+0x244>
								    		 xContainerGPIOwrite( (uint8_t)xPeripheralRequest.ulOption1, 0 );
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 faad 	bl	800b710 <xContainerGPIOwrite>
								    		 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 800b1b6:	2102      	movs	r1, #2
 800b1b8:	480d      	ldr	r0, [pc, #52]	; (800b1f0 <prvDMATask+0x29c>)
 800b1ba:	f7fe ff1f 	bl	8009ffc <LL_DMA_EnableChannel>
								    		 ucCSSP1 = (uint8_t)xPeripheralRequest.ulOption1;
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	; (800b1f4 <prvDMATask+0x2a0>)
 800b1c4:	701a      	strb	r2, [r3, #0]
								    		 xTaskSPI1NotifyRX = xPeripheralRequest.ulTask ;
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4a13      	ldr	r2, [pc, #76]	; (800b218 <prvDMATask+0x2c4>)
 800b1ca:	6013      	str	r3, [r2, #0]
								    		 LL_SPI_Enable(SPI1);
 800b1cc:	4803      	ldr	r0, [pc, #12]	; (800b1dc <prvDMATask+0x288>)
 800b1ce:	f7ff fab1 	bl	800a734 <LL_SPI_Enable>
								    		 break;
 800b1d2:	e1e9      	b.n	800b5a8 <prvDMATask+0x654>
 800b1d4:	2000018c 	.word	0x2000018c
 800b1d8:	20000204 	.word	0x20000204
 800b1dc:	40013000 	.word	0x40013000
 800b1e0:	40005800 	.word	0x40005800
 800b1e4:	40004400 	.word	0x40004400
 800b1e8:	40004c00 	.word	0x40004c00
 800b1ec:	20000208 	.word	0x20000208
 800b1f0:	40026000 	.word	0x40026000
 800b1f4:	20000201 	.word	0x20000201
 800b1f8:	20000214 	.word	0x20000214
 800b1fc:	200001fd 	.word	0x200001fd
 800b200:	200001fc 	.word	0x200001fc
 800b204:	20000200 	.word	0x20000200
 800b208:	2000021c 	.word	0x2000021c
 800b20c:	40012400 	.word	0x40012400
 800b210:	2000020c 	.word	0x2000020c
 800b214:	20000224 	.word	0x20000224
 800b218:	20000210 	.word	0x20000210
								    		 LL_I2C_Enable(I2C2);
 800b21c:	488c      	ldr	r0, [pc, #560]	; (800b450 <prvDMATask+0x4fc>)
 800b21e:	f7ff fb70 	bl	800a902 <LL_I2C_Enable>
								    		 LL_I2C_EnableIT_EVT(I2C2);
 800b222:	488b      	ldr	r0, [pc, #556]	; (800b450 <prvDMATask+0x4fc>)
 800b224:	f7ff fc29 	bl	800aa7a <LL_I2C_EnableIT_EVT>
								    		 LL_I2C_EnableIT_ERR(I2C2);
 800b228:	4889      	ldr	r0, [pc, #548]	; (800b450 <prvDMATask+0x4fc>)
 800b22a:	f7ff fc75 	bl	800ab18 <LL_I2C_EnableIT_ERR>
								    		 LL_I2C_DisableDMAReq_RX(I2C2);
 800b22e:	4888      	ldr	r0, [pc, #544]	; (800b450 <prvDMATask+0x4fc>)
 800b230:	f7ff fbc5 	bl	800a9be <LL_I2C_DisableDMAReq_RX>
								    		 LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_I2C_DMA_GetRegAddr( I2C2 ));
 800b234:	4886      	ldr	r0, [pc, #536]	; (800b450 <prvDMATask+0x4fc>)
 800b236:	f7ff fbe4 	bl	800aa02 <LL_I2C_DMA_GetRegAddr>
 800b23a:	4603      	mov	r3, r0
 800b23c:	461a      	mov	r2, r3
 800b23e:	2105      	movs	r1, #5
 800b240:	4884      	ldr	r0, [pc, #528]	; (800b454 <prvDMATask+0x500>)
 800b242:	f7fe ffb9 	bl	800a1b8 <LL_DMA_SetPeriphAddress>
								    		 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, xPeripheralRequest.ulAddress);
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	461a      	mov	r2, r3
 800b24a:	2105      	movs	r1, #5
 800b24c:	4881      	ldr	r0, [pc, #516]	; (800b454 <prvDMATask+0x500>)
 800b24e:	f7fe ff9b 	bl	800a188 <LL_DMA_SetMemoryAddress>
								    		 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, xPeripheralRequest.ulSize);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	461a      	mov	r2, r3
 800b256:	2105      	movs	r1, #5
 800b258:	487e      	ldr	r0, [pc, #504]	; (800b454 <prvDMATask+0x500>)
 800b25a:	f7fe ff23 	bl	800a0a4 <LL_DMA_SetDataLength>
								    		 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 800b25e:	2105      	movs	r1, #5
 800b260:	487c      	ldr	r0, [pc, #496]	; (800b454 <prvDMATask+0x500>)
 800b262:	f7fe fecb 	bl	8009ffc <LL_DMA_EnableChannel>
								    		 LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 800b266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b26a:	4879      	ldr	r0, [pc, #484]	; (800b450 <prvDMATask+0x4fc>)
 800b26c:	f7ff fccb 	bl	800ac06 <LL_I2C_AcknowledgeNextData>
								    		 ucMasterRequestDirection = I2C_REQUEST_READ;
 800b270:	4b79      	ldr	r3, [pc, #484]	; (800b458 <prvDMATask+0x504>)
 800b272:	2201      	movs	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
								    		 ucSlaveOwnAddress = (uint8_t)xPeripheralRequest.ulOption1<<1;
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	4b77      	ldr	r3, [pc, #476]	; (800b45c <prvDMATask+0x508>)
 800b280:	701a      	strb	r2, [r3, #0]
								    		 usMasterNbDataToReceive = xPeripheralRequest.ulSize;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	b29a      	uxth	r2, r3
 800b286:	4b76      	ldr	r3, [pc, #472]	; (800b460 <prvDMATask+0x50c>)
 800b288:	801a      	strh	r2, [r3, #0]
								    		 ucGenerateStop = true; // we need a stop condition after the transfer finishes
 800b28a:	4b76      	ldr	r3, [pc, #472]	; (800b464 <prvDMATask+0x510>)
 800b28c:	2201      	movs	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]
								    		 LL_I2C_GenerateStartCondition( I2C2 ); // the restart condition is required before enabling the interrupt again
 800b290:	486f      	ldr	r0, [pc, #444]	; (800b450 <prvDMATask+0x4fc>)
 800b292:	f7ff fcca 	bl	800ac2a <LL_I2C_GenerateStartCondition>
								    		 xTaskI2C2NotifyRX =   xPeripheralRequest.ulTask;
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	4a73      	ldr	r2, [pc, #460]	; (800b468 <prvDMATask+0x514>)
 800b29a:	6013      	str	r3, [r2, #0]
								    		 break;
 800b29c:	e184      	b.n	800b5a8 <prvDMATask+0x654>
								    		 LL_DMA_SetPeriphAddress( DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr( ADC1, LL_ADC_DMA_REG_REGULAR_DATA ));
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4872      	ldr	r0, [pc, #456]	; (800b46c <prvDMATask+0x518>)
 800b2a2:	f7ff fd0f 	bl	800acc4 <LL_ADC_DMA_GetRegAddr>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	4869      	ldr	r0, [pc, #420]	; (800b454 <prvDMATask+0x500>)
 800b2ae:	f7fe ff83 	bl	800a1b8 <LL_DMA_SetPeriphAddress>
								    		 LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, xPeripheralRequest.ulAddress );
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4866      	ldr	r0, [pc, #408]	; (800b454 <prvDMATask+0x500>)
 800b2ba:	f7fe ff65 	bl	800a188 <LL_DMA_SetMemoryAddress>
								    		 LL_DMA_SetDataLength( DMA1, LL_DMA_CHANNEL_1, xPeripheralRequest.ulSize );
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	4863      	ldr	r0, [pc, #396]	; (800b454 <prvDMATask+0x500>)
 800b2c6:	f7fe feed 	bl	800a0a4 <LL_DMA_SetDataLength>
								    		 uint8_t ucRank  = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
								    		 uint32_t ulChannel = 1;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	633b      	str	r3, [r7, #48]	; 0x30
								    		 for(int i = 0; i< 16 ; i++ ) // only 16 channels for this prototype, we consider all channels are in the same bank
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d8:	e025      	b.n	800b326 <prvDMATask+0x3d2>
								    			 if( ulChannel & xPeripheralRequest.ulOption1 )
 800b2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	4013      	ands	r3, r2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01a      	beq.n	800b31a <prvDMATask+0x3c6>
								    				 LL_ADC_REG_SetSequencerRanks(ADC1,  ulRanksADC[ucRank], ulChannelsADC[i]);
 800b2e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2e8:	4a61      	ldr	r2, [pc, #388]	; (800b470 <prvDMATask+0x51c>)
 800b2ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b2ee:	4a61      	ldr	r2, [pc, #388]	; (800b474 <prvDMATask+0x520>)
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	485c      	ldr	r0, [pc, #368]	; (800b46c <prvDMATask+0x518>)
 800b2fa:	f7ff fd01 	bl	800ad00 <LL_ADC_REG_SetSequencerRanks>
								    				 LL_ADC_SetChannelSamplingTime(ADC1,  ulChannelsADC[i], LL_ADC_SAMPLINGTIME_48CYCLES);
 800b2fe:	4a5d      	ldr	r2, [pc, #372]	; (800b474 <prvDMATask+0x520>)
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b306:	2204      	movs	r2, #4
 800b308:	4619      	mov	r1, r3
 800b30a:	4858      	ldr	r0, [pc, #352]	; (800b46c <prvDMATask+0x518>)
 800b30c:	f7ff fd3f 	bl	800ad8e <LL_ADC_SetChannelSamplingTime>
								    				 ucRank++;
 800b310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b314:	3301      	adds	r3, #1
 800b316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
								    			 ulChannel = ulChannel<<1;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	633b      	str	r3, [r7, #48]	; 0x30
								    		 for(int i = 0; i< 16 ; i++ ) // only 16 channels for this prototype, we consider all channels are in the same bank
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	3301      	adds	r3, #1
 800b324:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	2b0f      	cmp	r3, #15
 800b32a:	ddd6      	ble.n	800b2da <prvDMATask+0x386>
								    		 LL_ADC_REG_SetSequencerLength( ADC1, ulNumberOfRanks[ucRank-1] );
 800b32c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b330:	3b01      	subs	r3, #1
 800b332:	4a51      	ldr	r2, [pc, #324]	; (800b478 <prvDMATask+0x524>)
 800b334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b338:	4619      	mov	r1, r3
 800b33a:	484c      	ldr	r0, [pc, #304]	; (800b46c <prvDMATask+0x518>)
 800b33c:	f7ff fcce 	bl	800acdc <LL_ADC_REG_SetSequencerLength>
								    		 if (LL_RCC_HSI_IsReady() == 0)
 800b340:	f7ff f926 	bl	800a590 <LL_RCC_HSI_IsReady>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d107      	bne.n	800b35a <prvDMATask+0x406>
								    			 LL_RCC_HSI_Enable();
 800b34a:	f7ff f913 	bl	800a574 <LL_RCC_HSI_Enable>
								    			 while(LL_RCC_HSI_IsReady() != 1)
 800b34e:	bf00      	nop
 800b350:	f7ff f91e 	bl	800a590 <LL_RCC_HSI_IsReady>
 800b354:	4603      	mov	r3, r0
 800b356:	2b01      	cmp	r3, #1
 800b358:	d1fa      	bne.n	800b350 <prvDMATask+0x3fc>
								    		 if (LL_ADC_IsEnabled(ADC1) == 0)
 800b35a:	4844      	ldr	r0, [pc, #272]	; (800b46c <prvDMATask+0x518>)
 800b35c:	f7ff fd80 	bl	800ae60 <LL_ADC_IsEnabled>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <prvDMATask+0x418>
								    		    LL_ADC_Enable(ADC1);
 800b366:	4841      	ldr	r0, [pc, #260]	; (800b46c <prvDMATask+0x518>)
 800b368:	f7ff fd5c 	bl	800ae24 <LL_ADC_Enable>
								    		 LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);    // first reset the DMA bit and set again, this is required according to data-sheet and verified here
 800b36c:	2100      	movs	r1, #0
 800b36e:	483f      	ldr	r0, [pc, #252]	; (800b46c <prvDMATask+0x518>)
 800b370:	f7ff fcfb 	bl	800ad6a <LL_ADC_REG_SetDMATransfer>
								    		 LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_LIMITED); // without reseting and setting this bit ADC does not accept new starting triggers
 800b374:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b378:	483c      	ldr	r0, [pc, #240]	; (800b46c <prvDMATask+0x518>)
 800b37a:	f7ff fcf6 	bl	800ad6a <LL_ADC_REG_SetDMATransfer>
								    		 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800b37e:	2101      	movs	r1, #1
 800b380:	4834      	ldr	r0, [pc, #208]	; (800b454 <prvDMATask+0x500>)
 800b382:	f7fe fe3b 	bl	8009ffc <LL_DMA_EnableChannel>
								    		 LL_ADC_REG_StartConversionSWStart(ADC1);
 800b386:	4839      	ldr	r0, [pc, #228]	; (800b46c <prvDMATask+0x518>)
 800b388:	f7ff fd7c 	bl	800ae84 <LL_ADC_REG_StartConversionSWStart>
								    		 xTaskADC1Notify = xPeripheralRequest.ulTask;
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4a3b      	ldr	r2, [pc, #236]	; (800b47c <prvDMATask+0x528>)
 800b390:	6013      	str	r3, [r2, #0]
								    	 break;
 800b392:	e104      	b.n	800b59e <prvDMATask+0x64a>
								}

					 }
					 else if(xPeripheralRequest.ucOperation == eFullDuplex)
 800b394:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	f040 80fa 	bne.w	800b592 <prvDMATask+0x63e>
					 {
						 switch ((uint32_t)xPeripheralRequest.pulPeripheral) {
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	4a2b      	ldr	r2, [pc, #172]	; (800b450 <prvDMATask+0x4fc>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d070      	beq.n	800b488 <prvDMATask+0x534>
 800b3a6:	4a36      	ldr	r2, [pc, #216]	; (800b480 <prvDMATask+0x52c>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	f040 80fa 	bne.w	800b5a2 <prvDMATask+0x64e>
							case (uint32_t) SPI1:

									 LL_SPI_Disable(SPI1); //we need to disable SPI before setting transfer direction
 800b3ae:	4834      	ldr	r0, [pc, #208]	; (800b480 <prvDMATask+0x52c>)
 800b3b0:	f7ff f9cf 	bl	800a752 <LL_SPI_Disable>
									 LL_SPI_SetTransferDirection(SPI1,LL_SPI_FULL_DUPLEX);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4832      	ldr	r0, [pc, #200]	; (800b480 <prvDMATask+0x52c>)
 800b3b8:	f7ff f9da 	bl	800a770 <LL_SPI_SetTransferDirection>
									 //RX
									 LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(SPI1), xPeripheralRequest.ulAddressSec, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
 800b3bc:	4830      	ldr	r0, [pc, #192]	; (800b480 <prvDMATask+0x52c>)
 800b3be:	f7ff fa89 	bl	800a8d4 <LL_SPI_DMA_GetRegAddr>
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	69bc      	ldr	r4, [r7, #24]
 800b3c6:	2102      	movs	r1, #2
 800b3c8:	4822      	ldr	r0, [pc, #136]	; (800b454 <prvDMATask+0x500>)
 800b3ca:	f7fe fe53 	bl	800a074 <LL_DMA_GetDataTransferDirection>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	4623      	mov	r3, r4
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	2102      	movs	r1, #2
 800b3d8:	481e      	ldr	r0, [pc, #120]	; (800b454 <prvDMATask+0x500>)
 800b3da:	f7fe fe9b 	bl	800a114 <LL_DMA_ConfigAddresses>
									 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, xPeripheralRequest.ulSize);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	2102      	movs	r1, #2
 800b3e4:	481b      	ldr	r0, [pc, #108]	; (800b454 <prvDMATask+0x500>)
 800b3e6:	f7fe fe5d 	bl	800a0a4 <LL_DMA_SetDataLength>
									 //TX
									 LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, xPeripheralRequest.ulAddress, LL_SPI_DMA_GetRegAddr(SPI1), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));
 800b3ea:	697c      	ldr	r4, [r7, #20]
 800b3ec:	4824      	ldr	r0, [pc, #144]	; (800b480 <prvDMATask+0x52c>)
 800b3ee:	f7ff fa71 	bl	800a8d4 <LL_SPI_DMA_GetRegAddr>
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	2103      	movs	r1, #3
 800b3f6:	4817      	ldr	r0, [pc, #92]	; (800b454 <prvDMATask+0x500>)
 800b3f8:	f7fe fe3c 	bl	800a074 <LL_DMA_GetDataTransferDirection>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	462b      	mov	r3, r5
 800b402:	4622      	mov	r2, r4
 800b404:	2103      	movs	r1, #3
 800b406:	4813      	ldr	r0, [pc, #76]	; (800b454 <prvDMATask+0x500>)
 800b408:	f7fe fe84 	bl	800a114 <LL_DMA_ConfigAddresses>
									 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, xPeripheralRequest.ulSize);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	461a      	mov	r2, r3
 800b410:	2103      	movs	r1, #3
 800b412:	4810      	ldr	r0, [pc, #64]	; (800b454 <prvDMATask+0x500>)
 800b414:	f7fe fe46 	bl	800a0a4 <LL_DMA_SetDataLength>

									 // RX interrupt

					                 LL_SPI_EnableDMAReq_RX(SPI1);
 800b418:	4819      	ldr	r0, [pc, #100]	; (800b480 <prvDMATask+0x52c>)
 800b41a:	f7ff fa2e 	bl	800a87a <LL_SPI_EnableDMAReq_RX>
					                 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 800b41e:	2102      	movs	r1, #2
 800b420:	480c      	ldr	r0, [pc, #48]	; (800b454 <prvDMATask+0x500>)
 800b422:	f7fe fdeb 	bl	8009ffc <LL_DMA_EnableChannel>

					                 // TX interrupt

					                 LL_SPI_EnableDMAReq_TX(SPI1);
 800b426:	4816      	ldr	r0, [pc, #88]	; (800b480 <prvDMATask+0x52c>)
 800b428:	f7ff fa45 	bl	800a8b6 <LL_SPI_EnableDMAReq_TX>
					                 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800b42c:	2103      	movs	r1, #3
 800b42e:	4809      	ldr	r0, [pc, #36]	; (800b454 <prvDMATask+0x500>)
 800b430:	f7fe fde4 	bl	8009ffc <LL_DMA_EnableChannel>

					                 xContainerGPIOwrite((uint8_t)xPeripheralRequest.ulOption1, 0);
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2100      	movs	r1, #0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f968 	bl	800b710 <xContainerGPIOwrite>
					                 xTaskSPI1NotifyTX = xPeripheralRequest.ulTask;
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	4a10      	ldr	r2, [pc, #64]	; (800b484 <prvDMATask+0x530>)
 800b444:	6013      	str	r3, [r2, #0]

					                 LL_SPI_Enable(SPI1);
 800b446:	480e      	ldr	r0, [pc, #56]	; (800b480 <prvDMATask+0x52c>)
 800b448:	f7ff f974 	bl	800a734 <LL_SPI_Enable>


								break;
 800b44c:	e0ac      	b.n	800b5a8 <prvDMATask+0x654>
 800b44e:	bf00      	nop
 800b450:	40005800 	.word	0x40005800
 800b454:	40026000 	.word	0x40026000
 800b458:	200001fd 	.word	0x200001fd
 800b45c:	200001fc 	.word	0x200001fc
 800b460:	200001fe 	.word	0x200001fe
 800b464:	20000200 	.word	0x20000200
 800b468:	20000218 	.word	0x20000218
 800b46c:	40012400 	.word	0x40012400
 800b470:	0801056c 	.word	0x0801056c
 800b474:	080105ac 	.word	0x080105ac
 800b478:	080105ec 	.word	0x080105ec
 800b47c:	20000220 	.word	0x20000220
 800b480:	40013000 	.word	0x40013000
 800b484:	20000214 	.word	0x20000214
							#ifdef STM32L152xE
							case (uint32_t) I2C2:
							    	 /* (1) Enable I2C2 **********************************************************/

							    	 LL_I2C_Enable(I2C2);
 800b488:	4848      	ldr	r0, [pc, #288]	; (800b5ac <prvDMATask+0x658>)
 800b48a:	f7ff fa3a 	bl	800a902 <LL_I2C_Enable>
							    	 LL_I2C_EnableIT_EVT(I2C2);
 800b48e:	4847      	ldr	r0, [pc, #284]	; (800b5ac <prvDMATask+0x658>)
 800b490:	f7ff faf3 	bl	800aa7a <LL_I2C_EnableIT_EVT>
							    	 LL_I2C_EnableIT_ERR(I2C2);
 800b494:	4845      	ldr	r0, [pc, #276]	; (800b5ac <prvDMATask+0x658>)
 800b496:	f7ff fb3f 	bl	800ab18 <LL_I2C_EnableIT_ERR>
							    	 LL_I2C_DisableDMAReq_TX(I2C2);
 800b49a:	4844      	ldr	r0, [pc, #272]	; (800b5ac <prvDMATask+0x658>)
 800b49c:	f7ff fa5e 	bl	800a95c <LL_I2C_DisableDMAReq_TX>

							    	 LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_4, LL_I2C_DMA_GetRegAddr(I2C2));
 800b4a0:	4842      	ldr	r0, [pc, #264]	; (800b5ac <prvDMATask+0x658>)
 800b4a2:	f7ff faae 	bl	800aa02 <LL_I2C_DMA_GetRegAddr>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	4840      	ldr	r0, [pc, #256]	; (800b5b0 <prvDMATask+0x65c>)
 800b4ae:	f7fe fe83 	bl	800a1b8 <LL_DMA_SetPeriphAddress>
							    	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, xPeripheralRequest.ulAddress);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	483d      	ldr	r0, [pc, #244]	; (800b5b0 <prvDMATask+0x65c>)
 800b4ba:	f7fe fe65 	bl	800a188 <LL_DMA_SetMemoryAddress>
							    	 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, xPeripheralRequest.ulSize);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	2104      	movs	r1, #4
 800b4c4:	483a      	ldr	r0, [pc, #232]	; (800b5b0 <prvDMATask+0x65c>)
 800b4c6:	f7fe fded 	bl	800a0a4 <LL_DMA_SetDataLength>

							    	 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4838      	ldr	r0, [pc, #224]	; (800b5b0 <prvDMATask+0x65c>)
 800b4ce:	f7fe fd95 	bl	8009ffc <LL_DMA_EnableChannel>

							    	 /*  Initiate a Start condition to the Slave device ***********************/
							    	 /* Master Request direction WRITE */
							    	 ucMasterRequestDirection = I2C_REQUEST_WRITE;
 800b4d2:	4b38      	ldr	r3, [pc, #224]	; (800b5b4 <prvDMATask+0x660>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
							    	 ucSlaveOwnAddress = (uint8_t)xPeripheralRequest.ulOption1<<1; // option1 is the slave address, it is shifted left per I2C address + read/write schema
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	4b35      	ldr	r3, [pc, #212]	; (800b5b8 <prvDMATask+0x664>)
 800b4e2:	701a      	strb	r2, [r3, #0]

							    	 /* Master Generate Start condition */
							    	 ucGenerateStop = false; // we will keep control of the bus so we don't need a stop condition, we will rather use a restart
 800b4e4:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <prvDMATask+0x668>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
							    	 LL_I2C_GenerateStartCondition(I2C2);
 800b4ea:	4830      	ldr	r0, [pc, #192]	; (800b5ac <prvDMATask+0x658>)
 800b4ec:	f7ff fb9d 	bl	800ac2a <LL_I2C_GenerateStartCondition>
							    	 xTaskI2C2NotifyTX = xTaskToNotify;
 800b4f0:	4b33      	ldr	r3, [pc, #204]	; (800b5c0 <prvDMATask+0x66c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a33      	ldr	r2, [pc, #204]	; (800b5c4 <prvDMATask+0x670>)
 800b4f6:	6013      	str	r3, [r2, #0]
							    	 ulNotificationValue = ulTaskNotifyTakeIndexed( 0, pdFALSE, TIMEOUT_NOTIFICATION );
 800b4f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2000      	movs	r0, #0
 800b500:	f7f9 fbb8 	bl	8004c74 <ulTaskGenericNotifyTake>
 800b504:	62b8      	str	r0, [r7, #40]	; 0x28

							    	 if( ulNotificationValue == 1 )
 800b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d14c      	bne.n	800b5a6 <prvDMATask+0x652>
							    	 {
							    		 LL_I2C_DisableDMAReq_TX(I2C2);
 800b50c:	4827      	ldr	r0, [pc, #156]	; (800b5ac <prvDMATask+0x658>)
 800b50e:	f7ff fa25 	bl	800a95c <LL_I2C_DisableDMAReq_TX>
							    		 xTaskToNotify = xTaskGetCurrentTaskHandle();
 800b512:	f7f9 ffff 	bl	8005514 <xTaskGetCurrentTaskHandle>
 800b516:	4603      	mov	r3, r0
 800b518:	4a29      	ldr	r2, [pc, #164]	; (800b5c0 <prvDMATask+0x66c>)
 800b51a:	6013      	str	r3, [r2, #0]
							    	    /* The TX ended as expected.  Lets continue with RX */
							    		//Configure DMA
							    		LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_I2C_DMA_GetRegAddr( I2C2 ));
 800b51c:	4823      	ldr	r0, [pc, #140]	; (800b5ac <prvDMATask+0x658>)
 800b51e:	f7ff fa70 	bl	800aa02 <LL_I2C_DMA_GetRegAddr>
 800b522:	4603      	mov	r3, r0
 800b524:	461a      	mov	r2, r3
 800b526:	2105      	movs	r1, #5
 800b528:	4821      	ldr	r0, [pc, #132]	; (800b5b0 <prvDMATask+0x65c>)
 800b52a:	f7fe fe45 	bl	800a1b8 <LL_DMA_SetPeriphAddress>
							    		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, xPeripheralRequest.ulAddressSec);
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	461a      	mov	r2, r3
 800b532:	2105      	movs	r1, #5
 800b534:	481e      	ldr	r0, [pc, #120]	; (800b5b0 <prvDMATask+0x65c>)
 800b536:	f7fe fe27 	bl	800a188 <LL_DMA_SetMemoryAddress>
							    		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, xPeripheralRequest.ulSizeSec);
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	461a      	mov	r2, r3
 800b53e:	2105      	movs	r1, #5
 800b540:	481b      	ldr	r0, [pc, #108]	; (800b5b0 <prvDMATask+0x65c>)
 800b542:	f7fe fdaf 	bl	800a0a4 <LL_DMA_SetDataLength>
							    		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 800b546:	2105      	movs	r1, #5
 800b548:	4819      	ldr	r0, [pc, #100]	; (800b5b0 <prvDMATask+0x65c>)
 800b54a:	f7fe fd57 	bl	8009ffc <LL_DMA_EnableChannel>

							    		/* (6) Prepare acknowledge for Master data reception ************************/
							    		LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 800b54e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b552:	4816      	ldr	r0, [pc, #88]	; (800b5ac <prvDMATask+0x658>)
 800b554:	f7ff fb57 	bl	800ac06 <LL_I2C_AcknowledgeNextData>

							    		/* (7) Initiate a ReStart condition to the Slave device *********************/
							    		/* Master Request direction READ */
							    		ucMasterRequestDirection = I2C_REQUEST_READ;
 800b558:	4b16      	ldr	r3, [pc, #88]	; (800b5b4 <prvDMATask+0x660>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	701a      	strb	r2, [r3, #0]
							    		ucSlaveOwnAddress = (uint8_t)xPeripheralRequest.ulOption1<<1;
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	b2db      	uxtb	r3, r3
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <prvDMATask+0x664>)
 800b568:	701a      	strb	r2, [r3, #0]
							    		usMasterNbDataToReceive = xPeripheralRequest.ulSizeSec;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <prvDMATask+0x674>)
 800b570:	801a      	strh	r2, [r3, #0]

							    		/* Master Generate ReStart condition, i.e. we did not generate a stop condition previously */
							    		ucGenerateStop = true; // we need a stop condition after the transfer finishes
 800b572:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <prvDMATask+0x668>)
 800b574:	2201      	movs	r2, #1
 800b576:	701a      	strb	r2, [r3, #0]
							    		LL_I2C_GenerateStartCondition( I2C2 ); // the restart condition is required before enabling the interrupt again
 800b578:	480c      	ldr	r0, [pc, #48]	; (800b5ac <prvDMATask+0x658>)
 800b57a:	f7ff fb56 	bl	800ac2a <LL_I2C_GenerateStartCondition>

							    		LL_I2C_EnableIT_EVT(I2C2);
 800b57e:	480b      	ldr	r0, [pc, #44]	; (800b5ac <prvDMATask+0x658>)
 800b580:	f7ff fa7b 	bl	800aa7a <LL_I2C_EnableIT_EVT>
							    		LL_I2C_EnableIT_ERR(I2C2);
 800b584:	4809      	ldr	r0, [pc, #36]	; (800b5ac <prvDMATask+0x658>)
 800b586:	f7ff fac7 	bl	800ab18 <LL_I2C_EnableIT_ERR>

							    		xTaskI2C2NotifyRX =  xPeripheralRequest.ulTask;
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	4a0f      	ldr	r2, [pc, #60]	; (800b5cc <prvDMATask+0x678>)
 800b58e:	6013      	str	r3, [r2, #0]

							    	 }

							    	 break;
 800b590:	e009      	b.n	800b5a6 <prvDMATask+0x652>
							#endif

							default:
								break;
						}
					 }
 800b592:	bf00      	nop
 800b594:	e4e2      	b.n	800af5c <prvDMATask+0x8>
								break;
 800b596:	bf00      	nop
 800b598:	e4e0      	b.n	800af5c <prvDMATask+0x8>
						     	 break;
 800b59a:	bf00      	nop
 800b59c:	e4de      	b.n	800af5c <prvDMATask+0x8>
								    	 break;
 800b59e:	bf00      	nop
 800b5a0:	e4dc      	b.n	800af5c <prvDMATask+0x8>
								break;
 800b5a2:	bf00      	nop
 800b5a4:	e4da      	b.n	800af5c <prvDMATask+0x8>
							    	 break;
 800b5a6:	bf00      	nop
				if( xQueueReceive( xQueueDMA, &(xPeripheralRequest), portMAX_DELAY ) == pdPASS )
 800b5a8:	e4d8      	b.n	800af5c <prvDMATask+0x8>
 800b5aa:	bf00      	nop
 800b5ac:	40005800 	.word	0x40005800
 800b5b0:	40026000 	.word	0x40026000
 800b5b4:	200001fd 	.word	0x200001fd
 800b5b8:	200001fc 	.word	0x200001fc
 800b5bc:	20000200 	.word	0x20000200
 800b5c0:	20000204 	.word	0x20000204
 800b5c4:	2000021c 	.word	0x2000021c
 800b5c8:	200001fe 	.word	0x200001fe
 800b5cc:	20000218 	.word	0x20000218

0800b5d0 <vStartDMATask>:
			}
}


void vStartDMATask( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b098      	sub	sp, #96	; 0x60
 800b5d4:	af02      	add	r7, sp, #8

	static StackType_t xDMATaskStack[ configMINIMAL_STACK_SIZE ] __attribute__( ( aligned( configMINIMAL_STACK_SIZE * sizeof( StackType_t ) ) ) );


	TaskParameters_t xDMATaskParameters =
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	2250      	movs	r2, #80	; 0x50
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f004 ff49 	bl	8010474 <memset>
 800b5e2:	4b27      	ldr	r3, [pc, #156]	; (800b680 <vStartDMATask+0xb0>)
 800b5e4:	603b      	str	r3, [r7, #0]
 800b5e6:	4b27      	ldr	r3, [pc, #156]	; (800b684 <vStartDMATask+0xb4>)
 800b5e8:	607b      	str	r3, [r7, #4]
 800b5ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ee:	813b      	strh	r3, [r7, #8]
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <vStartDMATask+0xb8>)
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	4b25      	ldr	r3, [pc, #148]	; (800b68c <vStartDMATask+0xbc>)
 800b5f6:	617b      	str	r3, [r7, #20]
							}
	};


	/* Create a restricted, but privileged task  to handle the DMA driver*/
	xDMAdriverTaskHandle = (TaskHandle_t) xTaskCreateRestricted( &( xDMATaskParameters ), NULL );
 800b5f8:	463b      	mov	r3, r7
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f7 ff89 	bl	8003514 <xTaskCreateRestricted>
 800b602:	4603      	mov	r3, r0
 800b604:	461a      	mov	r2, r3
 800b606:	4b22      	ldr	r3, [pc, #136]	; (800b690 <vStartDMATask+0xc0>)
 800b608:	601a      	str	r2, [r3, #0]

	/* xDMAdriverTaskHandle should not be NULL. */
	configASSERT( xDMAdriverTaskHandle );
 800b60a:	4b21      	ldr	r3, [pc, #132]	; (800b690 <vStartDMATask+0xc0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10a      	bne.n	800b628 <vStartDMATask+0x58>
        __asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	657b      	str	r3, [r7, #84]	; 0x54
    }
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <vStartDMATask+0x56>

    /* Create a queue capable of containing 10 Peripheral_Request_t structures. */
	xQueueDMA = xQueueCreateStatic( QUEUE_DMA_LENGTH,
 800b628:	2300      	movs	r3, #0
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	4b19      	ldr	r3, [pc, #100]	; (800b694 <vStartDMATask+0xc4>)
 800b62e:	4a1a      	ldr	r2, [pc, #104]	; (800b698 <vStartDMATask+0xc8>)
 800b630:	2120      	movs	r1, #32
 800b632:	200a      	movs	r0, #10
 800b634:	f7f6 fc68 	bl	8001f08 <xQueueGenericCreateStatic>
 800b638:	4603      	mov	r3, r0
 800b63a:	4a18      	ldr	r2, [pc, #96]	; (800b69c <vStartDMATask+0xcc>)
 800b63c:	6013      	str	r3, [r2, #0]
                             ITEM_SIZE,
                             ucQueueStorageArea,
                             &xStaticQueue );


	xTaskUSART2NotifyTX = NULL;
 800b63e:	4b18      	ldr	r3, [pc, #96]	; (800b6a0 <vStartDMATask+0xd0>)
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]

	/*Create a timer to handle timeout of USART, without autoload*/
	xTimerUSART2 = xTimerCreate("TimerUSART2", TIMEOUT_USART2_RX, pdFALSE, ( void * ) 0, vTimerUSART2Callback  );
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <vStartDMATask+0xd4>)
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	2300      	movs	r3, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	2105      	movs	r1, #5
 800b64e:	4816      	ldr	r0, [pc, #88]	; (800b6a8 <vStartDMATask+0xd8>)
 800b650:	f7fa fc62 	bl	8005f18 <xTimerCreate>
 800b654:	4603      	mov	r3, r0
 800b656:	4a15      	ldr	r2, [pc, #84]	; (800b6ac <vStartDMATask+0xdc>)
 800b658:	6013      	str	r3, [r2, #0]


    /* xQueueDMA should not be NULL. */
    configASSERT( xQueueDMA );
 800b65a:	4b10      	ldr	r3, [pc, #64]	; (800b69c <vStartDMATask+0xcc>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10a      	bne.n	800b678 <vStartDMATask+0xa8>
        __asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	653b      	str	r3, [r7, #80]	; 0x50
    }
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <vStartDMATask+0xa6>
    SPIHandle =  xTraceSetISRProperties("ISR_SPI", PRIO_ISR_USART2);
    I2CHandle =  xTraceSetISRProperties("ISR_I2C", PRIO_ISR_USART2);
    ADCHandle =  xTraceSetISRProperties("ISR_ADC", PRIO_ISR_USART2);

#endif
}
 800b678:	bf00      	nop
 800b67a:	3758      	adds	r7, #88	; 0x58
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	0800af55 	.word	0x0800af55
 800b684:	08010520 	.word	0x08010520
 800b688:	8000000a 	.word	0x8000000a
 800b68c:	20009800 	.word	0x20009800
 800b690:	20000190 	.word	0x20000190
 800b694:	20000000 	.word	0x20000000
 800b698:	2000004c 	.word	0x2000004c
 800b69c:	2000018c 	.word	0x2000018c
 800b6a0:	20000208 	.word	0x20000208
 800b6a4:	0800b6b1 	.word	0x0800b6b1
 800b6a8:	08010528 	.word	0x08010528
 800b6ac:	20000194 	.word	0x20000194

0800b6b0 <vTimerUSART2Callback>:




void vTimerUSART2Callback( TimerHandle_t xTimer )
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	6078      	str	r0, [r7, #4]

	if(xTaskUSART2NotifyRX)
 800b6b8:	4b12      	ldr	r3, [pc, #72]	; (800b704 <vTimerUSART2Callback+0x54>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01c      	beq.n	800b6fa <vTimerUSART2Callback+0x4a>
	{
	LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800b6c0:	2106      	movs	r1, #6
 800b6c2:	4811      	ldr	r0, [pc, #68]	; (800b708 <vTimerUSART2Callback+0x58>)
 800b6c4:	f7fe ff00 	bl	800a4c8 <LL_DMA_DisableIT_TC>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800b6c8:	2106      	movs	r1, #6
 800b6ca:	480f      	ldr	r0, [pc, #60]	; (800b708 <vTimerUSART2Callback+0x58>)
 800b6cc:	f7fe fcb4 	bl	800a038 <LL_DMA_DisableChannel>
	/* Notify the DMA task that the RX line is idle */
	xTaskNotify(xTaskUSART2NotifyRX,  ( ulUSART2SizeRX -  LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) ) << 8,  eSetValueWithoutOverwrite);
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <vTimerUSART2Callback+0x54>)
 800b6d2:	681d      	ldr	r5, [r3, #0]
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <vTimerUSART2Callback+0x5c>)
 800b6d6:	681c      	ldr	r4, [r3, #0]
 800b6d8:	2106      	movs	r1, #6
 800b6da:	480b      	ldr	r0, [pc, #44]	; (800b708 <vTimerUSART2Callback+0x58>)
 800b6dc:	f7fe fd04 	bl	800a0e8 <LL_DMA_GetDataLength>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	1ae3      	subs	r3, r4, r3
 800b6e4:	021a      	lsls	r2, r3, #8
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7f8 ffb2 	bl	8004658 <xTaskGenericNotify>
	xTaskUSART2NotifyRX = NULL;
 800b6f4:	4b03      	ldr	r3, [pc, #12]	; (800b704 <vTimerUSART2Callback+0x54>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]
	}

}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bdb0      	pop	{r4, r5, r7, pc}
 800b702:	bf00      	nop
 800b704:	2000020c 	.word	0x2000020c
 800b708:	40026000 	.word	0x40026000
 800b70c:	20000224 	.word	0x20000224

0800b710 <xContainerGPIOwrite>:



static void xContainerGPIOwrite(uint8_t ucCSnum, uint8_t ucVal)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	460a      	mov	r2, r1
 800b71a:	71fb      	strb	r3, [r7, #7]
 800b71c:	4613      	mov	r3, r2
 800b71e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucKeepEnabled;

	ucKeepEnabled = ucCSnum & OPT_CS_KEEP_ON;
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b726:	73fb      	strb	r3, [r7, #15]

	ucCSnum = ucCSnum & 0x7f;
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b72e:	71fb      	strb	r3, [r7, #7]


	if( ucCSnum != 0xff )
 800b730:	79fb      	ldrb	r3, [r7, #7]
 800b732:	2bff      	cmp	r3, #255	; 0xff
 800b734:	d020      	beq.n	800b778 <xContainerGPIOwrite+0x68>
	{
		if( !(ucKeepEnabled) && ucVal ) //CS disable in HI
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d110      	bne.n	800b75e <xContainerGPIOwrite+0x4e>
 800b73c:	79bb      	ldrb	r3, [r7, #6]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00d      	beq.n	800b75e <xContainerGPIOwrite+0x4e>
	    {
			LL_GPIO_SetOutputPin((GPIO_TypeDef *) BoardGPIO[ucCSnum].ulPort, BoardGPIO[ucCSnum].ulPin);
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	4a0e      	ldr	r2, [pc, #56]	; (800b780 <xContainerGPIOwrite+0x70>)
 800b746:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b74a:	4618      	mov	r0, r3
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	4a0c      	ldr	r2, [pc, #48]	; (800b780 <xContainerGPIOwrite+0x70>)
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	4413      	add	r3, r2
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	4619      	mov	r1, r3
 800b758:	f7ff fbe1 	bl	800af1e <LL_GPIO_SetOutputPin>
		{
			LL_GPIO_ResetOutputPin((GPIO_TypeDef *) BoardGPIO[ucCSnum].ulPort, BoardGPIO[ucCSnum].ulPin);
		}
	}

}
 800b75c:	e00c      	b.n	800b778 <xContainerGPIOwrite+0x68>
			LL_GPIO_ResetOutputPin((GPIO_TypeDef *) BoardGPIO[ucCSnum].ulPort, BoardGPIO[ucCSnum].ulPin);
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	4a07      	ldr	r2, [pc, #28]	; (800b780 <xContainerGPIOwrite+0x70>)
 800b762:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b766:	4618      	mov	r0, r3
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	4a05      	ldr	r2, [pc, #20]	; (800b780 <xContainerGPIOwrite+0x70>)
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4413      	add	r3, r2
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4619      	mov	r1, r3
 800b774:	f7ff fbe0 	bl	800af38 <LL_GPIO_ResetOutputPin>
}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	08010634 	.word	0x08010634

0800b784 <DMA1_Channel2_IRQHandler>:
// This section manages specific interrupt service routines for for STM32l152xE
#ifdef STM32L152xE

//SPI RX
void DMA1_Channel2_IRQHandler(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	603b      	str	r3, [r7, #0]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif

    if(LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TC2(DMA1))
 800b78e:	2102      	movs	r1, #2
 800b790:	4831      	ldr	r0, [pc, #196]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b792:	f7fe feb7 	bl	800a504 <LL_DMA_IsEnabledIT_TC>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d04a      	beq.n	800b832 <DMA1_Channel2_IRQHandler+0xae>
 800b79c:	482e      	ldr	r0, [pc, #184]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b79e:	f7fe fd35 	bl	800a20c <LL_DMA_IsActiveFlag_TC2>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d044      	beq.n	800b832 <DMA1_Channel2_IRQHandler+0xae>
    	//Disable SPI immediately to stop clocking out more bytes from slave
    	//Last byte will not be corrupted since it is already received in SPI buffer and copied by DMA,
    	//for TX operations extra consideration should be taken since the last byte can be corrupted.
    	//Also forcing  TX mode can stop the clock more information here: https://electronics.stackexchange.com/questions/130435/stm32-spi-half-duplex-1-wire-bidirectional-problem

    	if(LL_SPI_GetTransferDirection(SPI1) ==  LL_SPI_SIMPLEX_RX)
 800b7a8:	482c      	ldr	r0, [pc, #176]	; (800b85c <DMA1_Channel2_IRQHandler+0xd8>)
 800b7aa:	f7fe fff3 	bl	800a794 <LL_SPI_GetTransferDirection>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b4:	d133      	bne.n	800b81e <DMA1_Channel2_IRQHandler+0x9a>
    	{

    		LL_DMA_ClearFlag_TC2(DMA1);
 800b7b6:	4828      	ldr	r0, [pc, #160]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b7b8:	f7fe fe49 	bl	800a44e <LL_DMA_ClearFlag_TC2>
			LL_SPI_DisableDMAReq_RX(SPI1);
 800b7bc:	4827      	ldr	r0, [pc, #156]	; (800b85c <DMA1_Channel2_IRQHandler+0xd8>)
 800b7be:	f7ff f86b 	bl	800a898 <LL_SPI_DisableDMAReq_RX>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2); //disable RX DMA channel
 800b7c2:	2102      	movs	r1, #2
 800b7c4:	4824      	ldr	r0, [pc, #144]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b7c6:	f7fe fc37 	bl	800a038 <LL_DMA_DisableChannel>
			LL_SPI_Disable(SPI1); // stop the clock
 800b7ca:	4824      	ldr	r0, [pc, #144]	; (800b85c <DMA1_Channel2_IRQHandler+0xd8>)
 800b7cc:	f7fe ffc1 	bl	800a752 <LL_SPI_Disable>

			xContainerGPIOwrite(ucCSSP1, 1);
 800b7d0:	4b23      	ldr	r3, [pc, #140]	; (800b860 <DMA1_Channel2_IRQHandler+0xdc>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff ff9a 	bl	800b710 <xContainerGPIOwrite>

			configASSERT( xTaskSPI1NotifyRX != NULL);
 800b7dc:	4b21      	ldr	r3, [pc, #132]	; (800b864 <DMA1_Channel2_IRQHandler+0xe0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <DMA1_Channel2_IRQHandler+0x76>
        __asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	607b      	str	r3, [r7, #4]
    }
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <DMA1_Channel2_IRQHandler+0x74>

			/* Notify the task that the transmission is complete. */
			vTaskNotifyGiveIndexedFromISR( xTaskSPI1NotifyRX, 0, &xHigherPriorityTaskWoken );
 800b7fa:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <DMA1_Channel2_IRQHandler+0xe0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	463a      	mov	r2, r7
 800b800:	2100      	movs	r1, #0
 800b802:	4618      	mov	r0, r3
 800b804:	f7f9 f98a 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>

			/* There are no transmissions in progress, so no tasks to notify. */
			xTaskSPI1NotifyRX = NULL;
 800b808:	4b16      	ldr	r3, [pc, #88]	; (800b864 <DMA1_Channel2_IRQHandler+0xe0>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]

			/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
					should be performed to ensure the interrupt returns directly to the highest
					priority task.  The macro used for this purpose is dependent on the port in
					use and may be called portEND_SWITCHING_ISR(). */
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00e      	beq.n	800b832 <DMA1_Channel2_IRQHandler+0xae>
 800b814:	4b14      	ldr	r3, [pc, #80]	; (800b868 <DMA1_Channel2_IRQHandler+0xe4>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	e009      	b.n	800b832 <DMA1_Channel2_IRQHandler+0xae>
    	}
    	else //in full duplex wait for TX before disabling the SPI and notifying, here disable RX
    	{
    		LL_DMA_ClearFlag_TC2(DMA1);
 800b81e:	480e      	ldr	r0, [pc, #56]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b820:	f7fe fe15 	bl	800a44e <LL_DMA_ClearFlag_TC2>
    		LL_SPI_DisableDMAReq_RX(SPI1);
 800b824:	480d      	ldr	r0, [pc, #52]	; (800b85c <DMA1_Channel2_IRQHandler+0xd8>)
 800b826:	f7ff f837 	bl	800a898 <LL_SPI_DisableDMAReq_RX>
    		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2); //disable RX DMA channel
 800b82a:	2102      	movs	r1, #2
 800b82c:	480a      	ldr	r0, [pc, #40]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b82e:	f7fe fc03 	bl	800a038 <LL_DMA_DisableChannel>
    	}

    }
    if(LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_2) && LL_DMA_IsActiveFlag_TE2(DMA1))
 800b832:	2102      	movs	r1, #2
 800b834:	4808      	ldr	r0, [pc, #32]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b836:	f7fe fe81 	bl	800a53c <LL_DMA_IsEnabledIT_TE>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d007      	beq.n	800b850 <DMA1_Channel2_IRQHandler+0xcc>
 800b840:	4805      	ldr	r0, [pc, #20]	; (800b858 <DMA1_Channel2_IRQHandler+0xd4>)
 800b842:	f7fe fd66 	bl	800a312 <LL_DMA_IsActiveFlag_TE2>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <DMA1_Channel2_IRQHandler+0xcc>
    {
     /* Call Error function */
        SPI1_TransferError_Callback();
 800b84c:	f000 fb86 	bl	800bf5c <SPI1_TransferError_Callback>
    }

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	40026000 	.word	0x40026000
 800b85c:	40013000 	.word	0x40013000
 800b860:	20000201 	.word	0x20000201
 800b864:	20000210 	.word	0x20000210
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b872:	2300      	movs	r3, #0
 800b874:	603b      	str	r3, [r7, #0]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(SPIHandle);
#endif

	if( LL_SPI_IsEnabledIT_TXE(SPI1) && LL_SPI_IsActiveFlag_TXE(SPI1)  )
 800b876:	4820      	ldr	r0, [pc, #128]	; (800b8f8 <SPI1_IRQHandler+0x8c>)
 800b878:	f7fe ffed 	bl	800a856 <LL_SPI_IsEnabledIT_TXE>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d035      	beq.n	800b8ee <SPI1_IRQHandler+0x82>
 800b882:	481d      	ldr	r0, [pc, #116]	; (800b8f8 <SPI1_IRQHandler+0x8c>)
 800b884:	f7fe ffa5 	bl	800a7d2 <LL_SPI_IsActiveFlag_TXE>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d02f      	beq.n	800b8ee <SPI1_IRQHandler+0x82>
	{
		LL_SPI_DisableIT_TXE(SPI1);
 800b88e:	481a      	ldr	r0, [pc, #104]	; (800b8f8 <SPI1_IRQHandler+0x8c>)
 800b890:	f7fe ffd2 	bl	800a838 <LL_SPI_DisableIT_TXE>
		while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800b894:	bf00      	nop
 800b896:	4818      	ldr	r0, [pc, #96]	; (800b8f8 <SPI1_IRQHandler+0x8c>)
 800b898:	f7fe ffad 	bl	800a7f6 <LL_SPI_IsActiveFlag_BSY>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1f9      	bne.n	800b896 <SPI1_IRQHandler+0x2a>
		configASSERT( xTaskSPI1NotifyTX != NULL);
 800b8a2:	4b16      	ldr	r3, [pc, #88]	; (800b8fc <SPI1_IRQHandler+0x90>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10a      	bne.n	800b8c0 <SPI1_IRQHandler+0x54>
        __asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	607b      	str	r3, [r7, #4]
    }
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <SPI1_IRQHandler+0x52>

		/* Notify the DMA task that the transmission is complete. */
		//vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );

		xContainerGPIOwrite(ucCSSP1, 1);
 800b8c0:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <SPI1_IRQHandler+0x94>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff ff22 	bl	800b710 <xContainerGPIOwrite>
		vTaskNotifyGiveIndexedFromISR( xTaskSPI1NotifyTX, 0, &xHigherPriorityTaskWoken );
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <SPI1_IRQHandler+0x90>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	463a      	mov	r2, r7
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f9 f921 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>

		/* There are no transmissions in progress, so no tasks to notify. */
		xTaskSPI1NotifyTX = NULL;
 800b8da:	4b08      	ldr	r3, [pc, #32]	; (800b8fc <SPI1_IRQHandler+0x90>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]

		/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
				should be performed to ensure the interrupt returns directly to the highest
				priority task.  The macro used for this purpose is dependent on the port in
				use and may be called portEND_SWITCHING_ISR(). */
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <SPI1_IRQHandler+0x82>
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <SPI1_IRQHandler+0x98>)
 800b8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ec:	601a      	str	r2, [r3, #0]
	}
#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif

}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40013000 	.word	0x40013000
 800b8fc:	20000214 	.word	0x20000214
 800b900:	20000201 	.word	0x20000201
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <DMA1_Channel3_IRQHandler>:


//SPI TX
void DMA1_Channel3_IRQHandler(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif

    if(LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_3) && LL_DMA_IsActiveFlag_TC3(DMA1) )
 800b90c:	2103      	movs	r1, #3
 800b90e:	4813      	ldr	r0, [pc, #76]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b910:	f7fe fdf8 	bl	800a504 <LL_DMA_IsEnabledIT_TC>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00f      	beq.n	800b93a <DMA1_Channel3_IRQHandler+0x32>
 800b91a:	4810      	ldr	r0, [pc, #64]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b91c:	f7fe fc88 	bl	800a230 <LL_DMA_IsActiveFlag_TC3>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d009      	beq.n	800b93a <DMA1_Channel3_IRQHandler+0x32>
    {
        // For TX is safe to keep the SPI enabled since no more clocks are sent to slave
    	// but we cannot disable SPI immediately since it will corrupt the last byte
    	LL_DMA_ClearFlag_TC3(DMA1);
 800b926:	480d      	ldr	r0, [pc, #52]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b928:	f7fe fda0 	bl	800a46c <LL_DMA_ClearFlag_TC3>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3); //disable TX DMA channel
 800b92c:	2103      	movs	r1, #3
 800b92e:	480b      	ldr	r0, [pc, #44]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b930:	f7fe fb82 	bl	800a038 <LL_DMA_DisableChannel>

        LL_SPI_EnableIT_TXE(SPI1); // we need to catch the end of transmission of the last byte before disabling the SPI
 800b934:	480a      	ldr	r0, [pc, #40]	; (800b960 <DMA1_Channel3_IRQHandler+0x58>)
 800b936:	f7fe ff70 	bl	800a81a <LL_SPI_EnableIT_TXE>

    }
    if(LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_3) && LL_DMA_IsActiveFlag_TE3(DMA1))
 800b93a:	2103      	movs	r1, #3
 800b93c:	4807      	ldr	r0, [pc, #28]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b93e:	f7fe fdfd 	bl	800a53c <LL_DMA_IsEnabledIT_TE>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d006      	beq.n	800b956 <DMA1_Channel3_IRQHandler+0x4e>
 800b948:	4804      	ldr	r0, [pc, #16]	; (800b95c <DMA1_Channel3_IRQHandler+0x54>)
 800b94a:	f7fe fcf4 	bl	800a336 <LL_DMA_IsActiveFlag_TE3>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d000      	beq.n	800b956 <DMA1_Channel3_IRQHandler+0x4e>
    {
     /* Call Error function */
    //   SPI1_TransferError_Callback();
    	while(1);
 800b954:	e7fe      	b.n	800b954 <DMA1_Channel3_IRQHandler+0x4c>
    }

#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
}
 800b956:	bf00      	nop
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	40026000 	.word	0x40026000
 800b960:	40013000 	.word	0x40013000

0800b964 <DMA1_Channel7_IRQHandler>:


//USART TX
void DMA1_Channel7_IRQHandler(void) {
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif
	/* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_7) && LL_DMA_IsActiveFlag_TC7(DMA1))
 800b968:	2107      	movs	r1, #7
 800b96a:	4815      	ldr	r0, [pc, #84]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b96c:	f7fe fdca 	bl	800a504 <LL_DMA_IsEnabledIT_TC>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d012      	beq.n	800b99c <DMA1_Channel7_IRQHandler+0x38>
 800b976:	4812      	ldr	r0, [pc, #72]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b978:	f7fe fca6 	bl	800a2c8 <LL_DMA_IsActiveFlag_TC7>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00c      	beq.n	800b99c <DMA1_Channel7_IRQHandler+0x38>
    {
        LL_DMA_ClearFlag_TC7(DMA1);             /* Clear transfer complete flag */
 800b982:	480f      	ldr	r0, [pc, #60]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b984:	f7fe fd90 	bl	800a4a8 <LL_DMA_ClearFlag_TC7>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7); //disable TX DMA channel
 800b988:	2107      	movs	r1, #7
 800b98a:	480d      	ldr	r0, [pc, #52]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b98c:	f7fe fb54 	bl	800a038 <LL_DMA_DisableChannel>
        LL_USART_ClearFlag_TC(USART2);
 800b990:	480c      	ldr	r0, [pc, #48]	; (800b9c4 <DMA1_Channel7_IRQHandler+0x60>)
 800b992:	f7fe fe44 	bl	800a61e <LL_USART_ClearFlag_TC>
        LL_USART_EnableIT_TC(USART2);			/* enable TC interrupt for USART2
 800b996:	480b      	ldr	r0, [pc, #44]	; (800b9c4 <DMA1_Channel7_IRQHandler+0x60>)
 800b998:	f7fe fe5d 	bl	800a656 <LL_USART_EnableIT_TC>
        we need to catch the end of the last byte */

    }

    if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_7) && LL_DMA_IsActiveFlag_TE7(DMA1))
 800b99c:	2107      	movs	r1, #7
 800b99e:	4808      	ldr	r0, [pc, #32]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b9a0:	f7fe fdcc 	bl	800a53c <LL_DMA_IsEnabledIT_TE>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <DMA1_Channel7_IRQHandler+0x56>
 800b9aa:	4805      	ldr	r0, [pc, #20]	; (800b9c0 <DMA1_Channel7_IRQHandler+0x5c>)
 800b9ac:	f7fe fd0f 	bl	800a3ce <LL_DMA_IsActiveFlag_TE7>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <DMA1_Channel7_IRQHandler+0x56>
    {
    	USART2_TransferError_Callback();
 800b9b6:	f000 fad4 	bl	800bf62 <USART2_TransferError_Callback>
    }
#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(0);
#endif
    /* Implement other events when needed */
}
 800b9ba:	bf00      	nop
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	40026000 	.word	0x40026000
 800b9c4:	40004400 	.word	0x40004400

0800b9c8 <DMA1_Channel6_IRQHandler>:


//USART RX
void DMA1_Channel6_IRQHandler(void)
{
 800b9c8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af02      	add	r7, sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	603b      	str	r3, [r7, #0]
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif
    /*RX Check transfer-complete interrupt  */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_6) && LL_DMA_IsActiveFlag_TC6(DMA1))
 800b9d2:	2106      	movs	r1, #6
 800b9d4:	4836      	ldr	r0, [pc, #216]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800b9d6:	f7fe fd95 	bl	800a504 <LL_DMA_IsEnabledIT_TC>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d054      	beq.n	800ba8a <DMA1_Channel6_IRQHandler+0xc2>
 800b9e0:	4833      	ldr	r0, [pc, #204]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800b9e2:	f7fe fc5e 	bl	800a2a2 <LL_DMA_IsActiveFlag_TC6>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d04e      	beq.n	800ba8a <DMA1_Channel6_IRQHandler+0xc2>
    {

    	if(xTimerIsTimerActive(xTimerUSART2))
 800b9ec:	4b31      	ldr	r3, [pc, #196]	; (800bab4 <DMA1_Channel6_IRQHandler+0xec>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fa fb30 	bl	8006056 <xTimerIsTimerActive>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00f      	beq.n	800ba1c <DMA1_Channel6_IRQHandler+0x54>
    	{
    		xTimerStopFromISR(xTimerUSART2, &xHigherPriorityTaskWoken);
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <DMA1_Channel6_IRQHandler+0xec>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	463b      	mov	r3, r7
 800ba02:	2200      	movs	r2, #0
 800ba04:	9200      	str	r2, [sp, #0]
 800ba06:	2200      	movs	r2, #0
 800ba08:	2108      	movs	r1, #8
 800ba0a:	f7fa fc63 	bl	80062d4 <xTimerGenericCommand>
    		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <DMA1_Channel6_IRQHandler+0x54>
 800ba14:	4b28      	ldr	r3, [pc, #160]	; (800bab8 <DMA1_Channel6_IRQHandler+0xf0>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
    	}


    	LL_DMA_ClearFlag_TC6(DMA1);             /* Clear transfer complete flag */
 800ba1c:	4824      	ldr	r0, [pc, #144]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800ba1e:	f7fe fd34 	bl	800a48a <LL_DMA_ClearFlag_TC6>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6); //disable RX DMA channel
 800ba22:	2106      	movs	r1, #6
 800ba24:	4822      	ldr	r0, [pc, #136]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800ba26:	f7fe fb07 	bl	800a038 <LL_DMA_DisableChannel>
        LL_USART_DisableIT_IDLE(USART2);       // disable the idle interrupt of USART2
 800ba2a:	4824      	ldr	r0, [pc, #144]	; (800babc <DMA1_Channel6_IRQHandler+0xf4>)
 800ba2c:	f7fe fe22 	bl	800a674 <LL_USART_DisableIT_IDLE>


    	configASSERT( xTaskUSART2NotifyRX != NULL);
 800ba30:	4b23      	ldr	r3, [pc, #140]	; (800bac0 <DMA1_Channel6_IRQHandler+0xf8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <DMA1_Channel6_IRQHandler+0x86>
        __asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	607b      	str	r3, [r7, #4]
    }
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <DMA1_Channel6_IRQHandler+0x84>
    			/* Notify the DMA task that the RX line is idle */
    			//vTaskNotifyGiveIndexedFromISR( xTaskUSART2NotifyRX, 0, &xHigherPriorityTaskWoken );

    	xTaskNotifyFromISR( xTaskUSART2NotifyRX,
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <DMA1_Channel6_IRQHandler+0xf8>)
 800ba50:	681d      	ldr	r5, [r3, #0]
 800ba52:	4b1c      	ldr	r3, [pc, #112]	; (800bac4 <DMA1_Channel6_IRQHandler+0xfc>)
 800ba54:	681c      	ldr	r4, [r3, #0]
 800ba56:	2106      	movs	r1, #6
 800ba58:	4815      	ldr	r0, [pc, #84]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800ba5a:	f7fe fb45 	bl	800a0e8 <LL_DMA_GetDataLength>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	1ae3      	subs	r3, r4, r3
 800ba62:	021a      	lsls	r2, r3, #8
 800ba64:	463b      	mov	r3, r7
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	2100      	movs	r1, #0
 800ba70:	4628      	mov	r0, r5
 800ba72:	f7f8 fed1 	bl	8004818 <xTaskGenericNotifyFromISR>
    						( ulUSART2SizeRX - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) ) << 8,
    						eSetValueWithOverwrite,
    						&xHigherPriorityTaskWoken);
    	/* There are no transmissions in progress, so no tasks to notify. */
    	xTaskUSART2NotifyRX = NULL;
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <DMA1_Channel6_IRQHandler+0xf8>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]

    	/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
    					should be performed to ensure the interrupt returns directly to the highest
    					priority task.  The macro used for this purpose is dependent on the port in
    					use and may be called portEND_SWITCHING_ISR(). */
    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <DMA1_Channel6_IRQHandler+0xc2>
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <DMA1_Channel6_IRQHandler+0xf0>)
 800ba84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba88:	601a      	str	r2, [r3, #0]

    }

    if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_CHANNEL_6) && LL_DMA_IsActiveFlag_TE6(DMA1))
 800ba8a:	2106      	movs	r1, #6
 800ba8c:	4808      	ldr	r0, [pc, #32]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800ba8e:	f7fe fd55 	bl	800a53c <LL_DMA_IsEnabledIT_TE>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <DMA1_Channel6_IRQHandler+0xe0>
 800ba98:	4805      	ldr	r0, [pc, #20]	; (800bab0 <DMA1_Channel6_IRQHandler+0xe8>)
 800ba9a:	f7fe fc85 	bl	800a3a8 <LL_DMA_IsActiveFlag_TE6>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <DMA1_Channel6_IRQHandler+0xe0>
    {
       	USART2_TransferError_Callback();
 800baa4:	f000 fa5d 	bl	800bf62 <USART2_TransferError_Callback>
    }
#if (configUSE_TRACE_FACILITY ==1)
    vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
    /* Implement other events when needed */
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bdb0      	pop	{r4, r5, r7, pc}
 800bab0:	40026000 	.word	0x40026000
 800bab4:	20000194 	.word	0x20000194
 800bab8:	e000ed04 	.word	0xe000ed04
 800babc:	40004400 	.word	0x40004400
 800bac0:	2000020c 	.word	0x2000020c
 800bac4:	20000224 	.word	0x20000224

0800bac8 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 800bac8:	b5b0      	push	{r4, r5, r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af02      	add	r7, sp, #8

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(USARTHandle);
#endif

	if(LL_USART_IsEnabledIT_TC(USART2) &&  LL_USART_IsActiveFlag_TC(USART2) ) //This is for safely TX of the last byte
 800bad2:	484f      	ldr	r0, [pc, #316]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bad4:	f7fe fdfe 	bl	800a6d4 <LL_USART_IsEnabledIT_TC>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d02b      	beq.n	800bb36 <USART2_IRQHandler+0x6e>
 800bade:	484c      	ldr	r0, [pc, #304]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bae0:	f7fe fd7a 	bl	800a5d8 <LL_USART_IsActiveFlag_TC>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d025      	beq.n	800bb36 <USART2_IRQHandler+0x6e>
	{
		LL_USART_ClearFlag_TC(USART2);
 800baea:	4849      	ldr	r0, [pc, #292]	; (800bc10 <USART2_IRQHandler+0x148>)
 800baec:	f7fe fd97 	bl	800a61e <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(USART2);
 800baf0:	4847      	ldr	r0, [pc, #284]	; (800bc10 <USART2_IRQHandler+0x148>)
 800baf2:	f7fe fdce 	bl	800a692 <LL_USART_DisableIT_TC>
		//configASSERT( xTaskToNotify != NULL);
		configASSERT( xTaskUSART2NotifyTX != NULL);
 800baf6:	4b47      	ldr	r3, [pc, #284]	; (800bc14 <USART2_IRQHandler+0x14c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <USART2_IRQHandler+0x4c>
        __asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	60fb      	str	r3, [r7, #12]
    }
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <USART2_IRQHandler+0x4a>

		/* Notify the DMA task that the transmission is complete. */
		//vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
		vTaskNotifyGiveIndexedFromISR( xTaskUSART2NotifyTX, 0, &xHigherPriorityTaskWoken );
 800bb14:	4b3f      	ldr	r3, [pc, #252]	; (800bc14 <USART2_IRQHandler+0x14c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	1d3a      	adds	r2, r7, #4
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f8 fffd 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>
		/* There are no transmissions in progress, so no tasks to notify. */
		//xTaskToNotify = NULL;
		xTaskUSART2NotifyTX = NULL;
 800bb22:	4b3c      	ldr	r3, [pc, #240]	; (800bc14 <USART2_IRQHandler+0x14c>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

		/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
			should be performed to ensure the interrupt returns directly to the highest
			priority task.  The macro used for this purpose is dependent on the port in
			use and may be called portEND_SWITCHING_ISR(). */
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <USART2_IRQHandler+0x6e>
 800bb2e:	4b3a      	ldr	r3, [pc, #232]	; (800bc18 <USART2_IRQHandler+0x150>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]

	}

	if(LL_USART_IsEnabledIT_IDLE(USART2) &&  LL_USART_IsActiveFlag_IDLE(USART2) ) //This is for RX idle detection
 800bb36:	4836      	ldr	r0, [pc, #216]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bb38:	f7fe fdba 	bl	800a6b0 <LL_USART_IsEnabledIT_IDLE>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d062      	beq.n	800bc08 <USART2_IRQHandler+0x140>
 800bb42:	4833      	ldr	r0, [pc, #204]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bb44:	f7fe fd36 	bl	800a5b4 <LL_USART_IsActiveFlag_IDLE>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d05c      	beq.n	800bc08 <USART2_IRQHandler+0x140>
	{

		LL_USART_DisableIT_IDLE(USART2);
 800bb4e:	4830      	ldr	r0, [pc, #192]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bb50:	f7fe fd90 	bl	800a674 <LL_USART_DisableIT_IDLE>
		LL_USART_ClearFlag_IDLE(USART2);
 800bb54:	482e      	ldr	r0, [pc, #184]	; (800bc10 <USART2_IRQHandler+0x148>)
 800bb56:	f7fe fd51 	bl	800a5fc <LL_USART_ClearFlag_IDLE>


		if (LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) == 0)
 800bb5a:	2106      	movs	r1, #6
 800bb5c:	482f      	ldr	r0, [pc, #188]	; (800bc1c <USART2_IRQHandler+0x154>)
 800bb5e:	f7fe fac3 	bl	800a0e8 <LL_DMA_GetDataLength>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d13c      	bne.n	800bbe2 <USART2_IRQHandler+0x11a>
		{


			LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800bb68:	2106      	movs	r1, #6
 800bb6a:	482c      	ldr	r0, [pc, #176]	; (800bc1c <USART2_IRQHandler+0x154>)
 800bb6c:	f7fe fcac 	bl	800a4c8 <LL_DMA_DisableIT_TC>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800bb70:	2106      	movs	r1, #6
 800bb72:	482a      	ldr	r0, [pc, #168]	; (800bc1c <USART2_IRQHandler+0x154>)
 800bb74:	f7fe fa60 	bl	800a038 <LL_DMA_DisableChannel>

			configASSERT( xTaskUSART2NotifyRX != NULL);
 800bb78:	4b29      	ldr	r3, [pc, #164]	; (800bc20 <USART2_IRQHandler+0x158>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <USART2_IRQHandler+0xce>
        __asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60bb      	str	r3, [r7, #8]
    }
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <USART2_IRQHandler+0xcc>
					/* Notify the DMA task that the RX line is idle */
			vTaskNotifyGiveIndexedFromISR( xTaskUSART2NotifyRX, 0, &xHigherPriorityTaskWoken );
 800bb96:	4b22      	ldr	r3, [pc, #136]	; (800bc20 <USART2_IRQHandler+0x158>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	1d3a      	adds	r2, r7, #4
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f8 ffbc 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>

			xTaskNotifyFromISR( xTaskUSART2NotifyRX,
 800bba4:	4b1e      	ldr	r3, [pc, #120]	; (800bc20 <USART2_IRQHandler+0x158>)
 800bba6:	681d      	ldr	r5, [r3, #0]
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <USART2_IRQHandler+0x15c>)
 800bbaa:	681c      	ldr	r4, [r3, #0]
 800bbac:	2106      	movs	r1, #6
 800bbae:	481b      	ldr	r0, [pc, #108]	; (800bc1c <USART2_IRQHandler+0x154>)
 800bbb0:	f7fe fa9a 	bl	800a0e8 <LL_DMA_GetDataLength>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	1ae3      	subs	r3, r4, r3
 800bbb8:	021a      	lsls	r2, r3, #8
 800bbba:	1d3b      	adds	r3, r7, #4
 800bbbc:	9301      	str	r3, [sp, #4]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7f8 fe26 	bl	8004818 <xTaskGenericNotifyFromISR>
					                        ( ulUSART2SizeRX -  LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) ) << 8,
											eSetValueWithOverwrite,
											&xHigherPriorityTaskWoken);
					/* There are no transmissions in progress, so no tasks to notify. */
			xTaskUSART2NotifyRX = NULL;
 800bbcc:	4b14      	ldr	r3, [pc, #80]	; (800bc20 <USART2_IRQHandler+0x158>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]

					/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
							should be performed to ensure the interrupt returns directly to the highest
							priority task.  The macro used for this purpose is dependent on the port in
							use and may be called portEND_SWITCHING_ISR(). */
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <USART2_IRQHandler+0x140>
 800bbd8:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <USART2_IRQHandler+0x150>)
 800bbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbde:	601a      	str	r2, [r3, #0]

	}
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 800bbe0:	e012      	b.n	800bc08 <USART2_IRQHandler+0x140>
			xTimerStartFromISR( xTimerUSART2, &xHigherPriorityTaskWoken ); // start the timer
 800bbe2:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <USART2_IRQHandler+0x160>)
 800bbe4:	681c      	ldr	r4, [r3, #0]
 800bbe6:	f7f8 fb77 	bl	80042d8 <xTaskGetTickCountFromISR>
 800bbea:	4602      	mov	r2, r0
 800bbec:	1d3b      	adds	r3, r7, #4
 800bbee:	2100      	movs	r1, #0
 800bbf0:	9100      	str	r1, [sp, #0]
 800bbf2:	2106      	movs	r1, #6
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f7fa fb6d 	bl	80062d4 <xTimerGenericCommand>
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <USART2_IRQHandler+0x140>
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <USART2_IRQHandler+0x150>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
}
 800bc08:	bf00      	nop
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bdb0      	pop	{r4, r5, r7, pc}
 800bc10:	40004400 	.word	0x40004400
 800bc14:	20000208 	.word	0x20000208
 800bc18:	e000ed04 	.word	0xe000ed04
 800bc1c:	40026000 	.word	0x40026000
 800bc20:	2000020c 	.word	0x2000020c
 800bc24:	20000224 	.word	0x20000224
 800bc28:	20000194 	.word	0x20000194

0800bc2c <I2C2_EV_IRQHandler>:
  * Brief   This function handles I2C2 (Master) interrupt request.
  * Param   None
  * Retval  None
  */
void I2C2_EV_IRQHandler(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bc32:	2300      	movs	r3, #0
 800bc34:	603b      	str	r3, [r7, #0]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(I2CHandle);
#endif

  if(LL_I2C_IsEnabledIT_TX(I2C2) && LL_I2C_IsEnabledIT_BUF(I2C2))
 800bc36:	4841      	ldr	r0, [pc, #260]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc38:	f7fe ff0c 	bl	800aa54 <LL_I2C_IsEnabledIT_TX>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d03f      	beq.n	800bcc2 <I2C2_EV_IRQHandler+0x96>
 800bc42:	483e      	ldr	r0, [pc, #248]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc44:	f7fe ff55 	bl	800aaf2 <LL_I2C_IsEnabledIT_BUF>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d039      	beq.n	800bcc2 <I2C2_EV_IRQHandler+0x96>
  {
	  // This interrupt occurs when the last byte has been TX and DR was not written with a new byte
	  if(LL_I2C_IsActiveFlag_TXE(I2C2) && LL_I2C_IsActiveFlag_BTF(I2C2))
 800bc4e:	483b      	ldr	r0, [pc, #236]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc50:	f7fe ff80 	bl	800ab54 <LL_I2C_IsActiveFlag_TXE>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d06a      	beq.n	800bd30 <I2C2_EV_IRQHandler+0x104>
 800bc5a:	4838      	ldr	r0, [pc, #224]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc5c:	f7fe ff8c 	bl	800ab78 <LL_I2C_IsActiveFlag_BTF>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d064      	beq.n	800bd30 <I2C2_EV_IRQHandler+0x104>
	  {
		  LL_I2C_DisableIT_BUF(I2C2);
 800bc66:	4835      	ldr	r0, [pc, #212]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc68:	f7fe ff34 	bl	800aad4 <LL_I2C_DisableIT_BUF>
		  LL_I2C_DisableIT_TX(I2C2);
 800bc6c:	4833      	ldr	r0, [pc, #204]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc6e:	f7fe fee2 	bl	800aa36 <LL_I2C_DisableIT_TX>
		  LL_I2C_DisableIT_EVT(I2C2);
 800bc72:	4832      	ldr	r0, [pc, #200]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc74:	f7fe ff10 	bl	800aa98 <LL_I2C_DisableIT_EVT>

		  if(ucGenerateStop) {
 800bc78:	4b31      	ldr	r3, [pc, #196]	; (800bd40 <I2C2_EV_IRQHandler+0x114>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <I2C2_EV_IRQHandler+0x5a>
			  LL_I2C_GenerateStopCondition(I2C2);
 800bc80:	482e      	ldr	r0, [pc, #184]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bc82:	f7fe ffe1 	bl	800ac48 <LL_I2C_GenerateStopCondition>
		  }

		  //Notify the end of transmission
		  //vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );

		  configASSERT( xTaskI2C2NotifyTX != NULL);
 800bc86:	4b2f      	ldr	r3, [pc, #188]	; (800bd44 <I2C2_EV_IRQHandler+0x118>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <I2C2_EV_IRQHandler+0x78>
        __asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
    }
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <I2C2_EV_IRQHandler+0x76>

		  vTaskNotifyGiveIndexedFromISR( xTaskI2C2NotifyTX, 0, &xHigherPriorityTaskWoken );
 800bca4:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <I2C2_EV_IRQHandler+0x118>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	463a      	mov	r2, r7
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7f8 ff35 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>

		  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d03b      	beq.n	800bd30 <I2C2_EV_IRQHandler+0x104>
 800bcb8:	4b23      	ldr	r3, [pc, #140]	; (800bd48 <I2C2_EV_IRQHandler+0x11c>)
 800bcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcbe:	601a      	str	r2, [r3, #0]
	  if(LL_I2C_IsActiveFlag_TXE(I2C2) && LL_I2C_IsActiveFlag_BTF(I2C2))
 800bcc0:	e036      	b.n	800bd30 <I2C2_EV_IRQHandler+0x104>

	  }
  }
  else if(LL_I2C_IsActiveFlag_SB(I2C2))  /* Check SB flag value in ISR register */
 800bcc2:	481e      	ldr	r0, [pc, #120]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bcc4:	f7fe ff6a 	bl	800ab9c <LL_I2C_IsActiveFlag_SB>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <I2C2_EV_IRQHandler+0xb8>
  {
    /* Send Slave address with a 7-Bit SLAVE_OWN_ADDRESS for a ubMasterRequestDirection request */
    LL_I2C_TransmitData8(I2C2, ucSlaveOwnAddress | ucMasterRequestDirection);
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <I2C2_EV_IRQHandler+0x120>)
 800bcd0:	781a      	ldrb	r2, [r3, #0]
 800bcd2:	4b1f      	ldr	r3, [pc, #124]	; (800bd50 <I2C2_EV_IRQHandler+0x124>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4817      	ldr	r0, [pc, #92]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bcde:	f7fe ffde 	bl	800ac9e <LL_I2C_TransmitData8>
  }

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 800bce2:	e026      	b.n	800bd32 <I2C2_EV_IRQHandler+0x106>
  else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
 800bce4:	4815      	ldr	r0, [pc, #84]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bce6:	f7fe ff6b 	bl	800abc0 <LL_I2C_IsActiveFlag_ADDR>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d020      	beq.n	800bd32 <I2C2_EV_IRQHandler+0x106>
    if(LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_READ)
 800bcf0:	4812      	ldr	r0, [pc, #72]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bcf2:	f7fe ffb8 	bl	800ac66 <LL_I2C_GetTransferDirection>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d112      	bne.n	800bd22 <I2C2_EV_IRQHandler+0xf6>
      if(usMasterNbDataToReceive == 1)
 800bcfc:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <I2C2_EV_IRQHandler+0x128>)
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d107      	bne.n	800bd14 <I2C2_EV_IRQHandler+0xe8>
        LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_NACK);
 800bd04:	2100      	movs	r1, #0
 800bd06:	480d      	ldr	r0, [pc, #52]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd08:	f7fe ff7d 	bl	800ac06 <LL_I2C_AcknowledgeNextData>
        LL_I2C_EnableDMAReq_RX(I2C2);
 800bd0c:	480b      	ldr	r0, [pc, #44]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd0e:	f7fe fe47 	bl	800a9a0 <LL_I2C_EnableDMAReq_RX>
 800bd12:	e009      	b.n	800bd28 <I2C2_EV_IRQHandler+0xfc>
    	  LL_I2C_EnableLastDMA(I2C2);
 800bd14:	4809      	ldr	r0, [pc, #36]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd16:	f7fe ffb3 	bl	800ac80 <LL_I2C_EnableLastDMA>
    	  LL_I2C_EnableDMAReq_RX(I2C2);
 800bd1a:	4808      	ldr	r0, [pc, #32]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd1c:	f7fe fe40 	bl	800a9a0 <LL_I2C_EnableDMAReq_RX>
 800bd20:	e002      	b.n	800bd28 <I2C2_EV_IRQHandler+0xfc>
      LL_I2C_EnableDMAReq_TX(I2C2);
 800bd22:	4806      	ldr	r0, [pc, #24]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd24:	f7fe fe0b 	bl	800a93e <LL_I2C_EnableDMAReq_TX>
    LL_I2C_ClearFlag_ADDR(I2C2);
 800bd28:	4804      	ldr	r0, [pc, #16]	; (800bd3c <I2C2_EV_IRQHandler+0x110>)
 800bd2a:	f7fe ff5b 	bl	800abe4 <LL_I2C_ClearFlag_ADDR>
}
 800bd2e:	e000      	b.n	800bd32 <I2C2_EV_IRQHandler+0x106>
	  if(LL_I2C_IsActiveFlag_TXE(I2C2) && LL_I2C_IsActiveFlag_BTF(I2C2))
 800bd30:	bf00      	nop
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	40005800 	.word	0x40005800
 800bd40:	20000200 	.word	0x20000200
 800bd44:	2000021c 	.word	0x2000021c
 800bd48:	e000ed04 	.word	0xe000ed04
 800bd4c:	200001fc 	.word	0x200001fc
 800bd50:	200001fd 	.word	0x200001fd
 800bd54:	200001fe 	.word	0x200001fe

0800bd58 <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles DMA1_Channel4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif

  if(LL_DMA_IsActiveFlag_TC4(DMA1))
 800bd5c:	4814      	ldr	r0, [pc, #80]	; (800bdb0 <DMA1_Channel4_IRQHandler+0x58>)
 800bd5e:	f7fe fa7a 	bl	800a256 <LL_DMA_IsActiveFlag_TC4>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d019      	beq.n	800bd9c <DMA1_Channel4_IRQHandler+0x44>
  {
    LL_DMA_ClearFlag_GI4(DMA1);
 800bd68:	4811      	ldr	r0, [pc, #68]	; (800bdb0 <DMA1_Channel4_IRQHandler+0x58>)
 800bd6a:	f7fe fb43 	bl	800a3f4 <LL_DMA_ClearFlag_GI4>
    LL_I2C_DisableIT_EVT(I2C2);
 800bd6e:	4811      	ldr	r0, [pc, #68]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd70:	f7fe fe92 	bl	800aa98 <LL_I2C_DisableIT_EVT>
    LL_I2C_DisableIT_ERR(I2C2);
 800bd74:	480f      	ldr	r0, [pc, #60]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd76:	f7fe fede 	bl	800ab36 <LL_I2C_DisableIT_ERR>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 800bd7a:	2104      	movs	r1, #4
 800bd7c:	480c      	ldr	r0, [pc, #48]	; (800bdb0 <DMA1_Channel4_IRQHandler+0x58>)
 800bd7e:	f7fe f95b 	bl	800a038 <LL_DMA_DisableChannel>
    LL_I2C_DisableDMAReq_TX(I2C2);
 800bd82:	480c      	ldr	r0, [pc, #48]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd84:	f7fe fdea 	bl	800a95c <LL_I2C_DisableDMAReq_TX>


    // Activate the TXE and BUF interrupts to catch the events of the last bytes
    LL_I2C_EnableIT_BUF(I2C2);
 800bd88:	480a      	ldr	r0, [pc, #40]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd8a:	f7fe fe94 	bl	800aab6 <LL_I2C_EnableIT_BUF>
   	LL_I2C_EnableIT_TX(I2C2);
 800bd8e:	4809      	ldr	r0, [pc, #36]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd90:	f7fe fe42 	bl	800aa18 <LL_I2C_EnableIT_TX>
   	LL_I2C_EnableIT_EVT(I2C2);
 800bd94:	4807      	ldr	r0, [pc, #28]	; (800bdb4 <DMA1_Channel4_IRQHandler+0x5c>)
 800bd96:	f7fe fe70 	bl	800aa7a <LL_I2C_EnableIT_EVT>
  }
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(0);
#endif

}
 800bd9a:	e006      	b.n	800bdaa <DMA1_Channel4_IRQHandler+0x52>
  else if(LL_DMA_IsActiveFlag_TE4(DMA1))
 800bd9c:	4804      	ldr	r0, [pc, #16]	; (800bdb0 <DMA1_Channel4_IRQHandler+0x58>)
 800bd9e:	f7fe fadd 	bl	800a35c <LL_DMA_IsActiveFlag_TE4>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d000      	beq.n	800bdaa <DMA1_Channel4_IRQHandler+0x52>
    while(1);
 800bda8:	e7fe      	b.n	800bda8 <DMA1_Channel4_IRQHandler+0x50>
}
 800bdaa:	bf00      	nop
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	40026000 	.word	0x40026000
 800bdb4:	40005800 	.word	0x40005800

0800bdb8 <DMA1_Channel5_IRQHandler>:
  * @brief  This function handles DMA1_Channel5 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel5_IRQHandler(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	603b      	str	r3, [r7, #0]
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif

  if(LL_DMA_IsActiveFlag_TC5(DMA1))
 800bdc2:	4821      	ldr	r0, [pc, #132]	; (800be48 <DMA1_Channel5_IRQHandler+0x90>)
 800bdc4:	f7fe fa5a 	bl	800a27c <LL_DMA_IsActiveFlag_TC5>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d030      	beq.n	800be30 <DMA1_Channel5_IRQHandler+0x78>
  {
    LL_DMA_ClearFlag_GI5(DMA1);
 800bdce:	481e      	ldr	r0, [pc, #120]	; (800be48 <DMA1_Channel5_IRQHandler+0x90>)
 800bdd0:	f7fe fb1f 	bl	800a412 <LL_DMA_ClearFlag_GI5>
    LL_I2C_DisableIT_EVT(I2C2);
 800bdd4:	481d      	ldr	r0, [pc, #116]	; (800be4c <DMA1_Channel5_IRQHandler+0x94>)
 800bdd6:	f7fe fe5f 	bl	800aa98 <LL_I2C_DisableIT_EVT>
    LL_I2C_DisableIT_ERR(I2C2);
 800bdda:	481c      	ldr	r0, [pc, #112]	; (800be4c <DMA1_Channel5_IRQHandler+0x94>)
 800bddc:	f7fe feab 	bl	800ab36 <LL_I2C_DisableIT_ERR>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800bde0:	2105      	movs	r1, #5
 800bde2:	4819      	ldr	r0, [pc, #100]	; (800be48 <DMA1_Channel5_IRQHandler+0x90>)
 800bde4:	f7fe f928 	bl	800a038 <LL_DMA_DisableChannel>
    LL_I2C_DisableDMAReq_RX(I2C2);
 800bde8:	4818      	ldr	r0, [pc, #96]	; (800be4c <DMA1_Channel5_IRQHandler+0x94>)
 800bdea:	f7fe fde8 	bl	800a9be <LL_I2C_DisableDMAReq_RX>

    //RX event is simpler and stop condition and notification can be generated here

    LL_I2C_GenerateStopCondition(I2C2);
 800bdee:	4817      	ldr	r0, [pc, #92]	; (800be4c <DMA1_Channel5_IRQHandler+0x94>)
 800bdf0:	f7fe ff2a 	bl	800ac48 <LL_I2C_GenerateStopCondition>
    //Notify the end of RX

    configASSERT(xTaskI2C2NotifyRX != NULL);
 800bdf4:	4b16      	ldr	r3, [pc, #88]	; (800be50 <DMA1_Channel5_IRQHandler+0x98>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <DMA1_Channel5_IRQHandler+0x5a>
        __asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	607b      	str	r3, [r7, #4]
    }
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <DMA1_Channel5_IRQHandler+0x58>

    //vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
    vTaskNotifyGiveIndexedFromISR( xTaskI2C2NotifyRX, 0, &xHigherPriorityTaskWoken );
 800be12:	4b0f      	ldr	r3, [pc, #60]	; (800be50 <DMA1_Channel5_IRQHandler+0x98>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	463a      	mov	r2, r7
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f8 fe7e 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00b      	beq.n	800be3e <DMA1_Channel5_IRQHandler+0x86>
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <DMA1_Channel5_IRQHandler+0x9c>)
 800be28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2c:	601a      	str	r2, [r3, #0]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif

}
 800be2e:	e006      	b.n	800be3e <DMA1_Channel5_IRQHandler+0x86>
  else if(LL_DMA_IsActiveFlag_TE5(DMA1))
 800be30:	4805      	ldr	r0, [pc, #20]	; (800be48 <DMA1_Channel5_IRQHandler+0x90>)
 800be32:	f7fe faa6 	bl	800a382 <LL_DMA_IsActiveFlag_TE5>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d000      	beq.n	800be3e <DMA1_Channel5_IRQHandler+0x86>
    while(1);
 800be3c:	e7fe      	b.n	800be3c <DMA1_Channel5_IRQHandler+0x84>
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	40026000 	.word	0x40026000
 800be4c:	40005800 	.word	0x40005800
 800be50:	20000218 	.word	0x20000218
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <I2C2_ER_IRQHandler>:
  * Brief   This function handles I2C2 (Master) error interrupt request.
  * Param   None
  * Retval  None
  */
void I2C2_ER_IRQHandler(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800be5e:	2300      	movs	r3, #0
 800be60:	607b      	str	r3, [r7, #4]
#endif


  /* Call Error function */
  //Error_Callback();
  LL_I2C_GenerateStopCondition(I2C2);
 800be62:	4812      	ldr	r0, [pc, #72]	; (800beac <I2C2_ER_IRQHandler+0x54>)
 800be64:	f7fe fef0 	bl	800ac48 <LL_I2C_GenerateStopCondition>
  LL_I2C_Disable(I2C2);
 800be68:	4810      	ldr	r0, [pc, #64]	; (800beac <I2C2_ER_IRQHandler+0x54>)
 800be6a:	f7fe fd59 	bl	800a920 <LL_I2C_Disable>

  if(LL_I2C_IsEnabledDMAReq_RX(I2C2))
 800be6e:	480f      	ldr	r0, [pc, #60]	; (800beac <I2C2_ER_IRQHandler+0x54>)
 800be70:	f7fe fdb4 	bl	800a9dc <LL_I2C_IsEnabledDMAReq_RX>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <I2C2_ER_IRQHandler+0x2a>
	  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800be7a:	2105      	movs	r1, #5
 800be7c:	480c      	ldr	r0, [pc, #48]	; (800beb0 <I2C2_ER_IRQHandler+0x58>)
 800be7e:	f7fe f8db 	bl	800a038 <LL_DMA_DisableChannel>

  if(LL_I2C_IsEnabledDMAReq_TX(I2C2))
 800be82:	480a      	ldr	r0, [pc, #40]	; (800beac <I2C2_ER_IRQHandler+0x54>)
 800be84:	f7fe fd79 	bl	800a97a <LL_I2C_IsEnabledDMAReq_TX>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <I2C2_ER_IRQHandler+0x3e>
  	  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 800be8e:	2104      	movs	r1, #4
 800be90:	4807      	ldr	r0, [pc, #28]	; (800beb0 <I2C2_ER_IRQHandler+0x58>)
 800be92:	f7fe f8d1 	bl	800a038 <LL_DMA_DisableChannel>

  //vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <I2C2_ER_IRQHandler+0x4c>
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <I2C2_ER_IRQHandler+0x5c>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif

}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	40005800 	.word	0x40005800
 800beb0:	40026000 	.word	0x40026000
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <DMA1_Channel1_IRQHandler>:



// ADC1
void DMA1_Channel1_IRQHandler(void)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	607b      	str	r3, [r7, #4]
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(DMAHandle);
#endif

  if(LL_DMA_IsActiveFlag_TC1(DMA1))
 800bec2:	4815      	ldr	r0, [pc, #84]	; (800bf18 <DMA1_Channel1_IRQHandler+0x60>)
 800bec4:	f7fe f990 	bl	800a1e8 <LL_DMA_IsActiveFlag_TC1>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d018      	beq.n	800bf00 <DMA1_Channel1_IRQHandler+0x48>
  {
    //LL_DMA_ClearFlag_GI1(DMA1);
    LL_DMA_ClearFlag_TC1(DMA1);
 800bece:	4812      	ldr	r0, [pc, #72]	; (800bf18 <DMA1_Channel1_IRQHandler+0x60>)
 800bed0:	f7fe faae 	bl	800a430 <LL_DMA_ClearFlag_TC1>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800bed4:	2101      	movs	r1, #1
 800bed6:	4810      	ldr	r0, [pc, #64]	; (800bf18 <DMA1_Channel1_IRQHandler+0x60>)
 800bed8:	f7fe f8ae 	bl	800a038 <LL_DMA_DisableChannel>
    //vTaskNotifyGiveIndexedFromISR( xTaskToNotify, 0, &xHigherPriorityTaskWoken );
    vTaskNotifyGiveIndexedFromISR( xTaskADC1Notify, 0, &xHigherPriorityTaskWoken );
 800bedc:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <DMA1_Channel1_IRQHandler+0x64>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	1d3a      	adds	r2, r7, #4
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f8 fe19 	bl	8004b1c <vTaskGenericNotifyGiveFromISR>
    LL_ADC_Disable(ADC1);
 800beea:	480d      	ldr	r0, [pc, #52]	; (800bf20 <DMA1_Channel1_IRQHandler+0x68>)
 800beec:	f7fe ffa9 	bl	800ae42 <LL_ADC_Disable>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00b      	beq.n	800bf0e <DMA1_Channel1_IRQHandler+0x56>
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <DMA1_Channel1_IRQHandler+0x6c>)
 800bef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800befc:	601a      	str	r2, [r3, #0]
  }

#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 800befe:	e006      	b.n	800bf0e <DMA1_Channel1_IRQHandler+0x56>
  else if(LL_DMA_IsActiveFlag_TE1(DMA1))
 800bf00:	4805      	ldr	r0, [pc, #20]	; (800bf18 <DMA1_Channel1_IRQHandler+0x60>)
 800bf02:	f7fe f9f4 	bl	800a2ee <LL_DMA_IsActiveFlag_TE1>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d000      	beq.n	800bf0e <DMA1_Channel1_IRQHandler+0x56>
    while(1);
 800bf0c:	e7fe      	b.n	800bf0c <DMA1_Channel1_IRQHandler+0x54>
}
 800bf0e:	bf00      	nop
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	40026000 	.word	0x40026000
 800bf1c:	20000220 	.word	0x20000220
 800bf20:	40012400 	.word	0x40012400
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <ADC1_IRQHandler>:
  * @brief  This function handles ADC1 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_IRQHandler(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISRBegin(ADCHandle);
#endif

  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 800bf2c:	480a      	ldr	r0, [pc, #40]	; (800bf58 <ADC1_IRQHandler+0x30>)
 800bf2e:	f7fe ffca 	bl	800aec6 <LL_ADC_IsActiveFlag_OVR>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <ADC1_IRQHandler+0x18>
  {
    /* Clear flag ADC group regular overrun */
    LL_ADC_ClearFlag_OVR(ADC1);
 800bf38:	4807      	ldr	r0, [pc, #28]	; (800bf58 <ADC1_IRQHandler+0x30>)
 800bf3a:	f7fe ffe3 	bl	800af04 <LL_ADC_ClearFlag_OVR>

    /* Call interruption treatment function */
    while(1);
 800bf3e:	e7fe      	b.n	800bf3e <ADC1_IRQHandler+0x16>
  }
  if(LL_ADC_IsActiveFlag_EOCS(ADC1) != 0)
 800bf40:	4805      	ldr	r0, [pc, #20]	; (800bf58 <ADC1_IRQHandler+0x30>)
 800bf42:	f7fe ffae 	bl	800aea2 <LL_ADC_IsActiveFlag_EOCS>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <ADC1_IRQHandler+0x2a>
  {
	  LL_ADC_ClearFlag_EOCS(ADC1);
 800bf4c:	4802      	ldr	r0, [pc, #8]	; (800bf58 <ADC1_IRQHandler+0x30>)
 800bf4e:	f7fe ffcc 	bl	800aeea <LL_ADC_ClearFlag_EOCS>
	  //while(1);
  }
#if (configUSE_TRACE_FACILITY ==1)
	vTraceStoreISREnd(0);
#endif
}
 800bf52:	bf00      	nop
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	40012400 	.word	0x40012400

0800bf5c <SPI1_TransferError_Callback>:


static void SPI1_TransferError_Callback()
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
while(1);
 800bf60:	e7fe      	b.n	800bf60 <SPI1_TransferError_Callback+0x4>

0800bf62 <USART2_TransferError_Callback>:
}


static void USART2_TransferError_Callback()
{
 800bf62:	b480      	push	{r7}
 800bf64:	af00      	add	r7, sp, #0
while(1);
 800bf66:	e7fe      	b.n	800bf66 <USART2_TransferError_Callback+0x4>

0800bf68 <xTaskAdditionsGetPermissions>:


#if configUSE_DMA_CONTAINER == 1
 PeripheralPermission_t * xTaskAdditionsGetPermissions(void);
 PeripheralPermission_t * xTaskAdditionsGetPermissions(void)
 {
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
     if (pxCurrentTCB )
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <xTaskAdditionsGetPermissions+0x20>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <xTaskAdditionsGetPermissions+0x16>
     {
    	 return pxCurrentTCB->pxPeripheralPermissions;
 800bf74:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <xTaskAdditionsGetPermissions+0x20>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7c:	e000      	b.n	800bf80 <xTaskAdditionsGetPermissions+0x18>
     }
     else
     {
    	 return NULL;
 800bf7e:	2300      	movs	r3, #0
     }

 }
 800bf80:	4618      	mov	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	20000250 	.word	0x20000250

0800bf8c <xTaskAdditionsGetMemoryRegion>:

 xMPU_REGION_REGISTERS * xTaskAdditionsGetMemoryRegion(BaseType_t xRegionNumber);
 xMPU_REGION_REGISTERS * xTaskAdditionsGetMemoryRegion(BaseType_t xRegionNumber)
 {
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
     if (pxCurrentTCB)
 800bf94:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <xTaskAdditionsGetMemoryRegion+0x34>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00b      	beq.n	800bfb4 <xTaskAdditionsGetMemoryRegion+0x28>
     {
    	 if(pxCurrentTCB->xMPUSettings.xRegion)
 800bf9c:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <xTaskAdditionsGetMemoryRegion+0x34>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <xTaskAdditionsGetMemoryRegion+0x28>
    	 {
    		 return ( xMPU_REGION_REGISTERS *) &(pxCurrentTCB->xMPUSettings.xRegion[xRegionNumber]);
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <xTaskAdditionsGetMemoryRegion+0x34>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	e000      	b.n	800bfb6 <xTaskAdditionsGetMemoryRegion+0x2a>
    	 }

     }

     return NULL;
 800bfb4:	2300      	movs	r3, #0

 }
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bc80      	pop	{r7}
 800bfbe:	4770      	bx	lr
 800bfc0:	20000250 	.word	0x20000250

0800bfc4 <vPortResetPrivilege>:
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
BaseType_t uxRunPri = xRunningPrivileged;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	60fb      	str	r3, [r7, #12]
	if( uxRunPri == pdFALSE )
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <vPortResetPrivilege+0x16>
        portRESET_PRIVILEGE();
 800bfd6:	f000 f8c5 	bl	800c164 <vResetPrivilege>
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <MPU_xContainerSendRequest>:
/* *INDENT-ON* */

   #if (configUSE_DMA_CONTAINER == 1 )
    BaseType_t MPU_xContainerSendRequest(Peripheral_Request_t xRequest);
    BaseType_t MPU_xContainerSendRequest(Peripheral_Request_t xRequest)
    {
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	b590      	push	{r4, r7, lr}
 800bfe6:	b089      	sub	sp, #36	; 0x24
 800bfe8:	af06      	add	r7, sp, #24
 800bfea:	f107 0418 	add.w	r4, r7, #24
 800bfee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	BaseType_t xReturn;
    	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800bff2:	f7fc ff80 	bl	8008ef6 <xPortRaisePrivilege>
 800bff6:	6078      	str	r0, [r7, #4]

    	xReturn =  xContainerSendRequest(xRequest, xRunningPrivileged);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	466c      	mov	r4, sp
 800bffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c008:	f107 0318 	add.w	r3, r7, #24
 800c00c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c00e:	f7f4 f8ad 	bl	800016c <xContainerSendRequest>
 800c012:	6038      	str	r0, [r7, #0]

    	vPortResetPrivilege( xRunningPrivileged);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff ffd5 	bl	800bfc4 <vPortResetPrivilege>
    	return xReturn;
 800c01a:	683b      	ldr	r3, [r7, #0]
    }
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800c026:	b004      	add	sp, #16
 800c028:	4770      	bx	lr
 800c02a:	adde      	add	r5, sp, #888	; 0x378

0800c02c <MPU_xContainerSetDWTcounter>:

    #endif
    void MPU_xContainerSetDWTcounter(uint32_t val);
    void MPU_xContainerSetDWTcounter(uint32_t val)
    {
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
        	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800c034:	f7fc ff5f 	bl	8008ef6 <xPortRaisePrivilege>
 800c038:	60f8      	str	r0, [r7, #12]
            DWT->CYCCNT = val;
 800c03a:	4a05      	ldr	r2, [pc, #20]	; (800c050 <MPU_xContainerSetDWTcounter+0x24>)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6053      	str	r3, [r2, #4]
        	vPortResetPrivilege( xRunningPrivileged);
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff ffbf 	bl	800bfc4 <vPortResetPrivilege>
    }
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	e0001000 	.word	0xe0001000

0800c054 <MPU_xContainerGetDWTcounter>:

    uint32_t MPU_xContainerGetDWTcounter();
    uint32_t MPU_xContainerGetDWTcounter()
    {
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
    	    uint32_t xReturn;
    	    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800c05a:	f7fc ff4c 	bl	8008ef6 <xPortRaisePrivilege>
 800c05e:	6078      	str	r0, [r7, #4]

           	xReturn = DWT->CYCCNT;
 800c060:	4b05      	ldr	r3, [pc, #20]	; (800c078 <MPU_xContainerGetDWTcounter+0x24>)
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	603b      	str	r3, [r7, #0]

           	vPortResetPrivilege( xRunningPrivileged);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff ffac 	bl	800bfc4 <vPortResetPrivilege>
           	return xReturn;
 800c06c:	683b      	ldr	r3, [r7, #0]

    }
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	e0001000 	.word	0xe0001000

0800c07c <vPortEnterCritical>:
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800c082:	f7fc ff38 	bl	8008ef6 <xPortRaisePrivilege>
 800c086:	6078      	str	r0, [r7, #4]
        __asm volatile
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	603b      	str	r3, [r7, #0]
    }
 800c09a:	bf00      	nop
    uxCriticalNesting++;
 800c09c:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <vPortEnterCritical+0x38>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	4a04      	ldr	r2, [pc, #16]	; (800c0b4 <vPortEnterCritical+0x38>)
 800c0a4:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff8c 	bl	800bfc4 <vPortResetPrivilege>
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20008004 	.word	0x20008004

0800c0b8 <vPortExitCritical>:
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800c0be:	f7fc ff1a 	bl	8008ef6 <xPortRaisePrivilege>
 800c0c2:	60f8      	str	r0, [r7, #12]
    configASSERT( uxCriticalNesting );
 800c0c4:	4b12      	ldr	r3, [pc, #72]	; (800c110 <vPortExitCritical+0x58>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <vPortExitCritical+0x2a>
        __asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60bb      	str	r3, [r7, #8]
    }
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <vPortExitCritical+0x28>
    uxCriticalNesting--;
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <vPortExitCritical+0x58>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	4a09      	ldr	r2, [pc, #36]	; (800c110 <vPortExitCritical+0x58>)
 800c0ea:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800c0ec:	4b08      	ldr	r3, [pc, #32]	; (800c110 <vPortExitCritical+0x58>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <vPortExitCritical+0x48>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	607b      	str	r3, [r7, #4]
        __asm volatile
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f383 8811 	msr	BASEPRI, r3
    }
 800c0fe:	bf00      	nop
    vPortResetPrivilege( xRunningPrivileged );
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff ff5f 	bl	800bfc4 <vPortResetPrivilege>
}
 800c106:	bf00      	nop
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20008004 	.word	0x20008004

0800c114 <vPortSetupTimerInterrupt>:
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c118:	4b08      	ldr	r3, [pc, #32]	; (800c13c <vPortSetupTimerInterrupt+0x28>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <vPortSetupTimerInterrupt+0x2c>)
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <vPortSetupTimerInterrupt+0x30>)
 800c126:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800c12a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 800c12c:	4b03      	ldr	r3, [pc, #12]	; (800c13c <vPortSetupTimerInterrupt+0x28>)
 800c12e:	2207      	movs	r2, #7
 800c130:	601a      	str	r2, [r3, #0]
}
 800c132:	bf00      	nop
 800c134:	46bd      	mov	sp, r7
 800c136:	bc80      	pop	{r7}
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	e000e010 	.word	0xe000e010
 800c140:	e000e018 	.word	0xe000e018
 800c144:	e000e014 	.word	0xe000e014
 800c148:	addeadde 	.word	0xaddeadde
 800c14c:	addeadde 	.word	0xaddeadde

0800c150 <xIsPrivileged>:
    __asm volatile
 800c150:	f3ef 8014 	mrs	r0, CONTROL
 800c154:	f010 0f01 	tst.w	r0, #1
 800c158:	bf14      	ite	ne
 800c15a:	2000      	movne	r0, #0
 800c15c:	2001      	moveq	r0, #1
 800c15e:	4770      	bx	lr
}
 800c160:	bf00      	nop
 800c162:	4618      	mov	r0, r3

0800c164 <vResetPrivilege>:
		__asm volatile
 800c164:	f3ef 8014 	mrs	r0, CONTROL
 800c168:	f040 0001 	orr.w	r0, r0, #1
 800c16c:	f380 8814 	msr	CONTROL, r0
 800c170:	4770      	bx	lr
}
 800c172:	bf00      	nop

0800c174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800c17a:	f3ef 8305 	mrs	r3, IPSR
 800c17e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b0f      	cmp	r3, #15
 800c184:	d914      	bls.n	800c1b0 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c186:	4a16      	ldr	r2, [pc, #88]	; (800c1e0 <vPortValidateInterruptPriority+0x6c>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c190:	4b14      	ldr	r3, [pc, #80]	; (800c1e4 <vPortValidateInterruptPriority+0x70>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	7afa      	ldrb	r2, [r7, #11]
 800c196:	429a      	cmp	r2, r3
 800c198:	d20a      	bcs.n	800c1b0 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	607b      	str	r3, [r7, #4]
    }
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	; (800c1e8 <vPortValidateInterruptPriority+0x74>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <vPortValidateInterruptPriority+0x78>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d90a      	bls.n	800c1d6 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	603b      	str	r3, [r7, #0]
    }
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <vPortValidateInterruptPriority+0x60>
    }
 800c1d6:	bf00      	nop
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc80      	pop	{r7}
 800c1de:	4770      	bx	lr
 800c1e0:	e000e3f0 	.word	0xe000e3f0
 800c1e4:	20009c08 	.word	0x20009c08
 800c1e8:	e000ed0c 	.word	0xe000ed0c
 800c1ec:	20009c0c 	.word	0x20009c0c

0800c1f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c1f4:	4b04      	ldr	r3, [pc, #16]	; (800c208 <__NVIC_GetPriorityGrouping+0x18>)
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	0a1b      	lsrs	r3, r3, #8
 800c1fa:	f003 0307 	and.w	r3, r3, #7
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	46bd      	mov	sp, r7
 800c202:	bc80      	pop	{r7}
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	e000ed00 	.word	0xe000ed00

0800c20c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	db0b      	blt.n	800c236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	f003 021f 	and.w	r2, r3, #31
 800c224:	4906      	ldr	r1, [pc, #24]	; (800c240 <__NVIC_EnableIRQ+0x34>)
 800c226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c22a:	095b      	lsrs	r3, r3, #5
 800c22c:	2001      	movs	r0, #1
 800c22e:	fa00 f202 	lsl.w	r2, r0, r2
 800c232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr
 800c240:	e000e100 	.word	0xe000e100

0800c244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	6039      	str	r1, [r7, #0]
 800c24e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c254:	2b00      	cmp	r3, #0
 800c256:	db0a      	blt.n	800c26e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	490c      	ldr	r1, [pc, #48]	; (800c290 <__NVIC_SetPriority+0x4c>)
 800c25e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c262:	0112      	lsls	r2, r2, #4
 800c264:	b2d2      	uxtb	r2, r2
 800c266:	440b      	add	r3, r1
 800c268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c26c:	e00a      	b.n	800c284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	b2da      	uxtb	r2, r3
 800c272:	4908      	ldr	r1, [pc, #32]	; (800c294 <__NVIC_SetPriority+0x50>)
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	f003 030f 	and.w	r3, r3, #15
 800c27a:	3b04      	subs	r3, #4
 800c27c:	0112      	lsls	r2, r2, #4
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	440b      	add	r3, r1
 800c282:	761a      	strb	r2, [r3, #24]
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	bc80      	pop	{r7}
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	e000e100 	.word	0xe000e100
 800c294:	e000ed00 	.word	0xe000ed00

0800c298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c298:	b480      	push	{r7}
 800c29a:	b089      	sub	sp, #36	; 0x24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f1c3 0307 	rsb	r3, r3, #7
 800c2b2:	2b04      	cmp	r3, #4
 800c2b4:	bf28      	it	cs
 800c2b6:	2304      	movcs	r3, #4
 800c2b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	2b06      	cmp	r3, #6
 800c2c0:	d902      	bls.n	800c2c8 <NVIC_EncodePriority+0x30>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	3b03      	subs	r3, #3
 800c2c6:	e000      	b.n	800c2ca <NVIC_EncodePriority+0x32>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d6:	43da      	mvns	r2, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	401a      	ands	r2, r3
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c2e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ea:	43d9      	mvns	r1, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2f0:	4313      	orrs	r3, r2
         );
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3724      	adds	r7, #36	; 0x24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bc80      	pop	{r7}
 800c2fa:	4770      	bx	lr

0800c2fc <LL_DMA_SetDataTransferDirection>:
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a0c      	ldr	r2, [pc, #48]	; (800c340 <LL_DMA_SetDataTransferDirection+0x44>)
 800c30e:	5cd3      	ldrb	r3, [r2, r3]
 800c310:	461a      	mov	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	4413      	add	r3, r2
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c31c:	f023 0310 	bic.w	r3, r3, #16
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	3a01      	subs	r2, #1
 800c324:	4906      	ldr	r1, [pc, #24]	; (800c340 <LL_DMA_SetDataTransferDirection+0x44>)
 800c326:	5c8a      	ldrb	r2, [r1, r2]
 800c328:	4611      	mov	r1, r2
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	440a      	add	r2, r1
 800c32e:	4611      	mov	r1, r2
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4313      	orrs	r3, r2
 800c334:	600b      	str	r3, [r1, #0]
}
 800c336:	bf00      	nop
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bc80      	pop	{r7}
 800c33e:	4770      	bx	lr
 800c340:	0801062c 	.word	0x0801062c

0800c344 <LL_DMA_SetMode>:
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3b01      	subs	r3, #1
 800c354:	4a0b      	ldr	r2, [pc, #44]	; (800c384 <LL_DMA_SetMode+0x40>)
 800c356:	5cd3      	ldrb	r3, [r2, r3]
 800c358:	461a      	mov	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	4413      	add	r3, r2
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f023 0220 	bic.w	r2, r3, #32
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	3b01      	subs	r3, #1
 800c368:	4906      	ldr	r1, [pc, #24]	; (800c384 <LL_DMA_SetMode+0x40>)
 800c36a:	5ccb      	ldrb	r3, [r1, r3]
 800c36c:	4619      	mov	r1, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	440b      	add	r3, r1
 800c372:	4619      	mov	r1, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4313      	orrs	r3, r2
 800c378:	600b      	str	r3, [r1, #0]
}
 800c37a:	bf00      	nop
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	bc80      	pop	{r7}
 800c382:	4770      	bx	lr
 800c384:	0801062c 	.word	0x0801062c

0800c388 <LL_DMA_SetPeriphIncMode>:
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3b01      	subs	r3, #1
 800c398:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <LL_DMA_SetPeriphIncMode+0x40>)
 800c39a:	5cd3      	ldrb	r3, [r2, r3]
 800c39c:	461a      	mov	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	4906      	ldr	r1, [pc, #24]	; (800c3c8 <LL_DMA_SetPeriphIncMode+0x40>)
 800c3ae:	5ccb      	ldrb	r3, [r1, r3]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	440b      	add	r3, r1
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	600b      	str	r3, [r1, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr
 800c3c8:	0801062c 	.word	0x0801062c

0800c3cc <LL_DMA_SetMemoryIncMode>:
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <LL_DMA_SetMemoryIncMode+0x40>)
 800c3de:	5cd3      	ldrb	r3, [r2, r3]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	4906      	ldr	r1, [pc, #24]	; (800c40c <LL_DMA_SetMemoryIncMode+0x40>)
 800c3f2:	5ccb      	ldrb	r3, [r1, r3]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	440b      	add	r3, r1
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	600b      	str	r3, [r1, #0]
}
 800c402:	bf00      	nop
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bc80      	pop	{r7}
 800c40a:	4770      	bx	lr
 800c40c:	0801062c 	.word	0x0801062c

0800c410 <LL_DMA_SetPeriphSize>:
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	3b01      	subs	r3, #1
 800c420:	4a0b      	ldr	r2, [pc, #44]	; (800c450 <LL_DMA_SetPeriphSize+0x40>)
 800c422:	5cd3      	ldrb	r3, [r2, r3]
 800c424:	461a      	mov	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	4413      	add	r3, r2
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	3b01      	subs	r3, #1
 800c434:	4906      	ldr	r1, [pc, #24]	; (800c450 <LL_DMA_SetPeriphSize+0x40>)
 800c436:	5ccb      	ldrb	r3, [r1, r3]
 800c438:	4619      	mov	r1, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	440b      	add	r3, r1
 800c43e:	4619      	mov	r1, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4313      	orrs	r3, r2
 800c444:	600b      	str	r3, [r1, #0]
}
 800c446:	bf00      	nop
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr
 800c450:	0801062c 	.word	0x0801062c

0800c454 <LL_DMA_SetMemorySize>:
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	3b01      	subs	r3, #1
 800c464:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <LL_DMA_SetMemorySize+0x40>)
 800c466:	5cd3      	ldrb	r3, [r2, r3]
 800c468:	461a      	mov	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3b01      	subs	r3, #1
 800c478:	4906      	ldr	r1, [pc, #24]	; (800c494 <LL_DMA_SetMemorySize+0x40>)
 800c47a:	5ccb      	ldrb	r3, [r1, r3]
 800c47c:	4619      	mov	r1, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	440b      	add	r3, r1
 800c482:	4619      	mov	r1, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4313      	orrs	r3, r2
 800c488:	600b      	str	r3, [r1, #0]
}
 800c48a:	bf00      	nop
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	bc80      	pop	{r7}
 800c492:	4770      	bx	lr
 800c494:	0801062c 	.word	0x0801062c

0800c498 <LL_DMA_SetChannelPriorityLevel>:
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a0b      	ldr	r2, [pc, #44]	; (800c4d8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4aa:	5cd3      	ldrb	r3, [r2, r3]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	4906      	ldr	r1, [pc, #24]	; (800c4d8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4be:	5ccb      	ldrb	r3, [r1, r3]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	440b      	add	r3, r1
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	600b      	str	r3, [r1, #0]
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bc80      	pop	{r7}
 800c4d6:	4770      	bx	lr
 800c4d8:	0801062c 	.word	0x0801062c

0800c4dc <LL_DMA_SetPeriphAddress>:
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4a06      	ldr	r2, [pc, #24]	; (800c508 <LL_DMA_SetPeriphAddress+0x2c>)
 800c4ee:	5cd3      	ldrb	r3, [r2, r3]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6093      	str	r3, [r2, #8]
}
 800c4fc:	bf00      	nop
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	bc80      	pop	{r7}
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	0801062c 	.word	0x0801062c

0800c50c <LL_DMA_EnableIT_TC>:
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	3b01      	subs	r3, #1
 800c51a:	4a0a      	ldr	r2, [pc, #40]	; (800c544 <LL_DMA_EnableIT_TC+0x38>)
 800c51c:	5cd3      	ldrb	r3, [r2, r3]
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	3a01      	subs	r2, #1
 800c52a:	4906      	ldr	r1, [pc, #24]	; (800c544 <LL_DMA_EnableIT_TC+0x38>)
 800c52c:	5c8a      	ldrb	r2, [r1, r2]
 800c52e:	4611      	mov	r1, r2
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	440a      	add	r2, r1
 800c534:	f043 0302 	orr.w	r3, r3, #2
 800c538:	6013      	str	r3, [r2, #0]
}
 800c53a:	bf00      	nop
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	bc80      	pop	{r7}
 800c542:	4770      	bx	lr
 800c544:	0801062c 	.word	0x0801062c

0800c548 <LL_DMA_EnableIT_TE>:
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	3b01      	subs	r3, #1
 800c556:	4a0a      	ldr	r2, [pc, #40]	; (800c580 <LL_DMA_EnableIT_TE+0x38>)
 800c558:	5cd3      	ldrb	r3, [r2, r3]
 800c55a:	461a      	mov	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4413      	add	r3, r2
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	3a01      	subs	r2, #1
 800c566:	4906      	ldr	r1, [pc, #24]	; (800c580 <LL_DMA_EnableIT_TE+0x38>)
 800c568:	5c8a      	ldrb	r2, [r1, r2]
 800c56a:	4611      	mov	r1, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	440a      	add	r2, r1
 800c570:	f043 0308 	orr.w	r3, r3, #8
 800c574:	6013      	str	r3, [r2, #0]
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr
 800c580:	0801062c 	.word	0x0801062c

0800c584 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800c58c:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c58e:	69da      	ldr	r2, [r3, #28]
 800c590:	4907      	ldr	r1, [pc, #28]	; (800c5b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4313      	orrs	r3, r2
 800c596:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c59a:	69da      	ldr	r2, [r3, #28]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
}
 800c5a4:	bf00      	nop
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bc80      	pop	{r7}
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40023800 	.word	0x40023800

0800c5b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c5bc:	4b08      	ldr	r3, [pc, #32]	; (800c5e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5c0:	4907      	ldr	r1, [pc, #28]	; (800c5e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	624b      	str	r3, [r1, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4013      	ands	r3, r2
 800c5d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
}
 800c5d4:	bf00      	nop
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	40023800 	.word	0x40023800

0800c5e4 <LL_USART_Enable>:
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	60da      	str	r2, [r3, #12]
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr

0800c602 <LL_USART_SetTransferDirection>:
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f023 020c 	bic.w	r2, r3, #12
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60da      	str	r2, [r3, #12]
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	bc80      	pop	{r7}
 800c624:	4770      	bx	lr

0800c626 <LL_USART_ConfigCharacter>:
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
 800c632:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f423 52b0 	bic.w	r2, r3, #5632	; 0x1600
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	430b      	orrs	r3, r1
 800c642:	431a      	orrs	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	431a      	orrs	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	611a      	str	r2, [r3, #16]
}
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	adde      	add	r5, sp, #888	; 0x378

0800c664 <LL_USART_SetBaudRate>:
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c678:	d152      	bne.n	800c720 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009a      	lsls	r2, r3, #2
 800c684:	441a      	add	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c68e:	4a4f      	ldr	r2, [pc, #316]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c690:	fba2 2303 	umull	r2, r3, r2, r3
 800c694:	095b      	lsrs	r3, r3, #5
 800c696:	b29b      	uxth	r3, r3
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	b299      	uxth	r1, r3
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	009a      	lsls	r2, r3, #2
 800c6a6:	441a      	add	r2, r3
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6b0:	4b46      	ldr	r3, [pc, #280]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c6b2:	fba3 0302 	umull	r0, r3, r3, r2
 800c6b6:	095b      	lsrs	r3, r3, #5
 800c6b8:	2064      	movs	r0, #100	; 0x64
 800c6ba:	fb00 f303 	mul.w	r3, r0, r3
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	3332      	adds	r3, #50	; 0x32
 800c6c4:	4a41      	ldr	r2, [pc, #260]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ca:	095b      	lsrs	r3, r3, #5
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	440b      	add	r3, r1
 800c6da:	b299      	uxth	r1, r3
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009a      	lsls	r2, r3, #2
 800c6e6:	441a      	add	r2, r3
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6f0:	4b36      	ldr	r3, [pc, #216]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c6f2:	fba3 0302 	umull	r0, r3, r3, r2
 800c6f6:	095b      	lsrs	r3, r3, #5
 800c6f8:	2064      	movs	r0, #100	; 0x64
 800c6fa:	fb00 f303 	mul.w	r3, r0, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	00db      	lsls	r3, r3, #3
 800c702:	3332      	adds	r3, #50	; 0x32
 800c704:	4a31      	ldr	r2, [pc, #196]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c706:	fba2 2303 	umull	r2, r3, r2, r3
 800c70a:	095b      	lsrs	r3, r3, #5
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	b29b      	uxth	r3, r3
 800c714:	440b      	add	r3, r1
 800c716:	b29b      	uxth	r3, r3
 800c718:	461a      	mov	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	609a      	str	r2, [r3, #8]
}
 800c71e:	e04f      	b.n	800c7c0 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009a      	lsls	r2, r3, #2
 800c72a:	441a      	add	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	fbb2 f3f3 	udiv	r3, r2, r3
 800c734:	4a25      	ldr	r2, [pc, #148]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c736:	fba2 2303 	umull	r2, r3, r2, r3
 800c73a:	095b      	lsrs	r3, r3, #5
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	b299      	uxth	r1, r3
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009a      	lsls	r2, r3, #2
 800c74c:	441a      	add	r2, r3
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	fbb2 f2f3 	udiv	r2, r2, r3
 800c756:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c758:	fba3 0302 	umull	r0, r3, r3, r2
 800c75c:	095b      	lsrs	r3, r3, #5
 800c75e:	2064      	movs	r0, #100	; 0x64
 800c760:	fb00 f303 	mul.w	r3, r0, r3
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	011b      	lsls	r3, r3, #4
 800c768:	3332      	adds	r3, #50	; 0x32
 800c76a:	4a18      	ldr	r2, [pc, #96]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c76c:	fba2 2303 	umull	r2, r3, r2, r3
 800c770:	095b      	lsrs	r3, r3, #5
 800c772:	b29b      	uxth	r3, r3
 800c774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c778:	b29b      	uxth	r3, r3
 800c77a:	440b      	add	r3, r1
 800c77c:	b299      	uxth	r1, r3
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	4613      	mov	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	009a      	lsls	r2, r3, #2
 800c788:	441a      	add	r2, r3
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c792:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c794:	fba3 0302 	umull	r0, r3, r3, r2
 800c798:	095b      	lsrs	r3, r3, #5
 800c79a:	2064      	movs	r0, #100	; 0x64
 800c79c:	fb00 f303 	mul.w	r3, r0, r3
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	3332      	adds	r3, #50	; 0x32
 800c7a6:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <LL_USART_SetBaudRate+0x168>)
 800c7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ac:	095b      	lsrs	r3, r3, #5
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	440b      	add	r3, r1
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	609a      	str	r2, [r3, #8]
}
 800c7c0:	bf00      	nop
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bc80      	pop	{r7}
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	51eb851f 	.word	0x51eb851f

0800c7d0 <LL_USART_ConfigAsyncMode>:
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	695b      	ldr	r3, [r3, #20]
 800c7e8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	615a      	str	r2, [r3, #20]
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bc80      	pop	{r7}
 800c7f8:	4770      	bx	lr

0800c7fa <LL_USART_DisableIT_IDLE>:
{
 800c7fa:	b480      	push	{r7}
 800c7fc:	b083      	sub	sp, #12
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	f023 0210 	bic.w	r2, r3, #16
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60da      	str	r2, [r3, #12]
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	bc80      	pop	{r7}
 800c816:	4770      	bx	lr

0800c818 <LL_USART_DisableIT_TC>:
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	60da      	str	r2, [r3, #12]
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	bc80      	pop	{r7}
 800c834:	4770      	bx	lr

0800c836 <LL_USART_DisableIT_TXE>:
{
 800c836:	b480      	push	{r7}
 800c838:	b083      	sub	sp, #12
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	60da      	str	r2, [r3, #12]
}
 800c84a:	bf00      	nop
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	bc80      	pop	{r7}
 800c852:	4770      	bx	lr

0800c854 <LL_USART_DisableIT_ERROR>:
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	f023 0201 	bic.w	r2, r3, #1
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	615a      	str	r2, [r3, #20]
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bc80      	pop	{r7}
 800c870:	4770      	bx	lr

0800c872 <LL_GPIO_SetAFPin_0_7>:
{
 800c872:	b480      	push	{r7}
 800c874:	b089      	sub	sp, #36	; 0x24
 800c876:	af00      	add	r7, sp, #0
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6a1a      	ldr	r2, [r3, #32]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	fa93 f3a3 	rbit	r3, r3
 800c88c:	613b      	str	r3, [r7, #16]
  return result;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	fab3 f383 	clz	r3, r3
 800c894:	b2db      	uxtb	r3, r3
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	210f      	movs	r1, #15
 800c89a:	fa01 f303 	lsl.w	r3, r1, r3
 800c89e:	43db      	mvns	r3, r3
 800c8a0:	401a      	ands	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	fa93 f3a3 	rbit	r3, r3
 800c8ac:	61bb      	str	r3, [r7, #24]
  return result;
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	fab3 f383 	clz	r3, r3
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	621a      	str	r2, [r3, #32]
}
 800c8c4:	bf00      	nop
 800c8c6:	3724      	adds	r7, #36	; 0x24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bc80      	pop	{r7}
 800c8cc:	4770      	bx	lr

0800c8ce <LL_GPIO_SetAFPin_8_15>:
{
 800c8ce:	b480      	push	{r7}
 800c8d0:	b089      	sub	sp, #36	; 0x24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	0a1b      	lsrs	r3, r3, #8
 800c8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	fa93 f3a3 	rbit	r3, r3
 800c8ea:	613b      	str	r3, [r7, #16]
  return result;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	fab3 f383 	clz	r3, r3
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	210f      	movs	r1, #15
 800c8f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fc:	43db      	mvns	r3, r3
 800c8fe:	401a      	ands	r2, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	fa93 f3a3 	rbit	r3, r3
 800c90c:	61bb      	str	r3, [r7, #24]
  return result;
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	fab3 f383 	clz	r3, r3
 800c914:	b2db      	uxtb	r3, r3
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	6879      	ldr	r1, [r7, #4]
 800c91a:	fa01 f303 	lsl.w	r3, r1, r3
 800c91e:	431a      	orrs	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c924:	bf00      	nop
 800c926:	3724      	adds	r7, #36	; 0x24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bc80      	pop	{r7}
 800c92c:	4770      	bx	lr
 800c92e:	adde      	add	r5, sp, #888	; 0x378

0800c930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c934:	f000 faec 	bl	800cf10 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT->CYCCNT = 0;
 800c938:	4b09      	ldr	r3, [pc, #36]	; (800c960 <main+0x30>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c93e:	4b08      	ldr	r3, [pc, #32]	; (800c960 <main+0x30>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a07      	ldr	r2, [pc, #28]	; (800c960 <main+0x30>)
 800c944:	f043 0301 	orr.w	r3, r3, #1
 800c948:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c94a:	f000 f80b 	bl	800c964 <SystemClock_Config>
  vTraceEnable(TRC_START);
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c94e:	f000 f9a5 	bl	800cc9c <MX_GPIO_Init>

#if (USARTBENCHMARK == 1 || USARTBENCHMARK == 2)
   MX_USART2_UART_Init_ll();
 800c952:	f000 f855 	bl	800ca00 <MX_USART2_UART_Init_ll>
  MX_ADC1_Init_ll();
#endif


#if ( USARTBENCHMARK  ||   SPIBENCHMARK  || I2CBENCHMARK  ||  ADCBENCHMARK )
  MX_UART4_UART_Init_ll();
 800c956:	f000 f937 	bl	800cbc8 <MX_UART4_UART_Init_ll>
#endif


  /* Call our entry point. */
  app_main();
 800c95a:	f7fd f993 	bl	8009c84 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c95e:	e7fe      	b.n	800c95e <main+0x2e>
 800c960:	e0001000 	.word	0xe0001000

0800c964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b092      	sub	sp, #72	; 0x48
 800c968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c96a:	f107 0314 	add.w	r3, r7, #20
 800c96e:	2234      	movs	r2, #52	; 0x34
 800c970:	2100      	movs	r1, #0
 800c972:	4618      	mov	r0, r3
 800c974:	f003 fd7e 	bl	8010474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c978:	463b      	mov	r3, r7
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	605a      	str	r2, [r3, #4]
 800c980:	609a      	str	r2, [r3, #8]
 800c982:	60da      	str	r2, [r3, #12]
 800c984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c986:	4b1d      	ldr	r3, [pc, #116]	; (800c9fc <SystemClock_Config+0x98>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800c98e:	4a1b      	ldr	r2, [pc, #108]	; (800c9fc <SystemClock_Config+0x98>)
 800c990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c994:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c996:	2302      	movs	r3, #2
 800c998:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c99a:	2301      	movs	r3, #1
 800c99c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c99e:	2310      	movs	r3, #16
 800c9a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800c9aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800c9b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c9b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c9b6:	f107 0314 	add.w	r3, r7, #20
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fd6a 	bl	800d494 <HAL_RCC_OscConfig>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 800c9c6:	f000 f9f7 	bl	800cdb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c9ca:	230f      	movs	r3, #15
 800c9cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c9de:	463b      	mov	r3, r7
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f001 f886 	bl	800daf4 <HAL_RCC_ClockConfig>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800c9ee:	f000 f9e3 	bl	800cdb8 <Error_Handler>
  }
}
 800c9f2:	bf00      	nop
 800c9f4:	3748      	adds	r7, #72	; 0x48
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	40007000 	.word	0x40007000

0800ca00 <MX_USART2_UART_Init_ll>:
  * @param None
  * @retval None
  **/
#if USARTBENCHMARK >0
static void MX_USART2_UART_Init_ll(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08e      	sub	sp, #56	; 0x38
 800ca04:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct;
	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800ca06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ca0a:	f7ff fdd3 	bl	800c5b4 <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800ca0e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ca12:	f7ff fdb7 	bl	800c584 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ca16:	2001      	movs	r0, #1
 800ca18:	f7ff fdb4 	bl	800c584 <LL_AHB1_GRP1_EnableClock>
     * USART2 GPIO Configuration
     *
     * PA2   ------> USART2_TX
     * PA3   ------> USART2_RX
     */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ca20:	2302      	movs	r3, #2
 800ca22:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800ca24:	2302      	movs	r3, #2
 800ca26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca2c:	1d3b      	adds	r3, r7, #4
 800ca2e:	4619      	mov	r1, r3
 800ca30:	4861      	ldr	r0, [pc, #388]	; (800cbb8 <MX_USART2_UART_Init_ll+0x1b8>)
 800ca32:	f001 fd64 	bl	800e4fe <LL_GPIO_Init>
    LL_GPIO_SetAFPin_0_7(GPIOA, USART_TX_Pin, LL_GPIO_AF_7); //set AF to USART2_TX
 800ca36:	2207      	movs	r2, #7
 800ca38:	2104      	movs	r1, #4
 800ca3a:	485f      	ldr	r0, [pc, #380]	; (800cbb8 <MX_USART2_UART_Init_ll+0x1b8>)
 800ca3c:	f7ff ff19 	bl	800c872 <LL_GPIO_SetAFPin_0_7>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 800ca40:	2308      	movs	r3, #8
 800ca42:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ca44:	2302      	movs	r3, #2
 800ca46:	60bb      	str	r3, [r7, #8]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca48:	1d3b      	adds	r3, r7, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	485a      	ldr	r0, [pc, #360]	; (800cbb8 <MX_USART2_UART_Init_ll+0x1b8>)
 800ca4e:	f001 fd56 	bl	800e4fe <LL_GPIO_Init>
    LL_GPIO_SetAFPin_0_7(GPIOA, USART_RX_Pin, LL_GPIO_AF_7); //set AF to USART2_RX
 800ca52:	2207      	movs	r2, #7
 800ca54:	2108      	movs	r1, #8
 800ca56:	4858      	ldr	r0, [pc, #352]	; (800cbb8 <MX_USART2_UART_Init_ll+0x1b8>)
 800ca58:	f7ff ff0b 	bl	800c872 <LL_GPIO_SetAFPin_0_7>


    /* USART2 DMA Init */
    /* USART2_RX Init */
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2106      	movs	r1, #6
 800ca60:	4856      	ldr	r0, [pc, #344]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca62:	f7ff fc4b 	bl	800c2fc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800ca66:	2200      	movs	r2, #0
 800ca68:	2106      	movs	r1, #6
 800ca6a:	4854      	ldr	r0, [pc, #336]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca6c:	f7ff fd14 	bl	800c498 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800ca70:	2200      	movs	r2, #0
 800ca72:	2106      	movs	r1, #6
 800ca74:	4851      	ldr	r0, [pc, #324]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca76:	f7ff fc65 	bl	800c344 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	2106      	movs	r1, #6
 800ca7e:	484f      	ldr	r0, [pc, #316]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca80:	f7ff fc82 	bl	800c388 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800ca84:	2280      	movs	r2, #128	; 0x80
 800ca86:	2106      	movs	r1, #6
 800ca88:	484c      	ldr	r0, [pc, #304]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca8a:	f7ff fc9f 	bl	800c3cc <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2106      	movs	r1, #6
 800ca92:	484a      	ldr	r0, [pc, #296]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca94:	f7ff fcbc 	bl	800c410 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2106      	movs	r1, #6
 800ca9c:	4847      	ldr	r0, [pc, #284]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800ca9e:	f7ff fcd9 	bl	800c454 <LL_DMA_SetMemorySize>


    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)&USART2->DR);
 800caa2:	4a47      	ldr	r2, [pc, #284]	; (800cbc0 <MX_USART2_UART_Init_ll+0x1c0>)
 800caa4:	2106      	movs	r1, #6
 800caa6:	4845      	ldr	r0, [pc, #276]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800caa8:	f7ff fd18 	bl	800c4dc <LL_DMA_SetPeriphAddress>
    // This must be done in the driver per transfer
    // LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)ucSharedMemory);
    // LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, ARRAY_LEN(ucSharedMemory));

    /* Enable TC interrupts */
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800caac:	2106      	movs	r1, #6
 800caae:	4843      	ldr	r0, [pc, #268]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cab0:	f7ff fd2c 	bl	800c50c <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 800cab4:	2106      	movs	r1, #6
 800cab6:	4841      	ldr	r0, [pc, #260]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cab8:	f7ff fd46 	bl	800c548 <LL_DMA_EnableIT_TE>


    /* DMA1_Channel6_IRQn interrupt configuration */
    NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800cabc:	f7ff fb98 	bl	800c1f0 <__NVIC_GetPriorityGrouping>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2200      	movs	r2, #0
 800cac4:	2105      	movs	r1, #5
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fbe6 	bl	800c298 <NVIC_EncodePriority>
 800cacc:	4603      	mov	r3, r0
 800cace:	4619      	mov	r1, r3
 800cad0:	2010      	movs	r0, #16
 800cad2:	f7ff fbb7 	bl	800c244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800cad6:	2010      	movs	r0, #16
 800cad8:	f7ff fb98 	bl	800c20c <__NVIC_EnableIRQ>

    /* USART2_TX Init */
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800cadc:	2210      	movs	r2, #16
 800cade:	2107      	movs	r1, #7
 800cae0:	4836      	ldr	r0, [pc, #216]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cae2:	f7ff fc0b 	bl	800c2fc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 800cae6:	2200      	movs	r2, #0
 800cae8:	2107      	movs	r1, #7
 800caea:	4834      	ldr	r0, [pc, #208]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800caec:	f7ff fcd4 	bl	800c498 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800caf0:	2200      	movs	r2, #0
 800caf2:	2107      	movs	r1, #7
 800caf4:	4831      	ldr	r0, [pc, #196]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800caf6:	f7ff fc25 	bl	800c344 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800cafa:	2200      	movs	r2, #0
 800cafc:	2107      	movs	r1, #7
 800cafe:	482f      	ldr	r0, [pc, #188]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb00:	f7ff fc42 	bl	800c388 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800cb04:	2280      	movs	r2, #128	; 0x80
 800cb06:	2107      	movs	r1, #7
 800cb08:	482c      	ldr	r0, [pc, #176]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb0a:	f7ff fc5f 	bl	800c3cc <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800cb0e:	2200      	movs	r2, #0
 800cb10:	2107      	movs	r1, #7
 800cb12:	482a      	ldr	r0, [pc, #168]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb14:	f7ff fc7c 	bl	800c410 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2107      	movs	r1, #7
 800cb1c:	4827      	ldr	r0, [pc, #156]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb1e:	f7ff fc99 	bl	800c454 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)&USART2->DR);
 800cb22:	4a27      	ldr	r2, [pc, #156]	; (800cbc0 <MX_USART2_UART_Init_ll+0x1c0>)
 800cb24:	2107      	movs	r1, #7
 800cb26:	4825      	ldr	r0, [pc, #148]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb28:	f7ff fcd8 	bl	800c4dc <LL_DMA_SetPeriphAddress>
    // This must be done in the driver per transfer
    // LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)ucSharedMemory);
    // LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, ARRAY_LEN(ucSharedMemory));
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 800cb2c:	2107      	movs	r1, #7
 800cb2e:	4823      	ldr	r0, [pc, #140]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb30:	f7ff fcec 	bl	800c50c <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800cb34:	2107      	movs	r1, #7
 800cb36:	4821      	ldr	r0, [pc, #132]	; (800cbbc <MX_USART2_UART_Init_ll+0x1bc>)
 800cb38:	f7ff fd06 	bl	800c548 <LL_DMA_EnableIT_TE>
    /* DMA1_Channel7_IRQn interrupt configuration */
    NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800cb3c:	f7ff fb58 	bl	800c1f0 <__NVIC_GetPriorityGrouping>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2200      	movs	r2, #0
 800cb44:	2105      	movs	r1, #5
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fba6 	bl	800c298 <NVIC_EncodePriority>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	4619      	mov	r1, r3
 800cb50:	2011      	movs	r0, #17
 800cb52:	f7ff fb77 	bl	800c244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800cb56:	2011      	movs	r0, #17
 800cb58:	f7ff fb58 	bl	800c20c <__NVIC_EnableIRQ>


    /* USART configuration */
    USART_InitStruct.BaudRate = 115200;
 800cb5c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800cb60:	61fb      	str	r3, [r7, #28]
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800cb62:	2300      	movs	r3, #0
 800cb64:	623b      	str	r3, [r7, #32]
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800cb66:	2300      	movs	r3, #0
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
    USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	62bb      	str	r3, [r7, #40]	; 0x28
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800cb6e:	230c      	movs	r3, #12
 800cb70:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	633b      	str	r3, [r7, #48]	; 0x30
    LL_USART_Init(USART2, &USART_InitStruct);
 800cb76:	f107 031c 	add.w	r3, r7, #28
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4811      	ldr	r0, [pc, #68]	; (800cbc4 <MX_USART2_UART_Init_ll+0x1c4>)
 800cb7e:	f001 ff65 	bl	800ea4c <LL_USART_Init>
    LL_USART_ConfigAsyncMode(USART2);
 800cb82:	4810      	ldr	r0, [pc, #64]	; (800cbc4 <MX_USART2_UART_Init_ll+0x1c4>)
 800cb84:	f7ff fe24 	bl	800c7d0 <LL_USART_ConfigAsyncMode>

    /* USART interrupt */
    NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800cb88:	f7ff fb32 	bl	800c1f0 <__NVIC_GetPriorityGrouping>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2105      	movs	r1, #5
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fb80 	bl	800c298 <NVIC_EncodePriority>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	2026      	movs	r0, #38	; 0x26
 800cb9e:	f7ff fb51 	bl	800c244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 800cba2:	2026      	movs	r0, #38	; 0x26
 800cba4:	f7ff fb32 	bl	800c20c <__NVIC_EnableIRQ>
    /* Enable USART*/
    LL_USART_Enable(USART2);
 800cba8:	4806      	ldr	r0, [pc, #24]	; (800cbc4 <MX_USART2_UART_Init_ll+0x1c4>)
 800cbaa:	f7ff fd1b 	bl	800c5e4 <LL_USART_Enable>

}
 800cbae:	bf00      	nop
 800cbb0:	3738      	adds	r7, #56	; 0x38
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	40020000 	.word	0x40020000
 800cbbc:	40026000 	.word	0x40026000
 800cbc0:	40004404 	.word	0x40004404
 800cbc4:	40004400 	.word	0x40004400

0800cbc8 <MX_UART4_UART_Init_ll>:
#endif


static void MX_UART4_UART_Init_ll(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800cbce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cbd2:	f7ff fcef 	bl	800c5b4 <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800cbd6:	2004      	movs	r0, #4
 800cbd8:	f7ff fcd4 	bl	800c584 <LL_AHB1_GRP1_EnableClock>
     * USART2 GPIO Configuration
     *
     * PC10   ------> UART4_TX
     * PC11   ------> UART4_RX
     */
    GPIO_InitStruct.Pin = UART4_TX_Pin;
 800cbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbe0:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]

    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbee:	463b      	mov	r3, r7
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4827      	ldr	r0, [pc, #156]	; (800cc90 <MX_UART4_UART_Init_ll+0xc8>)
 800cbf4:	f001 fc83 	bl	800e4fe <LL_GPIO_Init>
    LL_GPIO_SetAFPin_8_15(GPIOC, UART4_TX_Pin, UART4_TX_AF); //set AF to UART4_TX
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cbfe:	4824      	ldr	r0, [pc, #144]	; (800cc90 <MX_UART4_UART_Init_ll+0xc8>)
 800cc00:	f7ff fe65 	bl	800c8ce <LL_GPIO_SetAFPin_8_15>

    GPIO_InitStruct.Pin = UART4_RX_Pin;
 800cc04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc08:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	607b      	str	r3, [r7, #4]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4619      	mov	r1, r3
 800cc12:	481f      	ldr	r0, [pc, #124]	; (800cc90 <MX_UART4_UART_Init_ll+0xc8>)
 800cc14:	f001 fc73 	bl	800e4fe <LL_GPIO_Init>
    LL_GPIO_SetAFPin_8_15(GPIOC, UART4_RX_Pin, UART4_RX_AF); //set AF to UART4_RX
 800cc18:	2208      	movs	r2, #8
 800cc1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cc1e:	481c      	ldr	r0, [pc, #112]	; (800cc90 <MX_UART4_UART_Init_ll+0xc8>)
 800cc20:	f7ff fe55 	bl	800c8ce <LL_GPIO_SetAFPin_8_15>
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
    LL_USART_Init(UART4, &USART_InitStruct);
    */

    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX_RX);
 800cc24:	210c      	movs	r1, #12
 800cc26:	481b      	ldr	r0, [pc, #108]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc28:	f7ff fceb 	bl	800c602 <LL_USART_SetTransferDirection>
    LL_USART_ConfigCharacter(UART4, LL_USART_DATAWIDTH_8B, LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2100      	movs	r1, #0
 800cc32:	4818      	ldr	r0, [pc, #96]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc34:	f7ff fcf7 	bl	800c626 <LL_USART_ConfigCharacter>
    LL_USART_SetBaudRate(UART4, SystemCoreClock, LL_USART_OVERSAMPLING_16, 115200);
 800cc38:	4b17      	ldr	r3, [pc, #92]	; (800cc98 <MX_UART4_UART_Init_ll+0xd0>)
 800cc3a:	6819      	ldr	r1, [r3, #0]
 800cc3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800cc40:	2200      	movs	r2, #0
 800cc42:	4814      	ldr	r0, [pc, #80]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc44:	f7ff fd0e 	bl	800c664 <LL_USART_SetBaudRate>
    //LL_USART_ConfigAsyncMode(UART4);
    NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800cc48:	f7ff fad2 	bl	800c1f0 <__NVIC_GetPriorityGrouping>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2105      	movs	r1, #5
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fb20 	bl	800c298 <NVIC_EncodePriority>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	2030      	movs	r0, #48	; 0x30
 800cc5e:	f7ff faf1 	bl	800c244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(UART4_IRQn);
 800cc62:	2030      	movs	r0, #48	; 0x30
 800cc64:	f7ff fad2 	bl	800c20c <__NVIC_EnableIRQ>
    LL_USART_DisableIT_IDLE(UART4);
 800cc68:	480a      	ldr	r0, [pc, #40]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc6a:	f7ff fdc6 	bl	800c7fa <LL_USART_DisableIT_IDLE>
    LL_USART_DisableIT_TXE(UART4);
 800cc6e:	4809      	ldr	r0, [pc, #36]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc70:	f7ff fde1 	bl	800c836 <LL_USART_DisableIT_TXE>
    LL_USART_DisableIT_TC(UART4);
 800cc74:	4807      	ldr	r0, [pc, #28]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc76:	f7ff fdcf 	bl	800c818 <LL_USART_DisableIT_TC>
    LL_USART_DisableIT_ERROR(UART4);
 800cc7a:	4806      	ldr	r0, [pc, #24]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc7c:	f7ff fdea 	bl	800c854 <LL_USART_DisableIT_ERROR>

    /* Enable USART*/
    LL_USART_Enable(UART4);
 800cc80:	4804      	ldr	r0, [pc, #16]	; (800cc94 <MX_UART4_UART_Init_ll+0xcc>)
 800cc82:	f7ff fcaf 	bl	800c5e4 <LL_USART_Enable>

}
 800cc86:	bf00      	nop
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	40020800 	.word	0x40020800
 800cc94:	40004c00 	.word	0x40004c00
 800cc98:	20008008 	.word	0x20008008

0800cc9c <MX_GPIO_Init>:
  * @brief Basic board GPIO Initialization Function
  * @param None
  * @retval None
  **/
static void MX_GPIO_Init(void)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b08a      	sub	sp, #40	; 0x28
 800cca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cca2:	f107 0314 	add.w	r3, r7, #20
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	605a      	str	r2, [r3, #4]
 800ccac:	609a      	str	r2, [r3, #8]
 800ccae:	60da      	str	r2, [r3, #12]
 800ccb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccb2:	4b34      	ldr	r3, [pc, #208]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	4a33      	ldr	r2, [pc, #204]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccb8:	f043 0304 	orr.w	r3, r3, #4
 800ccbc:	61d3      	str	r3, [r2, #28]
 800ccbe:	4b31      	ldr	r3, [pc, #196]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ccca:	4b2e      	ldr	r3, [pc, #184]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	4a2d      	ldr	r2, [pc, #180]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccd0:	f043 0320 	orr.w	r3, r3, #32
 800ccd4:	61d3      	str	r3, [r2, #28]
 800ccd6:	4b2b      	ldr	r3, [pc, #172]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cce2:	4b28      	ldr	r3, [pc, #160]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800cce4:	69db      	ldr	r3, [r3, #28]
 800cce6:	4a27      	ldr	r2, [pc, #156]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800cce8:	f043 0301 	orr.w	r3, r3, #1
 800ccec:	61d3      	str	r3, [r2, #28]
 800ccee:	4b25      	ldr	r3, [pc, #148]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	60bb      	str	r3, [r7, #8]
 800ccf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccfa:	4b22      	ldr	r3, [pc, #136]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800ccfc:	69db      	ldr	r3, [r3, #28]
 800ccfe:	4a21      	ldr	r2, [pc, #132]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800cd00:	f043 0302 	orr.w	r3, r3, #2
 800cd04:	61d3      	str	r3, [r2, #28]
 800cd06:	4b1f      	ldr	r3, [pc, #124]	; (800cd84 <MX_GPIO_Init+0xe8>)
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800cd12:	2200      	movs	r2, #0
 800cd14:	2120      	movs	r1, #32
 800cd16:	481c      	ldr	r0, [pc, #112]	; (800cd88 <MX_GPIO_Init+0xec>)
 800cd18:	f000 fba4 	bl	800d464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800cd1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd22:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <MX_GPIO_Init+0xf0>)
 800cd24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800cd2a:	f107 0314 	add.w	r3, r7, #20
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4817      	ldr	r0, [pc, #92]	; (800cd90 <MX_GPIO_Init+0xf4>)
 800cd32:	f000 fa07 	bl	800d144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800cd36:	2320      	movs	r3, #32
 800cd38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd42:	2300      	movs	r3, #0
 800cd44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800cd46:	f107 0314 	add.w	r3, r7, #20
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	480e      	ldr	r0, [pc, #56]	; (800cd88 <MX_GPIO_Init+0xec>)
 800cd4e:	f000 f9f9 	bl	800d144 <HAL_GPIO_Init>

  /*Configure GPIO CS: FRAM */
  HAL_GPIO_WritePin(CS_FRAM_Port, CS_FRAM_Pin, GPIO_PIN_SET); // we need to set the CS to disable the FRAM
 800cd52:	2201      	movs	r2, #1
 800cd54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd58:	480b      	ldr	r0, [pc, #44]	; (800cd88 <MX_GPIO_Init+0xec>)
 800cd5a:	f000 fb83 	bl	800d464 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS_FRAM_Pin;
 800cd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd64:	2301      	movs	r3, #1
 800cd66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_FRAM_Port, &GPIO_InitStruct);
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	4619      	mov	r1, r3
 800cd76:	4804      	ldr	r0, [pc, #16]	; (800cd88 <MX_GPIO_Init+0xec>)
 800cd78:	f000 f9e4 	bl	800d144 <HAL_GPIO_Init>


}
 800cd7c:	bf00      	nop
 800cd7e:	3728      	adds	r7, #40	; 0x28
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	40023800 	.word	0x40023800
 800cd88:	40020000 	.word	0x40020000
 800cd8c:	10110000 	.word	0x10110000
 800cd90:	40020800 	.word	0x40020800

0800cd94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a04      	ldr	r2, [pc, #16]	; (800cdb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d101      	bne.n	800cdaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800cda6:	f000 f8d1 	bl	800cf4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	40001000 	.word	0x40001000

0800cdb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cdbc:	bf00      	nop
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bc80      	pop	{r7}
 800cdc2:	4770      	bx	lr

0800cdc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08c      	sub	sp, #48	; 0x30
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	202b      	movs	r0, #43	; 0x2b
 800cdda:	f000 f988 	bl	800d0ee <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 800cdde:	202b      	movs	r0, #43	; 0x2b
 800cde0:	f000 f9a1 	bl	800d126 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800cde4:	4b1e      	ldr	r3, [pc, #120]	; (800ce60 <HAL_InitTick+0x9c>)
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	4a1d      	ldr	r2, [pc, #116]	; (800ce60 <HAL_InitTick+0x9c>)
 800cdea:	f043 0310 	orr.w	r3, r3, #16
 800cdee:	6253      	str	r3, [r2, #36]	; 0x24
 800cdf0:	4b1b      	ldr	r3, [pc, #108]	; (800ce60 <HAL_InitTick+0x9c>)
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cdfc:	f107 0210 	add.w	r2, r7, #16
 800ce00:	f107 0314 	add.w	r3, r7, #20
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f001 f822 	bl	800de50 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ce0c:	f001 f80c 	bl	800de28 <HAL_RCC_GetPCLK1Freq>
 800ce10:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	4a13      	ldr	r2, [pc, #76]	; (800ce64 <HAL_InitTick+0xa0>)
 800ce16:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1a:	0c9b      	lsrs	r3, r3, #18
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ce20:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce22:	4a12      	ldr	r2, [pc, #72]	; (800ce6c <HAL_InitTick+0xa8>)
 800ce24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800ce26:	4b10      	ldr	r3, [pc, #64]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce28:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ce2e:	4a0e      	ldr	r2, [pc, #56]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ce40:	4809      	ldr	r0, [pc, #36]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce42:	f001 f895 	bl	800df70 <HAL_TIM_Base_Init>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ce4c:	4806      	ldr	r0, [pc, #24]	; (800ce68 <HAL_InitTick+0xa4>)
 800ce4e:	f001 f8c3 	bl	800dfd8 <HAL_TIM_Base_Start_IT>
 800ce52:	4603      	mov	r3, r0
 800ce54:	e000      	b.n	800ce58 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3730      	adds	r7, #48	; 0x30
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	40023800 	.word	0x40023800
 800ce64:	431bde83 	.word	0x431bde83
 800ce68:	2000a000 	.word	0x2000a000
 800ce6c:	40001000 	.word	0x40001000

0800ce70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800ce74:	e7fe      	b.n	800ce74 <NMI_Handler+0x4>

0800ce76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce76:	b480      	push	{r7}
 800ce78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce7a:	e7fe      	b.n	800ce7a <HardFault_Handler+0x4>

0800ce7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ce80:	e7fe      	b.n	800ce80 <BusFault_Handler+0x4>

0800ce82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ce82:	b480      	push	{r7}
 800ce84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ce86:	e7fe      	b.n	800ce86 <UsageFault_Handler+0x4>

0800ce88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ce8c:	bf00      	nop
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bc80      	pop	{r7}
 800ce92:	4770      	bx	lr

0800ce94 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ce98:	4802      	ldr	r0, [pc, #8]	; (800cea4 <TIM6_IRQHandler+0x10>)
 800ce9a:	f001 f8c0 	bl	800e01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800ce9e:	bf00      	nop
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000a000 	.word	0x2000a000

0800cea8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800ceac:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <SystemInit+0x5c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a14      	ldr	r2, [pc, #80]	; (800cf04 <SystemInit+0x5c>)
 800ceb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800ceb8:	4b12      	ldr	r3, [pc, #72]	; (800cf04 <SystemInit+0x5c>)
 800ceba:	689a      	ldr	r2, [r3, #8]
 800cebc:	4911      	ldr	r1, [pc, #68]	; (800cf04 <SystemInit+0x5c>)
 800cebe:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <SystemInit+0x60>)
 800cec0:	4013      	ands	r3, r2
 800cec2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800cec4:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <SystemInit+0x5c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a0e      	ldr	r2, [pc, #56]	; (800cf04 <SystemInit+0x5c>)
 800ceca:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800cece:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800ced2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ced4:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <SystemInit+0x5c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a0a      	ldr	r2, [pc, #40]	; (800cf04 <SystemInit+0x5c>)
 800ceda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cede:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800cee0:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <SystemInit+0x5c>)
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	4a07      	ldr	r2, [pc, #28]	; (800cf04 <SystemInit+0x5c>)
 800cee6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800ceea:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ceec:	4b05      	ldr	r3, [pc, #20]	; (800cf04 <SystemInit+0x5c>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800cef2:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <SystemInit+0x64>)
 800cef4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cef8:	609a      	str	r2, [r3, #8]
#endif
}
 800cefa:	bf00      	nop
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bc80      	pop	{r7}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	40023800 	.word	0x40023800
 800cf08:	88ffc00c 	.word	0x88ffc00c
 800cf0c:	e000ed00 	.word	0xe000ed00

0800cf10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf1a:	2003      	movs	r0, #3
 800cf1c:	f000 f8dc 	bl	800d0d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cf20:	2000      	movs	r0, #0
 800cf22:	f7ff ff4f 	bl	800cdc4 <HAL_InitTick>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	71fb      	strb	r3, [r7, #7]
 800cf30:	e001      	b.n	800cf36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cf32:	f000 f805 	bl	800cf40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cf36:	79fb      	ldrb	r3, [r7, #7]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800cf40:	b480      	push	{r7}
 800cf42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800cf44:	bf00      	nop
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bc80      	pop	{r7}
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <HAL_IncTick+0x1c>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <HAL_IncTick+0x20>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4413      	add	r3, r2
 800cf5a:	4a03      	ldr	r2, [pc, #12]	; (800cf68 <HAL_IncTick+0x1c>)
 800cf5c:	6013      	str	r3, [r2, #0]
}
 800cf5e:	bf00      	nop
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000a03c 	.word	0x2000a03c
 800cf6c:	20008010 	.word	0x20008010

0800cf70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
  return uwTick;
 800cf74:	4b02      	ldr	r3, [pc, #8]	; (800cf80 <HAL_GetTick+0x10>)
 800cf76:	681b      	ldr	r3, [r3, #0]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bc80      	pop	{r7}
 800cf7e:	4770      	bx	lr
 800cf80:	2000a03c 	.word	0x2000a03c

0800cf84 <__NVIC_SetPriorityGrouping>:
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf94:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <__NVIC_SetPriorityGrouping+0x44>)
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cfac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cfb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cfb6:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <__NVIC_SetPriorityGrouping+0x44>)
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	60d3      	str	r3, [r2, #12]
}
 800cfbc:	bf00      	nop
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bc80      	pop	{r7}
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	e000ed00 	.word	0xe000ed00

0800cfcc <__NVIC_GetPriorityGrouping>:
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cfd0:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <__NVIC_GetPriorityGrouping+0x18>)
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	0a1b      	lsrs	r3, r3, #8
 800cfd6:	f003 0307 	and.w	r3, r3, #7
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bc80      	pop	{r7}
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	e000ed00 	.word	0xe000ed00

0800cfe8 <__NVIC_EnableIRQ>:
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	db0b      	blt.n	800d012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	f003 021f 	and.w	r2, r3, #31
 800d000:	4906      	ldr	r1, [pc, #24]	; (800d01c <__NVIC_EnableIRQ+0x34>)
 800d002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d006:	095b      	lsrs	r3, r3, #5
 800d008:	2001      	movs	r0, #1
 800d00a:	fa00 f202 	lsl.w	r2, r0, r2
 800d00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	bc80      	pop	{r7}
 800d01a:	4770      	bx	lr
 800d01c:	e000e100 	.word	0xe000e100

0800d020 <__NVIC_SetPriority>:
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	4603      	mov	r3, r0
 800d028:	6039      	str	r1, [r7, #0]
 800d02a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d02c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d030:	2b00      	cmp	r3, #0
 800d032:	db0a      	blt.n	800d04a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	b2da      	uxtb	r2, r3
 800d038:	490c      	ldr	r1, [pc, #48]	; (800d06c <__NVIC_SetPriority+0x4c>)
 800d03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d03e:	0112      	lsls	r2, r2, #4
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	440b      	add	r3, r1
 800d044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d048:	e00a      	b.n	800d060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	4908      	ldr	r1, [pc, #32]	; (800d070 <__NVIC_SetPriority+0x50>)
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	3b04      	subs	r3, #4
 800d058:	0112      	lsls	r2, r2, #4
 800d05a:	b2d2      	uxtb	r2, r2
 800d05c:	440b      	add	r3, r1
 800d05e:	761a      	strb	r2, [r3, #24]
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	bc80      	pop	{r7}
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	e000e100 	.word	0xe000e100
 800d070:	e000ed00 	.word	0xe000ed00

0800d074 <NVIC_EncodePriority>:
{
 800d074:	b480      	push	{r7}
 800d076:	b089      	sub	sp, #36	; 0x24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f003 0307 	and.w	r3, r3, #7
 800d086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	f1c3 0307 	rsb	r3, r3, #7
 800d08e:	2b04      	cmp	r3, #4
 800d090:	bf28      	it	cs
 800d092:	2304      	movcs	r3, #4
 800d094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	3304      	adds	r3, #4
 800d09a:	2b06      	cmp	r3, #6
 800d09c:	d902      	bls.n	800d0a4 <NVIC_EncodePriority+0x30>
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	3b03      	subs	r3, #3
 800d0a2:	e000      	b.n	800d0a6 <NVIC_EncodePriority+0x32>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b2:	43da      	mvns	r2, r3
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	401a      	ands	r2, r3
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d0bc:	f04f 31ff 	mov.w	r1, #4294967295
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c6:	43d9      	mvns	r1, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d0cc:	4313      	orrs	r3, r2
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3724      	adds	r7, #36	; 0x24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bc80      	pop	{r7}
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ff4f 	bl	800cf84 <__NVIC_SetPriorityGrouping>
}
 800d0e6:	bf00      	nop
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b086      	sub	sp, #24
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	60b9      	str	r1, [r7, #8]
 800d0f8:	607a      	str	r2, [r7, #4]
 800d0fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d100:	f7ff ff64 	bl	800cfcc <__NVIC_GetPriorityGrouping>
 800d104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	6978      	ldr	r0, [r7, #20]
 800d10c:	f7ff ffb2 	bl	800d074 <NVIC_EncodePriority>
 800d110:	4602      	mov	r2, r0
 800d112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff ff81 	bl	800d020 <__NVIC_SetPriority>
}
 800d11e:	bf00      	nop
 800d120:	3718      	adds	r7, #24
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	4603      	mov	r3, r0
 800d12e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ff57 	bl	800cfe8 <__NVIC_EnableIRQ>
}
 800d13a:	bf00      	nop
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	adde      	add	r5, sp, #888	; 0x378

0800d144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800d144:	b480      	push	{r7}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d14e:	2300      	movs	r3, #0
 800d150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d152:	2300      	movs	r3, #0
 800d154:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800d15a:	e160      	b.n	800d41e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	2101      	movs	r1, #1
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	fa01 f303 	lsl.w	r3, r1, r3
 800d168:	4013      	ands	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 8152 	beq.w	800d418 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d003      	beq.n	800d184 <HAL_GPIO_Init+0x40>
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	2b12      	cmp	r3, #18
 800d182:	d123      	bne.n	800d1cc <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	08da      	lsrs	r2, r3, #3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3208      	adds	r2, #8
 800d18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d190:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f003 0307 	and.w	r3, r3, #7
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	220f      	movs	r2, #15
 800d19c:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	f003 0307 	and.w	r3, r3, #7
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	08da      	lsrs	r2, r3, #3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3208      	adds	r2, #8
 800d1c6:	6939      	ldr	r1, [r7, #16]
 800d1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	2203      	movs	r2, #3
 800d1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1dc:	43db      	mvns	r3, r3
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	f003 0203 	and.w	r2, r3, #3
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f4:	693a      	ldr	r2, [r7, #16]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	693a      	ldr	r2, [r7, #16]
 800d1fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d00b      	beq.n	800d220 <HAL_GPIO_Init+0xdc>
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d007      	beq.n	800d220 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d214:	2b11      	cmp	r3, #17
 800d216:	d003      	beq.n	800d220 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	2b12      	cmp	r3, #18
 800d21e:	d130      	bne.n	800d282 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	2203      	movs	r2, #3
 800d22c:	fa02 f303 	lsl.w	r3, r2, r3
 800d230:	43db      	mvns	r3, r3
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	4013      	ands	r3, r2
 800d236:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	68da      	ldr	r2, [r3, #12]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	fa02 f303 	lsl.w	r3, r2, r3
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	4313      	orrs	r3, r2
 800d248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800d256:	2201      	movs	r2, #1
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	fa02 f303 	lsl.w	r3, r2, r3
 800d25e:	43db      	mvns	r3, r3
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	4013      	ands	r3, r2
 800d264:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	091b      	lsrs	r3, r3, #4
 800d26c:	f003 0201 	and.w	r2, r3, #1
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	fa02 f303 	lsl.w	r3, r2, r3
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	4313      	orrs	r3, r2
 800d27a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	2203      	movs	r2, #3
 800d28e:	fa02 f303 	lsl.w	r3, r2, r3
 800d292:	43db      	mvns	r3, r3
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4013      	ands	r3, r2
 800d298:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 80ac 	beq.w	800d418 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2c0:	4b5e      	ldr	r3, [pc, #376]	; (800d43c <HAL_GPIO_Init+0x2f8>)
 800d2c2:	6a1b      	ldr	r3, [r3, #32]
 800d2c4:	4a5d      	ldr	r2, [pc, #372]	; (800d43c <HAL_GPIO_Init+0x2f8>)
 800d2c6:	f043 0301 	orr.w	r3, r3, #1
 800d2ca:	6213      	str	r3, [r2, #32]
 800d2cc:	4b5b      	ldr	r3, [pc, #364]	; (800d43c <HAL_GPIO_Init+0x2f8>)
 800d2ce:	6a1b      	ldr	r3, [r3, #32]
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	60bb      	str	r3, [r7, #8]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800d2d8:	4a59      	ldr	r2, [pc, #356]	; (800d440 <HAL_GPIO_Init+0x2fc>)
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	089b      	lsrs	r3, r3, #2
 800d2de:	3302      	adds	r3, #2
 800d2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f003 0303 	and.w	r3, r3, #3
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	220f      	movs	r2, #15
 800d2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2f4:	43db      	mvns	r3, r3
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a51      	ldr	r2, [pc, #324]	; (800d444 <HAL_GPIO_Init+0x300>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d025      	beq.n	800d350 <HAL_GPIO_Init+0x20c>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a50      	ldr	r2, [pc, #320]	; (800d448 <HAL_GPIO_Init+0x304>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d01f      	beq.n	800d34c <HAL_GPIO_Init+0x208>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a4f      	ldr	r2, [pc, #316]	; (800d44c <HAL_GPIO_Init+0x308>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d019      	beq.n	800d348 <HAL_GPIO_Init+0x204>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a4e      	ldr	r2, [pc, #312]	; (800d450 <HAL_GPIO_Init+0x30c>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d013      	beq.n	800d344 <HAL_GPIO_Init+0x200>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a4d      	ldr	r2, [pc, #308]	; (800d454 <HAL_GPIO_Init+0x310>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d00d      	beq.n	800d340 <HAL_GPIO_Init+0x1fc>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a4c      	ldr	r2, [pc, #304]	; (800d458 <HAL_GPIO_Init+0x314>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d007      	beq.n	800d33c <HAL_GPIO_Init+0x1f8>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a4b      	ldr	r2, [pc, #300]	; (800d45c <HAL_GPIO_Init+0x318>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d101      	bne.n	800d338 <HAL_GPIO_Init+0x1f4>
 800d334:	2306      	movs	r3, #6
 800d336:	e00c      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d338:	2307      	movs	r3, #7
 800d33a:	e00a      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d33c:	2305      	movs	r3, #5
 800d33e:	e008      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d340:	2304      	movs	r3, #4
 800d342:	e006      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d344:	2303      	movs	r3, #3
 800d346:	e004      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d348:	2302      	movs	r3, #2
 800d34a:	e002      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e000      	b.n	800d352 <HAL_GPIO_Init+0x20e>
 800d350:	2300      	movs	r3, #0
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	f002 0203 	and.w	r2, r2, #3
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	4093      	lsls	r3, r2
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	4313      	orrs	r3, r2
 800d360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d362:	4937      	ldr	r1, [pc, #220]	; (800d440 <HAL_GPIO_Init+0x2fc>)
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	089b      	lsrs	r3, r3, #2
 800d368:	3302      	adds	r3, #2
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d370:	4b3b      	ldr	r3, [pc, #236]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	43db      	mvns	r3, r3
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4013      	ands	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d394:	4a32      	ldr	r2, [pc, #200]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d39a:	4b31      	ldr	r3, [pc, #196]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	43db      	mvns	r3, r3
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d3be:	4a28      	ldr	r2, [pc, #160]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d3c4:	4b26      	ldr	r3, [pc, #152]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	43db      	mvns	r3, r3
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d003      	beq.n	800d3e8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d3e8:	4a1d      	ldr	r2, [pc, #116]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d3ee:	4b1c      	ldr	r3, [pc, #112]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	43db      	mvns	r3, r3
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d412:	4a13      	ldr	r2, [pc, #76]	; (800d460 <HAL_GPIO_Init+0x31c>)
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	3301      	adds	r3, #1
 800d41c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	fa22 f303 	lsr.w	r3, r2, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f47f ae97 	bne.w	800d15c <HAL_GPIO_Init+0x18>
  } 
}
 800d42e:	bf00      	nop
 800d430:	bf00      	nop
 800d432:	371c      	adds	r7, #28
 800d434:	46bd      	mov	sp, r7
 800d436:	bc80      	pop	{r7}
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	40023800 	.word	0x40023800
 800d440:	40010000 	.word	0x40010000
 800d444:	40020000 	.word	0x40020000
 800d448:	40020400 	.word	0x40020400
 800d44c:	40020800 	.word	0x40020800
 800d450:	40020c00 	.word	0x40020c00
 800d454:	40021000 	.word	0x40021000
 800d458:	40021400 	.word	0x40021400
 800d45c:	40021800 	.word	0x40021800
 800d460:	40010400 	.word	0x40010400

0800d464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	807b      	strh	r3, [r7, #2]
 800d470:	4613      	mov	r3, r2
 800d472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d474:	787b      	ldrb	r3, [r7, #1]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d47a:	887a      	ldrh	r2, [r7, #2]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800d480:	e003      	b.n	800d48a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800d482:	887b      	ldrh	r3, [r7, #2]
 800d484:	041a      	lsls	r2, r3, #16
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	619a      	str	r2, [r3, #24]
}
 800d48a:	bf00      	nop
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	bc80      	pop	{r7}
 800d492:	4770      	bx	lr

0800d494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e31d      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4a6:	4b94      	ldr	r3, [pc, #592]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	f003 030c 	and.w	r3, r3, #12
 800d4ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d4b0:	4b91      	ldr	r3, [pc, #580]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4b8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d07b      	beq.n	800d5be <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d006      	beq.n	800d4da <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	2b0c      	cmp	r3, #12
 800d4d0:	d10f      	bne.n	800d4f2 <HAL_RCC_OscConfig+0x5e>
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d8:	d10b      	bne.n	800d4f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4da:	4b87      	ldr	r3, [pc, #540]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d06a      	beq.n	800d5bc <HAL_RCC_OscConfig+0x128>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d166      	bne.n	800d5bc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e2f7      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d106      	bne.n	800d508 <HAL_RCC_OscConfig+0x74>
 800d4fa:	4b7f      	ldr	r3, [pc, #508]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a7e      	ldr	r2, [pc, #504]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d504:	6013      	str	r3, [r2, #0]
 800d506:	e02d      	b.n	800d564 <HAL_RCC_OscConfig+0xd0>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10c      	bne.n	800d52a <HAL_RCC_OscConfig+0x96>
 800d510:	4b79      	ldr	r3, [pc, #484]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a78      	ldr	r2, [pc, #480]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d51a:	6013      	str	r3, [r2, #0]
 800d51c:	4b76      	ldr	r3, [pc, #472]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a75      	ldr	r2, [pc, #468]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d526:	6013      	str	r3, [r2, #0]
 800d528:	e01c      	b.n	800d564 <HAL_RCC_OscConfig+0xd0>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	2b05      	cmp	r3, #5
 800d530:	d10c      	bne.n	800d54c <HAL_RCC_OscConfig+0xb8>
 800d532:	4b71      	ldr	r3, [pc, #452]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a70      	ldr	r2, [pc, #448]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	4b6e      	ldr	r3, [pc, #440]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a6d      	ldr	r2, [pc, #436]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	e00b      	b.n	800d564 <HAL_RCC_OscConfig+0xd0>
 800d54c:	4b6a      	ldr	r3, [pc, #424]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a69      	ldr	r2, [pc, #420]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	4b67      	ldr	r3, [pc, #412]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a66      	ldr	r2, [pc, #408]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d55e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d013      	beq.n	800d594 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d56c:	f7ff fd00 	bl	800cf70 <HAL_GetTick>
 800d570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d572:	e008      	b.n	800d586 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d574:	f7ff fcfc 	bl	800cf70 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	2b64      	cmp	r3, #100	; 0x64
 800d580:	d901      	bls.n	800d586 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800d582:	2303      	movs	r3, #3
 800d584:	e2ad      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d586:	4b5c      	ldr	r3, [pc, #368]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0f0      	beq.n	800d574 <HAL_RCC_OscConfig+0xe0>
 800d592:	e014      	b.n	800d5be <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d594:	f7ff fcec 	bl	800cf70 <HAL_GetTick>
 800d598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d59a:	e008      	b.n	800d5ae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d59c:	f7ff fce8 	bl	800cf70 <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	2b64      	cmp	r3, #100	; 0x64
 800d5a8:	d901      	bls.n	800d5ae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	e299      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d5ae:	4b52      	ldr	r3, [pc, #328]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1f0      	bne.n	800d59c <HAL_RCC_OscConfig+0x108>
 800d5ba:	e000      	b.n	800d5be <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0302 	and.w	r3, r3, #2
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d05a      	beq.n	800d680 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b04      	cmp	r3, #4
 800d5ce:	d005      	beq.n	800d5dc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	2b0c      	cmp	r3, #12
 800d5d4:	d119      	bne.n	800d60a <HAL_RCC_OscConfig+0x176>
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d116      	bne.n	800d60a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d5dc:	4b46      	ldr	r3, [pc, #280]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <HAL_RCC_OscConfig+0x160>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d001      	beq.n	800d5f4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e276      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5f4:	4b40      	ldr	r3, [pc, #256]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	021b      	lsls	r3, r3, #8
 800d602:	493d      	ldr	r1, [pc, #244]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d604:	4313      	orrs	r3, r2
 800d606:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d608:	e03a      	b.n	800d680 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d020      	beq.n	800d654 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d612:	4b3a      	ldr	r3, [pc, #232]	; (800d6fc <HAL_RCC_OscConfig+0x268>)
 800d614:	2201      	movs	r2, #1
 800d616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d618:	f7ff fcaa 	bl	800cf70 <HAL_GetTick>
 800d61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d61e:	e008      	b.n	800d632 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d620:	f7ff fca6 	bl	800cf70 <HAL_GetTick>
 800d624:	4602      	mov	r2, r0
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d901      	bls.n	800d632 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d62e:	2303      	movs	r3, #3
 800d630:	e257      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d632:	4b31      	ldr	r3, [pc, #196]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0302 	and.w	r3, r3, #2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0f0      	beq.n	800d620 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d63e:	4b2e      	ldr	r3, [pc, #184]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	492a      	ldr	r1, [pc, #168]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d64e:	4313      	orrs	r3, r2
 800d650:	604b      	str	r3, [r1, #4]
 800d652:	e015      	b.n	800d680 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d654:	4b29      	ldr	r3, [pc, #164]	; (800d6fc <HAL_RCC_OscConfig+0x268>)
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d65a:	f7ff fc89 	bl	800cf70 <HAL_GetTick>
 800d65e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d660:	e008      	b.n	800d674 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d662:	f7ff fc85 	bl	800cf70 <HAL_GetTick>
 800d666:	4602      	mov	r2, r0
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d901      	bls.n	800d674 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	e236      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d674:	4b20      	ldr	r3, [pc, #128]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f003 0302 	and.w	r3, r3, #2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1f0      	bne.n	800d662 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f003 0310 	and.w	r3, r3, #16
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80b8 	beq.w	800d7fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d170      	bne.n	800d776 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d694:	4b18      	ldr	r3, [pc, #96]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <HAL_RCC_OscConfig+0x218>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e21a      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a1a      	ldr	r2, [r3, #32]
 800d6b0:	4b11      	ldr	r3, [pc, #68]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d921      	bls.n	800d700 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 fbf5 	bl	800deb0 <RCC_SetFlashLatencyFromMSIRange>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e208      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d6d0:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a1b      	ldr	r3, [r3, #32]
 800d6dc:	4906      	ldr	r1, [pc, #24]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d6e2:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	061b      	lsls	r3, r3, #24
 800d6f0:	4901      	ldr	r1, [pc, #4]	; (800d6f8 <HAL_RCC_OscConfig+0x264>)
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	604b      	str	r3, [r1, #4]
 800d6f6:	e020      	b.n	800d73a <HAL_RCC_OscConfig+0x2a6>
 800d6f8:	40023800 	.word	0x40023800
 800d6fc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d700:	4ba4      	ldr	r3, [pc, #656]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	49a1      	ldr	r1, [pc, #644]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d70e:	4313      	orrs	r3, r2
 800d710:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d712:	4ba0      	ldr	r3, [pc, #640]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	69db      	ldr	r3, [r3, #28]
 800d71e:	061b      	lsls	r3, r3, #24
 800d720:	499c      	ldr	r1, [pc, #624]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d722:	4313      	orrs	r3, r2
 800d724:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 fbc0 	bl	800deb0 <RCC_SetFlashLatencyFromMSIRange>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d001      	beq.n	800d73a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e1d3      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	0b5b      	lsrs	r3, r3, #13
 800d740:	3301      	adds	r3, #1
 800d742:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d746:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800d74a:	4a92      	ldr	r2, [pc, #584]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d74c:	6892      	ldr	r2, [r2, #8]
 800d74e:	0912      	lsrs	r2, r2, #4
 800d750:	f002 020f 	and.w	r2, r2, #15
 800d754:	4990      	ldr	r1, [pc, #576]	; (800d998 <HAL_RCC_OscConfig+0x504>)
 800d756:	5c8a      	ldrb	r2, [r1, r2]
 800d758:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800d75a:	4a90      	ldr	r2, [pc, #576]	; (800d99c <HAL_RCC_OscConfig+0x508>)
 800d75c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d75e:	4b90      	ldr	r3, [pc, #576]	; (800d9a0 <HAL_RCC_OscConfig+0x50c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fb2e 	bl	800cdc4 <HAL_InitTick>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d045      	beq.n	800d7fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	e1b5      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d029      	beq.n	800d7d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d77e:	4b89      	ldr	r3, [pc, #548]	; (800d9a4 <HAL_RCC_OscConfig+0x510>)
 800d780:	2201      	movs	r2, #1
 800d782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d784:	f7ff fbf4 	bl	800cf70 <HAL_GetTick>
 800d788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d78a:	e008      	b.n	800d79e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d78c:	f7ff fbf0 	bl	800cf70 <HAL_GetTick>
 800d790:	4602      	mov	r2, r0
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	2b02      	cmp	r3, #2
 800d798:	d901      	bls.n	800d79e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e1a1      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d79e:	4b7d      	ldr	r3, [pc, #500]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d0f0      	beq.n	800d78c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d7aa:	4b7a      	ldr	r3, [pc, #488]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	4977      	ldr	r1, [pc, #476]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d7bc:	4b75      	ldr	r3, [pc, #468]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	061b      	lsls	r3, r3, #24
 800d7ca:	4972      	ldr	r1, [pc, #456]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	604b      	str	r3, [r1, #4]
 800d7d0:	e015      	b.n	800d7fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d7d2:	4b74      	ldr	r3, [pc, #464]	; (800d9a4 <HAL_RCC_OscConfig+0x510>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7d8:	f7ff fbca 	bl	800cf70 <HAL_GetTick>
 800d7dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d7de:	e008      	b.n	800d7f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d7e0:	f7ff fbc6 	bl	800cf70 <HAL_GetTick>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d901      	bls.n	800d7f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e177      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d7f2:	4b68      	ldr	r3, [pc, #416]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1f0      	bne.n	800d7e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0308 	and.w	r3, r3, #8
 800d806:	2b00      	cmp	r3, #0
 800d808:	d030      	beq.n	800d86c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d016      	beq.n	800d840 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d812:	4b65      	ldr	r3, [pc, #404]	; (800d9a8 <HAL_RCC_OscConfig+0x514>)
 800d814:	2201      	movs	r2, #1
 800d816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d818:	f7ff fbaa 	bl	800cf70 <HAL_GetTick>
 800d81c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d81e:	e008      	b.n	800d832 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d820:	f7ff fba6 	bl	800cf70 <HAL_GetTick>
 800d824:	4602      	mov	r2, r0
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d901      	bls.n	800d832 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d82e:	2303      	movs	r3, #3
 800d830:	e157      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d832:	4b58      	ldr	r3, [pc, #352]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0f0      	beq.n	800d820 <HAL_RCC_OscConfig+0x38c>
 800d83e:	e015      	b.n	800d86c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d840:	4b59      	ldr	r3, [pc, #356]	; (800d9a8 <HAL_RCC_OscConfig+0x514>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d846:	f7ff fb93 	bl	800cf70 <HAL_GetTick>
 800d84a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d84c:	e008      	b.n	800d860 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d84e:	f7ff fb8f 	bl	800cf70 <HAL_GetTick>
 800d852:	4602      	mov	r2, r0
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d901      	bls.n	800d860 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e140      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d860:	4b4c      	ldr	r3, [pc, #304]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1f0      	bne.n	800d84e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 80b5 	beq.w	800d9e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d87a:	2300      	movs	r3, #0
 800d87c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d87e:	4b45      	ldr	r3, [pc, #276]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10d      	bne.n	800d8a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d88a:	4b42      	ldr	r3, [pc, #264]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88e:	4a41      	ldr	r2, [pc, #260]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d894:	6253      	str	r3, [r2, #36]	; 0x24
 800d896:	4b3f      	ldr	r3, [pc, #252]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d89e:	60bb      	str	r3, [r7, #8]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8a6:	4b41      	ldr	r3, [pc, #260]	; (800d9ac <HAL_RCC_OscConfig+0x518>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d118      	bne.n	800d8e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8b2:	4b3e      	ldr	r3, [pc, #248]	; (800d9ac <HAL_RCC_OscConfig+0x518>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a3d      	ldr	r2, [pc, #244]	; (800d9ac <HAL_RCC_OscConfig+0x518>)
 800d8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8be:	f7ff fb57 	bl	800cf70 <HAL_GetTick>
 800d8c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8c4:	e008      	b.n	800d8d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8c6:	f7ff fb53 	bl	800cf70 <HAL_GetTick>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	2b64      	cmp	r3, #100	; 0x64
 800d8d2:	d901      	bls.n	800d8d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e104      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8d8:	4b34      	ldr	r3, [pc, #208]	; (800d9ac <HAL_RCC_OscConfig+0x518>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d0f0      	beq.n	800d8c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d106      	bne.n	800d8fa <HAL_RCC_OscConfig+0x466>
 800d8ec:	4b29      	ldr	r3, [pc, #164]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f0:	4a28      	ldr	r2, [pc, #160]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d8f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8f6:	6353      	str	r3, [r2, #52]	; 0x34
 800d8f8:	e02d      	b.n	800d956 <HAL_RCC_OscConfig+0x4c2>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10c      	bne.n	800d91c <HAL_RCC_OscConfig+0x488>
 800d902:	4b24      	ldr	r3, [pc, #144]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d906:	4a23      	ldr	r2, [pc, #140]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d90c:	6353      	str	r3, [r2, #52]	; 0x34
 800d90e:	4b21      	ldr	r3, [pc, #132]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d912:	4a20      	ldr	r2, [pc, #128]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d918:	6353      	str	r3, [r2, #52]	; 0x34
 800d91a:	e01c      	b.n	800d956 <HAL_RCC_OscConfig+0x4c2>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	2b05      	cmp	r3, #5
 800d922:	d10c      	bne.n	800d93e <HAL_RCC_OscConfig+0x4aa>
 800d924:	4b1b      	ldr	r3, [pc, #108]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d928:	4a1a      	ldr	r2, [pc, #104]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d92a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d92e:	6353      	str	r3, [r2, #52]	; 0x34
 800d930:	4b18      	ldr	r3, [pc, #96]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d934:	4a17      	ldr	r2, [pc, #92]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d93a:	6353      	str	r3, [r2, #52]	; 0x34
 800d93c:	e00b      	b.n	800d956 <HAL_RCC_OscConfig+0x4c2>
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d942:	4a14      	ldr	r2, [pc, #80]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d948:	6353      	str	r3, [r2, #52]	; 0x34
 800d94a:	4b12      	ldr	r3, [pc, #72]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94e:	4a11      	ldr	r2, [pc, #68]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d954:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d015      	beq.n	800d98a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d95e:	f7ff fb07 	bl	800cf70 <HAL_GetTick>
 800d962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d964:	e00a      	b.n	800d97c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d966:	f7ff fb03 	bl	800cf70 <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	f241 3288 	movw	r2, #5000	; 0x1388
 800d974:	4293      	cmp	r3, r2
 800d976:	d901      	bls.n	800d97c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d978:	2303      	movs	r3, #3
 800d97a:	e0b2      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d97c:	4b05      	ldr	r3, [pc, #20]	; (800d994 <HAL_RCC_OscConfig+0x500>)
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0ee      	beq.n	800d966 <HAL_RCC_OscConfig+0x4d2>
 800d988:	e023      	b.n	800d9d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d98a:	f7ff faf1 	bl	800cf70 <HAL_GetTick>
 800d98e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d990:	e019      	b.n	800d9c6 <HAL_RCC_OscConfig+0x532>
 800d992:	bf00      	nop
 800d994:	40023800 	.word	0x40023800
 800d998:	08010650 	.word	0x08010650
 800d99c:	20008008 	.word	0x20008008
 800d9a0:	2000800c 	.word	0x2000800c
 800d9a4:	42470020 	.word	0x42470020
 800d9a8:	42470680 	.word	0x42470680
 800d9ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9b0:	f7ff fade 	bl	800cf70 <HAL_GetTick>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d901      	bls.n	800d9c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	e08d      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d9c6:	4b49      	ldr	r3, [pc, #292]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800d9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1ee      	bne.n	800d9b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d9d2:	7ffb      	ldrb	r3, [r7, #31]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d105      	bne.n	800d9e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9d8:	4b44      	ldr	r3, [pc, #272]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9dc:	4a43      	ldr	r2, [pc, #268]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800d9de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d079      	beq.n	800dae0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2b0c      	cmp	r3, #12
 800d9f0:	d056      	beq.n	800daa0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d13b      	bne.n	800da72 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9fa:	4b3d      	ldr	r3, [pc, #244]	; (800daf0 <HAL_RCC_OscConfig+0x65c>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da00:	f7ff fab6 	bl	800cf70 <HAL_GetTick>
 800da04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da06:	e008      	b.n	800da1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da08:	f7ff fab2 	bl	800cf70 <HAL_GetTick>
 800da0c:	4602      	mov	r2, r0
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	2b02      	cmp	r3, #2
 800da14:	d901      	bls.n	800da1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e063      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da1a:	4b34      	ldr	r3, [pc, #208]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1f0      	bne.n	800da08 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800da26:	4b31      	ldr	r3, [pc, #196]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da36:	4319      	orrs	r1, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da3c:	430b      	orrs	r3, r1
 800da3e:	492b      	ldr	r1, [pc, #172]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800da40:	4313      	orrs	r3, r2
 800da42:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da44:	4b2a      	ldr	r3, [pc, #168]	; (800daf0 <HAL_RCC_OscConfig+0x65c>)
 800da46:	2201      	movs	r2, #1
 800da48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da4a:	f7ff fa91 	bl	800cf70 <HAL_GetTick>
 800da4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800da50:	e008      	b.n	800da64 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da52:	f7ff fa8d 	bl	800cf70 <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d901      	bls.n	800da64 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e03e      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800da64:	4b21      	ldr	r3, [pc, #132]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d0f0      	beq.n	800da52 <HAL_RCC_OscConfig+0x5be>
 800da70:	e036      	b.n	800dae0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da72:	4b1f      	ldr	r3, [pc, #124]	; (800daf0 <HAL_RCC_OscConfig+0x65c>)
 800da74:	2200      	movs	r2, #0
 800da76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da78:	f7ff fa7a 	bl	800cf70 <HAL_GetTick>
 800da7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da7e:	e008      	b.n	800da92 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da80:	f7ff fa76 	bl	800cf70 <HAL_GetTick>
 800da84:	4602      	mov	r2, r0
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d901      	bls.n	800da92 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	e027      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da92:	4b16      	ldr	r3, [pc, #88]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f0      	bne.n	800da80 <HAL_RCC_OscConfig+0x5ec>
 800da9e:	e01f      	b.n	800dae0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d101      	bne.n	800daac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e01a      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800daac:	4b0f      	ldr	r3, [pc, #60]	; (800daec <HAL_RCC_OscConfig+0x658>)
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d10d      	bne.n	800dadc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800daca:	429a      	cmp	r2, r3
 800dacc:	d106      	bne.n	800dadc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800dad8:	429a      	cmp	r2, r3
 800dada:	d001      	beq.n	800dae0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3720      	adds	r7, #32
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	40023800 	.word	0x40023800
 800daf0:	42470060 	.word	0x42470060

0800daf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db04:	2301      	movs	r3, #1
 800db06:	e11a      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db08:	4b8f      	ldr	r3, [pc, #572]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d919      	bls.n	800db4a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d105      	bne.n	800db28 <HAL_RCC_ClockConfig+0x34>
 800db1c:	4b8a      	ldr	r3, [pc, #552]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a89      	ldr	r2, [pc, #548]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db22:	f043 0304 	orr.w	r3, r3, #4
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	4b87      	ldr	r3, [pc, #540]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f023 0201 	bic.w	r2, r3, #1
 800db30:	4985      	ldr	r1, [pc, #532]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	4313      	orrs	r3, r2
 800db36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db38:	4b83      	ldr	r3, [pc, #524]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	683a      	ldr	r2, [r7, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d001      	beq.n	800db4a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e0f9      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d008      	beq.n	800db68 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db56:	4b7d      	ldr	r3, [pc, #500]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	497a      	ldr	r1, [pc, #488]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800db64:	4313      	orrs	r3, r2
 800db66:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 808e 	beq.w	800dc92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d107      	bne.n	800db8e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db7e:	4b73      	ldr	r3, [pc, #460]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db86:	2b00      	cmp	r3, #0
 800db88:	d121      	bne.n	800dbce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e0d7      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	2b03      	cmp	r3, #3
 800db94:	d107      	bne.n	800dba6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db96:	4b6d      	ldr	r3, [pc, #436]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d115      	bne.n	800dbce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e0cb      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d107      	bne.n	800dbbe <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dbae:	4b67      	ldr	r3, [pc, #412]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d109      	bne.n	800dbce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e0bf      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800dbbe:	4b63      	ldr	r3, [pc, #396]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e0b7      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dbce:	4b5f      	ldr	r3, [pc, #380]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	f023 0203 	bic.w	r2, r3, #3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	495c      	ldr	r1, [pc, #368]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dbe0:	f7ff f9c6 	bl	800cf70 <HAL_GetTick>
 800dbe4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d112      	bne.n	800dc14 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dbee:	e00a      	b.n	800dc06 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbf0:	f7ff f9be 	bl	800cf70 <HAL_GetTick>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d901      	bls.n	800dc06 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e09b      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dc06:	4b51      	ldr	r3, [pc, #324]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f003 030c 	and.w	r3, r3, #12
 800dc0e:	2b08      	cmp	r3, #8
 800dc10:	d1ee      	bne.n	800dbf0 <HAL_RCC_ClockConfig+0xfc>
 800dc12:	e03e      	b.n	800dc92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d112      	bne.n	800dc42 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc1c:	e00a      	b.n	800dc34 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc1e:	f7ff f9a7 	bl	800cf70 <HAL_GetTick>
 800dc22:	4602      	mov	r2, r0
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d901      	bls.n	800dc34 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	e084      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc34:	4b45      	ldr	r3, [pc, #276]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f003 030c 	and.w	r3, r3, #12
 800dc3c:	2b0c      	cmp	r3, #12
 800dc3e:	d1ee      	bne.n	800dc1e <HAL_RCC_ClockConfig+0x12a>
 800dc40:	e027      	b.n	800dc92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d11d      	bne.n	800dc86 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800dc4a:	e00a      	b.n	800dc62 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc4c:	f7ff f990 	bl	800cf70 <HAL_GetTick>
 800dc50:	4602      	mov	r2, r0
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d901      	bls.n	800dc62 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e06d      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800dc62:	4b3a      	ldr	r3, [pc, #232]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 030c 	and.w	r3, r3, #12
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d1ee      	bne.n	800dc4c <HAL_RCC_ClockConfig+0x158>
 800dc6e:	e010      	b.n	800dc92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc70:	f7ff f97e 	bl	800cf70 <HAL_GetTick>
 800dc74:	4602      	mov	r2, r0
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d901      	bls.n	800dc86 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e05b      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800dc86:	4b31      	ldr	r3, [pc, #196]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f003 030c 	and.w	r3, r3, #12
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1ee      	bne.n	800dc70 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc92:	4b2d      	ldr	r3, [pc, #180]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d219      	bcs.n	800dcd4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d105      	bne.n	800dcb2 <HAL_RCC_ClockConfig+0x1be>
 800dca6:	4b28      	ldr	r3, [pc, #160]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a27      	ldr	r2, [pc, #156]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dcac:	f043 0304 	orr.w	r3, r3, #4
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	4b25      	ldr	r3, [pc, #148]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f023 0201 	bic.w	r2, r3, #1
 800dcba:	4923      	ldr	r1, [pc, #140]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcc2:	4b21      	ldr	r3, [pc, #132]	; (800dd48 <HAL_RCC_ClockConfig+0x254>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d001      	beq.n	800dcd4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e034      	b.n	800dd3e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d008      	beq.n	800dcf2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dce0:	4b1a      	ldr	r3, [pc, #104]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	4917      	ldr	r1, [pc, #92]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0308 	and.w	r3, r3, #8
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d009      	beq.n	800dd12 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	490f      	ldr	r1, [pc, #60]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd12:	f000 f823 	bl	800dd5c <HAL_RCC_GetSysClockFreq>
 800dd16:	4602      	mov	r2, r0
 800dd18:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <HAL_RCC_ClockConfig+0x258>)
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	091b      	lsrs	r3, r3, #4
 800dd1e:	f003 030f 	and.w	r3, r3, #15
 800dd22:	490b      	ldr	r1, [pc, #44]	; (800dd50 <HAL_RCC_ClockConfig+0x25c>)
 800dd24:	5ccb      	ldrb	r3, [r1, r3]
 800dd26:	fa22 f303 	lsr.w	r3, r2, r3
 800dd2a:	4a0a      	ldr	r2, [pc, #40]	; (800dd54 <HAL_RCC_ClockConfig+0x260>)
 800dd2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800dd2e:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <HAL_RCC_ClockConfig+0x264>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff f846 	bl	800cdc4 <HAL_InitTick>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	72fb      	strb	r3, [r7, #11]

  return status;
 800dd3c:	7afb      	ldrb	r3, [r7, #11]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	40023c00 	.word	0x40023c00
 800dd4c:	40023800 	.word	0x40023800
 800dd50:	08010650 	.word	0x08010650
 800dd54:	20008008 	.word	0x20008008
 800dd58:	2000800c 	.word	0x2000800c

0800dd5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800dd62:	4b28      	ldr	r3, [pc, #160]	; (800de04 <HAL_RCC_GetSysClockFreq+0xa8>)
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f003 030c 	and.w	r3, r3, #12
 800dd6e:	2b0c      	cmp	r3, #12
 800dd70:	d00c      	beq.n	800dd8c <HAL_RCC_GetSysClockFreq+0x30>
 800dd72:	2b0c      	cmp	r3, #12
 800dd74:	d831      	bhi.n	800ddda <HAL_RCC_GetSysClockFreq+0x7e>
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d002      	beq.n	800dd80 <HAL_RCC_GetSysClockFreq+0x24>
 800dd7a:	2b08      	cmp	r3, #8
 800dd7c:	d003      	beq.n	800dd86 <HAL_RCC_GetSysClockFreq+0x2a>
 800dd7e:	e02c      	b.n	800ddda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd80:	4b21      	ldr	r3, [pc, #132]	; (800de08 <HAL_RCC_GetSysClockFreq+0xac>)
 800dd82:	613b      	str	r3, [r7, #16]
      break;
 800dd84:	e037      	b.n	800ddf6 <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800dd86:	4b21      	ldr	r3, [pc, #132]	; (800de0c <HAL_RCC_GetSysClockFreq+0xb0>)
 800dd88:	613b      	str	r3, [r7, #16]
      break;
 800dd8a:	e034      	b.n	800ddf6 <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	0c9b      	lsrs	r3, r3, #18
 800dd90:	f003 030f 	and.w	r3, r3, #15
 800dd94:	4a1e      	ldr	r2, [pc, #120]	; (800de10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800dd96:	5cd3      	ldrb	r3, [r2, r3]
 800dd98:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	0d9b      	lsrs	r3, r3, #22
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	3301      	adds	r3, #1
 800dda4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dda6:	4b17      	ldr	r3, [pc, #92]	; (800de04 <HAL_RCC_GetSysClockFreq+0xa8>)
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d008      	beq.n	800ddc4 <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4a15      	ldr	r2, [pc, #84]	; (800de0c <HAL_RCC_GetSysClockFreq+0xb0>)
 800ddb6:	fb02 f203 	mul.w	r2, r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	e007      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4a10      	ldr	r2, [pc, #64]	; (800de08 <HAL_RCC_GetSysClockFreq+0xac>)
 800ddc8:	fb02 f203 	mul.w	r2, r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd2:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	613b      	str	r3, [r7, #16]
      break;
 800ddd8:	e00d      	b.n	800ddf6 <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800ddda:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <HAL_RCC_GetSysClockFreq+0xa8>)
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	0b5b      	lsrs	r3, r3, #13
 800dde0:	f003 0307 	and.w	r3, r3, #7
 800dde4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	3301      	adds	r3, #1
 800ddea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ddee:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf2:	613b      	str	r3, [r7, #16]
      break;
 800ddf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ddf6:	693b      	ldr	r3, [r7, #16]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	371c      	adds	r7, #28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bc80      	pop	{r7}
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	40023800 	.word	0x40023800
 800de08:	00f42400 	.word	0x00f42400
 800de0c:	007a1200 	.word	0x007a1200
 800de10:	08010644 	.word	0x08010644

0800de14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de14:	b480      	push	{r7}
 800de16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <HAL_RCC_GetHCLKFreq+0x10>)
 800de1a:	681b      	ldr	r3, [r3, #0]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	46bd      	mov	sp, r7
 800de20:	bc80      	pop	{r7}
 800de22:	4770      	bx	lr
 800de24:	20008008 	.word	0x20008008

0800de28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800de2c:	f7ff fff2 	bl	800de14 <HAL_RCC_GetHCLKFreq>
 800de30:	4602      	mov	r2, r0
 800de32:	4b05      	ldr	r3, [pc, #20]	; (800de48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	0a1b      	lsrs	r3, r3, #8
 800de38:	f003 0307 	and.w	r3, r3, #7
 800de3c:	4903      	ldr	r1, [pc, #12]	; (800de4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800de3e:	5ccb      	ldrb	r3, [r1, r3]
 800de40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800de44:	4618      	mov	r0, r3
 800de46:	bd80      	pop	{r7, pc}
 800de48:	40023800 	.word	0x40023800
 800de4c:	08010660 	.word	0x08010660

0800de50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	220f      	movs	r2, #15
 800de5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800de60:	4b11      	ldr	r3, [pc, #68]	; (800dea8 <HAL_RCC_GetClockConfig+0x58>)
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f003 0203 	and.w	r2, r3, #3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800de6c:	4b0e      	ldr	r3, [pc, #56]	; (800dea8 <HAL_RCC_GetClockConfig+0x58>)
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800de78:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <HAL_RCC_GetClockConfig+0x58>)
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800de84:	4b08      	ldr	r3, [pc, #32]	; (800dea8 <HAL_RCC_GetClockConfig+0x58>)
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	08db      	lsrs	r3, r3, #3
 800de8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800de92:	4b06      	ldr	r3, [pc, #24]	; (800deac <HAL_RCC_GetClockConfig+0x5c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0201 	and.w	r2, r3, #1
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	601a      	str	r2, [r3, #0]
}
 800de9e:	bf00      	nop
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bc80      	pop	{r7}
 800dea6:	4770      	bx	lr
 800dea8:	40023800 	.word	0x40023800
 800deac:	40023c00 	.word	0x40023c00

0800deb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800deb8:	2300      	movs	r3, #0
 800deba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800debc:	4b29      	ldr	r3, [pc, #164]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d12c      	bne.n	800df22 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dec8:	4b26      	ldr	r3, [pc, #152]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800deca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800decc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d005      	beq.n	800dee0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800ded4:	4b24      	ldr	r3, [pc, #144]	; (800df68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	e016      	b.n	800df0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dee0:	4b20      	ldr	r3, [pc, #128]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800dee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee4:	4a1f      	ldr	r2, [pc, #124]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800dee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800deea:	6253      	str	r3, [r2, #36]	; 0x24
 800deec:	4b1d      	ldr	r3, [pc, #116]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800deee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800def8:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800df00:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800df02:	4b18      	ldr	r3, [pc, #96]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	4a17      	ldr	r2, [pc, #92]	; (800df64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800df08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df0c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800df14:	d105      	bne.n	800df22 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800df1c:	d101      	bne.n	800df22 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800df1e:	2301      	movs	r3, #1
 800df20:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d105      	bne.n	800df34 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800df28:	4b10      	ldr	r3, [pc, #64]	; (800df6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a0f      	ldr	r2, [pc, #60]	; (800df6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800df2e:	f043 0304 	orr.w	r3, r3, #4
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	4b0d      	ldr	r3, [pc, #52]	; (800df6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f023 0201 	bic.w	r2, r3, #1
 800df3c:	490b      	ldr	r1, [pc, #44]	; (800df6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	4313      	orrs	r3, r2
 800df42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800df44:	4b09      	ldr	r3, [pc, #36]	; (800df6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d001      	beq.n	800df56 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	371c      	adds	r7, #28
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bc80      	pop	{r7}
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	40023800 	.word	0x40023800
 800df68:	40007000 	.word	0x40007000
 800df6c:	40023c00 	.word	0x40023c00

0800df70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e01d      	b.n	800dfbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d106      	bne.n	800df9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f815 	bl	800dfc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4619      	mov	r1, r3
 800dfae:	4610      	mov	r0, r2
 800dfb0:	f000 f936 	bl	800e220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dfc6:	b480      	push	{r7}
 800dfc8:	b083      	sub	sp, #12
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dfce:	bf00      	nop
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bc80      	pop	{r7}
 800dfd6:	4770      	bx	lr

0800dfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f042 0201 	orr.w	r2, r2, #1
 800dfee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b06      	cmp	r3, #6
 800e000:	d007      	beq.n	800e012 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f042 0201 	orr.w	r2, r2, #1
 800e010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	bc80      	pop	{r7}
 800e01c:	4770      	bx	lr

0800e01e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b082      	sub	sp, #8
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	f003 0302 	and.w	r3, r3, #2
 800e030:	2b02      	cmp	r3, #2
 800e032:	d122      	bne.n	800e07a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d11b      	bne.n	800e07a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f06f 0202 	mvn.w	r2, #2
 800e04a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	f003 0303 	and.w	r3, r3, #3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d003      	beq.n	800e068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 f8c1 	bl	800e1e8 <HAL_TIM_IC_CaptureCallback>
 800e066:	e005      	b.n	800e074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f8b4 	bl	800e1d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f8c3 	bl	800e1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b04      	cmp	r3, #4
 800e086:	d122      	bne.n	800e0ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	f003 0304 	and.w	r3, r3, #4
 800e092:	2b04      	cmp	r3, #4
 800e094:	d11b      	bne.n	800e0ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f06f 0204 	mvn.w	r2, #4
 800e09e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f897 	bl	800e1e8 <HAL_TIM_IC_CaptureCallback>
 800e0ba:	e005      	b.n	800e0c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f88a 	bl	800e1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f899 	bl	800e1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	f003 0308 	and.w	r3, r3, #8
 800e0d8:	2b08      	cmp	r3, #8
 800e0da:	d122      	bne.n	800e122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b08      	cmp	r3, #8
 800e0e8:	d11b      	bne.n	800e122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f06f 0208 	mvn.w	r2, #8
 800e0f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2204      	movs	r2, #4
 800e0f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	69db      	ldr	r3, [r3, #28]
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f86d 	bl	800e1e8 <HAL_TIM_IC_CaptureCallback>
 800e10e:	e005      	b.n	800e11c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f860 	bl	800e1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 f86f 	bl	800e1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b10      	cmp	r3, #16
 800e12e:	d122      	bne.n	800e176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	f003 0310 	and.w	r3, r3, #16
 800e13a:	2b10      	cmp	r3, #16
 800e13c:	d11b      	bne.n	800e176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f06f 0210 	mvn.w	r2, #16
 800e146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2208      	movs	r2, #8
 800e14c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69db      	ldr	r3, [r3, #28]
 800e154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f843 	bl	800e1e8 <HAL_TIM_IC_CaptureCallback>
 800e162:	e005      	b.n	800e170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f836 	bl	800e1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f845 	bl	800e1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	2b01      	cmp	r3, #1
 800e182:	d10e      	bne.n	800e1a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	f003 0301 	and.w	r3, r3, #1
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d107      	bne.n	800e1a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f06f 0201 	mvn.w	r2, #1
 800e19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7fe fdf9 	bl	800cd94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	691b      	ldr	r3, [r3, #16]
 800e1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ac:	2b40      	cmp	r3, #64	; 0x40
 800e1ae:	d10e      	bne.n	800e1ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ba:	2b40      	cmp	r3, #64	; 0x40
 800e1bc:	d107      	bne.n	800e1ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 f81f 	bl	800e20c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b083      	sub	sp, #12
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1de:	bf00      	nop
 800e1e0:	370c      	adds	r7, #12
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bc80      	pop	{r7}
 800e1e6:	4770      	bx	lr

0800e1e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bc80      	pop	{r7}
 800e1f8:	4770      	bx	lr

0800e1fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e202:	bf00      	nop
 800e204:	370c      	adds	r7, #12
 800e206:	46bd      	mov	sp, r7
 800e208:	bc80      	pop	{r7}
 800e20a:	4770      	bx	lr

0800e20c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	bc80      	pop	{r7}
 800e21c:	4770      	bx	lr
 800e21e:	adde      	add	r5, sp, #888	; 0x378

0800e220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e236:	d00f      	beq.n	800e258 <TIM_Base_SetConfig+0x38>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a2b      	ldr	r2, [pc, #172]	; (800e2e8 <TIM_Base_SetConfig+0xc8>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d00b      	beq.n	800e258 <TIM_Base_SetConfig+0x38>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a2a      	ldr	r2, [pc, #168]	; (800e2ec <TIM_Base_SetConfig+0xcc>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d007      	beq.n	800e258 <TIM_Base_SetConfig+0x38>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a29      	ldr	r2, [pc, #164]	; (800e2f0 <TIM_Base_SetConfig+0xd0>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d003      	beq.n	800e258 <TIM_Base_SetConfig+0x38>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4a28      	ldr	r2, [pc, #160]	; (800e2f4 <TIM_Base_SetConfig+0xd4>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d108      	bne.n	800e26a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e25e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	4313      	orrs	r3, r2
 800e268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e270:	d017      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a1c      	ldr	r2, [pc, #112]	; (800e2e8 <TIM_Base_SetConfig+0xc8>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d013      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a1b      	ldr	r2, [pc, #108]	; (800e2ec <TIM_Base_SetConfig+0xcc>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00f      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a1a      	ldr	r2, [pc, #104]	; (800e2f0 <TIM_Base_SetConfig+0xd0>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d00b      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a19      	ldr	r2, [pc, #100]	; (800e2f4 <TIM_Base_SetConfig+0xd4>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d007      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a18      	ldr	r2, [pc, #96]	; (800e2f8 <TIM_Base_SetConfig+0xd8>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d003      	beq.n	800e2a2 <TIM_Base_SetConfig+0x82>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a17      	ldr	r2, [pc, #92]	; (800e2fc <TIM_Base_SetConfig+0xdc>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d108      	bne.n	800e2b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	615a      	str	r2, [r3, #20]
}
 800e2de:	bf00      	nop
 800e2e0:	3714      	adds	r7, #20
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bc80      	pop	{r7}
 800e2e6:	4770      	bx	lr
 800e2e8:	40000400 	.word	0x40000400
 800e2ec:	40000800 	.word	0x40000800
 800e2f0:	40000c00 	.word	0x40000c00
 800e2f4:	40010800 	.word	0x40010800
 800e2f8:	40010c00 	.word	0x40010c00
 800e2fc:	40011000 	.word	0x40011000

0800e300 <LL_GPIO_SetPinMode>:
{
 800e300:	b480      	push	{r7}
 800e302:	b089      	sub	sp, #36	; 0x24
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	fa93 f3a3 	rbit	r3, r3
 800e31a:	613b      	str	r3, [r7, #16]
  return result;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	fab3 f383 	clz	r3, r3
 800e322:	b2db      	uxtb	r3, r3
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	2103      	movs	r1, #3
 800e328:	fa01 f303 	lsl.w	r3, r1, r3
 800e32c:	43db      	mvns	r3, r3
 800e32e:	401a      	ands	r2, r3
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	fa93 f3a3 	rbit	r3, r3
 800e33a:	61bb      	str	r3, [r7, #24]
  return result;
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	fab3 f383 	clz	r3, r3
 800e342:	b2db      	uxtb	r3, r3
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	6879      	ldr	r1, [r7, #4]
 800e348:	fa01 f303 	lsl.w	r3, r1, r3
 800e34c:	431a      	orrs	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	601a      	str	r2, [r3, #0]
}
 800e352:	bf00      	nop
 800e354:	3724      	adds	r7, #36	; 0x24
 800e356:	46bd      	mov	sp, r7
 800e358:	bc80      	pop	{r7}
 800e35a:	4770      	bx	lr

0800e35c <LL_GPIO_SetPinOutputType>:
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	685a      	ldr	r2, [r3, #4]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	43db      	mvns	r3, r3
 800e370:	401a      	ands	r2, r3
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	fb01 f303 	mul.w	r3, r1, r3
 800e37a:	431a      	orrs	r2, r3
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	605a      	str	r2, [r3, #4]
}
 800e380:	bf00      	nop
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	bc80      	pop	{r7}
 800e388:	4770      	bx	lr

0800e38a <LL_GPIO_SetPinSpeed>:
{
 800e38a:	b480      	push	{r7}
 800e38c:	b089      	sub	sp, #36	; 0x24
 800e38e:	af00      	add	r7, sp, #0
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	60b9      	str	r1, [r7, #8]
 800e394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	689a      	ldr	r2, [r3, #8]
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	fa93 f3a3 	rbit	r3, r3
 800e3a4:	613b      	str	r3, [r7, #16]
  return result;
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	fab3 f383 	clz	r3, r3
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	2103      	movs	r1, #3
 800e3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3b6:	43db      	mvns	r3, r3
 800e3b8:	401a      	ands	r2, r3
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	fa93 f3a3 	rbit	r3, r3
 800e3c4:	61bb      	str	r3, [r7, #24]
  return result;
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	fab3 f383 	clz	r3, r3
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	609a      	str	r2, [r3, #8]
}
 800e3dc:	bf00      	nop
 800e3de:	3724      	adds	r7, #36	; 0x24
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bc80      	pop	{r7}
 800e3e4:	4770      	bx	lr

0800e3e6 <LL_GPIO_SetPinPull>:
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b089      	sub	sp, #36	; 0x24
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	60f8      	str	r0, [r7, #12]
 800e3ee:	60b9      	str	r1, [r7, #8]
 800e3f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	68da      	ldr	r2, [r3, #12]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	fa93 f3a3 	rbit	r3, r3
 800e400:	613b      	str	r3, [r7, #16]
  return result;
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	fab3 f383 	clz	r3, r3
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	2103      	movs	r1, #3
 800e40e:	fa01 f303 	lsl.w	r3, r1, r3
 800e412:	43db      	mvns	r3, r3
 800e414:	401a      	ands	r2, r3
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	fa93 f3a3 	rbit	r3, r3
 800e420:	61bb      	str	r3, [r7, #24]
  return result;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	fab3 f383 	clz	r3, r3
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	fa01 f303 	lsl.w	r3, r1, r3
 800e432:	431a      	orrs	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	60da      	str	r2, [r3, #12]
}
 800e438:	bf00      	nop
 800e43a:	3724      	adds	r7, #36	; 0x24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bc80      	pop	{r7}
 800e440:	4770      	bx	lr

0800e442 <LL_GPIO_SetAFPin_0_7>:
{
 800e442:	b480      	push	{r7}
 800e444:	b089      	sub	sp, #36	; 0x24
 800e446:	af00      	add	r7, sp, #0
 800e448:	60f8      	str	r0, [r7, #12]
 800e44a:	60b9      	str	r1, [r7, #8]
 800e44c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6a1a      	ldr	r2, [r3, #32]
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	fa93 f3a3 	rbit	r3, r3
 800e45c:	613b      	str	r3, [r7, #16]
  return result;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	fab3 f383 	clz	r3, r3
 800e464:	b2db      	uxtb	r3, r3
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	210f      	movs	r1, #15
 800e46a:	fa01 f303 	lsl.w	r3, r1, r3
 800e46e:	43db      	mvns	r3, r3
 800e470:	401a      	ands	r2, r3
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	fa93 f3a3 	rbit	r3, r3
 800e47c:	61bb      	str	r3, [r7, #24]
  return result;
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	fab3 f383 	clz	r3, r3
 800e484:	b2db      	uxtb	r3, r3
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	fa01 f303 	lsl.w	r3, r1, r3
 800e48e:	431a      	orrs	r2, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	621a      	str	r2, [r3, #32]
}
 800e494:	bf00      	nop
 800e496:	3724      	adds	r7, #36	; 0x24
 800e498:	46bd      	mov	sp, r7
 800e49a:	bc80      	pop	{r7}
 800e49c:	4770      	bx	lr

0800e49e <LL_GPIO_SetAFPin_8_15>:
{
 800e49e:	b480      	push	{r7}
 800e4a0:	b089      	sub	sp, #36	; 0x24
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	60f8      	str	r0, [r7, #12]
 800e4a6:	60b9      	str	r1, [r7, #8]
 800e4a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	0a1b      	lsrs	r3, r3, #8
 800e4b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	fa93 f3a3 	rbit	r3, r3
 800e4ba:	613b      	str	r3, [r7, #16]
  return result;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	fab3 f383 	clz	r3, r3
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	210f      	movs	r1, #15
 800e4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4cc:	43db      	mvns	r3, r3
 800e4ce:	401a      	ands	r2, r3
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	0a1b      	lsrs	r3, r3, #8
 800e4d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	fa93 f3a3 	rbit	r3, r3
 800e4dc:	61bb      	str	r3, [r7, #24]
  return result;
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	fab3 f383 	clz	r3, r3
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ee:	431a      	orrs	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e4f4:	bf00      	nop
 800e4f6:	3724      	adds	r7, #36	; 0x24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bc80      	pop	{r7}
 800e4fc:	4770      	bx	lr

0800e4fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b088      	sub	sp, #32
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800e508:	2300      	movs	r3, #0
 800e50a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800e50c:	2300      	movs	r3, #0
 800e50e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	fa93 f3a3 	rbit	r3, r3
 800e51c:	613b      	str	r3, [r7, #16]
  return result;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	fab3 f383 	clz	r3, r3
 800e524:	b2db      	uxtb	r3, r3
 800e526:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e528:	e050      	b.n	800e5cc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	2101      	movs	r1, #1
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	fa01 f303 	lsl.w	r3, r1, r3
 800e536:	4013      	ands	r3, r2
 800e538:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d042      	beq.n	800e5c6 <LL_GPIO_Init+0xc8>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d003      	beq.n	800e550 <LL_GPIO_Init+0x52>
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d10d      	bne.n	800e56c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	461a      	mov	r2, r3
 800e556:	69b9      	ldr	r1, [r7, #24]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff ff16 	bl	800e38a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	461a      	mov	r2, r3
 800e564:	69b9      	ldr	r1, [r7, #24]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff fef8 	bl	800e35c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	461a      	mov	r2, r3
 800e572:	69b9      	ldr	r1, [r7, #24]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7ff ff36 	bl	800e3e6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d11a      	bne.n	800e5b8 <LL_GPIO_Init+0xba>
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	fa93 f3a3 	rbit	r3, r3
 800e58c:	60bb      	str	r3, [r7, #8]
  return result;
 800e58e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800e590:	fab3 f383 	clz	r3, r3
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b07      	cmp	r3, #7
 800e598:	d807      	bhi.n	800e5aa <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	69b9      	ldr	r1, [r7, #24]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ff4d 	bl	800e442 <LL_GPIO_SetAFPin_0_7>
 800e5a8:	e006      	b.n	800e5b8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	69b9      	ldr	r1, [r7, #24]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff ff73 	bl	800e49e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	69b9      	ldr	r1, [r7, #24]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff fe9d 	bl	800e300 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1a7      	bne.n	800e52a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3720      	adds	r7, #32
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 800e5e8:	4b03      	ldr	r3, [pc, #12]	; (800e5f8 <LL_RCC_MSI_GetRange+0x14>)
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bc80      	pop	{r7}
 800e5f6:	4770      	bx	lr
 800e5f8:	40023800 	.word	0x40023800

0800e5fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e600:	4b03      	ldr	r3, [pc, #12]	; (800e610 <LL_RCC_GetSysClkSource+0x14>)
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f003 030c 	and.w	r3, r3, #12
}
 800e608:	4618      	mov	r0, r3
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bc80      	pop	{r7}
 800e60e:	4770      	bx	lr
 800e610:	40023800 	.word	0x40023800

0800e614 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e618:	4b03      	ldr	r3, [pc, #12]	; (800e628 <LL_RCC_GetAHBPrescaler+0x14>)
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800e620:	4618      	mov	r0, r3
 800e622:	46bd      	mov	sp, r7
 800e624:	bc80      	pop	{r7}
 800e626:	4770      	bx	lr
 800e628:	40023800 	.word	0x40023800

0800e62c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800e62c:	b480      	push	{r7}
 800e62e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e630:	4b03      	ldr	r3, [pc, #12]	; (800e640 <LL_RCC_GetAPB1Prescaler+0x14>)
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800e638:	4618      	mov	r0, r3
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bc80      	pop	{r7}
 800e63e:	4770      	bx	lr
 800e640:	40023800 	.word	0x40023800

0800e644 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800e644:	b480      	push	{r7}
 800e646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e648:	4b03      	ldr	r3, [pc, #12]	; (800e658 <LL_RCC_GetAPB2Prescaler+0x14>)
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800e650:	4618      	mov	r0, r3
 800e652:	46bd      	mov	sp, r7
 800e654:	bc80      	pop	{r7}
 800e656:	4770      	bx	lr
 800e658:	40023800 	.word	0x40023800

0800e65c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e65c:	b480      	push	{r7}
 800e65e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800e660:	4b03      	ldr	r3, [pc, #12]	; (800e670 <LL_RCC_PLL_GetMainSource+0x14>)
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800e668:	4618      	mov	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bc80      	pop	{r7}
 800e66e:	4770      	bx	lr
 800e670:	40023800 	.word	0x40023800

0800e674 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800e678:	4b03      	ldr	r3, [pc, #12]	; (800e688 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800e680:	4618      	mov	r0, r3
 800e682:	46bd      	mov	sp, r7
 800e684:	bc80      	pop	{r7}
 800e686:	4770      	bx	lr
 800e688:	40023800 	.word	0x40023800

0800e68c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e68c:	b480      	push	{r7}
 800e68e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800e690:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <LL_RCC_PLL_GetDivider+0x14>)
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
}
 800e698:	4618      	mov	r0, r3
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bc80      	pop	{r7}
 800e69e:	4770      	bx	lr
 800e6a0:	40023800 	.word	0x40023800

0800e6a4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800e6ac:	f000 f820 	bl	800e6f0 <RCC_GetSystemClockFreq>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 f868 	bl	800e790 <RCC_GetHCLKClockFreq>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 f876 	bl	800e7bc <RCC_GetPCLK1ClockFreq>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 f882 	bl	800e7e4 <RCC_GetPCLK2ClockFreq>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	60da      	str	r2, [r3, #12]
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	adde      	add	r5, sp, #888	; 0x378

0800e6f0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e6f6:	f7ff ff81 	bl	800e5fc <LL_RCC_GetSysClkSource>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b0c      	cmp	r3, #12
 800e6fe:	d832      	bhi.n	800e766 <RCC_GetSystemClockFreq+0x76>
 800e700:	a201      	add	r2, pc, #4	; (adr r2, 800e708 <RCC_GetSystemClockFreq+0x18>)
 800e702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e706:	bf00      	nop
 800e708:	0800e73d 	.word	0x0800e73d
 800e70c:	0800e767 	.word	0x0800e767
 800e710:	0800e767 	.word	0x0800e767
 800e714:	0800e767 	.word	0x0800e767
 800e718:	0800e753 	.word	0x0800e753
 800e71c:	0800e767 	.word	0x0800e767
 800e720:	0800e767 	.word	0x0800e767
 800e724:	0800e767 	.word	0x0800e767
 800e728:	0800e759 	.word	0x0800e759
 800e72c:	0800e767 	.word	0x0800e767
 800e730:	0800e767 	.word	0x0800e767
 800e734:	0800e767 	.word	0x0800e767
 800e738:	0800e75f 	.word	0x0800e75f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e73c:	f7ff ff52 	bl	800e5e4 <LL_RCC_MSI_GetRange>
 800e740:	4603      	mov	r3, r0
 800e742:	0b5b      	lsrs	r3, r3, #13
 800e744:	3301      	adds	r3, #1
 800e746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e74a:	fa02 f303 	lsl.w	r3, r2, r3
 800e74e:	607b      	str	r3, [r7, #4]
      break;
 800e750:	e014      	b.n	800e77c <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800e752:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <RCC_GetSystemClockFreq+0x98>)
 800e754:	607b      	str	r3, [r7, #4]
      break;
 800e756:	e011      	b.n	800e77c <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e758:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <RCC_GetSystemClockFreq+0x9c>)
 800e75a:	607b      	str	r3, [r7, #4]
      break;
 800e75c:	e00e      	b.n	800e77c <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e75e:	f000 f855 	bl	800e80c <RCC_PLL_GetFreqDomain_SYS>
 800e762:	6078      	str	r0, [r7, #4]
      break;
 800e764:	e00a      	b.n	800e77c <RCC_GetSystemClockFreq+0x8c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e766:	f7ff ff3d 	bl	800e5e4 <LL_RCC_MSI_GetRange>
 800e76a:	4603      	mov	r3, r0
 800e76c:	0b5b      	lsrs	r3, r3, #13
 800e76e:	3301      	adds	r3, #1
 800e770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e774:	fa02 f303 	lsl.w	r3, r2, r3
 800e778:	607b      	str	r3, [r7, #4]
      break;
 800e77a:	bf00      	nop
  }

  return frequency;
 800e77c:	687b      	ldr	r3, [r7, #4]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3708      	adds	r7, #8
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	00f42400 	.word	0x00f42400
 800e78c:	007a1200 	.word	0x007a1200

0800e790 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e798:	f7ff ff3c 	bl	800e614 <LL_RCC_GetAHBPrescaler>
 800e79c:	4603      	mov	r3, r0
 800e79e:	091b      	lsrs	r3, r3, #4
 800e7a0:	f003 030f 	and.w	r3, r3, #15
 800e7a4:	4a04      	ldr	r2, [pc, #16]	; (800e7b8 <RCC_GetHCLKClockFreq+0x28>)
 800e7a6:	5cd3      	ldrb	r3, [r2, r3]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	40d3      	lsrs	r3, r2
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	08010650 	.word	0x08010650

0800e7bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e7c4:	f7ff ff32 	bl	800e62c <LL_RCC_GetAPB1Prescaler>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	0a1b      	lsrs	r3, r3, #8
 800e7cc:	4a04      	ldr	r2, [pc, #16]	; (800e7e0 <RCC_GetPCLK1ClockFreq+0x24>)
 800e7ce:	5cd3      	ldrb	r3, [r2, r3]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	40d3      	lsrs	r3, r2
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08010660 	.word	0x08010660

0800e7e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800e7ec:	f7ff ff2a 	bl	800e644 <LL_RCC_GetAPB2Prescaler>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	0adb      	lsrs	r3, r3, #11
 800e7f4:	4a04      	ldr	r2, [pc, #16]	; (800e808 <RCC_GetPCLK2ClockFreq+0x24>)
 800e7f6:	5cd3      	ldrb	r3, [r2, r3]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	40d3      	lsrs	r3, r2
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	08010660 	.word	0x08010660

0800e80c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
  uint32_t pllsource, pllinputfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e812:	f7ff ff23 	bl	800e65c <LL_RCC_PLL_GetMainSource>
 800e816:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d004      	beq.n	800e828 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e824:	d003      	beq.n	800e82e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800e826:	e005      	b.n	800e834 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e828:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 800e82a:	607b      	str	r3, [r7, #4]
      break;
 800e82c:	e005      	b.n	800e83a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e82e:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800e830:	607b      	str	r3, [r7, #4]
      break;
 800e832:	e002      	b.n	800e83a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800e834:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 800e836:	607b      	str	r3, [r7, #4]
      break;
 800e838:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800e83a:	f7ff ff1b 	bl	800e674 <LL_RCC_PLL_GetMultiplicator>
 800e83e:	4603      	mov	r3, r0
 800e840:	0c9b      	lsrs	r3, r3, #18
 800e842:	4a0a      	ldr	r2, [pc, #40]	; (800e86c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800e844:	5cd3      	ldrb	r3, [r2, r3]
 800e846:	461a      	mov	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	fb03 f402 	mul.w	r4, r3, r2
 800e84e:	f7ff ff1d 	bl	800e68c <LL_RCC_PLL_GetDivider>
 800e852:	4603      	mov	r3, r0
 800e854:	0d9b      	lsrs	r3, r3, #22
 800e856:	3301      	adds	r3, #1
 800e858:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	bd90      	pop	{r4, r7, pc}
 800e864:	00f42400 	.word	0x00f42400
 800e868:	007a1200 	.word	0x007a1200
 800e86c:	08010644 	.word	0x08010644

0800e870 <LL_USART_IsEnabled>:
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e884:	bf0c      	ite	eq
 800e886:	2301      	moveq	r3, #1
 800e888:	2300      	movne	r3, #0
 800e88a:	b2db      	uxtb	r3, r3
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	bc80      	pop	{r7}
 800e894:	4770      	bx	lr

0800e896 <LL_USART_SetStopBitsLength>:
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	431a      	orrs	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	611a      	str	r2, [r3, #16]
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bc80      	pop	{r7}
 800e8b8:	4770      	bx	lr

0800e8ba <LL_USART_SetHWFlowCtrl>:
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	695b      	ldr	r3, [r3, #20]
 800e8c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	431a      	orrs	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	615a      	str	r2, [r3, #20]
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bc80      	pop	{r7}
 800e8dc:	4770      	bx	lr
 800e8de:	adde      	add	r5, sp, #888	; 0x378

0800e8e0 <LL_USART_SetBaudRate>:
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f4:	d152      	bne.n	800e99c <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	009a      	lsls	r2, r3, #2
 800e900:	441a      	add	r2, r3
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90a:	4a4f      	ldr	r2, [pc, #316]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e90c:	fba2 2303 	umull	r2, r3, r2, r3
 800e910:	095b      	lsrs	r3, r3, #5
 800e912:	b29b      	uxth	r3, r3
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	b299      	uxth	r1, r3
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009a      	lsls	r2, r3, #2
 800e922:	441a      	add	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	fbb2 f2f3 	udiv	r2, r2, r3
 800e92c:	4b46      	ldr	r3, [pc, #280]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e92e:	fba3 0302 	umull	r0, r3, r3, r2
 800e932:	095b      	lsrs	r3, r3, #5
 800e934:	2064      	movs	r0, #100	; 0x64
 800e936:	fb00 f303 	mul.w	r3, r0, r3
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	3332      	adds	r3, #50	; 0x32
 800e940:	4a41      	ldr	r2, [pc, #260]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e942:	fba2 2303 	umull	r2, r3, r2, r3
 800e946:	095b      	lsrs	r3, r3, #5
 800e948:	b29b      	uxth	r3, r3
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e952:	b29b      	uxth	r3, r3
 800e954:	440b      	add	r3, r1
 800e956:	b299      	uxth	r1, r3
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	4613      	mov	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4413      	add	r3, r2
 800e960:	009a      	lsls	r2, r3, #2
 800e962:	441a      	add	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	fbb2 f2f3 	udiv	r2, r2, r3
 800e96c:	4b36      	ldr	r3, [pc, #216]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e96e:	fba3 0302 	umull	r0, r3, r3, r2
 800e972:	095b      	lsrs	r3, r3, #5
 800e974:	2064      	movs	r0, #100	; 0x64
 800e976:	fb00 f303 	mul.w	r3, r0, r3
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	00db      	lsls	r3, r3, #3
 800e97e:	3332      	adds	r3, #50	; 0x32
 800e980:	4a31      	ldr	r2, [pc, #196]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e982:	fba2 2303 	umull	r2, r3, r2, r3
 800e986:	095b      	lsrs	r3, r3, #5
 800e988:	b29b      	uxth	r3, r3
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	b29b      	uxth	r3, r3
 800e990:	440b      	add	r3, r1
 800e992:	b29b      	uxth	r3, r3
 800e994:	461a      	mov	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	609a      	str	r2, [r3, #8]
}
 800e99a:	e04f      	b.n	800ea3c <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	009a      	lsls	r2, r3, #2
 800e9a6:	441a      	add	r2, r3
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b0:	4a25      	ldr	r2, [pc, #148]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b6:	095b      	lsrs	r3, r3, #5
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	011b      	lsls	r3, r3, #4
 800e9bc:	b299      	uxth	r1, r3
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4413      	add	r3, r2
 800e9c6:	009a      	lsls	r2, r3, #2
 800e9c8:	441a      	add	r2, r3
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800e9d2:	4b1d      	ldr	r3, [pc, #116]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e9d4:	fba3 0302 	umull	r0, r3, r3, r2
 800e9d8:	095b      	lsrs	r3, r3, #5
 800e9da:	2064      	movs	r0, #100	; 0x64
 800e9dc:	fb00 f303 	mul.w	r3, r0, r3
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	3332      	adds	r3, #50	; 0x32
 800e9e6:	4a18      	ldr	r2, [pc, #96]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800e9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e9ec:	095b      	lsrs	r3, r3, #5
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	440b      	add	r3, r1
 800e9f8:	b299      	uxth	r1, r3
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4413      	add	r3, r2
 800ea02:	009a      	lsls	r2, r3, #2
 800ea04:	441a      	add	r2, r3
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ea0e:	4b0e      	ldr	r3, [pc, #56]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800ea10:	fba3 0302 	umull	r0, r3, r3, r2
 800ea14:	095b      	lsrs	r3, r3, #5
 800ea16:	2064      	movs	r0, #100	; 0x64
 800ea18:	fb00 f303 	mul.w	r3, r0, r3
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	011b      	lsls	r3, r3, #4
 800ea20:	3332      	adds	r3, #50	; 0x32
 800ea22:	4a09      	ldr	r2, [pc, #36]	; (800ea48 <LL_USART_SetBaudRate+0x168>)
 800ea24:	fba2 2303 	umull	r2, r3, r2, r3
 800ea28:	095b      	lsrs	r3, r3, #5
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	f003 030f 	and.w	r3, r3, #15
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	440b      	add	r3, r1
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	461a      	mov	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	609a      	str	r2, [r3, #8]
}
 800ea3c:	bf00      	nop
 800ea3e:	3714      	adds	r7, #20
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bc80      	pop	{r7}
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	51eb851f 	.word	0x51eb851f

0800ea4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff ff06 	bl	800e870 <LL_USART_IsEnabled>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d157      	bne.n	800eb1a <LL_USART_Init+0xce>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ea72:	f023 030c 	bic.w	r3, r3, #12
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	6851      	ldr	r1, [r2, #4]
 800ea7a:	683a      	ldr	r2, [r7, #0]
 800ea7c:	68d2      	ldr	r2, [r2, #12]
 800ea7e:	4311      	orrs	r1, r2
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	6912      	ldr	r2, [r2, #16]
 800ea84:	4311      	orrs	r1, r2
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	6992      	ldr	r2, [r2, #24]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	4619      	mov	r1, r3
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff fefc 	bl	800e896 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	695b      	ldr	r3, [r3, #20]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff ff08 	bl	800e8ba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800eaaa:	f107 0308 	add.w	r3, r7, #8
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7ff fdf8 	bl	800e6a4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a1b      	ldr	r2, [pc, #108]	; (800eb24 <LL_USART_Init+0xd8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d102      	bne.n	800eac2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	61bb      	str	r3, [r7, #24]
 800eac0:	e01a      	b.n	800eaf8 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a18      	ldr	r2, [pc, #96]	; (800eb28 <LL_USART_Init+0xdc>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d102      	bne.n	800ead0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	61bb      	str	r3, [r7, #24]
 800eace:	e013      	b.n	800eaf8 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART3)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a16      	ldr	r2, [pc, #88]	; (800eb2c <LL_USART_Init+0xe0>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d102      	bne.n	800eade <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	61bb      	str	r3, [r7, #24]
 800eadc:	e00c      	b.n	800eaf8 <LL_USART_Init+0xac>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a13      	ldr	r2, [pc, #76]	; (800eb30 <LL_USART_Init+0xe4>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d102      	bne.n	800eaec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	61bb      	str	r3, [r7, #24]
 800eaea:	e005      	b.n	800eaf8 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	4a11      	ldr	r2, [pc, #68]	; (800eb34 <LL_USART_Init+0xe8>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d101      	bne.n	800eaf8 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00d      	beq.n	800eb1a <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d009      	beq.n	800eb1a <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 800eb06:	2300      	movs	r3, #0
 800eb08:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	699a      	ldr	r2, [r3, #24]
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	69b9      	ldr	r1, [r7, #24]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7ff fee3 	bl	800e8e0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800eb1a:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3720      	adds	r7, #32
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	40013800 	.word	0x40013800
 800eb28:	40004400 	.word	0x40004400
 800eb2c:	40004800 	.word	0x40004800
 800eb30:	40004c00 	.word	0x40004c00
 800eb34:	40005000 	.word	0x40005000

0800eb38 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800eb48:	bf00      	nop
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bc80      	pop	{r7}
 800eb50:	4770      	bx	lr

0800eb52 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b084      	sub	sp, #16
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
 800eb5e:	4603      	mov	r3, r0
 800eb60:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <_out_char+0x1e>
    _putchar(character);
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fb fa2e 	bl	8009fcc <_putchar>
  }
}
 800eb70:	bf00      	nop
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	e002      	b.n	800eb8e <_strnlen_s+0x16>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	60fb      	str	r3, [r7, #12]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d004      	beq.n	800eba0 <_strnlen_s+0x28>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	1e5a      	subs	r2, r3, #1
 800eb9a:	603a      	str	r2, [r7, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1f3      	bne.n	800eb88 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	1ad3      	subs	r3, r2, r3
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bc80      	pop	{r7}
 800ebae:	4770      	bx	lr

0800ebb0 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	2b2f      	cmp	r3, #47	; 0x2f
 800ebbe:	d904      	bls.n	800ebca <_is_digit+0x1a>
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	2b39      	cmp	r3, #57	; 0x39
 800ebc4:	d801      	bhi.n	800ebca <_is_digit+0x1a>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <_is_digit+0x1c>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	b2db      	uxtb	r3, r3
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bc80      	pop	{r7}
 800ebda:	4770      	bx	lr

0800ebdc <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ebe8:	e00e      	b.n	800ec08 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	4613      	mov	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	1c59      	adds	r1, r3, #1
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	6011      	str	r1, [r2, #0]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	4403      	add	r3, r0
 800ec04:	3b30      	subs	r3, #48	; 0x30
 800ec06:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff ffce 	bl	800ebb0 <_is_digit>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1e7      	bne.n	800ebea <_atoi+0xe>
  }
  return i;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800ec24:	b590      	push	{r4, r7, lr}
 800ec26:	b087      	sub	sp, #28
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800ec36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec38:	f003 0302 	and.w	r3, r3, #2
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d125      	bne.n	800ec8c <_out_rev+0x68>
 800ec40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec42:	f003 0301 	and.w	r3, r3, #1
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d120      	bne.n	800ec8c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	e00a      	b.n	800ec66 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	1c53      	adds	r3, r2, #1
 800ec54:	607b      	str	r3, [r7, #4]
 800ec56:	68fc      	ldr	r4, [r7, #12]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	68b9      	ldr	r1, [r7, #8]
 800ec5c:	2020      	movs	r0, #32
 800ec5e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	3301      	adds	r3, #1
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d3f0      	bcc.n	800ec50 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800ec6e:	e00d      	b.n	800ec8c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	3b01      	subs	r3, #1
 800ec74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	4413      	add	r3, r2
 800ec7c:	7818      	ldrb	r0, [r3, #0]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	1c53      	adds	r3, r2, #1
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	68fc      	ldr	r4, [r7, #12]
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68b9      	ldr	r1, [r7, #8]
 800ec8a:	47a0      	blx	r4
  while (len) {
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1ee      	bne.n	800ec70 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800ec92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00e      	beq.n	800ecba <_out_rev+0x96>
    while (idx - start_idx < width) {
 800ec9c:	e007      	b.n	800ecae <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	1c53      	adds	r3, r2, #1
 800eca2:	607b      	str	r3, [r7, #4]
 800eca4:	68fc      	ldr	r4, [r7, #12]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	2020      	movs	r0, #32
 800ecac:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d8f1      	bhi.n	800ec9e <_out_rev+0x7a>
    }
  }

  return idx;
 800ecba:	687b      	ldr	r3, [r7, #4]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd90      	pop	{r4, r7, pc}

0800ecc4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af04      	add	r7, sp, #16
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
 800ecd0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	f003 0302 	and.w	r3, r3, #2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d136      	bne.n	800ed4a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d018      	beq.n	800ed14 <_ntoa_format+0x50>
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d013      	beq.n	800ed14 <_ntoa_format+0x50>
 800ecec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d104      	bne.n	800ecfe <_ntoa_format+0x3a>
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	f003 030c 	and.w	r3, r3, #12
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00a      	beq.n	800ed14 <_ntoa_format+0x50>
      width--;
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	3b01      	subs	r3, #1
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed04:	e006      	b.n	800ed14 <_ntoa_format+0x50>
      buf[len++] = '0';
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	61fa      	str	r2, [r7, #28]
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	4413      	add	r3, r2
 800ed10:	2230      	movs	r2, #48	; 0x30
 800ed12:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed14:	69fa      	ldr	r2, [r7, #28]
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d20a      	bcs.n	800ed32 <_ntoa_format+0x6e>
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	2b1f      	cmp	r3, #31
 800ed20:	d9f1      	bls.n	800ed06 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed22:	e006      	b.n	800ed32 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	61fa      	str	r2, [r7, #28]
 800ed2a:	69ba      	ldr	r2, [r7, #24]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	2230      	movs	r2, #48	; 0x30
 800ed30:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	f003 0301 	and.w	r3, r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <_ntoa_format+0x86>
 800ed3c:	69fa      	ldr	r2, [r7, #28]
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d202      	bcs.n	800ed4a <_ntoa_format+0x86>
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	2b1f      	cmp	r3, #31
 800ed48:	d9ec      	bls.n	800ed24 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	f003 0310 	and.w	r3, r3, #16
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d058      	beq.n	800ee06 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d116      	bne.n	800ed8c <_ntoa_format+0xc8>
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d013      	beq.n	800ed8c <_ntoa_format+0xc8>
 800ed64:	69fa      	ldr	r2, [r7, #28]
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d003      	beq.n	800ed74 <_ntoa_format+0xb0>
 800ed6c:	69fa      	ldr	r2, [r7, #28]
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d10b      	bne.n	800ed8c <_ntoa_format+0xc8>
      len--;
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d005      	beq.n	800ed8c <_ntoa_format+0xc8>
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	2b10      	cmp	r3, #16
 800ed84:	d102      	bne.n	800ed8c <_ntoa_format+0xc8>
        len--;
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	2b10      	cmp	r3, #16
 800ed90:	d10f      	bne.n	800edb2 <_ntoa_format+0xee>
 800ed92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed94:	f003 0320 	and.w	r3, r3, #32
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10a      	bne.n	800edb2 <_ntoa_format+0xee>
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	2b1f      	cmp	r3, #31
 800eda0:	d807      	bhi.n	800edb2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	61fa      	str	r2, [r7, #28]
 800eda8:	69ba      	ldr	r2, [r7, #24]
 800edaa:	4413      	add	r3, r2
 800edac:	2278      	movs	r2, #120	; 0x78
 800edae:	701a      	strb	r2, [r3, #0]
 800edb0:	e01f      	b.n	800edf2 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800edb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb4:	2b10      	cmp	r3, #16
 800edb6:	d10f      	bne.n	800edd8 <_ntoa_format+0x114>
 800edb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edba:	f003 0320 	and.w	r3, r3, #32
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00a      	beq.n	800edd8 <_ntoa_format+0x114>
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	2b1f      	cmp	r3, #31
 800edc6:	d807      	bhi.n	800edd8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	61fa      	str	r2, [r7, #28]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	4413      	add	r3, r2
 800edd2:	2258      	movs	r2, #88	; 0x58
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	e00c      	b.n	800edf2 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d109      	bne.n	800edf2 <_ntoa_format+0x12e>
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	2b1f      	cmp	r3, #31
 800ede2:	d806      	bhi.n	800edf2 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	1c5a      	adds	r2, r3, #1
 800ede8:	61fa      	str	r2, [r7, #28]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	4413      	add	r3, r2
 800edee:	2262      	movs	r2, #98	; 0x62
 800edf0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	2b1f      	cmp	r3, #31
 800edf6:	d806      	bhi.n	800ee06 <_ntoa_format+0x142>
      buf[len++] = '0';
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	61fa      	str	r2, [r7, #28]
 800edfe:	69ba      	ldr	r2, [r7, #24]
 800ee00:	4413      	add	r3, r2
 800ee02:	2230      	movs	r2, #48	; 0x30
 800ee04:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	2b1f      	cmp	r3, #31
 800ee0a:	d824      	bhi.n	800ee56 <_ntoa_format+0x192>
    if (negative) {
 800ee0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d007      	beq.n	800ee24 <_ntoa_format+0x160>
      buf[len++] = '-';
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	61fa      	str	r2, [r7, #28]
 800ee1a:	69ba      	ldr	r2, [r7, #24]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	222d      	movs	r2, #45	; 0x2d
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e018      	b.n	800ee56 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800ee24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee26:	f003 0304 	and.w	r3, r3, #4
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d007      	beq.n	800ee3e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	61fa      	str	r2, [r7, #28]
 800ee34:	69ba      	ldr	r2, [r7, #24]
 800ee36:	4413      	add	r3, r2
 800ee38:	222b      	movs	r2, #43	; 0x2b
 800ee3a:	701a      	strb	r2, [r3, #0]
 800ee3c:	e00b      	b.n	800ee56 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	f003 0308 	and.w	r3, r3, #8
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d006      	beq.n	800ee56 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	61fa      	str	r2, [r7, #28]
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	4413      	add	r3, r2
 800ee52:	2220      	movs	r2, #32
 800ee54:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	9303      	str	r3, [sp, #12]
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	9302      	str	r3, [sp, #8]
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	9301      	str	r3, [sp, #4]
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	68b9      	ldr	r1, [r7, #8]
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff fed9 	bl	800ec24 <_out_rev>
 800ee72:	4603      	mov	r3, r0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b096      	sub	sp, #88	; 0x58
 800ee80:	af08      	add	r7, sp, #32
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ee8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d103      	bne.n	800ee9c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800ee94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee96:	f023 0310 	bic.w	r3, r3, #16
 800ee9a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ee9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <_ntoa_long+0x30>
 800eea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d033      	beq.n	800ef14 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800eeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800eeb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eeb6:	fb01 f202 	mul.w	r2, r1, r2
 800eeba:	1a9b      	subs	r3, r3, r2
 800eebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800eec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eec4:	2b09      	cmp	r3, #9
 800eec6:	d804      	bhi.n	800eed2 <_ntoa_long+0x56>
 800eec8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eecc:	3330      	adds	r3, #48	; 0x30
 800eece:	b2da      	uxtb	r2, r3
 800eed0:	e00d      	b.n	800eeee <_ntoa_long+0x72>
 800eed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eed4:	f003 0320 	and.w	r3, r3, #32
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <_ntoa_long+0x64>
 800eedc:	2241      	movs	r2, #65	; 0x41
 800eede:	e000      	b.n	800eee2 <_ntoa_long+0x66>
 800eee0:	2261      	movs	r2, #97	; 0x61
 800eee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eee6:	4413      	add	r3, r2
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	3b0a      	subs	r3, #10
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef0:	1c59      	adds	r1, r3, #1
 800eef2:	6379      	str	r1, [r7, #52]	; 0x34
 800eef4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800eef8:	440b      	add	r3, r1
 800eefa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800eefe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef06:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ef08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d002      	beq.n	800ef14 <_ntoa_long+0x98>
 800ef0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef10:	2b1f      	cmp	r3, #31
 800ef12:	d9cb      	bls.n	800eeac <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ef14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef16:	9306      	str	r3, [sp, #24]
 800ef18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef1a:	9305      	str	r3, [sp, #20]
 800ef1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef22:	9303      	str	r3, [sp, #12]
 800ef24:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ef28:	9302      	str	r3, [sp, #8]
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	f107 0310 	add.w	r3, r7, #16
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7ff fec2 	bl	800ecc4 <_ntoa_format>
 800ef40:	4603      	mov	r3, r0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3738      	adds	r7, #56	; 0x38
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b096      	sub	sp, #88	; 0x58
 800ef4e:	af08      	add	r7, sp, #32
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	607a      	str	r2, [r7, #4]
 800ef56:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ef5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef60:	4313      	orrs	r3, r2
 800ef62:	d103      	bne.n	800ef6c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800ef64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef66:	f023 0310 	bic.w	r3, r3, #16
 800ef6a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ef6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <_ntoa_long_long+0x34>
 800ef76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	d038      	beq.n	800eff0 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 800ef7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ef82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef86:	f7fa fd01 	bl	800998c <__aeabi_uldivmod>
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ef90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef94:	2b09      	cmp	r3, #9
 800ef96:	d804      	bhi.n	800efa2 <_ntoa_long_long+0x58>
 800ef98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef9c:	3330      	adds	r3, #48	; 0x30
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	e00d      	b.n	800efbe <_ntoa_long_long+0x74>
 800efa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efa4:	f003 0320 	and.w	r3, r3, #32
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <_ntoa_long_long+0x66>
 800efac:	2241      	movs	r2, #65	; 0x41
 800efae:	e000      	b.n	800efb2 <_ntoa_long_long+0x68>
 800efb0:	2261      	movs	r2, #97	; 0x61
 800efb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800efb6:	4413      	add	r3, r2
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	3b0a      	subs	r3, #10
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc0:	1c59      	adds	r1, r3, #1
 800efc2:	6379      	str	r1, [r7, #52]	; 0x34
 800efc4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800efc8:	440b      	add	r3, r1
 800efca:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800efce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800efd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800efd6:	f7fa fcd9 	bl	800998c <__aeabi_uldivmod>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800efe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800efe6:	4313      	orrs	r3, r2
 800efe8:	d002      	beq.n	800eff0 <_ntoa_long_long+0xa6>
 800efea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efec:	2b1f      	cmp	r3, #31
 800efee:	d9c6      	bls.n	800ef7e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800eff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eff4:	9206      	str	r2, [sp, #24]
 800eff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eff8:	9205      	str	r2, [sp, #20]
 800effa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800effc:	9204      	str	r2, [sp, #16]
 800effe:	9303      	str	r3, [sp, #12]
 800f000:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f004:	9302      	str	r3, [sp, #8]
 800f006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f008:	9301      	str	r3, [sp, #4]
 800f00a:	f107 0310 	add.w	r3, r7, #16
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	68b9      	ldr	r1, [r7, #8]
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f7ff fe54 	bl	800ecc4 <_ntoa_format>
 800f01c:	4603      	mov	r3, r0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3738      	adds	r7, #56	; 0x38
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	adde      	add	r5, sp, #888	; 0x378

0800f028 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f028:	b590      	push	{r4, r7, lr}
 800f02a:	b09d      	sub	sp, #116	; 0x74
 800f02c:	af06      	add	r7, sp, #24
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800f036:	2300      	movs	r3, #0
 800f038:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800f03a:	f04f 0200 	mov.w	r2, #0
 800f03e:	f04f 0300 	mov.w	r3, #0
 800f042:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800f046:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f04a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f04e:	f7fa fc23 	bl	8009898 <__aeabi_dcmpeq>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10f      	bne.n	800f078 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800f058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f05a:	9303      	str	r3, [sp, #12]
 800f05c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f05e:	9302      	str	r3, [sp, #8]
 800f060:	2303      	movs	r3, #3
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	4baa      	ldr	r3, [pc, #680]	; (800f310 <_ftoa+0x2e8>)
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	68b9      	ldr	r1, [r7, #8]
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7ff fdd8 	bl	800ec24 <_out_rev>
 800f074:	4603      	mov	r3, r0
 800f076:	e22d      	b.n	800f4d4 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 800f078:	f04f 32ff 	mov.w	r2, #4294967295
 800f07c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f080:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f084:	f7fa fc12 	bl	80098ac <__aeabi_dcmplt>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00f      	beq.n	800f0ae <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800f08e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f090:	9303      	str	r3, [sp, #12]
 800f092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f094:	9302      	str	r3, [sp, #8]
 800f096:	2304      	movs	r3, #4
 800f098:	9301      	str	r3, [sp, #4]
 800f09a:	4b9e      	ldr	r3, [pc, #632]	; (800f314 <_ftoa+0x2ec>)
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7ff fdbd 	bl	800ec24 <_out_rev>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	e212      	b.n	800f4d4 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 800f0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b2:	4b99      	ldr	r3, [pc, #612]	; (800f318 <_ftoa+0x2f0>)
 800f0b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f0b8:	f7fa fc16 	bl	80098e8 <__aeabi_dcmpgt>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d01d      	beq.n	800f0fe <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800f0c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0c4:	f003 0304 	and.w	r3, r3, #4
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <_ftoa+0xa8>
 800f0cc:	4b93      	ldr	r3, [pc, #588]	; (800f31c <_ftoa+0x2f4>)
 800f0ce:	e000      	b.n	800f0d2 <_ftoa+0xaa>
 800f0d0:	4b93      	ldr	r3, [pc, #588]	; (800f320 <_ftoa+0x2f8>)
 800f0d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f0d4:	f002 0204 	and.w	r2, r2, #4
 800f0d8:	2a00      	cmp	r2, #0
 800f0da:	d001      	beq.n	800f0e0 <_ftoa+0xb8>
 800f0dc:	2204      	movs	r2, #4
 800f0de:	e000      	b.n	800f0e2 <_ftoa+0xba>
 800f0e0:	2203      	movs	r2, #3
 800f0e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f0e4:	9103      	str	r1, [sp, #12]
 800f0e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f0e8:	9102      	str	r1, [sp, #8]
 800f0ea:	9201      	str	r2, [sp, #4]
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	68b9      	ldr	r1, [r7, #8]
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f7ff fd95 	bl	800ec24 <_out_rev>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	e1ea      	b.n	800f4d4 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800f0fe:	a380      	add	r3, pc, #512	; (adr r3, 800f300 <_ftoa+0x2d8>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f108:	f7fa fbee 	bl	80098e8 <__aeabi_dcmpgt>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d109      	bne.n	800f126 <_ftoa+0xfe>
 800f112:	a37d      	add	r3, pc, #500	; (adr r3, 800f308 <_ftoa+0x2e0>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f11c:	f7fa fbc6 	bl	80098ac <__aeabi_dcmplt>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d011      	beq.n	800f14a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f128:	9304      	str	r3, [sp, #16]
 800f12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f12c:	9303      	str	r3, [sp, #12]
 800f12e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f130:	9302      	str	r3, [sp, #8]
 800f132:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f136:	e9cd 2300 	strd	r2, r3, [sp]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 f9d1 	bl	800f4e8 <_etoa>
 800f146:	4603      	mov	r3, r0
 800f148:	e1c4      	b.n	800f4d4 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800f14a:	2300      	movs	r3, #0
 800f14c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 800f150:	f04f 0200 	mov.w	r2, #0
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f15c:	f7fa fba6 	bl	80098ac <__aeabi_dcmplt>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00e      	beq.n	800f184 <_ftoa+0x15c>
    negative = true;
 800f166:	2301      	movs	r3, #1
 800f168:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800f16c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f170:	f04f 0000 	mov.w	r0, #0
 800f174:	f04f 0100 	mov.w	r1, #0
 800f178:	f7f9 ff6e 	bl	8009058 <__aeabi_dsub>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800f184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10e      	bne.n	800f1ac <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f18e:	2306      	movs	r3, #6
 800f190:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f192:	e00b      	b.n	800f1ac <_ftoa+0x184>
    buf[len++] = '0';
 800f194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f196:	1c5a      	adds	r2, r3, #1
 800f198:	657a      	str	r2, [r7, #84]	; 0x54
 800f19a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f19e:	4413      	add	r3, r2
 800f1a0:	2230      	movs	r2, #48	; 0x30
 800f1a2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800f1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ae:	2b1f      	cmp	r3, #31
 800f1b0:	d802      	bhi.n	800f1b8 <_ftoa+0x190>
 800f1b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1b4:	2b09      	cmp	r3, #9
 800f1b6:	d8ed      	bhi.n	800f194 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800f1b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f1bc:	f7fa fb9e 	bl	80098fc <__aeabi_d2iz>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800f1c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f1c6:	f7fa f895 	bl	80092f4 <__aeabi_i2d>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f1d2:	f7f9 ff41 	bl	8009058 <__aeabi_dsub>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	4610      	mov	r0, r2
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4a51      	ldr	r2, [pc, #324]	; (800f324 <_ftoa+0x2fc>)
 800f1e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	4413      	add	r3, r2
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	f7fa f8ed 	bl	80093c8 <__aeabi_dmul>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 800f1f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f1fa:	f7fa fba7 	bl	800994c <__aeabi_d2uiz>
 800f1fe:	4603      	mov	r3, r0
 800f200:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 800f202:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f204:	f7fa f866 	bl	80092d4 <__aeabi_ui2d>
 800f208:	4602      	mov	r2, r0
 800f20a:	460b      	mov	r3, r1
 800f20c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f210:	f7f9 ff22 	bl	8009058 <__aeabi_dsub>
 800f214:	4602      	mov	r2, r0
 800f216:	460b      	mov	r3, r1
 800f218:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800f21c:	f04f 0200 	mov.w	r2, #0
 800f220:	4b41      	ldr	r3, [pc, #260]	; (800f328 <_ftoa+0x300>)
 800f222:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f226:	f7fa fb5f 	bl	80098e8 <__aeabi_dcmpgt>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d016      	beq.n	800f25e <_ftoa+0x236>
    ++frac;
 800f230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f232:	3301      	adds	r3, #1
 800f234:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800f236:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f238:	f7fa f84c 	bl	80092d4 <__aeabi_ui2d>
 800f23c:	4a39      	ldr	r2, [pc, #228]	; (800f324 <_ftoa+0x2fc>)
 800f23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f240:	00db      	lsls	r3, r3, #3
 800f242:	4413      	add	r3, r2
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7fa fb44 	bl	80098d4 <__aeabi_dcmpge>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d01a      	beq.n	800f288 <_ftoa+0x260>
      frac = 0;
 800f252:	2300      	movs	r3, #0
 800f254:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800f256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f258:	3301      	adds	r3, #1
 800f25a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f25c:	e014      	b.n	800f288 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 800f25e:	f04f 0200 	mov.w	r2, #0
 800f262:	4b31      	ldr	r3, [pc, #196]	; (800f328 <_ftoa+0x300>)
 800f264:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f268:	f7fa fb20 	bl	80098ac <__aeabi_dcmplt>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10a      	bne.n	800f288 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800f272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f274:	2b00      	cmp	r3, #0
 800f276:	d004      	beq.n	800f282 <_ftoa+0x25a>
 800f278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800f282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f284:	3301      	adds	r3, #1
 800f286:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800f288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d134      	bne.n	800f2f8 <_ftoa+0x2d0>
    diff = value - (double)whole;
 800f28e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f290:	f7fa f830 	bl	80092f4 <__aeabi_i2d>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f29c:	f7f9 fedc 	bl	8009058 <__aeabi_dsub>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	461c      	mov	r4, r3
 800f2ac:	f04f 0200 	mov.w	r2, #0
 800f2b0:	4b1d      	ldr	r3, [pc, #116]	; (800f328 <_ftoa+0x300>)
 800f2b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f2b6:	f7fa faf9 	bl	80098ac <__aeabi_dcmplt>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <_ftoa+0x29c>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	461c      	mov	r4, r3
 800f2c4:	b2e3      	uxtb	r3, r4
 800f2c6:	f083 0301 	eor.w	r3, r3, #1
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d109      	bne.n	800f2e4 <_ftoa+0x2bc>
 800f2d0:	f04f 0200 	mov.w	r2, #0
 800f2d4:	4b14      	ldr	r3, [pc, #80]	; (800f328 <_ftoa+0x300>)
 800f2d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f2da:	f7fa fb05 	bl	80098e8 <__aeabi_dcmpgt>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d067      	beq.n	800f3b4 <_ftoa+0x38c>
 800f2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 8085 	beq.w	800f3fa <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800f2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2f6:	e080      	b.n	800f3fa <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 800f2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2fa:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2fc:	e037      	b.n	800f36e <_ftoa+0x346>
 800f2fe:	bf00      	nop
 800f300:	00000000 	.word	0x00000000
 800f304:	41cdcd65 	.word	0x41cdcd65
 800f308:	00000000 	.word	0x00000000
 800f30c:	c1cdcd65 	.word	0xc1cdcd65
 800f310:	0801054c 	.word	0x0801054c
 800f314:	08010550 	.word	0x08010550
 800f318:	7fefffff 	.word	0x7fefffff
 800f31c:	08010558 	.word	0x08010558
 800f320:	08010560 	.word	0x08010560
 800f324:	08010668 	.word	0x08010668
 800f328:	3fe00000 	.word	0x3fe00000
      --count;
 800f32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f32e:	3b01      	subs	r3, #1
 800f330:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 800f332:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f334:	4b69      	ldr	r3, [pc, #420]	; (800f4dc <_ftoa+0x4b4>)
 800f336:	fba3 2301 	umull	r2, r3, r3, r1
 800f33a:	08da      	lsrs	r2, r3, #3
 800f33c:	4613      	mov	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	4413      	add	r3, r2
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	1aca      	subs	r2, r1, r3
 800f346:	b2d2      	uxtb	r2, r2
 800f348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	6579      	str	r1, [r7, #84]	; 0x54
 800f34e:	3230      	adds	r2, #48	; 0x30
 800f350:	b2d2      	uxtb	r2, r2
 800f352:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f356:	440b      	add	r3, r1
 800f358:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800f35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35e:	4a5f      	ldr	r2, [pc, #380]	; (800f4dc <_ftoa+0x4b4>)
 800f360:	fba2 2303 	umull	r2, r3, r2, r3
 800f364:	08db      	lsrs	r3, r3, #3
 800f366:	64bb      	str	r3, [r7, #72]	; 0x48
 800f368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d003      	beq.n	800f376 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f370:	2b1f      	cmp	r3, #31
 800f372:	d9db      	bls.n	800f32c <_ftoa+0x304>
 800f374:	e00a      	b.n	800f38c <_ftoa+0x364>
        break;
 800f376:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f378:	e008      	b.n	800f38c <_ftoa+0x364>
      buf[len++] = '0';
 800f37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f37c:	1c5a      	adds	r2, r3, #1
 800f37e:	657a      	str	r2, [r7, #84]	; 0x54
 800f380:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f384:	4413      	add	r3, r2
 800f386:	2230      	movs	r2, #48	; 0x30
 800f388:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f38c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f38e:	2b1f      	cmp	r3, #31
 800f390:	d804      	bhi.n	800f39c <_ftoa+0x374>
 800f392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f394:	1e5a      	subs	r2, r3, #1
 800f396:	647a      	str	r2, [r7, #68]	; 0x44
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1ee      	bne.n	800f37a <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f39e:	2b1f      	cmp	r3, #31
 800f3a0:	d82b      	bhi.n	800f3fa <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 800f3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	657a      	str	r2, [r7, #84]	; 0x54
 800f3a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3ac:	4413      	add	r3, r2
 800f3ae:	222e      	movs	r2, #46	; 0x2e
 800f3b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f3b4:	e021      	b.n	800f3fa <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 800f3b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3b8:	4b49      	ldr	r3, [pc, #292]	; (800f4e0 <_ftoa+0x4b8>)
 800f3ba:	fb83 1302 	smull	r1, r3, r3, r2
 800f3be:	1099      	asrs	r1, r3, #2
 800f3c0:	17d3      	asrs	r3, r2, #31
 800f3c2:	1ac9      	subs	r1, r1, r3
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	440b      	add	r3, r1
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	1ad1      	subs	r1, r2, r3
 800f3ce:	b2ca      	uxtb	r2, r1
 800f3d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d2:	1c59      	adds	r1, r3, #1
 800f3d4:	6579      	str	r1, [r7, #84]	; 0x54
 800f3d6:	3230      	adds	r2, #48	; 0x30
 800f3d8:	b2d2      	uxtb	r2, r2
 800f3da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f3de:	440b      	add	r3, r1
 800f3e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800f3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3e6:	4a3e      	ldr	r2, [pc, #248]	; (800f4e0 <_ftoa+0x4b8>)
 800f3e8:	fb82 1203 	smull	r1, r2, r2, r3
 800f3ec:	1092      	asrs	r2, r2, #2
 800f3ee:	17db      	asrs	r3, r3, #31
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d003      	beq.n	800f402 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3fc:	2b1f      	cmp	r3, #31
 800f3fe:	d9da      	bls.n	800f3b6 <_ftoa+0x38e>
 800f400:	e000      	b.n	800f404 <_ftoa+0x3dc>
      break;
 800f402:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800f404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f406:	f003 0302 	and.w	r3, r3, #2
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d124      	bne.n	800f458 <_ftoa+0x430>
 800f40e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	d01f      	beq.n	800f458 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800f418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d015      	beq.n	800f44a <_ftoa+0x422>
 800f41e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f422:	2b00      	cmp	r3, #0
 800f424:	d104      	bne.n	800f430 <_ftoa+0x408>
 800f426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f428:	f003 030c 	and.w	r3, r3, #12
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00c      	beq.n	800f44a <_ftoa+0x422>
      width--;
 800f430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f432:	3b01      	subs	r3, #1
 800f434:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f436:	e008      	b.n	800f44a <_ftoa+0x422>
      buf[len++] = '0';
 800f438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	657a      	str	r2, [r7, #84]	; 0x54
 800f43e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f442:	4413      	add	r3, r2
 800f444:	2230      	movs	r2, #48	; 0x30
 800f446:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f44a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f44c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f44e:	429a      	cmp	r2, r3
 800f450:	d202      	bcs.n	800f458 <_ftoa+0x430>
 800f452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f454:	2b1f      	cmp	r3, #31
 800f456:	d9ef      	bls.n	800f438 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f45a:	2b1f      	cmp	r3, #31
 800f45c:	d82a      	bhi.n	800f4b4 <_ftoa+0x48c>
    if (negative) {
 800f45e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f462:	2b00      	cmp	r3, #0
 800f464:	d009      	beq.n	800f47a <_ftoa+0x452>
      buf[len++] = '-';
 800f466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	657a      	str	r2, [r7, #84]	; 0x54
 800f46c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f470:	4413      	add	r3, r2
 800f472:	222d      	movs	r2, #45	; 0x2d
 800f474:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f478:	e01c      	b.n	800f4b4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 800f47a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f47c:	f003 0304 	and.w	r3, r3, #4
 800f480:	2b00      	cmp	r3, #0
 800f482:	d009      	beq.n	800f498 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800f484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	657a      	str	r2, [r7, #84]	; 0x54
 800f48a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f48e:	4413      	add	r3, r2
 800f490:	222b      	movs	r2, #43	; 0x2b
 800f492:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f496:	e00d      	b.n	800f4b4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 800f498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f49a:	f003 0308 	and.w	r3, r3, #8
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d008      	beq.n	800f4b4 <_ftoa+0x48c>
      buf[len++] = ' ';
 800f4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	657a      	str	r2, [r7, #84]	; 0x54
 800f4a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f4ac:	4413      	add	r3, r2
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800f4b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4ba:	9302      	str	r3, [sp, #8]
 800f4bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4be:	9301      	str	r3, [sp, #4]
 800f4c0:	f107 0310 	add.w	r3, r7, #16
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7ff fba9 	bl	800ec24 <_out_rev>
 800f4d2:	4603      	mov	r3, r0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	375c      	adds	r7, #92	; 0x5c
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd90      	pop	{r4, r7, pc}
 800f4dc:	cccccccd 	.word	0xcccccccd
 800f4e0:	66666667 	.word	0x66666667
 800f4e4:	addeadde 	.word	0xaddeadde

0800f4e8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	b09b      	sub	sp, #108	; 0x6c
 800f4ee:	af06      	add	r7, sp, #24
 800f4f0:	6178      	str	r0, [r7, #20]
 800f4f2:	6139      	str	r1, [r7, #16]
 800f4f4:	60fa      	str	r2, [r7, #12]
 800f4f6:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800f4f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f4fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f500:	f7fa f9ca 	bl	8009898 <__aeabi_dcmpeq>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <_etoa+0x4c>
 800f50a:	f04f 32ff 	mov.w	r2, #4294967295
 800f50e:	4bc4      	ldr	r3, [pc, #784]	; (800f820 <_etoa+0x338>)
 800f510:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f514:	f7fa f9e8 	bl	80098e8 <__aeabi_dcmpgt>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10a      	bne.n	800f534 <_etoa+0x4c>
 800f51e:	f04f 32ff 	mov.w	r2, #4294967295
 800f522:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f526:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f52a:	f7fa f9bf 	bl	80098ac <__aeabi_dcmplt>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d014      	beq.n	800f55e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f53e:	9303      	str	r3, [sp, #12]
 800f540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f54a:	e9cd 2300 	strd	r2, r3, [sp]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	6939      	ldr	r1, [r7, #16]
 800f554:	6978      	ldr	r0, [r7, #20]
 800f556:	f7ff fd67 	bl	800f028 <_ftoa>
 800f55a:	4603      	mov	r3, r0
 800f55c:	e247      	b.n	800f9ee <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 800f55e:	2301      	movs	r3, #1
 800f560:	461e      	mov	r6, r3
 800f562:	f04f 0200 	mov.w	r2, #0
 800f566:	f04f 0300 	mov.w	r3, #0
 800f56a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f56e:	f7fa f99d 	bl	80098ac <__aeabi_dcmplt>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <_etoa+0x94>
 800f578:	2300      	movs	r3, #0
 800f57a:	461e      	mov	r6, r3
 800f57c:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 800f580:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f584:	2b00      	cmp	r3, #0
 800f586:	d005      	beq.n	800f594 <_etoa+0xac>
    value = -value;
 800f588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f58a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f58c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f58e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f592:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800f594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d102      	bne.n	800f5a6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f5a0:	2306      	movs	r3, #6
 800f5a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800f5a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f5aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800f5ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f5b2:	f04f 0200 	mov.w	r2, #0
 800f5b6:	f04f 0300 	mov.w	r3, #0
 800f5ba:	0d0a      	lsrs	r2, r1, #20
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4613      	mov	r3, r2
 800f5c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f5c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800f5ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d2:	4994      	ldr	r1, [pc, #592]	; (800f824 <_etoa+0x33c>)
 800f5d4:	ea02 0400 	and.w	r4, r2, r0
 800f5d8:	ea03 0501 	and.w	r5, r3, r1
 800f5dc:	f04f 0200 	mov.w	r2, #0
 800f5e0:	4b91      	ldr	r3, [pc, #580]	; (800f828 <_etoa+0x340>)
 800f5e2:	ea44 0802 	orr.w	r8, r4, r2
 800f5e6:	ea45 0903 	orr.w	r9, r5, r3
 800f5ea:	e9c7 8906 	strd	r8, r9, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800f5ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5f0:	f7f9 fe80 	bl	80092f4 <__aeabi_i2d>
 800f5f4:	a37e      	add	r3, pc, #504	; (adr r3, 800f7f0 <_etoa+0x308>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	f7f9 fee5 	bl	80093c8 <__aeabi_dmul>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4610      	mov	r0, r2
 800f604:	4619      	mov	r1, r3
 800f606:	a37c      	add	r3, pc, #496	; (adr r3, 800f7f8 <_etoa+0x310>)
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	f7f9 fd26 	bl	800905c <__adddf3>
 800f610:	4602      	mov	r2, r0
 800f612:	460b      	mov	r3, r1
 800f614:	4614      	mov	r4, r2
 800f616:	461d      	mov	r5, r3
 800f618:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f61c:	f04f 0200 	mov.w	r2, #0
 800f620:	4b82      	ldr	r3, [pc, #520]	; (800f82c <_etoa+0x344>)
 800f622:	f7f9 fd19 	bl	8009058 <__aeabi_dsub>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4610      	mov	r0, r2
 800f62c:	4619      	mov	r1, r3
 800f62e:	a374      	add	r3, pc, #464	; (adr r3, 800f800 <_etoa+0x318>)
 800f630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f634:	f7f9 fec8 	bl	80093c8 <__aeabi_dmul>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f9 fd0c 	bl	800905c <__adddf3>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4610      	mov	r0, r2
 800f64a:	4619      	mov	r1, r3
 800f64c:	f7fa f956 	bl	80098fc <__aeabi_d2iz>
 800f650:	4603      	mov	r3, r0
 800f652:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800f654:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f656:	f7f9 fe4d 	bl	80092f4 <__aeabi_i2d>
 800f65a:	a36b      	add	r3, pc, #428	; (adr r3, 800f808 <_etoa+0x320>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	f7f9 feb2 	bl	80093c8 <__aeabi_dmul>
 800f664:	4602      	mov	r2, r0
 800f666:	460b      	mov	r3, r1
 800f668:	4610      	mov	r0, r2
 800f66a:	4619      	mov	r1, r3
 800f66c:	f04f 0200 	mov.w	r2, #0
 800f670:	4b6f      	ldr	r3, [pc, #444]	; (800f830 <_etoa+0x348>)
 800f672:	f7f9 fcf3 	bl	800905c <__adddf3>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4610      	mov	r0, r2
 800f67c:	4619      	mov	r1, r3
 800f67e:	f7fa f93d 	bl	80098fc <__aeabi_d2iz>
 800f682:	4603      	mov	r3, r0
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800f686:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f688:	f7f9 fe34 	bl	80092f4 <__aeabi_i2d>
 800f68c:	a360      	add	r3, pc, #384	; (adr r3, 800f810 <_etoa+0x328>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f7f9 fe99 	bl	80093c8 <__aeabi_dmul>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	4614      	mov	r4, r2
 800f69c:	461d      	mov	r5, r3
 800f69e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6a0:	f7f9 fe28 	bl	80092f4 <__aeabi_i2d>
 800f6a4:	a35c      	add	r3, pc, #368	; (adr r3, 800f818 <_etoa+0x330>)
 800f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6aa:	f7f9 fe8d 	bl	80093c8 <__aeabi_dmul>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	f7f9 fccf 	bl	8009058 <__aeabi_dsub>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 800f6c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f6c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f6ca:	f7f9 fe7d 	bl	80093c8 <__aeabi_dmul>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800f6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800f6dc:	4618      	mov	r0, r3
 800f6de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f6e2:	f04f 0200 	mov.w	r2, #0
 800f6e6:	f04f 0300 	mov.w	r3, #0
 800f6ea:	0503      	lsls	r3, r0, #20
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800f6f2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800f6f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	f7f9 fcad 	bl	800905c <__adddf3>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4690      	mov	r8, r2
 800f708:	4699      	mov	r9, r3
 800f70a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f70e:	f04f 0000 	mov.w	r0, #0
 800f712:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f716:	f7f9 fc9f 	bl	8009058 <__aeabi_dsub>
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	4692      	mov	sl, r2
 800f720:	469b      	mov	fp, r3
 800f722:	f04f 0200 	mov.w	r2, #0
 800f726:	4b43      	ldr	r3, [pc, #268]	; (800f834 <_etoa+0x34c>)
 800f728:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f72c:	f7f9 ff76 	bl	800961c <__aeabi_ddiv>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	4610      	mov	r0, r2
 800f736:	4619      	mov	r1, r3
 800f738:	f04f 0200 	mov.w	r2, #0
 800f73c:	4b3e      	ldr	r3, [pc, #248]	; (800f838 <_etoa+0x350>)
 800f73e:	f7f9 fc8d 	bl	800905c <__adddf3>
 800f742:	4602      	mov	r2, r0
 800f744:	460b      	mov	r3, r1
 800f746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f74a:	f7f9 ff67 	bl	800961c <__aeabi_ddiv>
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	4610      	mov	r0, r2
 800f754:	4619      	mov	r1, r3
 800f756:	f04f 0200 	mov.w	r2, #0
 800f75a:	4b38      	ldr	r3, [pc, #224]	; (800f83c <_etoa+0x354>)
 800f75c:	f7f9 fc7e 	bl	800905c <__adddf3>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f768:	f7f9 ff58 	bl	800961c <__aeabi_ddiv>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	4650      	mov	r0, sl
 800f772:	4659      	mov	r1, fp
 800f774:	f7f9 fc72 	bl	800905c <__adddf3>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4640      	mov	r0, r8
 800f77e:	4649      	mov	r1, r9
 800f780:	f7f9 ff4c 	bl	800961c <__aeabi_ddiv>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	4610      	mov	r0, r2
 800f78a:	4619      	mov	r1, r3
 800f78c:	f04f 0200 	mov.w	r2, #0
 800f790:	4b25      	ldr	r3, [pc, #148]	; (800f828 <_etoa+0x340>)
 800f792:	f7f9 fc63 	bl	800905c <__adddf3>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	4620      	mov	r0, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	f7f9 fe13 	bl	80093c8 <__aeabi_dmul>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800f7aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f7b2:	f7fa f87b 	bl	80098ac <__aeabi_dcmplt>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00d      	beq.n	800f7d8 <_etoa+0x2f0>
    expval--;
 800f7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800f7c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f7c6:	f04f 0200 	mov.w	r2, #0
 800f7ca:	4b1b      	ldr	r3, [pc, #108]	; (800f838 <_etoa+0x350>)
 800f7cc:	f7f9 ff26 	bl	800961c <__aeabi_ddiv>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800f7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7da:	2b63      	cmp	r3, #99	; 0x63
 800f7dc:	dc30      	bgt.n	800f840 <_etoa+0x358>
 800f7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800f7e4:	db2c      	blt.n	800f840 <_etoa+0x358>
 800f7e6:	2304      	movs	r3, #4
 800f7e8:	e02b      	b.n	800f842 <_etoa+0x35a>
 800f7ea:	bf00      	nop
 800f7ec:	f3af 8000 	nop.w
 800f7f0:	509f79fb 	.word	0x509f79fb
 800f7f4:	3fd34413 	.word	0x3fd34413
 800f7f8:	8b60c8b3 	.word	0x8b60c8b3
 800f7fc:	3fc68a28 	.word	0x3fc68a28
 800f800:	636f4361 	.word	0x636f4361
 800f804:	3fd287a7 	.word	0x3fd287a7
 800f808:	0979a371 	.word	0x0979a371
 800f80c:	400a934f 	.word	0x400a934f
 800f810:	bbb55516 	.word	0xbbb55516
 800f814:	40026bb1 	.word	0x40026bb1
 800f818:	fefa39ef 	.word	0xfefa39ef
 800f81c:	3fe62e42 	.word	0x3fe62e42
 800f820:	7fefffff 	.word	0x7fefffff
 800f824:	000fffff 	.word	0x000fffff
 800f828:	3ff00000 	.word	0x3ff00000
 800f82c:	3ff80000 	.word	0x3ff80000
 800f830:	3fe00000 	.word	0x3fe00000
 800f834:	402c0000 	.word	0x402c0000
 800f838:	40240000 	.word	0x40240000
 800f83c:	40180000 	.word	0x40180000
 800f840:	2305      	movs	r3, #5
 800f842:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800f844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d03d      	beq.n	800f8cc <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800f850:	a369      	add	r3, pc, #420	; (adr r3, 800f9f8 <_etoa+0x510>)
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f85a:	f7fa f83b 	bl	80098d4 <__aeabi_dcmpge>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d024      	beq.n	800f8ae <_etoa+0x3c6>
 800f864:	a366      	add	r3, pc, #408	; (adr r3, 800fa00 <_etoa+0x518>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f86e:	f7fa f81d 	bl	80098ac <__aeabi_dcmplt>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d01a      	beq.n	800f8ae <_etoa+0x3c6>
      if ((int)prec > expval) {
 800f878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f87c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f87e:	429a      	cmp	r2, r3
 800f880:	da07      	bge.n	800f892 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 800f882:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	3b01      	subs	r3, #1
 800f88c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f890:	e002      	b.n	800f898 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800f898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f89c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f8a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8ac:	e00e      	b.n	800f8cc <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800f8ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00a      	beq.n	800f8cc <_etoa+0x3e4>
 800f8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d004      	beq.n	800f8cc <_etoa+0x3e4>
        --prec;
 800f8c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800f8cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800f8d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d904      	bls.n	800f8e6 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800f8dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	647b      	str	r3, [r7, #68]	; 0x44
 800f8e4:	e001      	b.n	800f8ea <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800f8ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ee:	f003 0302 	and.w	r3, r3, #2
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d004      	beq.n	800f900 <_etoa+0x418>
 800f8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800f900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <_etoa+0x432>
    value /= conv.F;
 800f906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f90a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f90e:	f7f9 fe85 	bl	800961c <__aeabi_ddiv>
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800f91e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <_etoa+0x44c>
 800f926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f928:	603b      	str	r3, [r7, #0]
 800f92a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f92c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f930:	607b      	str	r3, [r7, #4]
 800f932:	e003      	b.n	800f93c <_etoa+0x454>
 800f934:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800f938:	e9c7 3400 	strd	r3, r4, [r7]
 800f93c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f944:	9304      	str	r3, [sp, #16]
 800f946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f948:	9303      	str	r3, [sp, #12]
 800f94a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f94e:	9302      	str	r3, [sp, #8]
 800f950:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f954:	e9cd 3400 	strd	r3, r4, [sp]
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	6939      	ldr	r1, [r7, #16]
 800f95e:	6978      	ldr	r0, [r7, #20]
 800f960:	f7ff fb62 	bl	800f028 <_ftoa>
 800f964:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800f966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d03f      	beq.n	800f9ec <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800f96c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f970:	f003 0320 	and.w	r3, r3, #32
 800f974:	2b00      	cmp	r3, #0
 800f976:	d001      	beq.n	800f97c <_etoa+0x494>
 800f978:	2045      	movs	r0, #69	; 0x45
 800f97a:	e000      	b.n	800f97e <_etoa+0x496>
 800f97c:	2065      	movs	r0, #101	; 0x65
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	1c53      	adds	r3, r2, #1
 800f982:	60fb      	str	r3, [r7, #12]
 800f984:	697c      	ldr	r4, [r7, #20]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	6939      	ldr	r1, [r7, #16]
 800f98a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800f98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f98e:	2b00      	cmp	r3, #0
 800f990:	bfb8      	it	lt
 800f992:	425b      	neglt	r3, r3
 800f994:	4618      	mov	r0, r3
 800f996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f998:	0fdb      	lsrs	r3, r3, #31
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f99e:	3a01      	subs	r2, #1
 800f9a0:	2105      	movs	r1, #5
 800f9a2:	9105      	str	r1, [sp, #20]
 800f9a4:	9204      	str	r2, [sp, #16]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	9203      	str	r2, [sp, #12]
 800f9aa:	220a      	movs	r2, #10
 800f9ac:	9202      	str	r2, [sp, #8]
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	9000      	str	r0, [sp, #0]
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	6939      	ldr	r1, [r7, #16]
 800f9b8:	6978      	ldr	r0, [r7, #20]
 800f9ba:	f7ff fa5f 	bl	800ee7c <_ntoa_long>
 800f9be:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800f9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9c4:	f003 0302 	and.w	r3, r3, #2
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00f      	beq.n	800f9ec <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800f9cc:	e007      	b.n	800f9de <_etoa+0x4f6>
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	1c53      	adds	r3, r2, #1
 800f9d2:	60fb      	str	r3, [r7, #12]
 800f9d4:	697c      	ldr	r4, [r7, #20]
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	6939      	ldr	r1, [r7, #16]
 800f9da:	2020      	movs	r0, #32
 800f9dc:	47a0      	blx	r4
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d8f0      	bhi.n	800f9ce <_etoa+0x4e6>
    }
  }
  return idx;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3754      	adds	r7, #84	; 0x54
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	eb1c432d 	.word	0xeb1c432d
 800f9fc:	3f1a36e2 	.word	0x3f1a36e2
 800fa00:	00000000 	.word	0x00000000
 800fa04:	412e8480 	.word	0x412e8480

0800fa08 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800fa08:	b5b0      	push	{r4, r5, r7, lr}
 800fa0a:	b0a0      	sub	sp, #128	; 0x80
 800fa0c:	af0a      	add	r7, sp, #40	; 0x28
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
 800fa14:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 8490 	bne.w	8010342 <_vsnprintf+0x93a>
    // use null output function
    out = _out_null;
 800fa22:	4ba0      	ldr	r3, [pc, #640]	; (800fca4 <_vsnprintf+0x29c>)
 800fa24:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800fa26:	f000 bc8c 	b.w	8010342 <_vsnprintf+0x93a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b25      	cmp	r3, #37	; 0x25
 800fa30:	d00d      	beq.n	800fa4e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	7818      	ldrb	r0, [r3, #0]
 800fa36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa38:	1c53      	adds	r3, r2, #1
 800fa3a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa3c:	68fc      	ldr	r4, [r7, #12]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	47a0      	blx	r4
      format++;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	3301      	adds	r3, #1
 800fa48:	603b      	str	r3, [r7, #0]
      continue;
 800fa4a:	f000 bc7a 	b.w	8010342 <_vsnprintf+0x93a>
    }
    else {
      // yes, evaluate it
      format++;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	3301      	adds	r3, #1
 800fa52:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800fa54:	2300      	movs	r3, #0
 800fa56:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	3b20      	subs	r3, #32
 800fa5e:	2b10      	cmp	r3, #16
 800fa60:	d856      	bhi.n	800fb10 <_vsnprintf+0x108>
 800fa62:	a201      	add	r2, pc, #4	; (adr r2, 800fa68 <_vsnprintf+0x60>)
 800fa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa68:	0800fae9 	.word	0x0800fae9
 800fa6c:	0800fb11 	.word	0x0800fb11
 800fa70:	0800fb11 	.word	0x0800fb11
 800fa74:	0800fafd 	.word	0x0800fafd
 800fa78:	0800fb11 	.word	0x0800fb11
 800fa7c:	0800fb11 	.word	0x0800fb11
 800fa80:	0800fb11 	.word	0x0800fb11
 800fa84:	0800fb11 	.word	0x0800fb11
 800fa88:	0800fb11 	.word	0x0800fb11
 800fa8c:	0800fb11 	.word	0x0800fb11
 800fa90:	0800fb11 	.word	0x0800fb11
 800fa94:	0800fad5 	.word	0x0800fad5
 800fa98:	0800fb11 	.word	0x0800fb11
 800fa9c:	0800fac1 	.word	0x0800fac1
 800faa0:	0800fb11 	.word	0x0800fb11
 800faa4:	0800fb11 	.word	0x0800fb11
 800faa8:	0800faad 	.word	0x0800faad
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800faac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faae:	f043 0301 	orr.w	r3, r3, #1
 800fab2:	657b      	str	r3, [r7, #84]	; 0x54
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	3301      	adds	r3, #1
 800fab8:	603b      	str	r3, [r7, #0]
 800faba:	2301      	movs	r3, #1
 800fabc:	64bb      	str	r3, [r7, #72]	; 0x48
 800fabe:	e02a      	b.n	800fb16 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800fac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fac2:	f043 0302 	orr.w	r3, r3, #2
 800fac6:	657b      	str	r3, [r7, #84]	; 0x54
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	603b      	str	r3, [r7, #0]
 800face:	2301      	movs	r3, #1
 800fad0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fad2:	e020      	b.n	800fb16 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800fad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad6:	f043 0304 	orr.w	r3, r3, #4
 800fada:	657b      	str	r3, [r7, #84]	; 0x54
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	3301      	adds	r3, #1
 800fae0:	603b      	str	r3, [r7, #0]
 800fae2:	2301      	movs	r3, #1
 800fae4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fae6:	e016      	b.n	800fb16 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800fae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faea:	f043 0308 	orr.w	r3, r3, #8
 800faee:	657b      	str	r3, [r7, #84]	; 0x54
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	603b      	str	r3, [r7, #0]
 800faf6:	2301      	movs	r3, #1
 800faf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fafa:	e00c      	b.n	800fb16 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800fafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fafe:	f043 0310 	orr.w	r3, r3, #16
 800fb02:	657b      	str	r3, [r7, #84]	; 0x54
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	3301      	adds	r3, #1
 800fb08:	603b      	str	r3, [r7, #0]
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb0e:	e002      	b.n	800fb16 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800fb10:	2300      	movs	r3, #0
 800fb12:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb14:	bf00      	nop
      }
    } while (n);
 800fb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d19d      	bne.n	800fa58 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff f843 	bl	800ebb0 <_is_digit>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d005      	beq.n	800fb3c <_vsnprintf+0x134>
      width = _atoi(&format);
 800fb30:	463b      	mov	r3, r7
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff f852 	bl	800ebdc <_atoi>
 800fb38:	6538      	str	r0, [r7, #80]	; 0x50
 800fb3a:	e018      	b.n	800fb6e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b2a      	cmp	r3, #42	; 0x2a
 800fb42:	d114      	bne.n	800fb6e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800fb44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb46:	1d1a      	adds	r2, r3, #4
 800fb48:	66ba      	str	r2, [r7, #104]	; 0x68
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da07      	bge.n	800fb64 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800fb54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb56:	f043 0302 	orr.w	r3, r3, #2
 800fb5a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	425b      	negs	r3, r3
 800fb60:	653b      	str	r3, [r7, #80]	; 0x50
 800fb62:	e001      	b.n	800fb68 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800fb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb66:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b2e      	cmp	r3, #46	; 0x2e
 800fb78:	d124      	bne.n	800fbc4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800fb7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fb80:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	3301      	adds	r3, #1
 800fb86:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff f80f 	bl	800ebb0 <_is_digit>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d005      	beq.n	800fba4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800fb98:	463b      	mov	r3, r7
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff f81e 	bl	800ebdc <_atoi>
 800fba0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fba2:	e00f      	b.n	800fbc4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbaa:	d10b      	bne.n	800fbc4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800fbac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbae:	1d1a      	adds	r2, r3, #4
 800fbb0:	66ba      	str	r2, [r7, #104]	; 0x68
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	3b68      	subs	r3, #104	; 0x68
 800fbca:	2b12      	cmp	r3, #18
 800fbcc:	d866      	bhi.n	800fc9c <_vsnprintf+0x294>
 800fbce:	a201      	add	r2, pc, #4	; (adr r2, 800fbd4 <_vsnprintf+0x1cc>)
 800fbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd4:	0800fc47 	.word	0x0800fc47
 800fbd8:	0800fc9d 	.word	0x0800fc9d
 800fbdc:	0800fc7d 	.word	0x0800fc7d
 800fbe0:	0800fc9d 	.word	0x0800fc9d
 800fbe4:	0800fc21 	.word	0x0800fc21
 800fbe8:	0800fc9d 	.word	0x0800fc9d
 800fbec:	0800fc9d 	.word	0x0800fc9d
 800fbf0:	0800fc9d 	.word	0x0800fc9d
 800fbf4:	0800fc9d 	.word	0x0800fc9d
 800fbf8:	0800fc9d 	.word	0x0800fc9d
 800fbfc:	0800fc9d 	.word	0x0800fc9d
 800fc00:	0800fc9d 	.word	0x0800fc9d
 800fc04:	0800fc6d 	.word	0x0800fc6d
 800fc08:	0800fc9d 	.word	0x0800fc9d
 800fc0c:	0800fc9d 	.word	0x0800fc9d
 800fc10:	0800fc9d 	.word	0x0800fc9d
 800fc14:	0800fc9d 	.word	0x0800fc9d
 800fc18:	0800fc9d 	.word	0x0800fc9d
 800fc1c:	0800fc8d 	.word	0x0800fc8d
      case 'l' :
        flags |= FLAGS_LONG;
 800fc20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc26:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	2b6c      	cmp	r3, #108	; 0x6c
 800fc34:	d134      	bne.n	800fca0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800fc36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc3c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	3301      	adds	r3, #1
 800fc42:	603b      	str	r3, [r7, #0]
        }
        break;
 800fc44:	e02c      	b.n	800fca0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800fc46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc4c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	3301      	adds	r3, #1
 800fc52:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b68      	cmp	r3, #104	; 0x68
 800fc5a:	d125      	bne.n	800fca8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800fc5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc62:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	3301      	adds	r3, #1
 800fc68:	603b      	str	r3, [r7, #0]
        }
        break;
 800fc6a:	e01d      	b.n	800fca8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fc6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc72:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	3301      	adds	r3, #1
 800fc78:	603b      	str	r3, [r7, #0]
        break;
 800fc7a:	e016      	b.n	800fcaa <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fc7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc82:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	3301      	adds	r3, #1
 800fc88:	603b      	str	r3, [r7, #0]
        break;
 800fc8a:	e00e      	b.n	800fcaa <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fc8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc92:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	3301      	adds	r3, #1
 800fc98:	603b      	str	r3, [r7, #0]
        break;
 800fc9a:	e006      	b.n	800fcaa <_vsnprintf+0x2a2>
      default :
        break;
 800fc9c:	bf00      	nop
 800fc9e:	e004      	b.n	800fcaa <_vsnprintf+0x2a2>
        break;
 800fca0:	bf00      	nop
 800fca2:	e002      	b.n	800fcaa <_vsnprintf+0x2a2>
 800fca4:	0800eb39 	.word	0x0800eb39
        break;
 800fca8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	3b25      	subs	r3, #37	; 0x25
 800fcb0:	2b53      	cmp	r3, #83	; 0x53
 800fcb2:	f200 8339 	bhi.w	8010328 <_vsnprintf+0x920>
 800fcb6:	a201      	add	r2, pc, #4	; (adr r2, 800fcbc <_vsnprintf+0x2b4>)
 800fcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcbc:	08010311 	.word	0x08010311
 800fcc0:	08010329 	.word	0x08010329
 800fcc4:	08010329 	.word	0x08010329
 800fcc8:	08010329 	.word	0x08010329
 800fccc:	08010329 	.word	0x08010329
 800fcd0:	08010329 	.word	0x08010329
 800fcd4:	08010329 	.word	0x08010329
 800fcd8:	08010329 	.word	0x08010329
 800fcdc:	08010329 	.word	0x08010329
 800fce0:	08010329 	.word	0x08010329
 800fce4:	08010329 	.word	0x08010329
 800fce8:	08010329 	.word	0x08010329
 800fcec:	08010329 	.word	0x08010329
 800fcf0:	08010329 	.word	0x08010329
 800fcf4:	08010329 	.word	0x08010329
 800fcf8:	08010329 	.word	0x08010329
 800fcfc:	08010329 	.word	0x08010329
 800fd00:	08010329 	.word	0x08010329
 800fd04:	08010329 	.word	0x08010329
 800fd08:	08010329 	.word	0x08010329
 800fd0c:	08010329 	.word	0x08010329
 800fd10:	08010329 	.word	0x08010329
 800fd14:	08010329 	.word	0x08010329
 800fd18:	08010329 	.word	0x08010329
 800fd1c:	08010329 	.word	0x08010329
 800fd20:	08010329 	.word	0x08010329
 800fd24:	08010329 	.word	0x08010329
 800fd28:	08010329 	.word	0x08010329
 800fd2c:	08010329 	.word	0x08010329
 800fd30:	08010329 	.word	0x08010329
 800fd34:	08010329 	.word	0x08010329
 800fd38:	08010329 	.word	0x08010329
 800fd3c:	080100e3 	.word	0x080100e3
 800fd40:	0801009b 	.word	0x0801009b
 800fd44:	080100e3 	.word	0x080100e3
 800fd48:	08010329 	.word	0x08010329
 800fd4c:	08010329 	.word	0x08010329
 800fd50:	08010329 	.word	0x08010329
 800fd54:	08010329 	.word	0x08010329
 800fd58:	08010329 	.word	0x08010329
 800fd5c:	08010329 	.word	0x08010329
 800fd60:	08010329 	.word	0x08010329
 800fd64:	08010329 	.word	0x08010329
 800fd68:	08010329 	.word	0x08010329
 800fd6c:	08010329 	.word	0x08010329
 800fd70:	08010329 	.word	0x08010329
 800fd74:	08010329 	.word	0x08010329
 800fd78:	08010329 	.word	0x08010329
 800fd7c:	08010329 	.word	0x08010329
 800fd80:	08010329 	.word	0x08010329
 800fd84:	08010329 	.word	0x08010329
 800fd88:	0800fe0d 	.word	0x0800fe0d
 800fd8c:	08010329 	.word	0x08010329
 800fd90:	08010329 	.word	0x08010329
 800fd94:	08010329 	.word	0x08010329
 800fd98:	08010329 	.word	0x08010329
 800fd9c:	08010329 	.word	0x08010329
 800fda0:	08010329 	.word	0x08010329
 800fda4:	08010329 	.word	0x08010329
 800fda8:	08010329 	.word	0x08010329
 800fdac:	08010329 	.word	0x08010329
 800fdb0:	0800fe0d 	.word	0x0800fe0d
 800fdb4:	0801014b 	.word	0x0801014b
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	080100e3 	.word	0x080100e3
 800fdc0:	0801009b 	.word	0x0801009b
 800fdc4:	080100e3 	.word	0x080100e3
 800fdc8:	08010329 	.word	0x08010329
 800fdcc:	0800fe0d 	.word	0x0800fe0d
 800fdd0:	08010329 	.word	0x08010329
 800fdd4:	08010329 	.word	0x08010329
 800fdd8:	08010329 	.word	0x08010329
 800fddc:	08010329 	.word	0x08010329
 800fde0:	08010329 	.word	0x08010329
 800fde4:	0800fe0d 	.word	0x0800fe0d
 800fde8:	08010283 	.word	0x08010283
 800fdec:	08010329 	.word	0x08010329
 800fdf0:	08010329 	.word	0x08010329
 800fdf4:	080101bf 	.word	0x080101bf
 800fdf8:	08010329 	.word	0x08010329
 800fdfc:	0800fe0d 	.word	0x0800fe0d
 800fe00:	08010329 	.word	0x08010329
 800fe04:	08010329 	.word	0x08010329
 800fe08:	0800fe0d 	.word	0x0800fe0d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b78      	cmp	r3, #120	; 0x78
 800fe12:	d003      	beq.n	800fe1c <_vsnprintf+0x414>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b58      	cmp	r3, #88	; 0x58
 800fe1a:	d102      	bne.n	800fe22 <_vsnprintf+0x41a>
          base = 16U;
 800fe1c:	2310      	movs	r3, #16
 800fe1e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe20:	e013      	b.n	800fe4a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b6f      	cmp	r3, #111	; 0x6f
 800fe28:	d102      	bne.n	800fe30 <_vsnprintf+0x428>
          base =  8U;
 800fe2a:	2308      	movs	r3, #8
 800fe2c:	643b      	str	r3, [r7, #64]	; 0x40
 800fe2e:	e00c      	b.n	800fe4a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b62      	cmp	r3, #98	; 0x62
 800fe36:	d102      	bne.n	800fe3e <_vsnprintf+0x436>
          base =  2U;
 800fe38:	2302      	movs	r3, #2
 800fe3a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe3c:	e005      	b.n	800fe4a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800fe3e:	230a      	movs	r3, #10
 800fe40:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800fe42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe44:	f023 0310 	bic.w	r3, r3, #16
 800fe48:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	2b58      	cmp	r3, #88	; 0x58
 800fe50:	d103      	bne.n	800fe5a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800fe52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe54:	f043 0320 	orr.w	r3, r3, #32
 800fe58:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	2b69      	cmp	r3, #105	; 0x69
 800fe60:	d007      	beq.n	800fe72 <_vsnprintf+0x46a>
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	2b64      	cmp	r3, #100	; 0x64
 800fe68:	d003      	beq.n	800fe72 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800fe6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe6c:	f023 030c 	bic.w	r3, r3, #12
 800fe70:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800fe72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d003      	beq.n	800fe84 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800fe7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe7e:	f023 0301 	bic.w	r3, r3, #1
 800fe82:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b69      	cmp	r3, #105	; 0x69
 800fe8a:	d004      	beq.n	800fe96 <_vsnprintf+0x48e>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2b64      	cmp	r3, #100	; 0x64
 800fe92:	f040 808e 	bne.w	800ffb2 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800fe96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d02f      	beq.n	800ff00 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800fea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fea2:	3307      	adds	r3, #7
 800fea4:	f023 0307 	bic.w	r3, r3, #7
 800fea8:	f103 0208 	add.w	r2, r3, #8
 800feac:	66ba      	str	r2, [r7, #104]	; 0x68
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800feb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800feba:	2a00      	cmp	r2, #0
 800febc:	f173 0100 	sbcs.w	r1, r3, #0
 800fec0:	da02      	bge.n	800fec8 <_vsnprintf+0x4c0>
 800fec2:	4252      	negs	r2, r2
 800fec4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800fec8:	4610      	mov	r0, r2
 800feca:	4619      	mov	r1, r3
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	0fdb      	lsrs	r3, r3, #31
 800fed0:	b2dc      	uxtb	r4, r3
 800fed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fed4:	461a      	mov	r2, r3
 800fed6:	f04f 0300 	mov.w	r3, #0
 800feda:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800fedc:	9508      	str	r5, [sp, #32]
 800fede:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fee0:	9507      	str	r5, [sp, #28]
 800fee2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800fee4:	9506      	str	r5, [sp, #24]
 800fee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800feea:	9402      	str	r4, [sp, #8]
 800feec:	e9cd 0100 	strd	r0, r1, [sp]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef4:	68b9      	ldr	r1, [r7, #8]
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff f827 	bl	800ef4a <_ntoa_long_long>
 800fefc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800fefe:	e0c8      	b.n	8010092 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800ff00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d01e      	beq.n	800ff48 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 800ff0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff0c:	1d1a      	adds	r2, r3, #4
 800ff0e:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	bfb8      	it	lt
 800ff1a:	425b      	neglt	r3, r3
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	69fb      	ldr	r3, [r7, #28]
 800ff20:	0fdb      	lsrs	r3, r3, #31
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff26:	9205      	str	r2, [sp, #20]
 800ff28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff2a:	9204      	str	r2, [sp, #16]
 800ff2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff2e:	9203      	str	r2, [sp, #12]
 800ff30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff32:	9202      	str	r2, [sp, #8]
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	9100      	str	r1, [sp, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff3c:	68b9      	ldr	r1, [r7, #8]
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f7fe ff9c 	bl	800ee7c <_ntoa_long>
 800ff44:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ff46:	e0a4      	b.n	8010092 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800ff48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d005      	beq.n	800ff5e <_vsnprintf+0x556>
 800ff52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff54:	1d1a      	adds	r2, r3, #4
 800ff56:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	e00e      	b.n	800ff7c <_vsnprintf+0x574>
 800ff5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d005      	beq.n	800ff74 <_vsnprintf+0x56c>
 800ff68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff6a:	1d1a      	adds	r2, r3, #4
 800ff6c:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	b21b      	sxth	r3, r3
 800ff72:	e003      	b.n	800ff7c <_vsnprintf+0x574>
 800ff74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff76:	1d1a      	adds	r2, r3, #4
 800ff78:	66ba      	str	r2, [r7, #104]	; 0x68
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	bfb8      	it	lt
 800ff84:	425b      	neglt	r3, r3
 800ff86:	4619      	mov	r1, r3
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	0fdb      	lsrs	r3, r3, #31
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff90:	9205      	str	r2, [sp, #20]
 800ff92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff94:	9204      	str	r2, [sp, #16]
 800ff96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff98:	9203      	str	r2, [sp, #12]
 800ff9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff9c:	9202      	str	r2, [sp, #8]
 800ff9e:	9301      	str	r3, [sp, #4]
 800ffa0:	9100      	str	r1, [sp, #0]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffa6:	68b9      	ldr	r1, [r7, #8]
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7fe ff67 	bl	800ee7c <_ntoa_long>
 800ffae:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ffb0:	e06f      	b.n	8010092 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800ffb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d020      	beq.n	800fffe <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ffbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffbe:	3307      	adds	r3, #7
 800ffc0:	f023 0307 	bic.w	r3, r3, #7
 800ffc4:	f103 0208 	add.w	r2, r3, #8
 800ffc8:	66ba      	str	r2, [r7, #104]	; 0x68
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	f04f 0100 	mov.w	r1, #0
 800ffd6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800ffd8:	9408      	str	r4, [sp, #32]
 800ffda:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800ffdc:	9407      	str	r4, [sp, #28]
 800ffde:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ffe0:	9406      	str	r4, [sp, #24]
 800ffe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	9102      	str	r1, [sp, #8]
 800ffea:	e9cd 2300 	strd	r2, r3, [sp]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fff2:	68b9      	ldr	r1, [r7, #8]
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f7fe ffa8 	bl	800ef4a <_ntoa_long_long>
 800fffa:	6478      	str	r0, [r7, #68]	; 0x44
 800fffc:	e049      	b.n	8010092 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800fffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010004:	2b00      	cmp	r3, #0
 8010006:	d016      	beq.n	8010036 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8010008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801000a:	1d1a      	adds	r2, r3, #4
 801000c:	66ba      	str	r2, [r7, #104]	; 0x68
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010012:	9205      	str	r2, [sp, #20]
 8010014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010016:	9204      	str	r2, [sp, #16]
 8010018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801001a:	9203      	str	r2, [sp, #12]
 801001c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801001e:	9202      	str	r2, [sp, #8]
 8010020:	2200      	movs	r2, #0
 8010022:	9201      	str	r2, [sp, #4]
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7fe ff25 	bl	800ee7c <_ntoa_long>
 8010032:	6478      	str	r0, [r7, #68]	; 0x44
 8010034:	e02d      	b.n	8010092 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8010036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801003c:	2b00      	cmp	r3, #0
 801003e:	d005      	beq.n	801004c <_vsnprintf+0x644>
 8010040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010042:	1d1a      	adds	r2, r3, #4
 8010044:	66ba      	str	r2, [r7, #104]	; 0x68
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	b2db      	uxtb	r3, r3
 801004a:	e00e      	b.n	801006a <_vsnprintf+0x662>
 801004c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801004e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010052:	2b00      	cmp	r3, #0
 8010054:	d005      	beq.n	8010062 <_vsnprintf+0x65a>
 8010056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010058:	1d1a      	adds	r2, r3, #4
 801005a:	66ba      	str	r2, [r7, #104]	; 0x68
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	b29b      	uxth	r3, r3
 8010060:	e003      	b.n	801006a <_vsnprintf+0x662>
 8010062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010064:	1d1a      	adds	r2, r3, #4
 8010066:	66ba      	str	r2, [r7, #104]	; 0x68
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801006c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801006e:	9305      	str	r3, [sp, #20]
 8010070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010072:	9304      	str	r3, [sp, #16]
 8010074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010076:	9303      	str	r3, [sp, #12]
 8010078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801007a:	9302      	str	r3, [sp, #8]
 801007c:	2300      	movs	r3, #0
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010088:	68b9      	ldr	r1, [r7, #8]
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f7fe fef6 	bl	800ee7c <_ntoa_long>
 8010090:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	3301      	adds	r3, #1
 8010096:	603b      	str	r3, [r7, #0]
        break;
 8010098:	e153      	b.n	8010342 <_vsnprintf+0x93a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	2b46      	cmp	r3, #70	; 0x46
 80100a0:	d103      	bne.n	80100aa <_vsnprintf+0x6a2>
 80100a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100a4:	f043 0320 	orr.w	r3, r3, #32
 80100a8:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80100aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100ac:	3307      	adds	r3, #7
 80100ae:	f023 0307 	bic.w	r3, r3, #7
 80100b2:	f103 0208 	add.w	r2, r3, #8
 80100b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100be:	9104      	str	r1, [sp, #16]
 80100c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100c2:	9103      	str	r1, [sp, #12]
 80100c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80100c6:	9102      	str	r1, [sp, #8]
 80100c8:	e9cd 2300 	strd	r2, r3, [sp]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100d0:	68b9      	ldr	r1, [r7, #8]
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7fe ffa8 	bl	800f028 <_ftoa>
 80100d8:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	3301      	adds	r3, #1
 80100de:	603b      	str	r3, [r7, #0]
        break;
 80100e0:	e12f      	b.n	8010342 <_vsnprintf+0x93a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	2b67      	cmp	r3, #103	; 0x67
 80100e8:	d003      	beq.n	80100f2 <_vsnprintf+0x6ea>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b47      	cmp	r3, #71	; 0x47
 80100f0:	d103      	bne.n	80100fa <_vsnprintf+0x6f2>
 80100f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80100f8:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b45      	cmp	r3, #69	; 0x45
 8010100:	d003      	beq.n	801010a <_vsnprintf+0x702>
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b47      	cmp	r3, #71	; 0x47
 8010108:	d103      	bne.n	8010112 <_vsnprintf+0x70a>
 801010a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801010c:	f043 0320 	orr.w	r3, r3, #32
 8010110:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8010112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010114:	3307      	adds	r3, #7
 8010116:	f023 0307 	bic.w	r3, r3, #7
 801011a:	f103 0208 	add.w	r2, r3, #8
 801011e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010126:	9104      	str	r1, [sp, #16]
 8010128:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801012a:	9103      	str	r1, [sp, #12]
 801012c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801012e:	9102      	str	r1, [sp, #8]
 8010130:	e9cd 2300 	strd	r2, r3, [sp]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010138:	68b9      	ldr	r1, [r7, #8]
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f7ff f9d4 	bl	800f4e8 <_etoa>
 8010140:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	3301      	adds	r3, #1
 8010146:	603b      	str	r3, [r7, #0]
        break;
 8010148:	e0fb      	b.n	8010342 <_vsnprintf+0x93a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 801014a:	2301      	movs	r3, #1
 801014c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 801014e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010150:	f003 0302 	and.w	r3, r3, #2
 8010154:	2b00      	cmp	r3, #0
 8010156:	d10e      	bne.n	8010176 <_vsnprintf+0x76e>
          while (l++ < width) {
 8010158:	e007      	b.n	801016a <_vsnprintf+0x762>
            out(' ', buffer, idx++, maxlen);
 801015a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801015c:	1c53      	adds	r3, r2, #1
 801015e:	647b      	str	r3, [r7, #68]	; 0x44
 8010160:	68fc      	ldr	r4, [r7, #12]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	68b9      	ldr	r1, [r7, #8]
 8010166:	2020      	movs	r0, #32
 8010168:	47a0      	blx	r4
          while (l++ < width) {
 801016a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016c:	1c5a      	adds	r2, r3, #1
 801016e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010172:	429a      	cmp	r2, r3
 8010174:	d8f1      	bhi.n	801015a <_vsnprintf+0x752>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010178:	1d1a      	adds	r2, r3, #4
 801017a:	66ba      	str	r2, [r7, #104]	; 0x68
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	b2d8      	uxtb	r0, r3
 8010180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010182:	1c53      	adds	r3, r2, #1
 8010184:	647b      	str	r3, [r7, #68]	; 0x44
 8010186:	68fc      	ldr	r4, [r7, #12]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68b9      	ldr	r1, [r7, #8]
 801018c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 801018e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010190:	f003 0302 	and.w	r3, r3, #2
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00e      	beq.n	80101b6 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8010198:	e007      	b.n	80101aa <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 801019a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801019c:	1c53      	adds	r3, r2, #1
 801019e:	647b      	str	r3, [r7, #68]	; 0x44
 80101a0:	68fc      	ldr	r4, [r7, #12]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68b9      	ldr	r1, [r7, #8]
 80101a6:	2020      	movs	r0, #32
 80101a8:	47a0      	blx	r4
          while (l++ < width) {
 80101aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80101b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d8f1      	bhi.n	801019a <_vsnprintf+0x792>
          }
        }
        format++;
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	3301      	adds	r3, #1
 80101ba:	603b      	str	r3, [r7, #0]
        break;
 80101bc:	e0c1      	b.n	8010342 <_vsnprintf+0x93a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80101be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101c0:	1d1a      	adds	r2, r3, #4
 80101c2:	66ba      	str	r2, [r7, #104]	; 0x68
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80101c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <_vsnprintf+0x7ca>
 80101ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d0:	e001      	b.n	80101d6 <_vsnprintf+0x7ce>
 80101d2:	f04f 33ff 	mov.w	r3, #4294967295
 80101d6:	4619      	mov	r1, r3
 80101d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101da:	f7fe fccd 	bl	800eb78 <_strnlen_s>
 80101de:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80101e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d005      	beq.n	80101f6 <_vsnprintf+0x7ee>
          l = (l < precision ? l : precision);
 80101ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ee:	4293      	cmp	r3, r2
 80101f0:	bf28      	it	cs
 80101f2:	4613      	movcs	r3, r2
 80101f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80101f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101f8:	f003 0302 	and.w	r3, r3, #2
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d11a      	bne.n	8010236 <_vsnprintf+0x82e>
          while (l++ < width) {
 8010200:	e007      	b.n	8010212 <_vsnprintf+0x80a>
            out(' ', buffer, idx++, maxlen);
 8010202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010204:	1c53      	adds	r3, r2, #1
 8010206:	647b      	str	r3, [r7, #68]	; 0x44
 8010208:	68fc      	ldr	r4, [r7, #12]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	2020      	movs	r0, #32
 8010210:	47a0      	blx	r4
          while (l++ < width) {
 8010212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010214:	1c5a      	adds	r2, r3, #1
 8010216:	637a      	str	r2, [r7, #52]	; 0x34
 8010218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801021a:	429a      	cmp	r2, r3
 801021c:	d8f1      	bhi.n	8010202 <_vsnprintf+0x7fa>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801021e:	e00a      	b.n	8010236 <_vsnprintf+0x82e>
          out(*(p++), buffer, idx++, maxlen);
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	63ba      	str	r2, [r7, #56]	; 0x38
 8010226:	7818      	ldrb	r0, [r3, #0]
 8010228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801022a:	1c53      	adds	r3, r2, #1
 801022c:	647b      	str	r3, [r7, #68]	; 0x44
 801022e:	68fc      	ldr	r4, [r7, #12]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d009      	beq.n	8010252 <_vsnprintf+0x84a>
 801023e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010244:	2b00      	cmp	r3, #0
 8010246:	d0eb      	beq.n	8010220 <_vsnprintf+0x818>
 8010248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801024a:	1e5a      	subs	r2, r3, #1
 801024c:	64fa      	str	r2, [r7, #76]	; 0x4c
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1e6      	bne.n	8010220 <_vsnprintf+0x818>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8010252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010254:	f003 0302 	and.w	r3, r3, #2
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00e      	beq.n	801027a <_vsnprintf+0x872>
          while (l++ < width) {
 801025c:	e007      	b.n	801026e <_vsnprintf+0x866>
            out(' ', buffer, idx++, maxlen);
 801025e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010260:	1c53      	adds	r3, r2, #1
 8010262:	647b      	str	r3, [r7, #68]	; 0x44
 8010264:	68fc      	ldr	r4, [r7, #12]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	68b9      	ldr	r1, [r7, #8]
 801026a:	2020      	movs	r0, #32
 801026c:	47a0      	blx	r4
          while (l++ < width) {
 801026e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	637a      	str	r2, [r7, #52]	; 0x34
 8010274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010276:	429a      	cmp	r2, r3
 8010278:	d8f1      	bhi.n	801025e <_vsnprintf+0x856>
          }
        }
        format++;
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	3301      	adds	r3, #1
 801027e:	603b      	str	r3, [r7, #0]
        break;
 8010280:	e05f      	b.n	8010342 <_vsnprintf+0x93a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8010282:	2308      	movs	r3, #8
 8010284:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8010286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010288:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 801028c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 801028e:	2300      	movs	r3, #0
 8010290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8010294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010298:	2b00      	cmp	r3, #0
 801029a:	d01e      	beq.n	80102da <_vsnprintf+0x8d2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 801029c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801029e:	1d1a      	adds	r2, r3, #4
 80102a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	461a      	mov	r2, r3
 80102a6:	f04f 0300 	mov.w	r3, #0
 80102aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102ac:	9108      	str	r1, [sp, #32]
 80102ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102b0:	9107      	str	r1, [sp, #28]
 80102b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80102b4:	9106      	str	r1, [sp, #24]
 80102b6:	f04f 0010 	mov.w	r0, #16
 80102ba:	f04f 0100 	mov.w	r1, #0
 80102be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102c2:	2100      	movs	r1, #0
 80102c4:	9102      	str	r1, [sp, #8]
 80102c6:	e9cd 2300 	strd	r2, r3, [sp]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102ce:	68b9      	ldr	r1, [r7, #8]
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7fe fe3a 	bl	800ef4a <_ntoa_long_long>
 80102d6:	6478      	str	r0, [r7, #68]	; 0x44
 80102d8:	e016      	b.n	8010308 <_vsnprintf+0x900>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80102da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102dc:	1d1a      	adds	r2, r3, #4
 80102de:	66ba      	str	r2, [r7, #104]	; 0x68
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e6:	9305      	str	r3, [sp, #20]
 80102e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ee:	9303      	str	r3, [sp, #12]
 80102f0:	2310      	movs	r3, #16
 80102f2:	9302      	str	r3, [sp, #8]
 80102f4:	2300      	movs	r3, #0
 80102f6:	9301      	str	r3, [sp, #4]
 80102f8:	9200      	str	r2, [sp, #0]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f7fe fdbb 	bl	800ee7c <_ntoa_long>
 8010306:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	603b      	str	r3, [r7, #0]
        break;
 801030e:	e018      	b.n	8010342 <_vsnprintf+0x93a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8010310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010312:	1c53      	adds	r3, r2, #1
 8010314:	647b      	str	r3, [r7, #68]	; 0x44
 8010316:	68fc      	ldr	r4, [r7, #12]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68b9      	ldr	r1, [r7, #8]
 801031c:	2025      	movs	r0, #37	; 0x25
 801031e:	47a0      	blx	r4
        format++;
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	603b      	str	r3, [r7, #0]
        break;
 8010326:	e00c      	b.n	8010342 <_vsnprintf+0x93a>

      default :
        out(*format, buffer, idx++, maxlen);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	7818      	ldrb	r0, [r3, #0]
 801032c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801032e:	1c53      	adds	r3, r2, #1
 8010330:	647b      	str	r3, [r7, #68]	; 0x44
 8010332:	68fc      	ldr	r4, [r7, #12]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	68b9      	ldr	r1, [r7, #8]
 8010338:	47a0      	blx	r4
        format++;
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	3301      	adds	r3, #1
 801033e:	603b      	str	r3, [r7, #0]
        break;
 8010340:	bf00      	nop
  while (*format)
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	f47f ab6f 	bne.w	800fa2a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801034c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d302      	bcc.n	801035a <_vsnprintf+0x952>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	1e5a      	subs	r2, r3, #1
 8010358:	e000      	b.n	801035c <_vsnprintf+0x954>
 801035a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801035c:	68fc      	ldr	r4, [r7, #12]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	68b9      	ldr	r1, [r7, #8]
 8010362:	2000      	movs	r0, #0
 8010364:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8010366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010368:	4618      	mov	r0, r3
 801036a:	3758      	adds	r7, #88	; 0x58
 801036c:	46bd      	mov	sp, r7
 801036e:	bdb0      	pop	{r4, r5, r7, pc}

08010370 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8010370:	b40f      	push	{r0, r1, r2, r3}
 8010372:	b580      	push	{r7, lr}
 8010374:	b086      	sub	sp, #24
 8010376:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8010378:	f107 031c 	add.w	r3, r7, #28
 801037c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 801037e:	1d39      	adds	r1, r7, #4
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	9300      	str	r3, [sp, #0]
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	f04f 32ff 	mov.w	r2, #4294967295
 801038a:	4806      	ldr	r0, [pc, #24]	; (80103a4 <printf_+0x34>)
 801038c:	f7ff fb3c 	bl	800fa08 <_vsnprintf>
 8010390:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8010392:	68fb      	ldr	r3, [r7, #12]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801039e:	b004      	add	sp, #16
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	0800eb53 	.word	0x0800eb53

080103a8 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 80103a8:	f01e 0f04 	tst.w	lr, #4
 80103ac:	bf0c      	ite	eq
 80103ae:	f3ef 8008 	mrseq	r0, MSP
 80103b2:	f3ef 8009 	mrsne	r0, PSP
 80103b6:	f8df 1004 	ldr.w	r1, [pc, #4]	; 80103bc <handler_address_const>
 80103ba:	4708      	bx	r1

080103bc <handler_address_const>:
 80103bc:	08009f59 	.word	0x08009f59
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 80103c0:	bf00      	nop
 80103c2:	adde      	add	r5, sp, #888	; 0x378

080103c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80103c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80103c6:	e003      	b.n	80103d0 <LoopCopyDataInit>

080103c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80103c8:	4b0b      	ldr	r3, [pc, #44]	; (80103f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80103ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80103cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80103ce:	3104      	adds	r1, #4

080103d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80103d0:	480a      	ldr	r0, [pc, #40]	; (80103fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80103d2:	4b0b      	ldr	r3, [pc, #44]	; (8010400 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80103d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80103d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80103d8:	d3f6      	bcc.n	80103c8 <CopyDataInit>
  ldr r2, =_sbss
 80103da:	4a0a      	ldr	r2, [pc, #40]	; (8010404 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80103dc:	e002      	b.n	80103e4 <LoopFillZerobss>

080103de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80103de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80103e0:	f842 3b04 	str.w	r3, [r2], #4

080103e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80103e4:	4b08      	ldr	r3, [pc, #32]	; (8010408 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80103e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80103e8:	d3f9      	bcc.n	80103de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80103ea:	f7fc fd5d 	bl	800cea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80103ee:	f000 f80f 	bl	8010410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80103f2:	f7fc fa9d 	bl	800c930 <main>
  bx lr
 80103f6:	4770      	bx	lr
  ldr r3, =_sidata
 80103f8:	080106c8 	.word	0x080106c8
  ldr r0, =_sdata
 80103fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8010400:	20008014 	.word	0x20008014
  ldr r2, =_sbss
 8010404:	20008400 	.word	0x20008400
  ldr r3, = _ebss
 8010408:	2000a040 	.word	0x2000a040

0801040c <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801040c:	e7fe      	b.n	801040c <COMP_ACQ_IRQHandler>
 801040e:	adde      	add	r5, sp, #888	; 0x378

08010410 <__libc_init_array>:
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	2600      	movs	r6, #0
 8010414:	4d0c      	ldr	r5, [pc, #48]	; (8010448 <__libc_init_array+0x38>)
 8010416:	4c0d      	ldr	r4, [pc, #52]	; (801044c <__libc_init_array+0x3c>)
 8010418:	1b64      	subs	r4, r4, r5
 801041a:	10a4      	asrs	r4, r4, #2
 801041c:	42a6      	cmp	r6, r4
 801041e:	d109      	bne.n	8010434 <__libc_init_array+0x24>
 8010420:	f000 f830 	bl	8010484 <_init>
 8010424:	2600      	movs	r6, #0
 8010426:	4d0a      	ldr	r5, [pc, #40]	; (8010450 <__libc_init_array+0x40>)
 8010428:	4c0a      	ldr	r4, [pc, #40]	; (8010454 <__libc_init_array+0x44>)
 801042a:	1b64      	subs	r4, r4, r5
 801042c:	10a4      	asrs	r4, r4, #2
 801042e:	42a6      	cmp	r6, r4
 8010430:	d105      	bne.n	801043e <__libc_init_array+0x2e>
 8010432:	bd70      	pop	{r4, r5, r6, pc}
 8010434:	f855 3b04 	ldr.w	r3, [r5], #4
 8010438:	4798      	blx	r3
 801043a:	3601      	adds	r6, #1
 801043c:	e7ee      	b.n	801041c <__libc_init_array+0xc>
 801043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010442:	4798      	blx	r3
 8010444:	3601      	adds	r6, #1
 8010446:	e7f2      	b.n	801042e <__libc_init_array+0x1e>
 8010448:	080106c0 	.word	0x080106c0
 801044c:	080106c0 	.word	0x080106c0
 8010450:	080106c0 	.word	0x080106c0
 8010454:	080106c4 	.word	0x080106c4

08010458 <memcpy>:
 8010458:	440a      	add	r2, r1
 801045a:	4291      	cmp	r1, r2
 801045c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010460:	d100      	bne.n	8010464 <memcpy+0xc>
 8010462:	4770      	bx	lr
 8010464:	b510      	push	{r4, lr}
 8010466:	f811 4b01 	ldrb.w	r4, [r1], #1
 801046a:	4291      	cmp	r1, r2
 801046c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010470:	d1f9      	bne.n	8010466 <memcpy+0xe>
 8010472:	bd10      	pop	{r4, pc}

08010474 <memset>:
 8010474:	4603      	mov	r3, r0
 8010476:	4402      	add	r2, r0
 8010478:	4293      	cmp	r3, r2
 801047a:	d100      	bne.n	801047e <memset+0xa>
 801047c:	4770      	bx	lr
 801047e:	f803 1b01 	strb.w	r1, [r3], #1
 8010482:	e7f9      	b.n	8010478 <memset+0x4>

08010484 <_init>:
 8010484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010486:	bf00      	nop
 8010488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048a:	bc08      	pop	{r3}
 801048c:	469e      	mov	lr, r3
 801048e:	4770      	bx	lr

08010490 <_fini>:
 8010490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010492:	bf00      	nop
 8010494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010496:	bc08      	pop	{r3}
 8010498:	469e      	mov	lr, r3
 801049a:	4770      	bx	lr
