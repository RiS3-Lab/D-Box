
L152RE-FreeRTOS-MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080090e0  080090e0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090e0  080090e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080090e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e20  20000014  080090fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e34  080090fc  00024e34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001823f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351e  00000000  00000000  0003827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e8  00000000  00000000  0003dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016943  00000000  00000000  00054e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b327  00000000  00000000  0006b773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  00106a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  00106b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000005c  00000000  00000000  0010befc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08009054 	.word	0x08009054

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08009054 	.word	0x08009054

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	; 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2uiz>:
 800074c:	004a      	lsls	r2, r1, #1
 800074e:	d211      	bcs.n	8000774 <__aeabi_d2uiz+0x28>
 8000750:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000754:	d211      	bcs.n	800077a <__aeabi_d2uiz+0x2e>
 8000756:	d50d      	bpl.n	8000774 <__aeabi_d2uiz+0x28>
 8000758:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800075c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000760:	d40e      	bmi.n	8000780 <__aeabi_d2uiz+0x34>
 8000762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800076e:	fa23 f002 	lsr.w	r0, r3, r2
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077e:	d102      	bne.n	8000786 <__aeabi_d2uiz+0x3a>
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr

0800078c <__aeabi_d2f>:
 800078c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000790:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000794:	bf24      	itt	cs
 8000796:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800079a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800079e:	d90d      	bls.n	80007bc <__aeabi_d2f+0x30>
 80007a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007b4:	bf08      	it	eq
 80007b6:	f020 0001 	biceq.w	r0, r0, #1
 80007ba:	4770      	bx	lr
 80007bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c0:	d121      	bne.n	8000806 <__aeabi_d2f+0x7a>
 80007c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007c6:	bfbc      	itt	lt
 80007c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	4770      	bxlt	lr
 80007ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007d6:	f1c2 0218 	rsb	r2, r2, #24
 80007da:	f1c2 0c20 	rsb	ip, r2, #32
 80007de:	fa10 f30c 	lsls.w	r3, r0, ip
 80007e2:	fa20 f002 	lsr.w	r0, r0, r2
 80007e6:	bf18      	it	ne
 80007e8:	f040 0001 	orrne.w	r0, r0, #1
 80007ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007f8:	ea40 000c 	orr.w	r0, r0, ip
 80007fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000800:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000804:	e7cc      	b.n	80007a0 <__aeabi_d2f+0x14>
 8000806:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800080a:	d107      	bne.n	800081c <__aeabi_d2f+0x90>
 800080c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000810:	bf1e      	ittt	ne
 8000812:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000816:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800081a:	4770      	bxne	lr
 800081c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000820:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000824:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <__aeabi_frsub>:
 800082c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000830:	e002      	b.n	8000838 <__addsf3>
 8000832:	bf00      	nop

08000834 <__aeabi_fsub>:
 8000834:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000838 <__addsf3>:
 8000838:	0042      	lsls	r2, r0, #1
 800083a:	bf1f      	itttt	ne
 800083c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000840:	ea92 0f03 	teqne	r2, r3
 8000844:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000848:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800084c:	d06a      	beq.n	8000924 <__addsf3+0xec>
 800084e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000852:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000856:	bfc1      	itttt	gt
 8000858:	18d2      	addgt	r2, r2, r3
 800085a:	4041      	eorgt	r1, r0
 800085c:	4048      	eorgt	r0, r1
 800085e:	4041      	eorgt	r1, r0
 8000860:	bfb8      	it	lt
 8000862:	425b      	neglt	r3, r3
 8000864:	2b19      	cmp	r3, #25
 8000866:	bf88      	it	hi
 8000868:	4770      	bxhi	lr
 800086a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000872:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800087e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000882:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000886:	bf18      	it	ne
 8000888:	4249      	negne	r1, r1
 800088a:	ea92 0f03 	teq	r2, r3
 800088e:	d03f      	beq.n	8000910 <__addsf3+0xd8>
 8000890:	f1a2 0201 	sub.w	r2, r2, #1
 8000894:	fa41 fc03 	asr.w	ip, r1, r3
 8000898:	eb10 000c 	adds.w	r0, r0, ip
 800089c:	f1c3 0320 	rsb	r3, r3, #32
 80008a0:	fa01 f103 	lsl.w	r1, r1, r3
 80008a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008a8:	d502      	bpl.n	80008b0 <__addsf3+0x78>
 80008aa:	4249      	negs	r1, r1
 80008ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008b4:	d313      	bcc.n	80008de <__addsf3+0xa6>
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ba:	d306      	bcc.n	80008ca <__addsf3+0x92>
 80008bc:	0840      	lsrs	r0, r0, #1
 80008be:	ea4f 0131 	mov.w	r1, r1, rrx
 80008c2:	f102 0201 	add.w	r2, r2, #1
 80008c6:	2afe      	cmp	r2, #254	; 0xfe
 80008c8:	d251      	bcs.n	800096e <__addsf3+0x136>
 80008ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d2:	bf08      	it	eq
 80008d4:	f020 0001 	biceq.w	r0, r0, #1
 80008d8:	ea40 0003 	orr.w	r0, r0, r3
 80008dc:	4770      	bx	lr
 80008de:	0049      	lsls	r1, r1, #1
 80008e0:	eb40 0000 	adc.w	r0, r0, r0
 80008e4:	3a01      	subs	r2, #1
 80008e6:	bf28      	it	cs
 80008e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008ec:	d2ed      	bcs.n	80008ca <__addsf3+0x92>
 80008ee:	fab0 fc80 	clz	ip, r0
 80008f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008f6:	ebb2 020c 	subs.w	r2, r2, ip
 80008fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80008fe:	bfaa      	itet	ge
 8000900:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000904:	4252      	neglt	r2, r2
 8000906:	4318      	orrge	r0, r3
 8000908:	bfbc      	itt	lt
 800090a:	40d0      	lsrlt	r0, r2
 800090c:	4318      	orrlt	r0, r3
 800090e:	4770      	bx	lr
 8000910:	f092 0f00 	teq	r2, #0
 8000914:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000918:	bf06      	itte	eq
 800091a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800091e:	3201      	addeq	r2, #1
 8000920:	3b01      	subne	r3, #1
 8000922:	e7b5      	b.n	8000890 <__addsf3+0x58>
 8000924:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000928:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800092c:	bf18      	it	ne
 800092e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000932:	d021      	beq.n	8000978 <__addsf3+0x140>
 8000934:	ea92 0f03 	teq	r2, r3
 8000938:	d004      	beq.n	8000944 <__addsf3+0x10c>
 800093a:	f092 0f00 	teq	r2, #0
 800093e:	bf08      	it	eq
 8000940:	4608      	moveq	r0, r1
 8000942:	4770      	bx	lr
 8000944:	ea90 0f01 	teq	r0, r1
 8000948:	bf1c      	itt	ne
 800094a:	2000      	movne	r0, #0
 800094c:	4770      	bxne	lr
 800094e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000952:	d104      	bne.n	800095e <__addsf3+0x126>
 8000954:	0040      	lsls	r0, r0, #1
 8000956:	bf28      	it	cs
 8000958:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800095c:	4770      	bx	lr
 800095e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000962:	bf3c      	itt	cc
 8000964:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000968:	4770      	bxcc	lr
 800096a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800096e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000976:	4770      	bx	lr
 8000978:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800097c:	bf16      	itet	ne
 800097e:	4608      	movne	r0, r1
 8000980:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000984:	4601      	movne	r1, r0
 8000986:	0242      	lsls	r2, r0, #9
 8000988:	bf06      	itte	eq
 800098a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800098e:	ea90 0f01 	teqeq	r0, r1
 8000992:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000996:	4770      	bx	lr

08000998 <__aeabi_ui2f>:
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e004      	b.n	80009a8 <__aeabi_i2f+0x8>
 800099e:	bf00      	nop

080009a0 <__aeabi_i2f>:
 80009a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009a4:	bf48      	it	mi
 80009a6:	4240      	negmi	r0, r0
 80009a8:	ea5f 0c00 	movs.w	ip, r0
 80009ac:	bf08      	it	eq
 80009ae:	4770      	bxeq	lr
 80009b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009b4:	4601      	mov	r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	e01c      	b.n	80009f6 <__aeabi_l2f+0x2a>

080009bc <__aeabi_ul2f>:
 80009bc:	ea50 0201 	orrs.w	r2, r0, r1
 80009c0:	bf08      	it	eq
 80009c2:	4770      	bxeq	lr
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	e00a      	b.n	80009e0 <__aeabi_l2f+0x14>
 80009ca:	bf00      	nop

080009cc <__aeabi_l2f>:
 80009cc:	ea50 0201 	orrs.w	r2, r0, r1
 80009d0:	bf08      	it	eq
 80009d2:	4770      	bxeq	lr
 80009d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__aeabi_l2f+0x14>
 80009da:	4240      	negs	r0, r0
 80009dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e0:	ea5f 0c01 	movs.w	ip, r1
 80009e4:	bf02      	ittt	eq
 80009e6:	4684      	moveq	ip, r0
 80009e8:	4601      	moveq	r1, r0
 80009ea:	2000      	moveq	r0, #0
 80009ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009f0:	bf08      	it	eq
 80009f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009fa:	fabc f28c 	clz	r2, ip
 80009fe:	3a08      	subs	r2, #8
 8000a00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a04:	db10      	blt.n	8000a28 <__aeabi_l2f+0x5c>
 8000a06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a0a:	4463      	add	r3, ip
 8000a0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a10:	f1c2 0220 	rsb	r2, r2, #32
 8000a14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	eb43 0002 	adc.w	r0, r3, r2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f102 0220 	add.w	r2, r2, #32
 8000a2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a30:	f1c2 0220 	rsb	r2, r2, #32
 8000a34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a38:	fa21 f202 	lsr.w	r2, r1, r2
 8000a3c:	eb43 0002 	adc.w	r0, r3, r2
 8000a40:	bf08      	it	eq
 8000a42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_fmul>:
 8000a48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a50:	bf1e      	ittt	ne
 8000a52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a56:	ea92 0f0c 	teqne	r2, ip
 8000a5a:	ea93 0f0c 	teqne	r3, ip
 8000a5e:	d06f      	beq.n	8000b40 <__aeabi_fmul+0xf8>
 8000a60:	441a      	add	r2, r3
 8000a62:	ea80 0c01 	eor.w	ip, r0, r1
 8000a66:	0240      	lsls	r0, r0, #9
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a6e:	d01e      	beq.n	8000aae <__aeabi_fmul+0x66>
 8000a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a88:	bf3e      	ittt	cc
 8000a8a:	0049      	lslcc	r1, r1, #1
 8000a8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a90:	005b      	lslcc	r3, r3, #1
 8000a92:	ea40 0001 	orr.w	r0, r0, r1
 8000a96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a9a:	2afd      	cmp	r2, #253	; 0xfd
 8000a9c:	d81d      	bhi.n	8000ada <__aeabi_fmul+0x92>
 8000a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aa2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa6:	bf08      	it	eq
 8000aa8:	f020 0001 	biceq.w	r0, r0, #1
 8000aac:	4770      	bx	lr
 8000aae:	f090 0f00 	teq	r0, #0
 8000ab2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ab6:	bf08      	it	eq
 8000ab8:	0249      	lsleq	r1, r1, #9
 8000aba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000abe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ac2:	3a7f      	subs	r2, #127	; 0x7f
 8000ac4:	bfc2      	ittt	gt
 8000ac6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ace:	4770      	bxgt	lr
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	3a01      	subs	r2, #1
 8000ada:	dc5d      	bgt.n	8000b98 <__aeabi_fmul+0x150>
 8000adc:	f112 0f19 	cmn.w	r2, #25
 8000ae0:	bfdc      	itt	le
 8000ae2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bxle	lr
 8000ae8:	f1c2 0200 	rsb	r2, r2, #0
 8000aec:	0041      	lsls	r1, r0, #1
 8000aee:	fa21 f102 	lsr.w	r1, r1, r2
 8000af2:	f1c2 0220 	rsb	r2, r2, #32
 8000af6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000afa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000afe:	f140 0000 	adc.w	r0, r0, #0
 8000b02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b06:	bf08      	it	eq
 8000b08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b0c:	4770      	bx	lr
 8000b0e:	f092 0f00 	teq	r2, #0
 8000b12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b16:	bf02      	ittt	eq
 8000b18:	0040      	lsleq	r0, r0, #1
 8000b1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b1e:	3a01      	subeq	r2, #1
 8000b20:	d0f9      	beq.n	8000b16 <__aeabi_fmul+0xce>
 8000b22:	ea40 000c 	orr.w	r0, r0, ip
 8000b26:	f093 0f00 	teq	r3, #0
 8000b2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2e:	bf02      	ittt	eq
 8000b30:	0049      	lsleq	r1, r1, #1
 8000b32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b36:	3b01      	subeq	r3, #1
 8000b38:	d0f9      	beq.n	8000b2e <__aeabi_fmul+0xe6>
 8000b3a:	ea41 010c 	orr.w	r1, r1, ip
 8000b3e:	e78f      	b.n	8000a60 <__aeabi_fmul+0x18>
 8000b40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b44:	ea92 0f0c 	teq	r2, ip
 8000b48:	bf18      	it	ne
 8000b4a:	ea93 0f0c 	teqne	r3, ip
 8000b4e:	d00a      	beq.n	8000b66 <__aeabi_fmul+0x11e>
 8000b50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b54:	bf18      	it	ne
 8000b56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b5a:	d1d8      	bne.n	8000b0e <__aeabi_fmul+0xc6>
 8000b5c:	ea80 0001 	eor.w	r0, r0, r1
 8000b60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f090 0f00 	teq	r0, #0
 8000b6a:	bf17      	itett	ne
 8000b6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b70:	4608      	moveq	r0, r1
 8000b72:	f091 0f00 	teqne	r1, #0
 8000b76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b7a:	d014      	beq.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d101      	bne.n	8000b86 <__aeabi_fmul+0x13e>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	d10f      	bne.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b86:	ea93 0f0c 	teq	r3, ip
 8000b8a:	d103      	bne.n	8000b94 <__aeabi_fmul+0x14c>
 8000b8c:	024b      	lsls	r3, r1, #9
 8000b8e:	bf18      	it	ne
 8000b90:	4608      	movne	r0, r1
 8000b92:	d108      	bne.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b94:	ea80 0001 	eor.w	r0, r0, r1
 8000b98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_fdiv>:
 8000bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb8:	bf1e      	ittt	ne
 8000bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bbe:	ea92 0f0c 	teqne	r2, ip
 8000bc2:	ea93 0f0c 	teqne	r3, ip
 8000bc6:	d069      	beq.n	8000c9c <__aeabi_fdiv+0xec>
 8000bc8:	eba2 0203 	sub.w	r2, r2, r3
 8000bcc:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd0:	0249      	lsls	r1, r1, #9
 8000bd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bd6:	d037      	beq.n	8000c48 <__aeabi_fdiv+0x98>
 8000bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000be0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000be4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be8:	428b      	cmp	r3, r1
 8000bea:	bf38      	it	cc
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	bf24      	itt	cs
 8000bfa:	1a5b      	subcs	r3, r3, r1
 8000bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c04:	bf24      	itt	cs
 8000c06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c12:	bf24      	itt	cs
 8000c14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c20:	bf24      	itt	cs
 8000c22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	bf18      	it	ne
 8000c2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c32:	d1e0      	bne.n	8000bf6 <__aeabi_fdiv+0x46>
 8000c34:	2afd      	cmp	r2, #253	; 0xfd
 8000c36:	f63f af50 	bhi.w	8000ada <__aeabi_fmul+0x92>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c50:	327f      	adds	r2, #127	; 0x7f
 8000c52:	bfc2      	ittt	gt
 8000c54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c5c:	4770      	bxgt	lr
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	3a01      	subs	r2, #1
 8000c68:	e737      	b.n	8000ada <__aeabi_fmul+0x92>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fdiv+0xc2>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fdiv+0xda>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e795      	b.n	8000bc8 <__aeabi_fdiv+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	d108      	bne.n	8000cb8 <__aeabi_fdiv+0x108>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	f47f af7d 	bne.w	8000ba6 <__aeabi_fmul+0x15e>
 8000cac:	ea93 0f0c 	teq	r3, ip
 8000cb0:	f47f af70 	bne.w	8000b94 <__aeabi_fmul+0x14c>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e776      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000cb8:	ea93 0f0c 	teq	r3, ip
 8000cbc:	d104      	bne.n	8000cc8 <__aeabi_fdiv+0x118>
 8000cbe:	024b      	lsls	r3, r1, #9
 8000cc0:	f43f af4c 	beq.w	8000b5c <__aeabi_fmul+0x114>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e76e      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000cc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ccc:	bf18      	it	ne
 8000cce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cd2:	d1ca      	bne.n	8000c6a <__aeabi_fdiv+0xba>
 8000cd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000cd8:	f47f af5c 	bne.w	8000b94 <__aeabi_fmul+0x14c>
 8000cdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	f47f af3c 	bne.w	8000b5c <__aeabi_fmul+0x114>
 8000ce4:	e75f      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000ce6:	bf00      	nop

08000ce8 <__gesf2>:
 8000ce8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cec:	e006      	b.n	8000cfc <__cmpsf2+0x4>
 8000cee:	bf00      	nop

08000cf0 <__lesf2>:
 8000cf0:	f04f 0c01 	mov.w	ip, #1
 8000cf4:	e002      	b.n	8000cfc <__cmpsf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__cmpsf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	bf18      	it	ne
 8000d0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d12:	d011      	beq.n	8000d38 <__cmpsf2+0x40>
 8000d14:	b001      	add	sp, #4
 8000d16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d1a:	bf18      	it	ne
 8000d1c:	ea90 0f01 	teqne	r0, r1
 8000d20:	bf58      	it	pl
 8000d22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d26:	bf88      	it	hi
 8000d28:	17c8      	asrhi	r0, r1, #31
 8000d2a:	bf38      	it	cc
 8000d2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d30:	bf18      	it	ne
 8000d32:	f040 0001 	orrne.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d3c:	d102      	bne.n	8000d44 <__cmpsf2+0x4c>
 8000d3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d42:	d105      	bne.n	8000d50 <__cmpsf2+0x58>
 8000d44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d48:	d1e4      	bne.n	8000d14 <__cmpsf2+0x1c>
 8000d4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4e:	d0e1      	beq.n	8000d14 <__cmpsf2+0x1c>
 8000d50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__aeabi_cfrcmple>:
 8000d58:	4684      	mov	ip, r0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	4661      	mov	r1, ip
 8000d5e:	e7ff      	b.n	8000d60 <__aeabi_cfcmpeq>

08000d60 <__aeabi_cfcmpeq>:
 8000d60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d62:	f7ff ffc9 	bl	8000cf8 <__cmpsf2>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	bf48      	it	mi
 8000d6a:	f110 0f00 	cmnmi.w	r0, #0
 8000d6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d70 <__aeabi_fcmpeq>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff fff4 	bl	8000d60 <__aeabi_cfcmpeq>
 8000d78:	bf0c      	ite	eq
 8000d7a:	2001      	moveq	r0, #1
 8000d7c:	2000      	movne	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_fcmplt>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffea 	bl	8000d60 <__aeabi_cfcmpeq>
 8000d8c:	bf34      	ite	cc
 8000d8e:	2001      	movcc	r0, #1
 8000d90:	2000      	movcs	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_fcmple>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff ffe0 	bl	8000d60 <__aeabi_cfcmpeq>
 8000da0:	bf94      	ite	ls
 8000da2:	2001      	movls	r0, #1
 8000da4:	2000      	movhi	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_fcmpge>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffd2 	bl	8000d58 <__aeabi_cfrcmple>
 8000db4:	bf94      	ite	ls
 8000db6:	2001      	movls	r0, #1
 8000db8:	2000      	movhi	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_fcmpgt>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffc8 	bl	8000d58 <__aeabi_cfrcmple>
 8000dc8:	bf34      	ite	cc
 8000dca:	2001      	movcc	r0, #1
 8000dcc:	2000      	movcs	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_f2uiz>:
 8000dd4:	0042      	lsls	r2, r0, #1
 8000dd6:	d20e      	bcs.n	8000df6 <__aeabi_f2uiz+0x22>
 8000dd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ddc:	d30b      	bcc.n	8000df6 <__aeabi_f2uiz+0x22>
 8000dde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000de2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000de6:	d409      	bmi.n	8000dfc <__aeabi_f2uiz+0x28>
 8000de8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df0:	fa23 f002 	lsr.w	r0, r3, r2
 8000df4:	4770      	bx	lr
 8000df6:	f04f 0000 	mov.w	r0, #0
 8000dfa:	4770      	bx	lr
 8000dfc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e00:	d101      	bne.n	8000e06 <__aeabi_f2uiz+0x32>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d102      	bne.n	8000e0c <__aeabi_f2uiz+0x38>
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	4770      	bx	lr
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f103 0208 	add.w	r2, r3, #8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f103 0208 	add.w	r2, r3, #8
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f103 0208 	add.w	r2, r3, #8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d103      	bne.n	8000ed0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e00c      	b.n	8000eea <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e002      	b.n	8000ede <vListInsert+0x2e>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d2f6      	bcs.n	8000ed8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6892      	ldr	r2, [r2, #8]
 8000f36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6852      	ldr	r2, [r2, #4]
 8000f40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d103      	bne.n	8000f54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1e5a      	subs	r2, r3, #1
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10a      	bne.n	8000f9e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8c:	f383 8811 	msr	BASEPRI, r3
 8000f90:	f3bf 8f6f 	isb	sy
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000f9a:	bf00      	nop
 8000f9c:	e7fe      	b.n	8000f9c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000f9e:	f002 feb7 	bl	8003d10 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	68f9      	ldr	r1, [r7, #12]
 8000fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	441a      	add	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	441a      	add	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d114      	bne.n	800101e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01a      	beq.n	8001032 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3310      	adds	r3, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fbdb 	bl	80027bc <xTaskRemoveFromEventList>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d012      	beq.n	8001032 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <xQueueGenericReset+0xcc>)
 800100e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	e009      	b.n	8001032 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3310      	adds	r3, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fef6 	bl	8000e14 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3324      	adds	r3, #36	; 0x24
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fef1 	bl	8000e14 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001032:	f002 fe9d 	bl	8003d70 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	e000ed04 	.word	0xe000ed04

08001044 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10a      	bne.n	800106e <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 8001058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105c:	f383 8811 	msr	BASEPRI, r3
 8001060:	f3bf 8f6f 	isb	sy
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800106a:	bf00      	nop
 800106c:	e7fe      	b.n	800106c <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10a      	bne.n	800108a <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <xQueueGenericCreateStatic+0x52>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <xQueueGenericCreateStatic+0x56>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <xQueueGenericCreateStatic+0x58>
 800109a:	2300      	movs	r3, #0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <xQueueGenericCreateStatic+0x72>
        __asm volatile
 80010a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a4:	f383 8811 	msr	BASEPRI, r3
 80010a8:	f3bf 8f6f 	isb	sy
 80010ac:	f3bf 8f4f 	dsb	sy
 80010b0:	623b      	str	r3, [r7, #32]
    }
 80010b2:	bf00      	nop
 80010b4:	e7fe      	b.n	80010b4 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <xQueueGenericCreateStatic+0x7e>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <xQueueGenericCreateStatic+0x82>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <xQueueGenericCreateStatic+0x84>
 80010c6:	2300      	movs	r3, #0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 80010cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	61fb      	str	r3, [r7, #28]
    }
 80010de:	bf00      	nop
 80010e0:	e7fe      	b.n	80010e0 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80010e2:	234c      	movs	r3, #76	; 0x4c
 80010e4:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b4c      	cmp	r3, #76	; 0x4c
 80010ea:	d00a      	beq.n	8001102 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80010ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f0:	f383 8811 	msr	BASEPRI, r3
 80010f4:	f3bf 8f6f 	isb	sy
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	61bb      	str	r3, [r7, #24]
    }
 80010fe:	bf00      	nop
 8001100:	e7fe      	b.n	8001100 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001102:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00d      	beq.n	800112a <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4613      	mov	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f859 	bl	80011dc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800112c:	4618      	mov	r0, r3
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10a      	bne.n	800115e <xQueueGenericCreate+0x2a>
        __asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	61bb      	str	r3, [r7, #24]
    }
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <xQueueGenericCreate+0x48>
 800116e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d101      	bne.n	8001180 <xQueueGenericCreate+0x4c>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <xQueueGenericCreate+0x4e>
 8001180:	2300      	movs	r3, #0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10a      	bne.n	800119c <xQueueGenericCreate+0x68>
        __asm volatile
 8001186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	617b      	str	r3, [r7, #20]
    }
 8001198:	bf00      	nop
 800119a:	e7fe      	b.n	800119a <xQueueGenericCreate+0x66>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	334c      	adds	r3, #76	; 0x4c
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 feab 	bl	8003efc <pvPortMalloc>
 80011a6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d011      	beq.n	80011d2 <xQueueGenericCreate+0x9e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	334c      	adds	r3, #76	; 0x4c
 80011b6:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f805 	bl	80011dc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80011d2:	6a3b      	ldr	r3, [r7, #32]
    }
 80011d4:	4618      	mov	r0, r3
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e002      	b.n	80011fe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800120a:	2101      	movs	r1, #1
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff feb1 	bl	8000f74 <xQueueGenericReset>
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2200      	movs	r2, #0
 8001216:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10a      	bne.n	8001252 <xQueueGenericSend+0x32>
        __asm volatile
 800123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001240:	f383 8811 	msr	BASEPRI, r3
 8001244:	f3bf 8f6f 	isb	sy
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800124e:	bf00      	nop
 8001250:	e7fe      	b.n	8001250 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <xQueueGenericSend+0x40>
 8001258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <xQueueGenericSend+0x44>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <xQueueGenericSend+0x46>
 8001264:	2300      	movs	r3, #0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10a      	bne.n	8001280 <xQueueGenericSend+0x60>
        __asm volatile
 800126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	623b      	str	r3, [r7, #32]
    }
 800127c:	bf00      	nop
 800127e:	e7fe      	b.n	800127e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d103      	bne.n	800128e <xQueueGenericSend+0x6e>
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <xQueueGenericSend+0x72>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <xQueueGenericSend+0x74>
 8001292:	2300      	movs	r3, #0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10a      	bne.n	80012ae <xQueueGenericSend+0x8e>
        __asm volatile
 8001298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800129c:	f383 8811 	msr	BASEPRI, r3
 80012a0:	f3bf 8f6f 	isb	sy
 80012a4:	f3bf 8f4f 	dsb	sy
 80012a8:	61fb      	str	r3, [r7, #28]
    }
 80012aa:	bf00      	nop
 80012ac:	e7fe      	b.n	80012ac <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012ae:	f001 fc4f 	bl	8002b50 <xTaskGetSchedulerState>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <xQueueGenericSend+0x9e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <xQueueGenericSend+0xa2>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <xQueueGenericSend+0xa4>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10a      	bne.n	80012de <xQueueGenericSend+0xbe>
        __asm volatile
 80012c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	61bb      	str	r3, [r7, #24]
    }
 80012da:	bf00      	nop
 80012dc:	e7fe      	b.n	80012dc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80012de:	f002 fd17 	bl	8003d10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d302      	bcc.n	80012f4 <xQueueGenericSend+0xd4>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d145      	bne.n	8001380 <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001300:	f000 fb90 	bl	8001a24 <prvCopyDataToQueue>
 8001304:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	2b00      	cmp	r3, #0
 800130c:	d014      	beq.n	8001338 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d102      	bne.n	800131a <xQueueGenericSend+0xfa>
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	2b00      	cmp	r3, #0
 8001318:	d12e      	bne.n	8001378 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800131a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800131c:	f000 fd26 	bl	8001d6c <prvNotifyQueueSetContainer>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d028      	beq.n	8001378 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <xQueueGenericSend+0x230>)
 8001328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f3bf 8f4f 	dsb	sy
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	e01f      	b.n	8001378 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2b00      	cmp	r3, #0
 800133e:	d010      	beq.n	8001362 <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	3324      	adds	r3, #36	; 0x24
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fa39 	bl	80027bc <xTaskRemoveFromEventList>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <xQueueGenericSend+0x230>)
 8001352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	f3bf 8f4f 	dsb	sy
 800135c:	f3bf 8f6f 	isb	sy
 8001360:	e00a      	b.n	8001378 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <xQueueGenericSend+0x230>)
 800136a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	f3bf 8f4f 	dsb	sy
 8001374:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001378:	f002 fcfa 	bl	8003d70 <vPortExitCritical>
                return pdPASS;
 800137c:	2301      	movs	r3, #1
 800137e:	e063      	b.n	8001448 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d103      	bne.n	800138e <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001386:	f002 fcf3 	bl	8003d70 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800138a:	2300      	movs	r3, #0
 800138c:	e05c      	b.n	8001448 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fa71 	bl	8002880 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800139e:	2301      	movs	r3, #1
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013a2:	f002 fce5 	bl	8003d70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013a6:	f000 ff9b 	bl	80022e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013aa:	f002 fcb1 	bl	8003d10 <vPortEnterCritical>
 80013ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d103      	bne.n	80013c4 <xQueueGenericSend+0x1a4>
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d103      	bne.n	80013da <xQueueGenericSend+0x1ba>
 80013d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013da:	f002 fcc9 	bl	8003d70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013de:	1d3a      	adds	r2, r7, #4
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fa60 	bl	80028ac <xTaskCheckForTimeOut>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d124      	bne.n	800143c <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013f4:	f000 fc1b 	bl	8001c2e <prvIsQueueFull>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d018      	beq.n	8001430 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	3310      	adds	r3, #16
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f988 	bl	800271c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800140c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800140e:	f000 fb99 	bl	8001b44 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001412:	f000 ff73 	bl	80022fc <xTaskResumeAll>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f af60 	bne.w	80012de <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <xQueueGenericSend+0x230>)
 8001420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	e756      	b.n	80012de <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001432:	f000 fb87 	bl	8001b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001436:	f000 ff61 	bl	80022fc <xTaskResumeAll>
 800143a:	e750      	b.n	80012de <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800143c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800143e:	f000 fb81 	bl	8001b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001442:	f000 ff5b 	bl	80022fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001446:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001448:	4618      	mov	r0, r3
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	e000ed04 	.word	0xe000ed04

08001454 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b090      	sub	sp, #64	; 0x40
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10a      	bne.n	8001482 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800146c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001470:	f383 8811 	msr	BASEPRI, r3
 8001474:	f3bf 8f6f 	isb	sy
 8001478:	f3bf 8f4f 	dsb	sy
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800147e:	bf00      	nop
 8001480:	e7fe      	b.n	8001480 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <xQueueGenericSendFromISR+0x3c>
 8001488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <xQueueGenericSendFromISR+0x40>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <xQueueGenericSendFromISR+0x42>
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10a      	bne.n	80014b0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80014ac:	bf00      	nop
 80014ae:	e7fe      	b.n	80014ae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d103      	bne.n	80014be <xQueueGenericSendFromISR+0x6a>
 80014b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <xQueueGenericSendFromISR+0x6e>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <xQueueGenericSendFromISR+0x70>
 80014c2:	2300      	movs	r3, #0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10a      	bne.n	80014de <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80014c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014cc:	f383 8811 	msr	BASEPRI, r3
 80014d0:	f3bf 8f6f 	isb	sy
 80014d4:	f3bf 8f4f 	dsb	sy
 80014d8:	623b      	str	r3, [r7, #32]
    }
 80014da:	bf00      	nop
 80014dc:	e7fe      	b.n	80014dc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014de:	f002 fccf 	bl	8003e80 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80014e2:	f3ef 8211 	mrs	r2, BASEPRI
 80014e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ea:	f383 8811 	msr	BASEPRI, r3
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f3bf 8f4f 	dsb	sy
 80014f6:	61fa      	str	r2, [r7, #28]
 80014f8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80014fa:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001506:	429a      	cmp	r2, r3
 8001508:	d302      	bcc.n	8001510 <xQueueGenericSendFromISR+0xbc>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d155      	bne.n	80015bc <xQueueGenericSendFromISR+0x168>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001526:	f000 fa7d 	bl	8001a24 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800152a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800152e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001532:	d129      	bne.n	8001588 <xQueueGenericSendFromISR+0x134>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	2b00      	cmp	r3, #0
 800153a:	d012      	beq.n	8001562 <xQueueGenericSendFromISR+0x10e>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d102      	bne.n	8001548 <xQueueGenericSendFromISR+0xf4>
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d136      	bne.n	80015b6 <xQueueGenericSendFromISR+0x162>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800154a:	f000 fc0f 	bl	8001d6c <prvNotifyQueueSetContainer>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d030      	beq.n	80015b6 <xQueueGenericSendFromISR+0x162>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d02d      	beq.n	80015b6 <xQueueGenericSendFromISR+0x162>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e029      	b.n	80015b6 <xQueueGenericSendFromISR+0x162>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2b00      	cmp	r3, #0
 8001568:	d025      	beq.n	80015b6 <xQueueGenericSendFromISR+0x162>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156c:	3324      	adds	r3, #36	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f924 	bl	80027bc <xTaskRemoveFromEventList>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01d      	beq.n	80015b6 <xQueueGenericSendFromISR+0x162>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01a      	beq.n	80015b6 <xQueueGenericSendFromISR+0x162>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e016      	b.n	80015b6 <xQueueGenericSendFromISR+0x162>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001588:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800158c:	2b7f      	cmp	r3, #127	; 0x7f
 800158e:	d10a      	bne.n	80015a6 <xQueueGenericSendFromISR+0x152>
        __asm volatile
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	617b      	str	r3, [r7, #20]
    }
 80015a2:	bf00      	nop
 80015a4:	e7fe      	b.n	80015a4 <xQueueGenericSendFromISR+0x150>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80015a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80015b6:	2301      	movs	r3, #1
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80015ba:	e001      	b.n	80015c0 <xQueueGenericSendFromISR+0x16c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c2:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80015ca:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3740      	adds	r7, #64	; 0x40
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <xQueueReceive+0x30>
        __asm volatile
 80015f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f6:	f383 8811 	msr	BASEPRI, r3
 80015fa:	f3bf 8f6f 	isb	sy
 80015fe:	f3bf 8f4f 	dsb	sy
 8001602:	623b      	str	r3, [r7, #32]
    }
 8001604:	bf00      	nop
 8001606:	e7fe      	b.n	8001606 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d103      	bne.n	8001616 <xQueueReceive+0x3e>
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <xQueueReceive+0x42>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <xQueueReceive+0x44>
 800161a:	2300      	movs	r3, #0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <xQueueReceive+0x5e>
        __asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	61fb      	str	r3, [r7, #28]
    }
 8001632:	bf00      	nop
 8001634:	e7fe      	b.n	8001634 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001636:	f001 fa8b 	bl	8002b50 <xTaskGetSchedulerState>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <xQueueReceive+0x6e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <xQueueReceive+0x72>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <xQueueReceive+0x74>
 800164a:	2300      	movs	r3, #0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <xQueueReceive+0x8e>
        __asm volatile
 8001650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001654:	f383 8811 	msr	BASEPRI, r3
 8001658:	f3bf 8f6f 	isb	sy
 800165c:	f3bf 8f4f 	dsb	sy
 8001660:	61bb      	str	r3, [r7, #24]
    }
 8001662:	bf00      	nop
 8001664:	e7fe      	b.n	8001664 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001666:	f002 fb53 	bl	8003d10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01f      	beq.n	80016b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800167a:	f000 fa3d 	bl	8001af8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00f      	beq.n	80016ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	3310      	adds	r3, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f001 f892 	bl	80027bc <xTaskRemoveFromEventList>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <xQueueReceive+0x1bc>)
 80016a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016ae:	f002 fb5f 	bl	8003d70 <vPortExitCritical>
                return pdPASS;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e069      	b.n	800178a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80016bc:	f002 fb58 	bl	8003d70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e062      	b.n	800178a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 f8d6 	bl	8002880 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016d8:	f002 fb4a 	bl	8003d70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016dc:	f000 fe00 	bl	80022e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016e0:	f002 fb16 	bl	8003d10 <vPortEnterCritical>
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d103      	bne.n	80016fa <xQueueReceive+0x122>
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001700:	b25b      	sxtb	r3, r3
 8001702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001706:	d103      	bne.n	8001710 <xQueueReceive+0x138>
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001710:	f002 fb2e 	bl	8003d70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001714:	1d3a      	adds	r2, r7, #4
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f001 f8c5 	bl	80028ac <xTaskCheckForTimeOut>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d123      	bne.n	8001770 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800172a:	f000 fa6a 	bl	8001c02 <prvIsQueueEmpty>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d017      	beq.n	8001764 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	3324      	adds	r3, #36	; 0x24
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 ffed 	bl	800271c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001744:	f000 f9fe 	bl	8001b44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001748:	f000 fdd8 	bl	80022fc <xTaskResumeAll>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d189      	bne.n	8001666 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <xQueueReceive+0x1bc>)
 8001754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f3bf 8f4f 	dsb	sy
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	e780      	b.n	8001666 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001766:	f000 f9ed 	bl	8001b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800176a:	f000 fdc7 	bl	80022fc <xTaskResumeAll>
 800176e:	e77a      	b.n	8001666 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001772:	f000 f9e7 	bl	8001b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001776:	f000 fdc1 	bl	80022fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800177a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800177c:	f000 fa41 	bl	8001c02 <prvIsQueueEmpty>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f43f af6f 	beq.w	8001666 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001788:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800178a:	4618      	mov	r0, r3
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000ed04 	.word	0xe000ed04

08001798 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <xQueueSemaphoreTake+0x32>
        __asm volatile
 80017b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	623b      	str	r3, [r7, #32]
    }
 80017c6:	bf00      	nop
 80017c8:	e7fe      	b.n	80017c8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	61fb      	str	r3, [r7, #28]
    }
 80017e4:	bf00      	nop
 80017e6:	e7fe      	b.n	80017e6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017e8:	f001 f9b2 	bl	8002b50 <xTaskGetSchedulerState>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <xQueueSemaphoreTake+0x60>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <xQueueSemaphoreTake+0x64>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <xQueueSemaphoreTake+0x66>
 80017fc:	2300      	movs	r3, #0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8001802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001806:	f383 8811 	msr	BASEPRI, r3
 800180a:	f3bf 8f6f 	isb	sy
 800180e:	f3bf 8f4f 	dsb	sy
 8001812:	61bb      	str	r3, [r7, #24]
    }
 8001814:	bf00      	nop
 8001816:	e7fe      	b.n	8001816 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001818:	f002 fa7a 	bl	8003d10 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d024      	beq.n	8001872 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001838:	f001 fb26 	bl	8002e88 <pvTaskIncrementMutexHeldCount>
 800183c:	4602      	mov	r2, r0
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00f      	beq.n	800186a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	3310      	adds	r3, #16
 800184e:	4618      	mov	r0, r3
 8001850:	f000 ffb4 	bl	80027bc <xTaskRemoveFromEventList>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <xQueueSemaphoreTake+0x214>)
 800185c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800186a:	f002 fa81 	bl	8003d70 <vPortExitCritical>
                return pdPASS;
 800186e:	2301      	movs	r3, #1
 8001870:	e097      	b.n	80019a2 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	617b      	str	r3, [r7, #20]
    }
 8001890:	bf00      	nop
 8001892:	e7fe      	b.n	8001892 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001894:	f002 fa6c 	bl	8003d70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001898:	2300      	movs	r3, #0
 800189a:	e082      	b.n	80019a2 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 ffea 	bl	8002880 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80018b0:	f002 fa5e 	bl	8003d70 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80018b4:	f000 fd14 	bl	80022e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018b8:	f002 fa2a 	bl	8003d10 <vPortEnterCritical>
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d103      	bne.n	80018d2 <xQueueSemaphoreTake+0x13a>
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018de:	d103      	bne.n	80018e8 <xQueueSemaphoreTake+0x150>
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018e8:	f002 fa42 	bl	8003d70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018ec:	463a      	mov	r2, r7
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 ffd9 	bl	80028ac <xTaskCheckForTimeOut>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d132      	bne.n	8001966 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001902:	f000 f97e 	bl	8001c02 <prvIsQueueEmpty>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d026      	beq.n	800195a <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8001914:	f002 f9fc 	bl	8003d10 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f935 	bl	8002b8c <xTaskPriorityInherit>
 8001922:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8001924:	f002 fa24 	bl	8003d70 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	3324      	adds	r3, #36	; 0x24
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fef3 	bl	800271c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001938:	f000 f904 	bl	8001b44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800193c:	f000 fcde 	bl	80022fc <xTaskResumeAll>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f af68 	bne.w	8001818 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <xQueueSemaphoreTake+0x214>)
 800194a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	e75e      	b.n	8001818 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800195a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800195c:	f000 f8f2 	bl	8001b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001960:	f000 fccc 	bl	80022fc <xTaskResumeAll>
 8001964:	e758      	b.n	8001818 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001968:	f000 f8ec 	bl	8001b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800196c:	f000 fcc6 	bl	80022fc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001972:	f000 f946 	bl	8001c02 <prvIsQueueEmpty>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f43f af4d 	beq.w	8001818 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00d      	beq.n	80019a0 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8001984:	f002 f9c4 	bl	8003d10 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198a:	f000 f834 	bl	80019f6 <prvGetDisinheritPriorityAfterTimeout>
 800198e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f9e8 	bl	8002d6c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800199c:	f002 f9e8 	bl	8003d70 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80019a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3738      	adds	r7, #56	; 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000ed04 	.word	0xe000ed04

080019b0 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <vQueueDelete+0x28>
        __asm volatile
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	60bb      	str	r3, [r7, #8]
    }
 80019d4:	bf00      	nop
 80019d6:	e7fe      	b.n	80019d6 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f969 	bl	8001cb0 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f002 fb57 	bl	800409c <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1c3 0305 	rsb	r3, r3, #5
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e001      	b.n	8001a18 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001a18:	68fb      	ldr	r3, [r7, #12]
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d14d      	bne.n	8001ae6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f912 	bl	8002c78 <xTaskPriorityDisinherit>
 8001a54:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	e043      	b.n	8001ae6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d119      	bne.n	8001a98 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6858      	ldr	r0, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	f007 fada 	bl	8009028 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	441a      	add	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d32b      	bcc.n	8001ae6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e026      	b.n	8001ae6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	68d8      	ldr	r0, [r3, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	f007 fac0 	bl	8009028 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	441a      	add	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	425b      	negs	r3, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d105      	bne.n	8001ae6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001aee:	697b      	ldr	r3, [r7, #20]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d018      	beq.n	8001b3c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	441a      	add	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d303      	bcc.n	8001b2c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68d9      	ldr	r1, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	461a      	mov	r2, r3
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f007 fa76 	bl	8009028 <memcpy>
    }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001b4c:	f002 f8e0 	bl	8003d10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b56:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b58:	e01e      	b.n	8001b98 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f902 	bl	8001d6c <prvNotifyQueueSetContainer>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8001b6e:	f000 ff13 	bl	8002998 <vTaskMissedYield>
 8001b72:	e00d      	b.n	8001b90 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d012      	beq.n	8001ba2 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3324      	adds	r3, #36	; 0x24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fe1b 	bl	80027bc <xTaskRemoveFromEventList>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8001b8c:	f000 ff04 	bl	8002998 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	dcdc      	bgt.n	8001b5a <prvUnlockQueue+0x16>
 8001ba0:	e000      	b.n	8001ba4 <prvUnlockQueue+0x60>
                            break;
 8001ba2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	22ff      	movs	r2, #255	; 0xff
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001bac:	f002 f8e0 	bl	8003d70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001bb0:	f002 f8ae 	bl	8003d10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bba:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bbc:	e011      	b.n	8001be2 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d012      	beq.n	8001bec <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3310      	adds	r3, #16
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fdf6 	bl	80027bc <xTaskRemoveFromEventList>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8001bd6:	f000 fedf 	bl	8002998 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dce9      	bgt.n	8001bbe <prvUnlockQueue+0x7a>
 8001bea:	e000      	b.n	8001bee <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8001bec:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001bf6:	f002 f8bb 	bl	8003d70 <vPortExitCritical>
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c0a:	f002 f881 	bl	8003d10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e001      	b.n	8001c20 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c20:	f002 f8a6 	bl	8003d70 <vPortExitCritical>

    return xReturn;
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c36:	f002 f86b 	bl	8003d10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d102      	bne.n	8001c4c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e001      	b.n	8001c50 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c50:	f002 f88e 	bl	8003d70 <vPortExitCritical>

    return xReturn;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e014      	b.n	8001c9a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <vQueueAddToRegistry+0x4c>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c7c:	490b      	ldr	r1, [pc, #44]	; (8001cac <vQueueAddToRegistry+0x4c>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <vQueueAddToRegistry+0x4c>)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001c92:	e006      	b.n	8001ca2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d9e7      	bls.n	8001c70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20004aec 	.word	0x20004aec

08001cb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e016      	b.n	8001cec <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <vQueueUnregisterQueue+0x50>)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10b      	bne.n	8001ce6 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <vQueueUnregisterQueue+0x50>)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <vQueueUnregisterQueue+0x50>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
                break;
 8001ce4:	e006      	b.n	8001cf4 <vQueueUnregisterQueue+0x44>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d9e5      	bls.n	8001cbe <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20004aec 	.word	0x20004aec

08001d04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001d14:	f001 fffc 	bl	8003d10 <vPortEnterCritical>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d103      	bne.n	8001d2e <vQueueWaitForMessageRestricted+0x2a>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3a:	d103      	bne.n	8001d44 <vQueueWaitForMessageRestricted+0x40>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d44:	f002 f814 	bl	8003d70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3324      	adds	r3, #36	; 0x24
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fd03 	bl	8002764 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff fef0 	bl	8001b44 <prvUnlockQueue>
    }
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d78:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8001d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d88:	f383 8811 	msr	BASEPRI, r3
 8001d8c:	f3bf 8f6f 	isb	sy
 8001d90:	f3bf 8f4f 	dsb	sy
 8001d94:	613b      	str	r3, [r7, #16]
    }
 8001d96:	bf00      	nop
 8001d98:	e7fe      	b.n	8001d98 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d30a      	bcc.n	8001dbc <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	60fb      	str	r3, [r7, #12]
    }
 8001db8:	bf00      	nop
 8001dba:	e7fe      	b.n	8001dba <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d234      	bcs.n	8001e32 <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dce:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	f7ff fe24 	bl	8001a24 <prvCopyDataToQueue>
 8001ddc:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8001dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d10e      	bne.n	8001e06 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3324      	adds	r3, #36	; 0x24
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fce1 	bl	80027bc <xTaskRemoveFromEventList>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d018      	beq.n	8001e32 <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	e015      	b.n	8001e32 <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8001e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e0c:	d10a      	bne.n	8001e24 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8001e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	60bb      	str	r3, [r7, #8]
    }
 8001e20:	bf00      	nop
 8001e22:	e7fe      	b.n	8001e22 <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e32:	69fb      	ldr	r3, [r7, #28]
    }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	; 0x38
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <xTaskCreateStatic+0x2a>
        __asm volatile
 8001e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	623b      	str	r3, [r7, #32]
    }
 8001e62:	bf00      	nop
 8001e64:	e7fe      	b.n	8001e64 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <xTaskCreateStatic+0x46>
        __asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	61fb      	str	r3, [r7, #28]
    }
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b60      	cmp	r3, #96	; 0x60
 8001e8a:	d00a      	beq.n	8001ea2 <xTaskCreateStatic+0x66>
        __asm volatile
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	61bb      	str	r3, [r7, #24]
    }
 8001e9e:	bf00      	nop
 8001ea0:	e7fe      	b.n	8001ea0 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ea2:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01e      	beq.n	8001ee8 <xTaskCreateStatic+0xac>
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


			#if ( configUSE_DMA_CONTAINER == 1 )
                prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL,NULL);
			#else
                prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9303      	str	r3, [sp, #12]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f850 	bl	8001f80 <prvInitialiseNewTask>
			#endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee2:	f000 f8f5 	bl	80020d0 <prvAddNewTaskToReadyList>
 8001ee6:	e001      	b.n	8001eec <xTaskCreateStatic+0xb0>

			#endif
        }
        else
        {
            xReturn = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001eec:	697b      	ldr	r3, [r7, #20]
    }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b08c      	sub	sp, #48	; 0x30
 8001efa:	af04      	add	r7, sp, #16
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fff6 	bl	8003efc <pvPortMalloc>
 8001f10:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f18:	2060      	movs	r0, #96	; 0x60
 8001f1a:	f001 ffef 	bl	8003efc <pvPortMalloc>
 8001f1e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2c:	e005      	b.n	8001f3a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f002 f8b4 	bl	800409c <vPortFree>
 8001f34:	e001      	b.n	8001f3a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			#if ( configUSE_DMA_CONTAINER == 1 )
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, NULL );
			#else
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9303      	str	r3, [sp, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f80e 	bl	8001f80 <prvInitialiseNewTask>
			#endif
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f64:	69f8      	ldr	r0, [r7, #28]
 8001f66:	f000 f8b3 	bl	80020d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	e002      	b.n	8001f76 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f76:	69bb      	ldr	r3, [r7, #24]
    }
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <prvInitialiseNewTask>:
                                  const MemoryRegion_t * const xRegions
								  #if ( configUSE_DMA_CONTAINER == 1 )
								  , PeripheralPermission_t * xPeripheralPermissions
								  #endif
								)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	461a      	mov	r2, r3
 8001f98:	21a5      	movs	r1, #165	; 0xa5
 8001f9a:	f007 f853 	bl	8009044 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f023 0307 	bic.w	r3, r3, #7
 8001fb6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	617b      	str	r3, [r7, #20]
    }
 8001fd4:	bf00      	nop
 8001fd6:	e7fe      	b.n	8001fd6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01f      	beq.n	800201e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e012      	b.n	800200a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	7819      	ldrb	r1, [r3, #0]
 8001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3334      	adds	r3, #52	; 0x34
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3301      	adds	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d9e9      	bls.n	8001fe4 <prvInitialiseNewTask+0x64>
 8002010:	e000      	b.n	8002014 <prvInitialiseNewTask+0x94>
            {
                break;
 8002012:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800201c:	e003      	b.n	8002026 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2b04      	cmp	r3, #4
 800202a:	d901      	bls.n	8002030 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800202c:	2304      	movs	r3, #4
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	3304      	adds	r3, #4
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe ff03 	bl	8000e52 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	3318      	adds	r3, #24
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fefe 	bl	8000e52 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	f1c3 0205 	rsb	r2, r3, #5
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	2200      	movs	r2, #0
 8002070:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	2200      	movs	r2, #0
 8002076:	655a      	str	r2, [r3, #84]	; 0x54



    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	334c      	adds	r3, #76	; 0x4c
 800207c:	2208      	movs	r2, #8
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f006 ffdf 	bl	8009044 <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	3358      	adds	r3, #88	; 0x58
 800208a:	2204      	movs	r2, #4
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f006 ffd8 	bl	8009044 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	335c      	adds	r3, #92	; 0x5c
 8002098:	2201      	movs	r2, #1
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f006 ffd1 	bl	8009044 <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	69b8      	ldr	r0, [r7, #24]
 80020b0:	f001 fd3e 	bl	8003b30 <pxPortInitialiseStack>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <prvInitialiseNewTask+0x146>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020d8:	f001 fe1a 	bl	8003d10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <prvAddNewTaskToReadyList+0xb8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a29      	ldr	r2, [pc, #164]	; (8002188 <prvAddNewTaskToReadyList+0xb8>)
 80020e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <prvAddNewTaskToReadyList+0xbc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020ee:	4a27      	ldr	r2, [pc, #156]	; (800218c <prvAddNewTaskToReadyList+0xbc>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <prvAddNewTaskToReadyList+0xb8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d110      	bne.n	800211e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80020fc:	f000 fc70 	bl	80029e0 <prvInitialiseTaskLists>
 8002100:	e00d      	b.n	800211e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <prvAddNewTaskToReadyList+0xc0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <prvAddNewTaskToReadyList+0xbc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	429a      	cmp	r2, r3
 8002116:	d802      	bhi.n	800211e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <prvAddNewTaskToReadyList+0xbc>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <prvAddNewTaskToReadyList+0xc4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <prvAddNewTaskToReadyList+0xc4>)
 8002126:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2201      	movs	r2, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <prvAddNewTaskToReadyList+0xc8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <prvAddNewTaskToReadyList+0xc8>)
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4a15      	ldr	r2, [pc, #84]	; (800219c <prvAddNewTaskToReadyList+0xcc>)
 8002148:	441a      	add	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7fe fe8a 	bl	8000e6a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002156:	f001 fe0b 	bl	8003d70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <prvAddNewTaskToReadyList+0xc0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <prvAddNewTaskToReadyList+0xbc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
 800216e:	d207      	bcs.n	8002180 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <prvAddNewTaskToReadyList+0xd0>)
 8002172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000108 	.word	0x20000108
 800218c:	20000030 	.word	0x20000030
 8002190:	20000114 	.word	0x20000114
 8002194:	20000124 	.word	0x20000124
 8002198:	20000110 	.word	0x20000110
 800219c:	20000034 	.word	0x20000034
 80021a0:	e000ed04 	.word	0xe000ed04

080021a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d017      	beq.n	80021e6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <vTaskDelay+0x60>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <vTaskDelay+0x30>
        __asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	60bb      	str	r3, [r7, #8]
    }
 80021d0:	bf00      	nop
 80021d2:	e7fe      	b.n	80021d2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80021d4:	f000 f884 	bl	80022e0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 f8b2 	bl	8003344 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80021e0:	f000 f88c 	bl	80022fc <xTaskResumeAll>
 80021e4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <vTaskDelay+0x64>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000130 	.word	0x20000130
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800221a:	463a      	mov	r2, r7
 800221c:	1d39      	adds	r1, r7, #4
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fc1c 	bl	8005a60 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	9202      	str	r2, [sp, #8]
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	460a      	mov	r2, r1
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <vTaskStartScheduler+0xb8>)
 800223c:	4822      	ldr	r0, [pc, #136]	; (80022c8 <vTaskStartScheduler+0xbc>)
 800223e:	f7ff fdfd 	bl	8001e3c <xTaskCreateStatic>
 8002242:	4603      	mov	r3, r0
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <vTaskStartScheduler+0xc0>)
 8002246:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <vTaskStartScheduler+0xc0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8002250:	2301      	movs	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e001      	b.n	800225a <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8002260:	f001 f8da 	bl	8003418 <xTimerCreateTimerTask>
 8002264:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d116      	bne.n	800229a <vTaskStartScheduler+0x8e>
        __asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	613b      	str	r3, [r7, #16]
    }
 800227e:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <vTaskStartScheduler+0xc4>)
 8002282:	f04f 32ff 	mov.w	r2, #4294967295
 8002286:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <vTaskStartScheduler+0xc8>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <vTaskStartScheduler+0xcc>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002294:	f001 fcca 	bl	8003c2c <xPortStartScheduler>
 8002298:	e00e      	b.n	80022b8 <vTaskStartScheduler+0xac>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d10a      	bne.n	80022b8 <vTaskStartScheduler+0xac>
        __asm volatile
 80022a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	60fb      	str	r3, [r7, #12]
    }
 80022b4:	bf00      	nop
 80022b6:	e7fe      	b.n	80022b6 <vTaskStartScheduler+0xaa>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <vTaskStartScheduler+0xd0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	0800906c 	.word	0x0800906c
 80022c8:	080029b1 	.word	0x080029b1
 80022cc:	2000012c 	.word	0x2000012c
 80022d0:	20000128 	.word	0x20000128
 80022d4:	20000114 	.word	0x20000114
 80022d8:	2000010c 	.word	0x2000010c
 80022dc:	20000000 	.word	0x20000000

080022e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <vTaskSuspendAll+0x18>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <vTaskSuspendAll+0x18>)
 80022ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000130 	.word	0x20000130

080022fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <xTaskResumeAll+0x114>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <xTaskResumeAll+0x2c>
        __asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	603b      	str	r3, [r7, #0]
    }
 8002324:	bf00      	nop
 8002326:	e7fe      	b.n	8002326 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002328:	f001 fcf2 	bl	8003d10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <xTaskResumeAll+0x114>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	4a37      	ldr	r2, [pc, #220]	; (8002410 <xTaskResumeAll+0x114>)
 8002334:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <xTaskResumeAll+0x114>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d161      	bne.n	8002402 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800233e:	4b35      	ldr	r3, [pc, #212]	; (8002414 <xTaskResumeAll+0x118>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d05d      	beq.n	8002402 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002346:	e02e      	b.n	80023a6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002348:	4b33      	ldr	r3, [pc, #204]	; (8002418 <xTaskResumeAll+0x11c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3318      	adds	r3, #24
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fde3 	bl	8000f20 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3304      	adds	r3, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fdde 	bl	8000f20 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2201      	movs	r2, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <xTaskResumeAll+0x120>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4313      	orrs	r3, r2
 8002372:	4a2a      	ldr	r2, [pc, #168]	; (800241c <xTaskResumeAll+0x120>)
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <xTaskResumeAll+0x124>)
 8002384:	441a      	add	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3304      	adds	r3, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f7fe fd6c 	bl	8000e6a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <xTaskResumeAll+0x128>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <xTaskResumeAll+0x12c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <xTaskResumeAll+0x11c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1cc      	bne.n	8002348 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80023b4:	f000 fbb2 	bl	8002b1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <xTaskResumeAll+0x130>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80023c4:	f000 f856 	bl	8002474 <xTaskIncrementTick>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <xTaskResumeAll+0x12c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f1      	bne.n	80023c4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <xTaskResumeAll+0x130>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <xTaskResumeAll+0x12c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <xTaskResumeAll+0x134>)
 80023f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002402:	f001 fcb5 	bl	8003d70 <vPortExitCritical>

    return xAlreadyYielded;
 8002406:	68bb      	ldr	r3, [r7, #8]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000130 	.word	0x20000130
 8002414:	20000108 	.word	0x20000108
 8002418:	200000c8 	.word	0x200000c8
 800241c:	20000110 	.word	0x20000110
 8002420:	20000034 	.word	0x20000034
 8002424:	20000030 	.word	0x20000030
 8002428:	2000011c 	.word	0x2000011c
 800242c:	20000118 	.word	0x20000118
 8002430:	e000ed04 	.word	0xe000ed04

08002434 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <xTaskGetTickCount+0x18>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	2000010c 	.word	0x2000010c

08002450 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002456:	f001 fd13 	bl	8003e80 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <xTaskGetTickCountFromISR+0x20>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002464:	683b      	ldr	r3, [r7, #0]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000010c 	.word	0x2000010c

08002474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800247e:	4b4e      	ldr	r3, [pc, #312]	; (80025b8 <xTaskIncrementTick+0x144>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 808e 	bne.w	80025a4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <xTaskIncrementTick+0x148>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <xTaskIncrementTick+0x148>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d120      	bne.n	80024de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800249c:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <xTaskIncrementTick+0x14c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <xTaskIncrementTick+0x48>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	603b      	str	r3, [r7, #0]
    }
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xTaskIncrementTick+0x46>
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <xTaskIncrementTick+0x14c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <xTaskIncrementTick+0x150>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3e      	ldr	r2, [pc, #248]	; (80025c0 <xTaskIncrementTick+0x14c>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <xTaskIncrementTick+0x150>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <xTaskIncrementTick+0x154>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <xTaskIncrementTick+0x154>)
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	f000 fb1f 	bl	8002b1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <xTaskIncrementTick+0x158>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d348      	bcc.n	800257a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <xTaskIncrementTick+0x14c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <xTaskIncrementTick+0x158>)
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	601a      	str	r2, [r3, #0]
                    break;
 80024fa:	e03e      	b.n	800257a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <xTaskIncrementTick+0x14c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	d203      	bcs.n	800251c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <xTaskIncrementTick+0x158>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800251a:	e02e      	b.n	800257a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3304      	adds	r3, #4
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fcfd 	bl	8000f20 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3318      	adds	r3, #24
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fcf4 	bl	8000f20 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2201      	movs	r2, #1
 800253e:	409a      	lsls	r2, r3
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <xTaskIncrementTick+0x15c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <xTaskIncrementTick+0x15c>)
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <xTaskIncrementTick+0x160>)
 8002558:	441a      	add	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3304      	adds	r3, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7fe fc82 	bl	8000e6a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <xTaskIncrementTick+0x164>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	429a      	cmp	r2, r3
 8002572:	d3b9      	bcc.n	80024e8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002574:	2301      	movs	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002578:	e7b6      	b.n	80024e8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <xTaskIncrementTick+0x164>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	4914      	ldr	r1, [pc, #80]	; (80025d4 <xTaskIncrementTick+0x160>)
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d901      	bls.n	8002596 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002592:	2301      	movs	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <xTaskIncrementTick+0x168>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e004      	b.n	80025ae <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <xTaskIncrementTick+0x16c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <xTaskIncrementTick+0x16c>)
 80025ac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80025ae:	697b      	ldr	r3, [r7, #20]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000130 	.word	0x20000130
 80025bc:	2000010c 	.word	0x2000010c
 80025c0:	200000c0 	.word	0x200000c0
 80025c4:	200000c4 	.word	0x200000c4
 80025c8:	20000120 	.word	0x20000120
 80025cc:	20000128 	.word	0x20000128
 80025d0:	20000110 	.word	0x20000110
 80025d4:	20000034 	.word	0x20000034
 80025d8:	20000030 	.word	0x20000030
 80025dc:	2000011c 	.word	0x2000011c
 80025e0:	20000118 	.word	0x20000118

080025e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025ea:	4b45      	ldr	r3, [pc, #276]	; (8002700 <vTaskSwitchContext+0x11c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80025f2:	4b44      	ldr	r3, [pc, #272]	; (8002704 <vTaskSwitchContext+0x120>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80025f8:	e07d      	b.n	80026f6 <vTaskSwitchContext+0x112>
        xYieldPending = pdFALSE;
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <vTaskSwitchContext+0x120>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <vTaskSwitchContext+0x124>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <vTaskSwitchContext+0x124>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <vTaskSwitchContext+0x128>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d909      	bls.n	8002626 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <vTaskSwitchContext+0x124>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <vTaskSwitchContext+0x128>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	1ad1      	subs	r1, r2, r3
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <vTaskSwitchContext+0x12c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002622:	440a      	add	r2, r1
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
                ulTaskSwitchedInTime = ulTotalRunTime;
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <vTaskSwitchContext+0x124>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a38      	ldr	r2, [pc, #224]	; (800270c <vTaskSwitchContext+0x128>)
 800262c:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <vTaskSwitchContext+0x12c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	d111      	bne.n	800266a <vTaskSwitchContext+0x86>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	429a      	cmp	r2, r3
 8002650:	d10b      	bne.n	800266a <vTaskSwitchContext+0x86>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3308      	adds	r3, #8
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	429a      	cmp	r2, r3
 800265c:	d105      	bne.n	800266a <vTaskSwitchContext+0x86>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	330c      	adds	r3, #12
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	429a      	cmp	r2, r3
 8002668:	d008      	beq.n	800267c <vTaskSwitchContext+0x98>
 800266a:	4b29      	ldr	r3, [pc, #164]	; (8002710 <vTaskSwitchContext+0x12c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <vTaskSwitchContext+0x12c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3334      	adds	r3, #52	; 0x34
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f003 f9e8 	bl	8005a4c <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <vTaskSwitchContext+0x130>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	f1c3 031f 	rsb	r3, r3, #31
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4921      	ldr	r1, [pc, #132]	; (8002718 <vTaskSwitchContext+0x134>)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <vTaskSwitchContext+0xd8>
        __asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	607b      	str	r3, [r7, #4]
    }
 80026b8:	bf00      	nop
 80026ba:	e7fe      	b.n	80026ba <vTaskSwitchContext+0xd6>
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <vTaskSwitchContext+0x134>)
 80026c8:	4413      	add	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	3308      	adds	r3, #8
 80026de:	429a      	cmp	r2, r3
 80026e0:	d104      	bne.n	80026ec <vTaskSwitchContext+0x108>
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <vTaskSwitchContext+0x12c>)
 80026f4:	6013      	str	r3, [r2, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000130 	.word	0x20000130
 8002704:	2000011c 	.word	0x2000011c
 8002708:	20000138 	.word	0x20000138
 800270c:	20000134 	.word	0x20000134
 8002710:	20000030 	.word	0x20000030
 8002714:	20000110 	.word	0x20000110
 8002718:	20000034 	.word	0x20000034

0800271c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	60fb      	str	r3, [r7, #12]
    }
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <vTaskPlaceOnEventList+0x44>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3318      	adds	r3, #24
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fbb0 	bl	8000eb0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002750:	2101      	movs	r1, #1
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	f000 fdf6 	bl	8003344 <prvAddCurrentTaskToDelayedList>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000030 	.word	0x20000030

08002764 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	617b      	str	r3, [r7, #20]
    }
 8002788:	bf00      	nop
 800278a:	e7fe      	b.n	800278a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3318      	adds	r3, #24
 8002792:	4619      	mov	r1, r3
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7fe fb68 	bl	8000e6a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	f000 fdcb 	bl	8003344 <prvAddCurrentTaskToDelayedList>
    }
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000030 	.word	0x20000030

080027bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	60fb      	str	r3, [r7, #12]
    }
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	3318      	adds	r3, #24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fb97 	bl	8000f20 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <xTaskRemoveFromEventList+0xac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11c      	bne.n	8002834 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fb8e 	bl	8000f20 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2201      	movs	r2, #1
 800280a:	409a      	lsls	r2, r3
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <xTaskRemoveFromEventList+0xb0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <xTaskRemoveFromEventList+0xb0>)
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <xTaskRemoveFromEventList+0xb4>)
 8002824:	441a      	add	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	3304      	adds	r3, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f7fe fb1c 	bl	8000e6a <vListInsertEnd>
 8002832:	e005      	b.n	8002840 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3318      	adds	r3, #24
 8002838:	4619      	mov	r1, r3
 800283a:	480e      	ldr	r0, [pc, #56]	; (8002874 <xTaskRemoveFromEventList+0xb8>)
 800283c:	f7fe fb15 	bl	8000e6a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <xTaskRemoveFromEventList+0xbc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	429a      	cmp	r2, r3
 800284c:	d905      	bls.n	800285a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <xTaskRemoveFromEventList+0xc0>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e001      	b.n	800285e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800285e:	697b      	ldr	r3, [r7, #20]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000130 	.word	0x20000130
 800286c:	20000110 	.word	0x20000110
 8002870:	20000034 	.word	0x20000034
 8002874:	200000c8 	.word	0x200000c8
 8002878:	20000030 	.word	0x20000030
 800287c:	2000011c 	.word	0x2000011c

08002880 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <vTaskInternalSetTimeOutState+0x24>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <vTaskInternalSetTimeOutState+0x28>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	605a      	str	r2, [r3, #4]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000120 	.word	0x20000120
 80028a8:	2000010c 	.word	0x2000010c

080028ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	613b      	str	r3, [r7, #16]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	60fb      	str	r3, [r7, #12]
    }
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80028ee:	f001 fa0f 	bl	8003d10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <xTaskCheckForTimeOut+0xe0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <xTaskCheckForTimeOut+0xe4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <xTaskCheckForTimeOut+0xe4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                xReturn = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e02e      	b.n	800297c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d102      	bne.n	800292e <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	e026      	b.n	800297c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <xTaskCheckForTimeOut+0xe8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d00a      	beq.n	8002950 <xTaskCheckForTimeOut+0xa4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	d305      	bcc.n	8002950 <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e015      	b.n	800297c <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	429a      	cmp	r2, r3
 8002958:	d20b      	bcs.n	8002972 <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	1ad2      	subs	r2, r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff8a 	bl	8002880 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	e004      	b.n	800297c <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800297c:	f001 f9f8 	bl	8003d70 <vPortExitCritical>

    return xReturn;
 8002980:	69fb      	ldr	r3, [r7, #28]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000010c 	.word	0x2000010c
 8002990:	20000030 	.word	0x20000030
 8002994:	20000120 	.word	0x20000120

08002998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <vTaskMissedYield+0x14>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000011c 	.word	0x2000011c

080029b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029b8:	f000 f852 	bl	8002a60 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <prvIdleTask+0x28>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d9f9      	bls.n	80029b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <prvIdleTask+0x2c>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029d4:	e7f0      	b.n	80029b8 <prvIdleTask+0x8>
 80029d6:	bf00      	nop
 80029d8:	20000034 	.word	0x20000034
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	e00c      	b.n	8002a06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <prvInitialiseTaskLists+0x60>)
 80029f8:	4413      	add	r3, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fa0a 	bl	8000e14 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d9ef      	bls.n	80029ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <prvInitialiseTaskLists+0x64>)
 8002a0e:	f7fe fa01 	bl	8000e14 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a12:	480d      	ldr	r0, [pc, #52]	; (8002a48 <prvInitialiseTaskLists+0x68>)
 8002a14:	f7fe f9fe 	bl	8000e14 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <prvInitialiseTaskLists+0x6c>)
 8002a1a:	f7fe f9fb 	bl	8000e14 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a1e:	480c      	ldr	r0, [pc, #48]	; (8002a50 <prvInitialiseTaskLists+0x70>)
 8002a20:	f7fe f9f8 	bl	8000e14 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a24:	480b      	ldr	r0, [pc, #44]	; (8002a54 <prvInitialiseTaskLists+0x74>)
 8002a26:	f7fe f9f5 	bl	8000e14 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <prvInitialiseTaskLists+0x78>)
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <prvInitialiseTaskLists+0x64>)
 8002a2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <prvInitialiseTaskLists+0x7c>)
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <prvInitialiseTaskLists+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000034 	.word	0x20000034
 8002a44:	20000098 	.word	0x20000098
 8002a48:	200000ac 	.word	0x200000ac
 8002a4c:	200000c8 	.word	0x200000c8
 8002a50:	200000dc 	.word	0x200000dc
 8002a54:	200000f4 	.word	0x200000f4
 8002a58:	200000c0 	.word	0x200000c0
 8002a5c:	200000c4 	.word	0x200000c4

08002a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a66:	e019      	b.n	8002a9c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a68:	f001 f952 	bl	8003d10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <prvCheckTasksWaitingTermination+0x50>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fa51 	bl	8000f20 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <prvCheckTasksWaitingTermination+0x54>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <prvCheckTasksWaitingTermination+0x54>)
 8002a86:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <prvCheckTasksWaitingTermination+0x58>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <prvCheckTasksWaitingTermination+0x58>)
 8002a90:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a92:	f001 f96d 	bl	8003d70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f810 	bl	8002abc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <prvCheckTasksWaitingTermination+0x58>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e1      	bne.n	8002a68 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200000dc 	.word	0x200000dc
 8002ab4:	20000108 	.word	0x20000108
 8002ab8:	200000f0 	.word	0x200000f0

08002abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fae2 	bl	800409c <vPortFree>
                    vPortFree( pxTCB );
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f001 fadf 	bl	800409c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ade:	e018      	b.n	8002b12 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d103      	bne.n	8002af2 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f001 fad6 	bl	800409c <vPortFree>
    }
 8002af0:	e00f      	b.n	8002b12 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d00a      	beq.n	8002b12 <prvDeleteTCB+0x56>
        __asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	60fb      	str	r3, [r7, #12]
    }
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <prvDeleteTCB+0x54>
    }
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <prvResetNextTaskUnblockTime+0x2c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <prvResetNextTaskUnblockTime+0x30>)
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b32:	e005      	b.n	8002b40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <prvResetNextTaskUnblockTime+0x2c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <prvResetNextTaskUnblockTime+0x30>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	200000c0 	.word	0x200000c0
 8002b4c:	20000128 	.word	0x20000128

08002b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <xTaskGetSchedulerState+0x34>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e008      	b.n	8002b76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <xTaskGetSchedulerState+0x38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	e001      	b.n	8002b76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002b76:	687b      	ldr	r3, [r7, #4]
    }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000114 	.word	0x20000114
 8002b88:	20000130 	.word	0x20000130

08002b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d05e      	beq.n	8002c60 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <xTaskPriorityInherit+0xe0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d24e      	bcs.n	8002c4e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db06      	blt.n	8002bc6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <xTaskPriorityInherit+0xe0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f1c3 0205 	rsb	r2, r3, #5
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <xTaskPriorityInherit+0xe4>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	4299      	cmp	r1, r3
 8002bdc:	d12f      	bne.n	8002c3e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3304      	adds	r3, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f99c 	bl	8000f20 <uxListRemove>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <xTaskPriorityInherit+0xe8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <xTaskPriorityInherit+0xe8>)
 8002c02:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <xTaskPriorityInherit+0xe0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <xTaskPriorityInherit+0xe8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <xTaskPriorityInherit+0xe8>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <xTaskPriorityInherit+0xe4>)
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7fe f917 	bl	8000e6a <vListInsertEnd>
 8002c3c:	e004      	b.n	8002c48 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <xTaskPriorityInherit+0xe0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e008      	b.n	8002c60 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <xTaskPriorityInherit+0xe0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d201      	bcs.n	8002c60 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c60:	68fb      	ldr	r3, [r7, #12]
    }
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000030 	.word	0x20000030
 8002c70:	20000034 	.word	0x20000034
 8002c74:	20000110 	.word	0x20000110

08002c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d063      	beq.n	8002d56 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <xTaskPriorityDisinherit+0xe8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d00a      	beq.n	8002cae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	60fb      	str	r3, [r7, #12]
    }
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
    }
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d039      	beq.n	8002d56 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d135      	bne.n	8002d56 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f916 	bl	8000f20 <uxListRemove>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <xTaskPriorityDisinherit+0xec>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <xTaskPriorityDisinherit+0xec>)
 8002d0e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f1c3 0205 	rsb	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <xTaskPriorityDisinherit+0xec>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <xTaskPriorityDisinherit+0xec>)
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <xTaskPriorityDisinherit+0xf0>)
 8002d44:	441a      	add	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7fe f88c 	bl	8000e6a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002d56:	697b      	ldr	r3, [r7, #20]
    }
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000030 	.word	0x20000030
 8002d64:	20000110 	.word	0x20000110
 8002d68:	20000034 	.word	0x20000034

08002d6c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d077      	beq.n	8002e74 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
    }
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d902      	bls.n	8002db2 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e002      	b.n	8002db8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d058      	beq.n	8002e74 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d153      	bne.n	8002e74 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10a      	bne.n	8002dec <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	60bb      	str	r3, [r7, #8]
    }
 8002de8:	bf00      	nop
 8002dea:	e7fe      	b.n	8002dea <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db04      	blt.n	8002e0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0205 	rsb	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6959      	ldr	r1, [r3, #20]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4299      	cmp	r1, r3
 8002e1e:	d129      	bne.n	8002e74 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f87b 	bl	8000f20 <uxListRemove>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4013      	ands	r3, r2
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002e44:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002e66:	441a      	add	r2, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7fd fffb 	bl	8000e6a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e74:	bf00      	nop
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000030 	.word	0x20000030
 8002e80:	20000034 	.word	0x20000034
 8002e84:	20000110 	.word	0x20000110

08002e88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <pvTaskIncrementMutexHeldCount+0x24>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <pvTaskIncrementMutexHeldCount+0x24>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9a:	3201      	adds	r2, #1
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8002e9e:	4b03      	ldr	r3, [pc, #12]	; (8002eac <pvTaskIncrementMutexHeldCount+0x24>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
    }
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000030 	.word	0x20000030

08002eb0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	613b      	str	r3, [r7, #16]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8002ed8:	f000 ff1a 	bl	8003d10 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	3216      	adds	r2, #22
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d115      	bne.n	8002f18 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	335c      	adds	r3, #92	; 0x5c
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f00:	2101      	movs	r1, #1
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa1e 	bl	8003344 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <ulTaskGenericNotifyTake+0xcc>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f18:	f000 ff2a 	bl	8003d70 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002f1c:	f000 fef8 	bl	8003d10 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	3216      	adds	r2, #22
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	3216      	adds	r2, #22
 8002f42:	2100      	movs	r1, #0
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f48:	e007      	b.n	8002f5a <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	1e51      	subs	r1, r2, #1
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	3216      	adds	r2, #22
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <ulTaskGenericNotifyTake+0xc8>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	335c      	adds	r3, #92	; 0x5c
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002f68:	f000 ff02 	bl	8003d70 <vPortExitCritical>

        return ulReturn;
 8002f6c:	697b      	ldr	r3, [r7, #20]
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000030 	.word	0x20000030
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <xTaskGenericNotify+0x2e>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	623b      	str	r3, [r7, #32]
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xTaskGenericNotify+0x4a>
        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61fb      	str	r3, [r7, #28]
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002fce:	f000 fe9f 	bl	8003d10 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	3216      	adds	r2, #22
 8002fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	335c      	adds	r3, #92	; 0x5c
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d83b      	bhi.n	800307e <xTaskGenericNotify+0xfe>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <xTaskGenericNotify+0x8c>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800309d 	.word	0x0800309d
 8003010:	08003021 	.word	0x08003021
 8003014:	0800303d 	.word	0x0800303d
 8003018:	08003055 	.word	0x08003055
 800301c:	08003063 	.word	0x08003063
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	3216      	adds	r2, #22
 8003026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	3216      	adds	r2, #22
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800303a:	e032      	b.n	80030a2 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	3216      	adds	r2, #22
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	1c59      	adds	r1, r3, #1
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	3216      	adds	r2, #22
 800304e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003052:	e026      	b.n	80030a2 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	3216      	adds	r2, #22
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003060:	e01f      	b.n	80030a2 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003066:	2b02      	cmp	r3, #2
 8003068:	d006      	beq.n	8003078 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	3216      	adds	r2, #22
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003076:	e014      	b.n	80030a2 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800307c:	e011      	b.n	80030a2 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <xTaskGenericNotify+0x1ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <xTaskGenericNotify+0x120>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61bb      	str	r3, [r7, #24]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskGenericNotify+0x11a>
                    break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <xTaskGenericNotify+0x122>

                    break;
 80030a0:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80030a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d139      	bne.n	800311e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	3304      	adds	r3, #4
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd ff36 	bl	8000f20 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <xTaskGenericNotify+0x1b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <xTaskGenericNotify+0x1b0>)
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <xTaskGenericNotify+0x1b4>)
 80030d4:	441a      	add	r2, r3
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7fd fec4 	bl	8000e6a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <xTaskGenericNotify+0x180>
        __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	617b      	str	r3, [r7, #20]
    }
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <xTaskGenericNotify+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	429a      	cmp	r2, r3
 800310c:	d907      	bls.n	800311e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <xTaskGenericNotify+0x1bc>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800311e:	f000 fe27 	bl	8003d70 <vPortExitCritical>

        return xReturn;
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003124:	4618      	mov	r0, r3
 8003126:	3730      	adds	r7, #48	; 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000010c 	.word	0x2000010c
 8003130:	20000110 	.word	0x20000110
 8003134:	20000034 	.word	0x20000034
 8003138:	20000030 	.word	0x20000030
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003140:	b580      	push	{r7, lr}
 8003142:	b090      	sub	sp, #64	; 0x40
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800314e:	2301      	movs	r3, #1
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800318a:	f000 fe79 	bl	8003e80 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003192:	f3ef 8211 	mrs	r2, BASEPRI
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	627a      	str	r2, [r7, #36]	; 0x24
 80031a8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	3216      	adds	r2, #22
 80031ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4413      	add	r3, r2
 80031c8:	335c      	adds	r3, #92	; 0x5c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	335c      	adds	r3, #92	; 0x5c
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d83b      	bhi.n	800325a <xTaskGenericNotifyFromISR+0x11a>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <xTaskGenericNotifyFromISR+0xa8>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003279 	.word	0x08003279
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003231 	.word	0x08003231
 80031f8:	0800323f 	.word	0x0800323f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	3216      	adds	r2, #22
 8003202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	3216      	adds	r2, #22
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003216:	e032      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	3216      	adds	r2, #22
 800321e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	3216      	adds	r2, #22
 800322a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800322e:	e026      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	3216      	adds	r2, #22
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800323c:	e01f      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800323e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003242:	2b02      	cmp	r3, #2
 8003244:	d006      	beq.n	8003254 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	3216      	adds	r2, #22
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003252:	e014      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003258:	e011      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <xTaskGenericNotifyFromISR+0x1e8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	61fb      	str	r3, [r7, #28]
    }
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800327c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800327e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003282:	2b01      	cmp	r3, #1
 8003284:	d145      	bne.n	8003312 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	61bb      	str	r3, [r7, #24]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <xTaskGenericNotifyFromISR+0x1ec>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11c      	bne.n	80032e6 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd fe35 	bl	8000f20 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2201      	movs	r2, #1
 80032bc:	409a      	lsls	r2, r3
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <xTaskGenericNotifyFromISR+0x1f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <xTaskGenericNotifyFromISR+0x1f0>)
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <xTaskGenericNotifyFromISR+0x1f4>)
 80032d6:	441a      	add	r2, r3
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fd fdc3 	bl	8000e6a <vListInsertEnd>
 80032e4:	e005      	b.n	80032f2 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	3318      	adds	r3, #24
 80032ea:	4619      	mov	r1, r3
 80032ec:	4812      	ldr	r0, [pc, #72]	; (8003338 <xTaskGenericNotifyFromISR+0x1f8>)
 80032ee:	f7fd fdbc 	bl	8000e6a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <xTaskGenericNotifyFromISR+0x1fc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d908      	bls.n	8003312 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <xTaskGenericNotifyFromISR+0x200>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f383 8811 	msr	BASEPRI, r3
    }
 800331c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003320:	4618      	mov	r0, r3
 8003322:	3740      	adds	r7, #64	; 0x40
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	2000010c 	.word	0x2000010c
 800332c:	20000130 	.word	0x20000130
 8003330:	20000110 	.word	0x20000110
 8003334:	20000034 	.word	0x20000034
 8003338:	200000c8 	.word	0x200000c8
 800333c:	20000030 	.word	0x20000030
 8003340:	2000011c 	.word	0x2000011c

08003344 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335e:	4b28      	ldr	r3, [pc, #160]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3304      	adds	r3, #4
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fddb 	bl	8000f20 <uxListRemove>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4013      	ands	r3, r2
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003386:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d10a      	bne.n	80033a6 <prvAddCurrentTaskToDelayedList+0x62>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	481a      	ldr	r0, [pc, #104]	; (8003408 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033a0:	f7fd fd63 	bl	8000e6a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033a4:	e026      	b.n	80033f4 <prvAddCurrentTaskToDelayedList+0xb0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d209      	bcs.n	80033d2 <prvAddCurrentTaskToDelayedList+0x8e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <prvAddCurrentTaskToDelayedList+0xc8>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fd fd70 	bl	8000eb0 <vListInsert>
}
 80033d0:	e010      	b.n	80033f4 <prvAddCurrentTaskToDelayedList+0xb0>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvAddCurrentTaskToDelayedList+0xcc>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fd fd66 	bl	8000eb0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <prvAddCurrentTaskToDelayedList+0xd0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d202      	bcs.n	80033f4 <prvAddCurrentTaskToDelayedList+0xb0>
                        xNextTaskUnblockTime = xTimeToWake;
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <prvAddCurrentTaskToDelayedList+0xd0>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000010c 	.word	0x2000010c
 8003400:	20000030 	.word	0x20000030
 8003404:	20000110 	.word	0x20000110
 8003408:	200000f4 	.word	0x200000f4
 800340c:	200000c4 	.word	0x200000c4
 8003410:	200000c0 	.word	0x200000c0
 8003414:	20000128 	.word	0x20000128

08003418 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003422:	f000 fb45 	bl	8003ab0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <xTimerCreateTimerTask+0x80>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d021      	beq.n	8003472 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003436:	1d3a      	adds	r2, r7, #4
 8003438:	f107 0108 	add.w	r1, r7, #8
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4618      	mov	r0, r3
 8003442:	f002 fb27 	bl	8005a94 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	9202      	str	r2, [sp, #8]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	460a      	mov	r2, r1
 8003458:	4910      	ldr	r1, [pc, #64]	; (800349c <xTimerCreateTimerTask+0x84>)
 800345a:	4811      	ldr	r0, [pc, #68]	; (80034a0 <xTimerCreateTimerTask+0x88>)
 800345c:	f7fe fcee 	bl	8001e3c <xTaskCreateStatic>
 8003460:	4603      	mov	r3, r0
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <xTimerCreateTimerTask+0x8c>)
 8003464:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <xTimerCreateTimerTask+0x8c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <xTimerCreateTimerTask+0x76>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	613b      	str	r3, [r7, #16]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <xTimerCreateTimerTask+0x74>
        return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
    }
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000016c 	.word	0x2000016c
 800349c:	08009074 	.word	0x08009074
 80034a0:	08003695 	.word	0x08003695
 80034a4:	20000170 	.word	0x20000170

080034a8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80034b6:	2028      	movs	r0, #40	; 0x28
 80034b8:	f000 fd20 	bl	8003efc <pvPortMalloc>
 80034bc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f805 	bl	80034ea <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80034e0:	697b      	ldr	r3, [r7, #20]
        }
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	617b      	str	r3, [r7, #20]
    }
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01e      	beq.n	8003558 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800351a:	f000 fac9 	bl	8003ab0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	3304      	adds	r3, #4
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fc89 	bl	8000e52 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	b2da      	uxtb	r2, r3
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	623b      	str	r3, [r7, #32]
    }
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <xTimerGenericCommand+0x98>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02a      	beq.n	80035ec <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	dc18      	bgt.n	80035da <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035a8:	f7ff fad2 	bl	8002b50 <xTaskGetSchedulerState>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d109      	bne.n	80035c6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <xTimerGenericCommand+0x98>)
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f107 0114 	add.w	r1, r7, #20
 80035ba:	2300      	movs	r3, #0
 80035bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035be:	f7fd fe2f 	bl	8001220 <xQueueGenericSend>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24
 80035c4:	e012      	b.n	80035ec <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <xTimerGenericCommand+0x98>)
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f107 0114 	add.w	r1, r7, #20
 80035ce:	2300      	movs	r3, #0
 80035d0:	2200      	movs	r2, #0
 80035d2:	f7fd fe25 	bl	8001220 <xQueueGenericSend>
 80035d6:	6278      	str	r0, [r7, #36]	; 0x24
 80035d8:	e008      	b.n	80035ec <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <xTimerGenericCommand+0x98>)
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	f107 0114 	add.w	r1, r7, #20
 80035e2:	2300      	movs	r3, #0
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	f7fd ff35 	bl	8001454 <xQueueGenericSendFromISR>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035ee:	4618      	mov	r0, r3
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000016c 	.word	0x2000016c

080035fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <prvProcessExpiredTimer+0x94>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fc83 	bl	8000f20 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	18d1      	adds	r1, r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f000 f8cf 	bl	80037d8 <prvInsertTimerInActiveList>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01f      	beq.n	8003680 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	2100      	movs	r1, #0
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	f7ff ff88 	bl	8003560 <xTimerGenericCommand>
 8003650:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	b2da      	uxtb	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	6978      	ldr	r0, [r7, #20]
 8003686:	4798      	blx	r3
    }
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000164 	.word	0x20000164

08003694 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f857 	bl	8003754 <prvGetNextExpireTime>
 80036a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f803 	bl	80036b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036b2:	f000 f8d3 	bl	800385c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036b6:	e7f1      	b.n	800369c <prvTimerTask+0x8>

080036b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036c2:	f7fe fe0d 	bl	80022e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f864 	bl	8003798 <prvSampleTimeNow>
 80036d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d130      	bne.n	800373a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <prvProcessTimerOrBlockTask+0x3c>
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d806      	bhi.n	80036f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036e6:	f7fe fe09 	bl	80022fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff85 	bl	80035fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036f2:	e024      	b.n	800373e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <prvProcessTimerOrBlockTask+0x90>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <prvProcessTimerOrBlockTask+0x50>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <prvProcessTimerOrBlockTask+0x52>
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <prvProcessTimerOrBlockTask+0x94>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f7fe faf3 	bl	8001d04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800371e:	f7fe fded 	bl	80022fc <xTaskResumeAll>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <prvProcessTimerOrBlockTask+0x98>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
    }
 8003738:	e001      	b.n	800373e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800373a:	f7fe fddf 	bl	80022fc <xTaskResumeAll>
    }
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000168 	.word	0x20000168
 800374c:	2000016c 	.word	0x2000016c
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <prvGetNextExpireTime+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <prvGetNextExpireTime+0x16>
 8003766:	2201      	movs	r2, #1
 8003768:	e000      	b.n	800376c <prvGetNextExpireTime+0x18>
 800376a:	2200      	movs	r2, #0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <prvGetNextExpireTime+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e001      	b.n	8003788 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003788:	68fb      	ldr	r3, [r7, #12]
    }
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	20000164 	.word	0x20000164

08003798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037a0:	f7fe fe48 	bl	8002434 <xTaskGetTickCount>
 80037a4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <prvSampleTimeNow+0x3c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d205      	bcs.n	80037bc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037b0:	f000 f91a 	bl	80039e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <prvSampleTimeNow+0x3c>)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037c8:	68fb      	ldr	r3, [r7, #12]
    }
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000174 	.word	0x20000174

080037d8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d812      	bhi.n	8003824 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad2      	subs	r2, r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e01b      	b.n	800384a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <prvInsertTimerInActiveList+0x7c>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3304      	adds	r3, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fd fb47 	bl	8000eb0 <vListInsert>
 8003822:	e012      	b.n	800384a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d206      	bcs.n	800383a <prvInsertTimerInActiveList+0x62>
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d302      	bcc.n	800383a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e007      	b.n	800384a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <prvInsertTimerInActiveList+0x80>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7fd fb33 	bl	8000eb0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800384a:	697b      	ldr	r3, [r7, #20]
    }
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000168 	.word	0x20000168
 8003858:	20000164 	.word	0x20000164

0800385c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800385c:	b580      	push	{r7, lr}
 800385e:	b08c      	sub	sp, #48	; 0x30
 8003860:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003862:	e0ae      	b.n	80039c2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f2c0 80aa 	blt.w	80039c0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fb4f 	bl	8000f20 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff87 	bl	8003798 <prvSampleTimeNow>
 800388a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b09      	cmp	r3, #9
 8003890:	f200 8097 	bhi.w	80039c2 <prvProcessReceivedCommands+0x166>
 8003894:	a201      	add	r2, pc, #4	; (adr r2, 800389c <prvProcessReceivedCommands+0x40>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038c5 	.word	0x080038c5
 80038a8:	08003939 	.word	0x08003939
 80038ac:	0800394d 	.word	0x0800394d
 80038b0:	08003997 	.word	0x08003997
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038c5 	.word	0x080038c5
 80038bc:	08003939 	.word	0x08003939
 80038c0:	0800394d 	.word	0x0800394d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	18d1      	adds	r1, r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038e4:	f7ff ff78 	bl	80037d8 <prvInsertTimerInActiveList>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d069      	beq.n	80039c2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05e      	beq.n	80039c2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	441a      	add	r2, r3
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	2100      	movs	r1, #0
 8003914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003916:	f7ff fe23 	bl	8003560 <xTimerGenericCommand>
 800391a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14f      	bne.n	80039c2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	61bb      	str	r3, [r7, #24]
    }
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 800394a:	e03a      	b.n	80039c2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	617b      	str	r3, [r7, #20]
    }
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	18d1      	adds	r1, r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003990:	f7ff ff22 	bl	80037d8 <prvInsertTimerInActiveList>
                        break;
 8003994:	e015      	b.n	80039c2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80039a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a6:	f000 fb79 	bl	800409c <vPortFree>
 80039aa:	e00a      	b.n	80039c2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039be:	e000      	b.n	80039c2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <prvProcessReceivedCommands+0x188>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f107 0108 	add.w	r1, r7, #8
 80039ca:	2200      	movs	r2, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fe03 	bl	80015d8 <xQueueReceive>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f af45 	bne.w	8003864 <prvProcessReceivedCommands+0x8>
        }
    }
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2000016c 	.word	0x2000016c

080039e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039ee:	e048      	b.n	8003a82 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd fa89 	bl	8000f20 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02e      	beq.n	8003a82 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90e      	bls.n	8003a54 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fd fa2f 	bl	8000eb0 <vListInsert>
 8003a52:	e016      	b.n	8003a82 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fd7e 	bl	8003560 <xTimerGenericCommand>
 8003a64:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	603b      	str	r3, [r7, #0]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1b1      	bne.n	80039f0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <prvSwitchTimerLists+0xc4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <prvSwitchTimerLists+0xc0>)
 8003a98:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <prvSwitchTimerLists+0xc4>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6013      	str	r3, [r2, #0]
    }
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000164 	.word	0x20000164
 8003aac:	20000168 	.word	0x20000168

08003ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ab6:	f000 f92b 	bl	8003d10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <prvCheckForValidListAndQueue+0x60>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d120      	bne.n	8003b04 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ac2:	4814      	ldr	r0, [pc, #80]	; (8003b14 <prvCheckForValidListAndQueue+0x64>)
 8003ac4:	f7fd f9a6 	bl	8000e14 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ac8:	4813      	ldr	r0, [pc, #76]	; (8003b18 <prvCheckForValidListAndQueue+0x68>)
 8003aca:	f7fd f9a3 	bl	8000e14 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <prvCheckForValidListAndQueue+0x6c>)
 8003ad0:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <prvCheckForValidListAndQueue+0x64>)
 8003ad2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <prvCheckForValidListAndQueue+0x70>)
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <prvCheckForValidListAndQueue+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <prvCheckForValidListAndQueue+0x74>)
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <prvCheckForValidListAndQueue+0x78>)
 8003ae2:	210c      	movs	r1, #12
 8003ae4:	2005      	movs	r0, #5
 8003ae6:	f7fd faad 	bl	8001044 <xQueueGenericCreateStatic>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <prvCheckForValidListAndQueue+0x60>)
 8003aee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <prvCheckForValidListAndQueue+0x60>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <prvCheckForValidListAndQueue+0x60>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	490b      	ldr	r1, [pc, #44]	; (8003b2c <prvCheckForValidListAndQueue+0x7c>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe f8ae 	bl	8001c60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b04:	f000 f934 	bl	8003d70 <vPortExitCritical>
    }
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000016c 	.word	0x2000016c
 8003b14:	2000013c 	.word	0x2000013c
 8003b18:	20000150 	.word	0x20000150
 8003b1c:	20000164 	.word	0x20000164
 8003b20:	20000168 	.word	0x20000168
 8003b24:	200001b4 	.word	0x200001b4
 8003b28:	20000178 	.word	0x20000178
 8003b2c:	0800907c 	.word	0x0800907c

08003b30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3b04      	subs	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f023 0201 	bic.w	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b04      	subs	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b60:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <pxPortInitialiseStack+0x54>)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b14      	subs	r3, #20
 8003b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b20      	subs	r3, #32
 8003b76:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	08003b89 	.word	0x08003b89

08003b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <prvTaskExitError+0x54>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d00a      	beq.n	8003bb2 <prvTaskExitError+0x2a>
        __asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
    }
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <prvTaskExitError+0x28>
        __asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60bb      	str	r3, [r7, #8]
    }
 8003bc4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003bc6:	bf00      	nop
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0fc      	beq.n	8003bc8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000004 	.word	0x20000004

08003be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <pxCurrentTCBConst2>)
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	6808      	ldr	r0, [r1, #0]
 8003be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bea:	f380 8809 	msr	PSP, r0
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f380 8811 	msr	BASEPRI, r0
 8003bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bfe:	4770      	bx	lr

08003c00 <pxCurrentTCBConst2>:
 8003c00:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <prvPortStartFirstTask+0x1c>)
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	6800      	ldr	r0, [r0, #0]
 8003c0e:	f380 8808 	msr	MSP, r0
 8003c12:	b662      	cpsie	i
 8003c14:	b661      	cpsie	f
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	df00      	svc	0
 8003c20:	bf00      	nop
 8003c22:	0000      	.short	0x0000
 8003c24:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop

08003c2c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c32:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <xPortStartScheduler+0xd0>)
 8003c34:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <xPortStartScheduler+0xd4>)
 8003c58:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003c5c:	2207      	movs	r2, #7
 8003c5e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c60:	e009      	b.n	8003c76 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003c6a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d0ef      	beq.n	8003c62 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1c3 0307 	rsb	r3, r3, #7
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d00a      	beq.n	8003ca4 <xPortStartScheduler+0x78>
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	60bb      	str	r3, [r7, #8]
    }
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003cac:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <xPortStartScheduler+0xd8>)
 8003cb8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cc2:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <xPortStartScheduler+0xdc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <xPortStartScheduler+0xdc>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <xPortStartScheduler+0xdc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <xPortStartScheduler+0xdc>)
 8003cd4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003cda:	f000 f8b7 	bl	8003e4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <xPortStartScheduler+0xe0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ce4:	f7ff ff90 	bl	8003c08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ce8:	f7fe fc7c 	bl	80025e4 <vTaskSwitchContext>
    prvTaskExitError();
 8003cec:	f7ff ff4c 	bl	8003b88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000e400 	.word	0xe000e400
 8003d00:	20000200 	.word	0x20000200
 8003d04:	20000204 	.word	0x20000204
 8003d08:	e000ed20 	.word	0xe000ed20
 8003d0c:	20000004 	.word	0x20000004

08003d10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
        __asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	607b      	str	r3, [r7, #4]
    }
 8003d28:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <vPortEnterCritical+0x58>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <vPortEnterCritical+0x58>)
 8003d32:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <vPortEnterCritical+0x58>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10f      	bne.n	8003d5c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <vPortEnterCritical+0x5c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <vPortEnterCritical+0x4c>
        __asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	603b      	str	r3, [r7, #0]
    }
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <vPortEnterCritical+0x4a>
    }
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000004 	.word	0x20000004
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <vPortExitCritical+0x4c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <vPortExitCritical+0x24>
        __asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
    }
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <vPortExitCritical+0x4c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <vPortExitCritical+0x4c>)
 8003d9c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <vPortExitCritical+0x4c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <vPortExitCritical+0x42>
 8003da6:	2300      	movs	r3, #0
 8003da8:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f383 8811 	msr	BASEPRI, r3
    }
 8003db0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003dc0:	f3ef 8009 	mrs	r0, PSP
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <pxCurrentTCBConst>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dd0:	6010      	str	r0, [r2, #0]
 8003dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dda:	f380 8811 	msr	BASEPRI, r0
 8003dde:	f7fe fc01 	bl	80025e4 <vTaskSwitchContext>
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003df6:	f380 8809 	msr	PSP, r0
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	4770      	bx	lr

08003e00 <pxCurrentTCBConst>:
 8003e00:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
    }
 8003e20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e22:	f7fe fb27 	bl	8002474 <xTaskIncrementTick>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <SysTick_Handler+0x40>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <vPortSetupTimerInterrupt+0x28>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <vPortSetupTimerInterrupt+0x2c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <vPortSetupTimerInterrupt+0x30>)
 8003e5e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8003e62:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <vPortSetupTimerInterrupt+0x28>)
 8003e66:	2207      	movs	r2, #7
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010
 8003e78:	e000e018 	.word	0xe000e018
 8003e7c:	e000e014 	.word	0xe000e014

08003e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003e86:	f3ef 8305 	mrs	r3, IPSR
 8003e8a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d914      	bls.n	8003ebc <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <vPortValidateInterruptPriority+0x6c>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <vPortValidateInterruptPriority+0x70>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	7afa      	ldrb	r2, [r7, #11]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20a      	bcs.n	8003ebc <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	607b      	str	r3, [r7, #4]
    }
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <vPortValidateInterruptPriority+0x74>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <vPortValidateInterruptPriority+0x78>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d90a      	bls.n	8003ee2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	603b      	str	r3, [r7, #0]
    }
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <vPortValidateInterruptPriority+0x60>
    }
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	e000e3f0 	.word	0xe000e3f0
 8003ef0:	20000200 	.word	0x20000200
 8003ef4:	e000ed0c 	.word	0xe000ed0c
 8003ef8:	20000204 	.word	0x20000204

08003efc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f08:	f7fe f9ea 	bl	80022e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f0c:	4b5d      	ldr	r3, [pc, #372]	; (8004084 <pvPortMalloc+0x188>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f14:	f000 f924 	bl	8004160 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <pvPortMalloc+0x18c>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8093 	bne.w	800404c <pvPortMalloc+0x150>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01d      	beq.n	8003f68 <pvPortMalloc+0x6c>
            {
                xWantedSize += xHeapStructSize;
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d014      	beq.n	8003f68 <pvPortMalloc+0x6c>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f023 0307 	bic.w	r3, r3, #7
 8003f44:	3308      	adds	r3, #8
 8003f46:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <pvPortMalloc+0x6c>
        __asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	617b      	str	r3, [r7, #20]
    }
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06e      	beq.n	800404c <pvPortMalloc+0x150>
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <pvPortMalloc+0x190>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d869      	bhi.n	800404c <pvPortMalloc+0x150>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f78:	4b45      	ldr	r3, [pc, #276]	; (8004090 <pvPortMalloc+0x194>)
 8003f7a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f7c:	4b44      	ldr	r3, [pc, #272]	; (8004090 <pvPortMalloc+0x194>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f82:	e004      	b.n	8003f8e <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d903      	bls.n	8003fa0 <pvPortMalloc+0xa4>
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f1      	bne.n	8003f84 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <pvPortMalloc+0x188>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d050      	beq.n	800404c <pvPortMalloc+0x150>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2208      	movs	r2, #8
 8003fb0:	4413      	add	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d91f      	bls.n	800400c <pvPortMalloc+0x110>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <pvPortMalloc+0xf8>
        __asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	613b      	str	r3, [r7, #16]
    }
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <pvPortMalloc+0xf6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004006:	69b8      	ldr	r0, [r7, #24]
 8004008:	f000 f90c 	bl	8004224 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <pvPortMalloc+0x190>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <pvPortMalloc+0x190>)
 8004018:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <pvPortMalloc+0x190>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <pvPortMalloc+0x198>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <pvPortMalloc+0x132>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <pvPortMalloc+0x190>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <pvPortMalloc+0x198>)
 800402c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <pvPortMalloc+0x18c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	431a      	orrs	r2, r3
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <pvPortMalloc+0x19c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <pvPortMalloc+0x19c>)
 800404a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800404c:	f7fe f956 	bl	80022fc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <pvPortMalloc+0x15e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8004056:	f001 fcff 	bl	8005a58 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <pvPortMalloc+0x17e>
        __asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
    }
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <pvPortMalloc+0x17c>
    return pvReturn;
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20004210 	.word	0x20004210
 8004088:	20004224 	.word	0x20004224
 800408c:	20004214 	.word	0x20004214
 8004090:	20004208 	.word	0x20004208
 8004094:	20004218 	.word	0x20004218
 8004098:	2000421c 	.word	0x2000421c

0800409c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04d      	beq.n	800414a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ae:	2308      	movs	r3, #8
 80040b0:	425b      	negs	r3, r3
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <vPortFree+0xb8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vPortFree+0x44>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	60fb      	str	r3, [r7, #12]
    }
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <vPortFree+0x62>
        __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60bb      	str	r3, [r7, #8]
    }
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <vPortFree+0xb8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01e      	beq.n	800414a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11a      	bne.n	800414a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <vPortFree+0xb8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	43db      	mvns	r3, r3
 800411e:	401a      	ands	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004124:	f7fe f8dc 	bl	80022e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <vPortFree+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4413      	add	r3, r2
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <vPortFree+0xbc>)
 8004134:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004136:	6938      	ldr	r0, [r7, #16]
 8004138:	f000 f874 	bl	8004224 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <vPortFree+0xc0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a06      	ldr	r2, [pc, #24]	; (800415c <vPortFree+0xc0>)
 8004144:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004146:	f7fe f8d9 	bl	80022fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20004224 	.word	0x20004224
 8004158:	20004214 	.word	0x20004214
 800415c:	20004220 	.word	0x20004220

08004160 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800416a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <prvHeapInit+0xac>)
 800416e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3307      	adds	r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	4a1f      	ldr	r2, [pc, #124]	; (800420c <prvHeapInit+0xac>)
 8004190:	4413      	add	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <prvHeapInit+0xb0>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800419e:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <prvHeapInit+0xb0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041ac:	2208      	movs	r2, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvHeapInit+0xb4>)
 80041c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <prvHeapInit+0xb4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <prvHeapInit+0xb4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <prvHeapInit+0xb4>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <prvHeapInit+0xb8>)
 80041ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <prvHeapInit+0xbc>)
 80041f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <prvHeapInit+0xc0>)
 80041fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000208 	.word	0x20000208
 8004210:	20004208 	.word	0x20004208
 8004214:	20004210 	.word	0x20004210
 8004218:	20004218 	.word	0x20004218
 800421c:	20004214 	.word	0x20004214
 8004220:	20004224 	.word	0x20004224

08004224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <prvInsertBlockIntoFreeList+0xa8>)
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e002      	b.n	8004238 <prvInsertBlockIntoFreeList+0x14>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d8f7      	bhi.n	8004232 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d108      	bne.n	8004266 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	441a      	add	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d118      	bne.n	80042ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <prvInsertBlockIntoFreeList+0xac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d00d      	beq.n	80042a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e008      	b.n	80042b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <prvInsertBlockIntoFreeList+0xac>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e003      	b.n	80042b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d002      	beq.n	80042c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	20004208 	.word	0x20004208
 80042d0:	20004210 	.word	0x20004210

080042d4 <RingAdd>:
    MB_FC_WRITE_MULTIPLE_COILS,
    MB_FC_WRITE_MULTIPLE_REGISTERS
};

void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042e6:	4619      	mov	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042f4:	3301      	adds	r3, #1
 80042f6:	425a      	negs	r2, r3
 80042f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004300:	bf58      	it	pl
 8004302:	4253      	negpl	r3, r2
 8004304:	b2da      	uxtb	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d10f      	bne.n	8004336 <RingAdd+0x62>
	{
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800431c:	3301      	adds	r3, #1
 800431e:	425a      	negs	r2, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004328:	bf58      	it	pl
 800432a:	4253      	negpl	r3, r2
 800432c:	b2da      	uxtb	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	else
	{
		xRingBuffer->u8available++;
	}

}
 8004334:	e007      	b.n	8004346 <RingAdd+0x72>
		xRingBuffer->u8available++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800433c:	3301      	adds	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <RingGetAllBytes>:

uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004360:	461a      	mov	r2, r3
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f805 	bl	8004374 <RingGetNBytes>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <RingGetNBytes>:

uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <RingGetNBytes+0x1e>
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <RingGetNBytes+0x22>
 8004392:	2300      	movs	r3, #0
 8004394:	e037      	b.n	8004406 <RingGetNBytes+0x92>
	if(uNumber > MAX_BUFFER) return 0;
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d901      	bls.n	80043a0 <RingGetNBytes+0x2c>
 800439c:	2300      	movs	r3, #0
 800439e:	e032      	b.n	8004406 <RingGetNBytes+0x92>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	75fb      	strb	r3, [r7, #23]
 80043a4:	e01b      	b.n	80043de <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ac:	4619      	mov	r1, r3
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	4413      	add	r3, r2
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	5c52      	ldrb	r2, [r2, r1]
 80043b8:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043c0:	3301      	adds	r3, #1
 80043c2:	425a      	negs	r2, r3
 80043c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043cc:	bf58      	it	pl
 80043ce:	4253      	negpl	r3, r2
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	3301      	adds	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
 80043de:	7dfa      	ldrb	r2, [r7, #23]
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d205      	bcs.n	80043f2 <RingGetNBytes+0x7e>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80043ec:	7dfa      	ldrb	r2, [r7, #23]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3d9      	bcc.n	80043a6 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	return uCounter;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  return xRingBuffer->u8available;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  xRingBuffer->u8start = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  xRingBuffer->u8end = 0;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xRingBuffer->u8available = 0;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
	...

08004454 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <ModbusInit+0xe0>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d863      	bhi.n	800452c <ModbusInit+0xd8>
  {
	  //Create QueueModbus //Queue Modbus RX
	  //modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
    RingClear(&modH->xBufferRX);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	33c8      	adds	r3, #200	; 0xc8
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ffdd 	bl	8004428 <RingClear>
    //    vQueueAddToRegistry (hQueue, "QueueModbus");
    //  }
    //  #endif
    //  modH->QueueModbusHandle = hQueue;

	  if(modH->uiModbusType == SLAVE_RTU)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d135      	bne.n	80044e2 <ModbusInit+0x8e>

  	  	  TaskHandle_t hTask;
  	  	  UBaseType_t prio;

  	  	  //prio = osPriorityNormal;
  	  	  prio = osPriorityLow;
 8004476:	2308      	movs	r3, #8
 8004478:	613b      	str	r3, [r7, #16]
		  if ((prio < osPriorityIdle) || (prio > osPriorityISR)) {
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <ModbusInit+0x32>
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b38      	cmp	r3, #56	; 0x38
 8004484:	d900      	bls.n	8004488 <ModbusInit+0x34>
			  //TODO error message
			  //return "error";
			  while(1);
 8004486:	e7fe      	b.n	8004486 <ModbusInit+0x32>
				  hTask = NULL;
			  }
			#else
			  //if MPU is disabled
			  //create dynamic task
			  if (xTaskCreate ((TaskFunction_t)StartTaskModbusSlave, "myTaskModbusA", (uint16_t)(STACK_SIZE), modH, prio, &hTask) != pdPASS) {
 8004488:	f107 030c 	add.w	r3, r7, #12
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004498:	4927      	ldr	r1, [pc, #156]	; (8004538 <ModbusInit+0xe4>)
 800449a:	4828      	ldr	r0, [pc, #160]	; (800453c <ModbusInit+0xe8>)
 800449c:	f7fd fd2b 	bl	8001ef6 <xTaskCreate>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <ModbusInit+0x56>
				  hTask = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
			  }
			#endif

          modH->myTaskModbusAHandle = hTask;
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <ModbusInit+0xec>)
 80044ba:	9200      	str	r2, [sp, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	2105      	movs	r1, #5
 80044c0:	4820      	ldr	r0, [pc, #128]	; (8004544 <ModbusInit+0xf0>)
 80044c2:	f7fe fff1 	bl	80034a8 <xTimerCreate>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                                    );

	  //modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);

	  SemaphoreHandle_t hSemaphore;
	  hSemaphore = xSemaphoreCreateBinary();
 80044ce:	2203      	movs	r2, #3
 80044d0:	2100      	movs	r1, #0
 80044d2:	2001      	movs	r0, #1
 80044d4:	f7fc fe2e 	bl	8001134 <xQueueGenericCreate>
 80044d8:	6178      	str	r0, [r7, #20]
	  if ((hSemaphore != NULL)) {
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <ModbusInit+0xac>
 80044e0:	e000      	b.n	80044e4 <ModbusInit+0x90>
		  while(1); //Error Modbus type not supported choose a valid Type
 80044e2:	e7fe      	b.n	80044e2 <ModbusInit+0x8e>
        if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	2200      	movs	r2, #0
 80044e8:	2100      	movs	r1, #0
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7fc fe98 	bl	8001220 <xQueueGenericSend>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d004      	beq.n	8004500 <ModbusInit+0xac>
          vSemaphoreDelete (hSemaphore);
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7fd fa5a 	bl	80019b0 <vQueueDelete>
          hSemaphore = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
        }
      }
      #if (configQUEUE_REGISTRY_SIZE > 0)
      vQueueAddToRegistry (hSemaphore, "ModBusSphr");
 8004500:	4911      	ldr	r1, [pc, #68]	; (8004548 <ModbusInit+0xf4>)
 8004502:	6978      	ldr	r0, [r7, #20]
 8004504:	f7fd fbac 	bl	8001c60 <vQueueAddToRegistry>
      #endif

  	  modH->ModBusSphrHandle = hSemaphore;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  	  mHandlers[numberHandlers] = modH;
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <ModbusInit+0xe0>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <ModbusInit+0xf8>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	  numberHandlers++;
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <ModbusInit+0xe0>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b03      	ldr	r3, [pc, #12]	; (8004534 <ModbusInit+0xe0>)
 8004528:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800452a:	e000      	b.n	800452e <ModbusInit+0xda>
	  while(1); //error no more Modbus handlers supported
 800452c:	e7fe      	b.n	800452c <ModbusInit+0xd8>
}
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20004228 	.word	0x20004228
 8004538:	08009084 	.word	0x08009084
 800453c:	08004675 	.word	0x08004675
 8004540:	080045ed 	.word	0x080045ed
 8004544:	08009094 	.word	0x08009094
 8004548:	080090a0 	.word	0x080090a0
 800454c:	20004b14 	.word	0x20004b14

08004550 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
		#if !BOX
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68d8      	ldr	r0, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8a1b      	ldrh	r3, [r3, #16]
 8004568:	2200      	movs	r2, #0
 800456a:	4619      	mov	r1, r3
 800456c:	f002 f8b6 	bl	80066dc <HAL_GPIO_WritePin>
		#endif
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d105      	bne.n	8004584 <ModbusStart+0x34>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457e:	2b00      	cmp	r3, #0
 8004580:	d100      	bne.n	8004584 <ModbusStart+0x34>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8004582:	e7fe      	b.n	8004582 <ModbusStart+0x32>
    }

    //check that port is initialized
	#if !BOX
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8004584:	bf00      	nop
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f004 fa1d 	bl	80089ca <HAL_UART_GetState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b20      	cmp	r3, #32
 8004594:	d1f7      	bne.n	8004586 <ModbusStart+0x36>
    {
    }
	#endif
    // Receive data from serial port for Modbus using interrupt
	#if !BOX
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6858      	ldr	r0, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	33b2      	adds	r3, #178	; 0xb2
 800459e:	2201      	movs	r2, #1
 80045a0:	4619      	mov	r1, r3
 80045a2:	f004 f8bb 	bl	800871c <HAL_UART_Receive_IT>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d000      	beq.n	80045ae <ModbusStart+0x5e>
    {
        while(1)
 80045ac:	e7fe      	b.n	80045ac <ModbusStart+0x5c>
        {
        }
    }
	#endif
    modH->u8lastRec = modH->u8BufferSize = 0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e02c      	b.n	8004654 <vTimerCallbackT35+0x68>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <vTimerCallbackT35+0x80>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d120      	bne.n	800464e <vTimerCallbackT35+0x62>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 800460c:	4a17      	ldr	r2, [pc, #92]	; (800466c <vTimerCallbackT35+0x80>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d10c      	bne.n	8004634 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <vTimerCallbackT35+0x80>)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8004626:	2300      	movs	r3, #0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2300      	movs	r3, #0
 800462c:	2200      	movs	r2, #0
 800462e:	2103      	movs	r1, #3
 8004630:	f7fe ff96 	bl	8003560 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vTimerCallbackT35+0x80>)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8004640:	2300      	movs	r3, #0
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2303      	movs	r3, #3
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	f7fe fc99 	bl	8002f80 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <vTimerCallbackT35+0x84>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4293      	cmp	r3, r2
 800465e:	dbcc      	blt.n	80045fa <vTimerCallbackT35+0xe>
		}

	}
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20004b14 	.word	0x20004b14
 8004670:	20004228 	.word	0x20004228

08004674 <StartTaskModbusSlave>:

#if BOX
extern  BaseType_t MPU_xContainerSendRequest(Peripheral_Request_t xRequest);
#endif
void StartTaskModbusSlave(void *argument)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60fb      	str	r3, [r7, #12]


  for(;;)
  {
      #if !BOX
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	2101      	movs	r1, #1
 8004686:	2000      	movs	r0, #0
 8004688:	f7fe fc12 	bl	8002eb0 <ulTaskGenericNotifyTake>
			//error
			while(1);
		}
		modH->u8BufferSize = (xNotificationValue >> 8) & 0xffffff;
      #endif
	  modH->i8lastError = 0;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	749a      	strb	r2, [r3, #18]
	#if !BOX
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	33c8      	adds	r3, #200	; 0xc8
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff feba 	bl	8004410 <RingCountBytes>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	#endif
	  if (modH->EN_Port != NULL )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <StartTaskModbusSlave+0x4a>
	  {
			#if !BOX
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68d8      	ldr	r0, [r3, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8a1b      	ldrh	r3, [r3, #16]
 80046b6:	2200      	movs	r2, #0
 80046b8:	4619      	mov	r1, r3
 80046ba:	f002 f80f 	bl	80066dc <HAL_GPIO_WritePin>
			#endif
	  }
	  #if !BOX
	  int8_t i8state = getRxBuffer(modH);
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f89e 	bl	8004800 <getRxBuffer>
 80046c4:	4603      	mov	r3, r0
 80046c6:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 80046c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80046cc:	2b06      	cmp	r3, #6
 80046ce:	dc03      	bgt.n	80046d8 <StartTaskModbusSlave+0x64>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	22fa      	movs	r2, #250	; 0xfa
 80046d4:	749a      	strb	r2, [r3, #18]
		  //xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
		  continue;
 80046d6:	e092      	b.n	80047fe <StartTaskModbusSlave+0x18a>
	  }
	  #endif
		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	7cda      	ldrb	r2, [r3, #19]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	7a1b      	ldrb	r3, [r3, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 808b 	bne.w	80047fc <StartTaskModbusSlave+0x188>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f8ce 	bl	8004888 <validateRequest>
 80046ec:	4603      	mov	r3, r0
 80046ee:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 80046f0:	7abb      	ldrb	r3, [r7, #10]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00f      	beq.n	8004716 <StartTaskModbusSlave+0xa2>
	  {
		  if (u8exception != NO_REPLY)
 80046f6:	7abb      	ldrb	r3, [r7, #10]
 80046f8:	2bff      	cmp	r3, #255	; 0xff
 80046fa:	d007      	beq.n	800470c <StartTaskModbusSlave+0x98>
		  {
			  buildException( u8exception, modH);
 80046fc:	7abb      	ldrb	r3, [r7, #10]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fa11 	bl	8004b28 <buildException>
			  sendTxBuffer(modH);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa2c 	bl	8004b64 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 800470c:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 8004714:	e073      	b.n	80047fe <StartTaskModbusSlave+0x18a>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004722:	f04f 31ff 	mov.w	r1, #4294967295
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd f836 	bl	8001798 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	7d1b      	ldrb	r3, [r3, #20]
 8004730:	3b01      	subs	r3, #1
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d858      	bhi.n	80047e8 <StartTaskModbusSlave+0x174>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <StartTaskModbusSlave+0xc8>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800477d 	.word	0x0800477d
 8004744:	0800478f 	.word	0x0800478f
 8004748:	0800478f 	.word	0x0800478f
 800474c:	080047a1 	.word	0x080047a1
 8004750:	080047b3 	.word	0x080047b3
 8004754:	080047e9 	.word	0x080047e9
 8004758:	080047e9 	.word	0x080047e9
 800475c:	080047e9 	.word	0x080047e9
 8004760:	080047e9 	.word	0x080047e9
 8004764:	080047e9 	.word	0x080047e9
 8004768:	080047e9 	.word	0x080047e9
 800476c:	080047e9 	.word	0x080047e9
 8004770:	080047e9 	.word	0x080047e9
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047d7 	.word	0x080047d7
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fa8f 	bl	8004ca0 <process_FC1>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 800478c:	e02d      	b.n	80047ea <StartTaskModbusSlave+0x176>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fb3c 	bl	8004e0c <process_FC3>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 800479e:	e024      	b.n	80047ea <StartTaskModbusSlave+0x176>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb9e 	bl	8004ee2 <process_FC5>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 80047b0:	e01b      	b.n	80047ea <StartTaskModbusSlave+0x176>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fbef 	bl	8004f96 <process_FC6>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 80047c2:	e012      	b.n	80047ea <StartTaskModbusSlave+0x176>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fc18 	bl	8004ffa <process_FC15>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 80047d4:	e009      	b.n	80047ea <StartTaskModbusSlave+0x176>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc9e 	bl	8005118 <process_FC16>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 80047e6:	e000      	b.n	80047ea <StartTaskModbusSlave+0x176>
			default:
				break;
 80047e8:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80047f0:	2300      	movs	r3, #0
 80047f2:	2200      	movs	r2, #0
 80047f4:	2100      	movs	r1, #0
 80047f6:	f7fc fd13 	bl	8001220 <xQueueGenericSend>
	    //return i8state;
	    continue;
 80047fa:	e000      	b.n	80047fe <StartTaskModbusSlave+0x18a>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80047fc:	bf00      	nop
  {
 80047fe:	e73f      	b.n	8004680 <StartTaskModbusSlave+0xc>

08004800 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
    if (modH->EN_Port)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <getRxBuffer+0x24>
    {
		#if !BOX
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68d8      	ldr	r0, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8a1b      	ldrh	r3, [r3, #16]
 800481c:	2200      	movs	r2, #0
 800481e:	4619      	mov	r1, r3
 8004820:	f001 ff5c 	bl	80066dc <HAL_GPIO_WritePin>
		#endif
    }

    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	33c8      	adds	r3, #200	; 0xc8
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fdf1 	bl	8004410 <RingCountBytes>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    RingGetAllBytes(&modH->xBufferRX, modH->au8Buffer);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3313      	adds	r3, #19
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7ff fd83 	bl	8004350 <RingGetAllBytes>

    modH->u16InCnt++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004850:	3301      	adds	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c


    if (bBuffOverflow)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <getRxBuffer+0x76>
    {
    	modH->u16errCnt++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004866:	3301      	adds	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 8004870:	f06f 0302 	mvn.w	r3, #2
 8004874:	e003      	b.n	800487e <getRxBuffer+0x7e>
    }

    return modH->u8BufferSize;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800487c:	b25b      	sxtb	r3, r3
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004896:	3b02      	subs	r3, #2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	7cdb      	ldrb	r3, [r3, #19]
 800489e:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80048a0:	b21a      	sxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80048a8:	3b01      	subs	r3, #1
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	440b      	add	r3, r1
 80048ae:	7cdb      	ldrb	r3, [r3, #19]
 80048b0:	b21b      	sxth	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 80048b6:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0213 	add.w	r2, r3, #19
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80048c4:	3b02      	subs	r3, #2
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 f8e6 	bl	8004a9c <calcCRC>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	89bb      	ldrh	r3, [r7, #12]
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80048e0:	3301      	adds	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return NO_REPLY;
 80048ea:	23ff      	movs	r3, #255	; 0xff
 80048ec:	e0be      	b.n	8004a6c <validateRequest+0x1e4>
	    }

	    // check fct code
	    bool isSupported = false;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	73bb      	strb	r3, [r7, #14]
 80048f6:	e00c      	b.n	8004912 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	4a5e      	ldr	r2, [pc, #376]	; (8004a74 <validateRequest+0x1ec>)
 80048fc:	5cd2      	ldrb	r2, [r2, r3]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7d1b      	ldrb	r3, [r3, #20]
 8004902:	429a      	cmp	r2, r3
 8004904:	d102      	bne.n	800490c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
	            break;
 800490a:	e005      	b.n	8004918 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	3301      	adds	r3, #1
 8004910:	73bb      	strb	r3, [r7, #14]
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	2b07      	cmp	r3, #7
 8004916:	d9ef      	bls.n	80048f8 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800492a:	3301      	adds	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8004934:	2301      	movs	r3, #1
 8004936:	e099      	b.n	8004a6c <validateRequest+0x1e4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	817b      	strh	r3, [r7, #10]
	    //uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7d1b      	ldrb	r3, [r3, #20]
 8004940:	3b01      	subs	r3, #1
 8004942:	2b0f      	cmp	r3, #15
 8004944:	f200 8091 	bhi.w	8004a6a <validateRequest+0x1e2>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <validateRequest+0xc8>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004991 	.word	0x08004991
 8004954:	08004991 	.word	0x08004991
 8004958:	08004a1f 	.word	0x08004a1f
 800495c:	08004a1f 	.word	0x08004a1f
 8004960:	080049d5 	.word	0x080049d5
 8004964:	080049fb 	.word	0x080049fb
 8004968:	08004a6b 	.word	0x08004a6b
 800496c:	08004a6b 	.word	0x08004a6b
 8004970:	08004a6b 	.word	0x08004a6b
 8004974:	08004a6b 	.word	0x08004a6b
 8004978:	08004a6b 	.word	0x08004a6b
 800497c:	08004a6b 	.word	0x08004a6b
 8004980:	08004a6b 	.word	0x08004a6b
 8004984:	08004a6b 	.word	0x08004a6b
 8004988:	08004991 	.word	0x08004991
 800498c:	08004a1f 	.word	0x08004a1f
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7d5a      	ldrb	r2, [r3, #21]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7d9b      	ldrb	r3, [r3, #22]
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 f86c 	bl	8004a78 <word>
 80049a0:	4603      	mov	r3, r0
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	7dda      	ldrb	r2, [r3, #23]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	7e1b      	ldrb	r3, [r3, #24]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 f861 	bl	8004a78 <word>
 80049b6:	4603      	mov	r3, r0
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	b29a      	uxth	r2, r3
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	4413      	add	r3, r2
 80049c2:	817b      	strh	r3, [r7, #10]
          if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80049ca:	897a      	ldrh	r2, [r7, #10]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d945      	bls.n	8004a5c <validateRequest+0x1d4>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e04b      	b.n	8004a6c <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7d5a      	ldrb	r2, [r3, #21]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7d9b      	ldrb	r3, [r3, #22]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 f84a 	bl	8004a78 <word>
 80049e4:	4603      	mov	r3, r0
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	817b      	strh	r3, [r7, #10]
          if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80049f0:	897a      	ldrh	r2, [r7, #10]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d934      	bls.n	8004a60 <validateRequest+0x1d8>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e038      	b.n	8004a6c <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7d5a      	ldrb	r2, [r3, #21]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	7d9b      	ldrb	r3, [r3, #22]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 f837 	bl	8004a78 <word>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	817b      	strh	r3, [r7, #10]
          if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004a14:	897a      	ldrh	r2, [r7, #10]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d924      	bls.n	8004a64 <validateRequest+0x1dc>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e026      	b.n	8004a6c <validateRequest+0x1e4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7d5a      	ldrb	r2, [r3, #21]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	7d9b      	ldrb	r3, [r3, #22]
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f000 f825 	bl	8004a78 <word>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7dda      	ldrb	r2, [r3, #23]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7e1b      	ldrb	r3, [r3, #24]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 f81b 	bl	8004a78 <word>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	4413      	add	r3, r2
 8004a4a:	817b      	strh	r3, [r7, #10]
          if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004a52:	897a      	ldrh	r2, [r7, #10]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d907      	bls.n	8004a68 <validateRequest+0x1e0>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e007      	b.n	8004a6c <validateRequest+0x1e4>
	        break;
 8004a5c:	bf00      	nop
 8004a5e:	e004      	b.n	8004a6a <validateRequest+0x1e2>
	        break;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <validateRequest+0x1e2>
	        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <validateRequest+0x1e2>
	        break;
 8004a68:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8004a6a:	2300      	movs	r3, #0

}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	080090b4 	.word	0x080090b4

08004a78 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	460a      	mov	r2, r1
 8004a82:	71fb      	strb	r3, [r7, #7]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8004a88:	79bb      	ldrb	r3, [r7, #6]
 8004a8a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8004a90:	89bb      	ldrh	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8004aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aac:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	74fb      	strb	r3, [r7, #19]
 8004ab2:	e023      	b.n	8004afc <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4053      	eors	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	74bb      	strb	r3, [r7, #18]
 8004ac8:	e012      	b.n	8004af0 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
            if (flag)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <calcCRC+0x4e>
                temp ^= 0xA001;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8004ae4:	f083 0301 	eor.w	r3, r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8004aea:	7cbb      	ldrb	r3, [r7, #18]
 8004aec:	3301      	adds	r3, #1
 8004aee:	74bb      	strb	r3, [r7, #18]
 8004af0:	7cbb      	ldrb	r3, [r7, #18]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d9e9      	bls.n	8004aca <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8004af6:	7cfb      	ldrb	r3, [r7, #19]
 8004af8:	3301      	adds	r3, #1
 8004afa:	74fb      	strb	r3, [r7, #19]
 8004afc:	7cfa      	ldrb	r2, [r7, #19]
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d3d7      	bcc.n	8004ab4 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	b29b      	uxth	r3, r3

}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	6039      	str	r1, [r7, #0]
 8004b32:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	7d1b      	ldrb	r3, [r3, #20]
 8004b38:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	7a1a      	ldrb	r2, [r3, #8]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	3b80      	subs	r3, #128	; 0x80
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	79fa      	ldrb	r2, [r7, #7]
 8004b50:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2203      	movs	r2, #3
 8004b56:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f103 0213 	add.w	r2, r3, #19
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7ff ff8e 	bl	8004a9c <calcCRC>
 8004b80:	4603      	mov	r3, r0
 8004b82:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8004b84:	89fb      	ldrh	r3, [r7, #14]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b90:	4619      	mov	r1, r3
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	440b      	add	r3, r1
 8004b98:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	440b      	add	r3, r1
 8004bba:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (modH->EN_Port != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
        #if !BOX
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68d8      	ldr	r0, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8a1b      	ldrh	r3, [r3, #16]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4619      	mov	r1, r3
 8004be0:	f001 fd7c 	bl	80066dc <HAL_GPIO_WritePin>

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    #if !BOX
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6858      	ldr	r0, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f103 0113 	add.w	r1, r3, #19
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f003 fd4c 	bl	8008694 <HAL_UART_Transmit_IT>
	{
		//error
		while(1);
	}
#else
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	2101      	movs	r1, #1
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fe f954 	bl	8002eb0 <ulTaskGenericNotifyTake>
#endif




     if (modH->EN_Port != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d018      	beq.n	8004c42 <sendTxBuffer+0xde>
         //return RS485 transceiver to receive mode

    	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
         #else
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8004c10:	e007      	b.n	8004c22 <sendTxBuffer+0xbe>
		 #endif
    	 {
    		taskYIELD();
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <sendTxBuffer+0x138>)
 8004c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ef      	beq.n	8004c12 <sendTxBuffer+0xae>
    	 }
		 #if !BOX
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68d8      	ldr	r0, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8a1b      	ldrh	r3, [r3, #16]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f001 fd4d 	bl	80066dc <HAL_GPIO_WritePin>
		 #endif
     }
     modH->u8BufferSize = 0;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d10c      	bne.n	8004c6c <sendTxBuffer+0x108>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8004c58:	f7fd fbec 	bl	8002434 <xTaskGetTickCount>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	2102      	movs	r1, #2
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fe fc7a 	bl	8003560 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004c72:	3301      	adds	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

     if( modH->u16OutCnt == 200)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004c82:	2bc8      	cmp	r3, #200	; 0xc8
 8004c84:	d105      	bne.n	8004c92 <sendTxBuffer+0x12e>
     {
        	modH->u16OutCnt = modH->u16OutCnt;    // this is used only for profiling
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     }

}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7d5a      	ldrb	r2, [r3, #21]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7d9b      	ldrb	r3, [r3, #22]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7ff fee0 	bl	8004a78 <word>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7dda      	ldrb	r2, [r3, #23]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	7e1b      	ldrb	r3, [r3, #24]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f7ff fed6 	bl	8004a78 <word>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8004cd0:	8a3b      	ldrh	r3, [r7, #16]
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8004cd8:	8a3b      	ldrh	r3, [r7, #16]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <process_FC1+0x4a>
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7dfa      	ldrb	r2, [r7, #23]
 8004cee:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004cfe:	461a      	mov	r2, r3
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	4413      	add	r3, r2
 8004d04:	3b01      	subs	r3, #1
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	82bb      	strh	r3, [r7, #20]
 8004d16:	e059      	b.n	8004dcc <process_FC1+0x12c>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8004d18:	8a7a      	ldrh	r2, [r7, #18]
 8004d1a:	8abb      	ldrh	r3, [r7, #20]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8004d20:	89bb      	ldrh	r3, [r7, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8004d28:	89bb      	ldrh	r3, [r7, #12]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004d38:	7afb      	ldrb	r3, [r7, #11]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	7abb      	ldrb	r3, [r7, #10]
 8004d44:	fa42 f303 	asr.w	r3, r2, r3
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d014      	beq.n	8004d7a <process_FC1+0xda>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	7cda      	ldrb	r2, [r3, #19]
 8004d5e:	7dbb      	ldrb	r3, [r7, #22]
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	440b      	add	r3, r1
 8004d76:	74da      	strb	r2, [r3, #19]
 8004d78:	e015      	b.n	8004da6 <process_FC1+0x106>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	7cda      	ldrb	r2, [r3, #19]
 8004d88:	7dbb      	ldrb	r3, [r7, #22]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	440b      	add	r3, r1
 8004da4:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8004da6:	7dbb      	ldrb	r3, [r7, #22]
 8004da8:	3301      	adds	r3, #1
 8004daa:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8004dac:	7dbb      	ldrb	r3, [r7, #22]
 8004dae:	2b07      	cmp	r3, #7
 8004db0:	d909      	bls.n	8004dc6 <process_FC1+0x126>
        {
            u8bitsno = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004dc6:	8abb      	ldrh	r3, [r7, #20]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	82bb      	strh	r3, [r7, #20]
 8004dcc:	8aba      	ldrh	r2, [r7, #20]
 8004dce:	8a3b      	ldrh	r3, [r7, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d3a1      	bcc.n	8004d18 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <process_FC1+0x150>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004de6:	3301      	adds	r3, #1
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004df6:	3302      	adds	r3, #2
 8004df8:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff feb2 	bl	8004b64 <sendTxBuffer>
    return u8CopyBufferSize;
 8004e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7d5a      	ldrb	r2, [r3, #21]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7d9b      	ldrb	r3, [r3, #22]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7ff fe2a 	bl	8004a78 <word>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	7dda      	ldrb	r2, [r3, #23]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7e1b      	ldrb	r3, [r3, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7ff fe20 	bl	8004a78 <word>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8004e3c:	7b7b      	ldrb	r3, [r7, #13]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	e032      	b.n	8004eba <process_FC3+0xae>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	440b      	add	r3, r1
 8004e74:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	440b      	add	r3, r1
 8004ea2:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004eaa:	3301      	adds	r3, #1
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	7bb9      	ldrb	r1, [r7, #14]
 8004ebe:	7b7b      	ldrb	r3, [r7, #13]
 8004ec0:	440b      	add	r3, r1
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dbc6      	blt.n	8004e54 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004ecc:	3302      	adds	r3, #2
 8004ece:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fe47 	bl	8004b64 <sendTxBuffer>

    return u8CopyBufferSize;
 8004ed6:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7d5a      	ldrb	r2, [r3, #21]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7d9b      	ldrb	r3, [r3, #22]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff fdbf 	bl	8004a78 <word>
 8004efa:	4603      	mov	r3, r0
 8004efc:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8004efe:	89fb      	ldrh	r3, [r7, #14]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7ddb      	ldrb	r3, [r3, #23]
 8004f14:	2bff      	cmp	r3, #255	; 0xff
 8004f16:	d115      	bne.n	8004f44 <process_FC5+0x62>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004f1e:	7b7b      	ldrb	r3, [r7, #13]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	8819      	ldrh	r1, [r3, #0]
 8004f26:	7b3b      	ldrb	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004f36:	7b7b      	ldrb	r3, [r7, #13]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4403      	add	r3, r0
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	e016      	b.n	8004f72 <process_FC5+0x90>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004f4a:	7b7b      	ldrb	r3, [r7, #13]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	4413      	add	r3, r2
 8004f50:	8819      	ldrh	r1, [r3, #0]
 8004f52:	7b3b      	ldrb	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004f66:	7b7b      	ldrb	r3, [r7, #13]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4403      	add	r3, r0
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2206      	movs	r2, #6
 8004f76:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004f80:	3302      	adds	r3, #2
 8004f82:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fded 	bl	8004b64 <sendTxBuffer>

    return u8CopyBufferSize;
 8004f8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7d5a      	ldrb	r2, [r3, #21]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7d9b      	ldrb	r3, [r3, #22]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7ff fd65 	bl	8004a78 <word>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7dda      	ldrb	r2, [r3, #23]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7e1b      	ldrb	r3, [r3, #24]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7ff fd5b 	bl	8004a78 <word>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	89ba      	ldrh	r2, [r7, #12]
 8004fd4:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2206      	movs	r2, #6
 8004fda:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize +2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fdbb 	bl	8004b64 <sendTxBuffer>

    return u8CopyBufferSize;
 8004fee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b086      	sub	sp, #24
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7d5a      	ldrb	r2, [r3, #21]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7d9b      	ldrb	r3, [r3, #22]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7ff fd33 	bl	8004a78 <word>
 8005012:	4603      	mov	r3, r0
 8005014:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7dda      	ldrb	r2, [r3, #23]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7e1b      	ldrb	r3, [r3, #24]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7ff fd29 	bl	8004a78 <word>
 8005026:	4603      	mov	r3, r0
 8005028:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800502e:	2307      	movs	r3, #7
 8005030:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005032:	2300      	movs	r3, #0
 8005034:	82bb      	strh	r3, [r7, #20]
 8005036:	e059      	b.n	80050ec <process_FC15+0xf2>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8005038:	8a7a      	ldrh	r2, [r7, #18]
 800503a:	8abb      	ldrh	r3, [r7, #20]
 800503c:	4413      	add	r3, r2
 800503e:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8005040:	89bb      	ldrh	r3, [r7, #12]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	b29b      	uxth	r3, r3
 8005046:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8005048:	89bb      	ldrh	r3, [r7, #12]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	7cdb      	ldrb	r3, [r3, #19]
 800505a:	461a      	mov	r2, r3
 800505c:	7dbb      	ldrb	r3, [r7, #22]
 800505e:	fa42 f303 	asr.w	r3, r2, r3
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8005070:	7a7b      	ldrb	r3, [r7, #9]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d015      	beq.n	80050a2 <process_FC15+0xa8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	8819      	ldrh	r1, [r3, #0]
 8005084:	7abb      	ldrb	r3, [r7, #10]
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8005094:	7afb      	ldrb	r3, [r7, #11]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4403      	add	r3, r0
 800509a:	430a      	orrs	r2, r1
 800509c:	b292      	uxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e016      	b.n	80050d0 <process_FC15+0xd6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80050a8:	7afb      	ldrb	r3, [r7, #11]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	8819      	ldrh	r1, [r3, #0]
 80050b0:	7abb      	ldrb	r3, [r7, #10]
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80050c4:	7afb      	ldrb	r3, [r7, #11]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4403      	add	r3, r0
 80050ca:	400a      	ands	r2, r1
 80050cc:	b292      	uxth	r2, r2
 80050ce:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80050d0:	7dbb      	ldrb	r3, [r7, #22]
 80050d2:	3301      	adds	r3, #1
 80050d4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80050d6:	7dbb      	ldrb	r3, [r7, #22]
 80050d8:	2b07      	cmp	r3, #7
 80050da:	d904      	bls.n	80050e6 <process_FC15+0xec>
        {
            u8bitsno = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	3301      	adds	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80050e6:	8abb      	ldrh	r3, [r7, #20]
 80050e8:	3301      	adds	r3, #1
 80050ea:	82bb      	strh	r3, [r7, #20]
 80050ec:	8aba      	ldrh	r2, [r7, #20]
 80050ee:	8a3b      	ldrh	r3, [r7, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3a1      	bcc.n	8005038 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2206      	movs	r2, #6
 80050f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005102:	3302      	adds	r3, #2
 8005104:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fd2c 	bl	8004b64 <sendTxBuffer>
    return u8CopyBufferSize;
 800510c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7d5b      	ldrb	r3, [r3, #21]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	b25a      	sxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7d9b      	ldrb	r3, [r3, #22]
 800512c:	b25b      	sxtb	r3, r3
 800512e:	4313      	orrs	r3, r2
 8005130:	b25b      	sxtb	r3, r3
 8005132:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7ddb      	ldrb	r3, [r3, #23]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b25a      	sxtb	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7e1b      	ldrb	r3, [r3, #24]
 8005140:	b25b      	sxtb	r3, r3
 8005142:	4313      	orrs	r3, r2
 8005144:	b25b      	sxtb	r3, r3
 8005146:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7b7a      	ldrb	r2, [r7, #13]
 8005152:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2206      	movs	r2, #6
 8005158:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u8regsno; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	e01d      	b.n	800519e <process_FC16+0x86>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	3307      	adds	r3, #7
        temp = word(
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3304      	adds	r3, #4
 8005172:	005b      	lsls	r3, r3, #1
        temp = word(
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	7cdb      	ldrb	r3, [r3, #19]
 800517a:	4619      	mov	r1, r3
 800517c:	f7ff fc7c 	bl	8004a78 <word>
 8005180:	4603      	mov	r3, r0
 8005182:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800518a:	7bb9      	ldrb	r1, [r7, #14]
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	440b      	add	r3, r1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	897a      	ldrh	r2, [r7, #10]
 8005196:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	3301      	adds	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	7b7b      	ldrb	r3, [r7, #13]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3dd      	bcc.n	8005162 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80051ac:	3302      	adds	r3, #2
 80051ae:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fcd7 	bl	8004b64 <sendTxBuffer>

    return u8CopyBufferSize;
 80051b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_UART_TxCpltCallback>:
extern traceHandle USARTHandle;
#endif


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
//vTraceStoreISRBegin(USARTHandle);
#endif


	int i;
	for (i = 0; i < numberHandlers; i++ )
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e01b      	b.n	800520e <HAL_UART_TxCpltCallback+0x4a>
	{
	   	if (mHandlers[i]->port == huart )
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_UART_TxCpltCallback+0x74>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d110      	bne.n	8005208 <HAL_UART_TxCpltCallback+0x44>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <HAL_UART_TxCpltCallback+0x74>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ee:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	2200      	movs	r2, #0
 8005200:	2100      	movs	r1, #0
 8005202:	f7fd ff9d 	bl	8003140 <xTaskGenericNotifyFromISR>
	   		break;
 8005206:	e008      	b.n	800521a <HAL_UART_TxCpltCallback+0x56>
	for (i = 0; i < numberHandlers; i++ )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_UART_TxCpltCallback+0x78>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4293      	cmp	r3, r2
 8005218:	dbdd      	blt.n	80051d6 <HAL_UART_TxCpltCallback+0x12>
	   	}
	}
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_UART_TxCpltCallback+0x6c>
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_UART_TxCpltCallback+0x7c>)
 8005222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy

#if (configUSE_TRACE_FACILITY ==1)
//vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif

}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20004b14 	.word	0x20004b14
 800523c:	20004228 	.word	0x20004228
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b087      	sub	sp, #28
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
vTraceStoreISRBegin(USARTHandle);
#endif

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e03a      	b.n	80052cc <HAL_UART_RxCpltCallback+0x88>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d12f      	bne.n	80052c6 <HAL_UART_RxCpltCallback+0x82>
    	{
      RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8005266:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005272:	4921      	ldr	r1, [pc, #132]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800527a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7ff f827 	bl	80042d4 <RingAdd>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	6858      	ldr	r0, [r3, #4]
 8005290:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005298:	33b2      	adds	r3, #178	; 0xb2
 800529a:	2201      	movs	r2, #1
 800529c:	4619      	mov	r1, r3
 800529e:	f003 fa3d 	bl	800871c <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80052a2:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <HAL_UART_RxCpltCallback+0xb4>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052aa:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 80052ae:	f7fd f8cf 	bl	8002450 <xTaskGetTickCountFromISR>
 80052b2:	4602      	mov	r2, r0
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	2100      	movs	r1, #0
 80052ba:	9100      	str	r1, [sp, #0]
 80052bc:	2107      	movs	r1, #7
 80052be:	4620      	mov	r0, r4
 80052c0:	f7fe f94e 	bl	8003560 <xTimerGenericCommand>
    		break;
 80052c4:	e008      	b.n	80052d8 <HAL_UART_RxCpltCallback+0x94>
    for (i = 0; i < numberHandlers; i++ )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3301      	adds	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_UART_RxCpltCallback+0xb8>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	dbbe      	blt.n	8005256 <HAL_UART_RxCpltCallback+0x12>
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_UART_RxCpltCallback+0xaa>
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <HAL_UART_RxCpltCallback+0xbc>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy

#if (configUSE_TRACE_FACILITY ==1)
vTraceStoreISREnd(xHigherPriorityTaskWoken);
#endif
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20004b14 	.word	0x20004b14
 80052fc:	20004228 	.word	0x20004228
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <StartTaskPLC>:


#define SCANCYCLE 10

void StartTaskPLC(void *argument)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b093      	sub	sp, #76	; 0x4c
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
   uint8_t uRawTemperature[2];
   uint16_t uTemperature;
   float fTemperature;


   uint16_t udelayTermo =0 ; // the time of conversion is 0.22 seconds, we read only one sample every 500 ms
 800530c:	2300      	movs	r3, #0
 800530e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   user_pwm_setvalue((uint32_t)0, TIM_CHANNEL_1, TIM_OCPOLARITY_HIGH);
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	2000      	movs	r0, #0
 8005318:	f000 f968 	bl	80055ec <user_pwm_setvalue>
   PID.Kp = PID_PARAM_KP;        /* Proportional */
 800531c:	4ba6      	ldr	r3, [pc, #664]	; (80055b8 <StartTaskPLC+0x2b4>)
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   PID.Ki = PID_PARAM_KI;        /* Integral */
 8005320:	4ba6      	ldr	r3, [pc, #664]	; (80055bc <StartTaskPLC+0x2b8>)
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
   PID.Kd = PID_PARAM_KD;        /* Derivative */
 8005324:	4ba6      	ldr	r3, [pc, #664]	; (80055c0 <StartTaskPLC+0x2bc>)
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c

   ModbusDATA[1] = (uint16_t)(PID_PARAM_KP*100);
 8005328:	4ba6      	ldr	r3, [pc, #664]	; (80055c4 <StartTaskPLC+0x2c0>)
 800532a:	220a      	movs	r2, #10
 800532c:	805a      	strh	r2, [r3, #2]
   ModbusDATA[2] = (uint16_t)(PID_PARAM_KI*100);
 800532e:	4ba5      	ldr	r3, [pc, #660]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005330:	2202      	movs	r2, #2
 8005332:	809a      	strh	r2, [r3, #4]
   ModbusDATA[3] = (uint16_t)(PID_PARAM_KD*100);
 8005334:	4ba3      	ldr	r3, [pc, #652]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005336:	2214      	movs	r2, #20
 8005338:	80da      	strh	r2, [r3, #6]
   arm_pid_init_f32(&PID, 1);
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f003 fe2d 	bl	8008fa0 <arm_pid_init_f32>


   for( ; ; )
  	 {

  		 if(udelayTermo>= 500/SCANCYCLE)
 8005346:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800534a:	2b31      	cmp	r3, #49	; 0x31
 800534c:	d955      	bls.n	80053fa <StartTaskPLC+0xf6>
  		 {
  			 udelayTermo = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  			 HAL_GPIO_WritePin(CS_TERMO_Port, CS_TERMO_Pin, GPIO_PIN_RESET);
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800535a:	489b      	ldr	r0, [pc, #620]	; (80055c8 <StartTaskPLC+0x2c4>)
 800535c:	f001 f9be 	bl	80066dc <HAL_GPIO_WritePin>
  			 HAL_SPI_Receive(&hspi1, uRawTemperature, 2, 100);
 8005360:	f107 0108 	add.w	r1, r7, #8
 8005364:	2364      	movs	r3, #100	; 0x64
 8005366:	2202      	movs	r2, #2
 8005368:	4898      	ldr	r0, [pc, #608]	; (80055cc <StartTaskPLC+0x2c8>)
 800536a:	f001 ffda 	bl	8007322 <HAL_SPI_Receive>
  			 HAL_GPIO_WritePin(CS_TERMO_Port, CS_TERMO_Pin, GPIO_PIN_SET);
 800536e:	2201      	movs	r2, #1
 8005370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005374:	4894      	ldr	r0, [pc, #592]	; (80055c8 <StartTaskPLC+0x2c4>)
 8005376:	f001 f9b1 	bl	80066dc <HAL_GPIO_WritePin>


  			 uTemperature = uRawTemperature[0]<<8;
 800537a:	7a3b      	ldrb	r3, [r7, #8]
 800537c:	b29b      	uxth	r3, r3
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  			 uTemperature |= uRawTemperature[1];
 8005384:	7a7b      	ldrb	r3, [r7, #9]
 8005386:	b29a      	uxth	r2, r3
 8005388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800538c:	4313      	orrs	r3, r2
 800538e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  			 if (uTemperature & 0x04)
 8005392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <StartTaskPLC+0xa2>
  			 {
  				 ModbusDATA[4] = 0; //error Thermocouple disconnected
 800539e:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <StartTaskPLC+0x2c0>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	811a      	strh	r2, [r3, #8]
 80053a4:	e029      	b.n	80053fa <StartTaskPLC+0xf6>
  			 }
  			 else
  			 {
  				 fTemperature = (uTemperature>>3) * 0.25 ;
 80053a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb f962 	bl	8000678 <__aeabi_i2d>
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	4b85      	ldr	r3, [pc, #532]	; (80055d0 <StartTaskPLC+0x2cc>)
 80053ba:	f7fa fee1 	bl	8000180 <__aeabi_dmul>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fb f9e1 	bl	800078c <__aeabi_d2f>
 80053ca:	4603      	mov	r3, r0
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  				 ModbusDATA[4] = (uTemperature>>3) * 0.25;
 80053ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053d2:	08db      	lsrs	r3, r3, #3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fb f94e 	bl	8000678 <__aeabi_i2d>
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	4b7b      	ldr	r3, [pc, #492]	; (80055d0 <StartTaskPLC+0x2cc>)
 80053e2:	f7fa fecd 	bl	8000180 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	f7fb f9ad 	bl	800074c <__aeabi_d2uiz>
 80053f2:	4603      	mov	r3, r0
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <StartTaskPLC+0x2c0>)
 80053f8:	811a      	strh	r2, [r3, #8]


  		 }

           // update constants from Modbus shared region
  		 PID.Kp = (float)ModbusDATA[1]/100.0;        /* Proportional */
 80053fa:	4b72      	ldr	r3, [pc, #456]	; (80055c4 <StartTaskPLC+0x2c0>)
 80053fc:	885b      	ldrh	r3, [r3, #2]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fb faca 	bl	8000998 <__aeabi_ui2f>
 8005404:	4603      	mov	r3, r0
 8005406:	4973      	ldr	r1, [pc, #460]	; (80055d4 <StartTaskPLC+0x2d0>)
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb fbd1 	bl	8000bb0 <__aeabi_fdiv>
 800540e:	4603      	mov	r3, r0
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
  		 PID.Ki = (float)ModbusDATA[2]/100.0;        /* Integral */
 8005412:	4b6c      	ldr	r3, [pc, #432]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005414:	889b      	ldrh	r3, [r3, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb fabe 	bl	8000998 <__aeabi_ui2f>
 800541c:	4603      	mov	r3, r0
 800541e:	496d      	ldr	r1, [pc, #436]	; (80055d4 <StartTaskPLC+0x2d0>)
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb fbc5 	bl	8000bb0 <__aeabi_fdiv>
 8005426:	4603      	mov	r3, r0
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
  		 PID.Kd = (float)ModbusDATA[3]/100.0;        /* Derivative */
 800542a:	4b66      	ldr	r3, [pc, #408]	; (80055c4 <StartTaskPLC+0x2c0>)
 800542c:	88db      	ldrh	r3, [r3, #6]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb fab2 	bl	8000998 <__aeabi_ui2f>
 8005434:	4603      	mov	r3, r0
 8005436:	4967      	ldr	r1, [pc, #412]	; (80055d4 <StartTaskPLC+0x2d0>)
 8005438:	4618      	mov	r0, r3
 800543a:	f7fb fbb9 	bl	8000bb0 <__aeabi_fdiv>
 800543e:	4603      	mov	r3, r0
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c

  		 setpoint =  ModbusDATA[0];
 8005442:	4b60      	ldr	r3, [pc, #384]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	     if(setpoint>200)
 800544a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800544e:	2bc8      	cmp	r3, #200	; 0xc8
 8005450:	d905      	bls.n	800545e <StartTaskPLC+0x15a>
  	     {
  	    	 setpoint = 200;
 8005452:	23c8      	movs	r3, #200	; 0xc8
 8005454:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	    	 ModbusDATA[0] = 200;
 8005458:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <StartTaskPLC+0x2c0>)
 800545a:	22c8      	movs	r2, #200	; 0xc8
 800545c:	801a      	strh	r2, [r3, #0]
  	     }
  		 if(setpoint<0)setpoint = 0;
  	     pid_error =  setpoint - speed;
 800545e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005462:	4a5d      	ldr	r2, [pc, #372]	; (80055d8 <StartTaskPLC+0x2d4>)
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7fb fa99 	bl	80009a0 <__aeabi_i2f>
 800546e:	4603      	mov	r3, r0
 8005470:	4a5a      	ldr	r2, [pc, #360]	; (80055dc <StartTaskPLC+0x2d8>)
 8005472:	6013      	str	r3, [r2, #0]
  		 /* Calculate PID here, argument is the error */
  		 /* Output data will be returned, we will use it as duty cycle parameter */
  		 duty = arm_pid_f32(&PID, pid_error);
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <StartTaskPLC+0x2d8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f107 020c 	add.w	r2, r7, #12
 800547c:	63ba      	str	r2, [r7, #56]	; 0x38
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005486:	4618      	mov	r0, r3
 8005488:	f7fb fade 	bl	8000a48 <__aeabi_fmul>
 800548c:	4603      	mov	r3, r0
 800548e:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f7fb fad4 	bl	8000a48 <__aeabi_fmul>
 80054a0:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 80054a2:	4619      	mov	r1, r3
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7fb f9c7 	bl	8000838 <__addsf3>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f7fb fac5 	bl	8000a48 <__aeabi_fmul>
 80054be:	4603      	mov	r3, r0
 80054c0:	4619      	mov	r1, r3
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7fb f9b8 	bl	8000838 <__addsf3>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7fb f9b0 	bl	8000838 <__addsf3>
 80054d8:	4603      	mov	r3, r0
 80054da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update state */
    S->state[1] = S->state[0];
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ee:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	4a3b      	ldr	r2, [pc, #236]	; (80055e0 <StartTaskPLC+0x2dc>)
 80054f4:	6013      	str	r3, [r2, #0]
  		 duty_pulse =duty;
 80054f6:	4b3a      	ldr	r3, [pc, #232]	; (80055e0 <StartTaskPLC+0x2dc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3a      	ldr	r2, [pc, #232]	; (80055e4 <StartTaskPLC+0x2e0>)
 80054fc:	6013      	str	r3, [r2, #0]
  	 	 if (duty_pulse > 1000)
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <StartTaskPLC+0x2e0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4939      	ldr	r1, [pc, #228]	; (80055e8 <StartTaskPLC+0x2e4>)
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb fc5b 	bl	8000dc0 <__aeabi_fcmpgt>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <StartTaskPLC+0x214>
  	 	 {
  	 		duty_pulse = 1000;
 8005510:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <StartTaskPLC+0x2e0>)
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <StartTaskPLC+0x2e4>)
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e00d      	b.n	8005534 <StartTaskPLC+0x230>
  		 }
  		 else if (duty_pulse < 0)
 8005518:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <StartTaskPLC+0x2e0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f7fb fc2f 	bl	8000d84 <__aeabi_fcmplt>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <StartTaskPLC+0x230>
  		 {
  			 duty_pulse = 0;
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <StartTaskPLC+0x2e0>)
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
  		 }
  	 	 if(setpoint == 0 && duty_pulse>0 && pid_error == 0 ) duty_pulse=0; // Do a complete stop
 8005534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005538:	2b00      	cmp	r3, #0
 800553a:	d117      	bne.n	800556c <StartTaskPLC+0x268>
 800553c:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <StartTaskPLC+0x2e0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f7fb fc3b 	bl	8000dc0 <__aeabi_fcmpgt>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <StartTaskPLC+0x268>
 8005550:	4b22      	ldr	r3, [pc, #136]	; (80055dc <StartTaskPLC+0x2d8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f7fb fc09 	bl	8000d70 <__aeabi_fcmpeq>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <StartTaskPLC+0x268>
 8005564:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <StartTaskPLC+0x2e0>)
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

  		 user_pwm_setvalue((uint32_t)duty_pulse, TIM_CHANNEL_1, TIM_OCPOLARITY_HIGH);
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <StartTaskPLC+0x2e0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fb fc2f 	bl	8000dd4 <__aeabi_f2uiz>
 8005576:	4603      	mov	r3, r0
 8005578:	b29b      	uxth	r3, r3
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f834 	bl	80055ec <user_pwm_setvalue>

  		 ModbusDATA[5] = setpoint;
 8005584:	4a0f      	ldr	r2, [pc, #60]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005586:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800558a:	8153      	strh	r3, [r2, #10]
  		 ModbusDATA[6] = speed;
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <StartTaskPLC+0x2d4>)
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <StartTaskPLC+0x2c0>)
 8005592:	819a      	strh	r2, [r3, #12]
  		 ModbusDATA[7] = duty_pulse;
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <StartTaskPLC+0x2e0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fb fc1b 	bl	8000dd4 <__aeabi_f2uiz>
 800559e:	4603      	mov	r3, r0
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <StartTaskPLC+0x2c0>)
 80055a4:	81da      	strh	r2, [r3, #14]

  		 vTaskDelay(SCANCYCLE);
 80055a6:	200a      	movs	r0, #10
 80055a8:	f7fc fdfc 	bl	80021a4 <vTaskDelay>

  		 udelayTermo++;
 80055ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055b0:	3301      	adds	r3, #1
 80055b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  		 if(udelayTermo>= 500/SCANCYCLE)
 80055b6:	e6c6      	b.n	8005346 <StartTaskPLC+0x42>
 80055b8:	3dcccccd 	.word	0x3dcccccd
 80055bc:	3ccccccd 	.word	0x3ccccccd
 80055c0:	3e4ccccd 	.word	0x3e4ccccd
 80055c4:	20004cb4 	.word	0x20004cb4
 80055c8:	40020000 	.word	0x40020000
 80055cc:	20004d18 	.word	0x20004d18
 80055d0:	3fd00000 	.word	0x3fd00000
 80055d4:	42c80000 	.word	0x42c80000
 80055d8:	20004d16 	.word	0x20004d16
 80055dc:	20004d10 	.word	0x20004d10
 80055e0:	20004db4 	.word	0x20004db4
 80055e4:	20004b1c 	.word	0x20004b1c
 80055e8:	447a0000 	.word	0x447a0000

080055ec <user_pwm_setvalue>:

}


void user_pwm_setvalue(uint16_t value, uint32_t channel, uint32_t polarity)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	81fb      	strh	r3, [r7, #14]
    TIM_OC_InitTypeDef sConfigOC;
    //the resolution of PWm is 1 - 1000 according to configuration
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fa:	2360      	movs	r3, #96	; 0x60
 80055fc:	613b      	str	r3, [r7, #16]
    sConfigOC.Pulse = value;
 80055fe:	89fb      	ldrh	r3, [r7, #14]
 8005600:	617b      	str	r3, [r7, #20]
    sConfigOC.OCPolarity = polarity;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, channel);
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4619      	mov	r1, r3
 8005612:	4805      	ldr	r0, [pc, #20]	; (8005628 <user_pwm_setvalue+0x3c>)
 8005614:	f002 fcf6 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, channel);
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	4803      	ldr	r0, [pc, #12]	; (8005628 <user_pwm_setvalue+0x3c>)
 800561c:	f002 faca 	bl	8007bb4 <HAL_TIM_PWM_Start>
}
 8005620:	bf00      	nop
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20004cd4 	.word	0x20004cd4

0800562c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005632:	f000 fd6f 	bl	8006114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005636:	f000 f86b 	bl	8005710 <SystemClock_Config>



  MX_TIM3_Init();
 800563a:	f000 fa45 	bl	8005ac8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800563e:	f000 fa99 	bl	8005b74 <MX_TIM4_Init>
  MX_TIM7_Init();
 8005642:	f000 faeb 	bl	8005c1c <MX_TIM7_Init>
  MX_SPI1_Init();
 8005646:	f000 f8b1 	bl	80057ac <MX_SPI1_Init>


  // Initialization encoder and timer interrupts for speed
  HAL_TIM_Base_Start_IT(&htim7);
 800564a:	4826      	ldr	r0, [pc, #152]	; (80056e4 <main+0xb8>)
 800564c:	f002 fa64 	bl	8007b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8005650:	2100      	movs	r1, #0
 8005652:	4825      	ldr	r0, [pc, #148]	; (80056e8 <main+0xbc>)
 8005654:	f002 fb62 	bl	8007d1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8005658:	2104      	movs	r1, #4
 800565a:	4823      	ldr	r0, [pc, #140]	; (80056e8 <main+0xbc>)
 800565c:	f002 fb5e 	bl	8007d1c <HAL_TIM_Encoder_Start>
   TimerHandle = xTraceSetISRProperties("ISR_TIMER", PRIO_ISR_USART2);
   #endif



  is_fisrt_capture = 1;
 8005660:	4b22      	ldr	r3, [pc, #136]	; (80056ec <main+0xc0>)
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005666:	f000 f901 	bl	800586c <MX_GPIO_Init>
  HAL_GPIO_WritePin(CS_TERMO_Port, CS_TERMO_Pin, GPIO_PIN_SET);
 800566a:	2201      	movs	r2, #1
 800566c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005670:	481f      	ldr	r0, [pc, #124]	; (80056f0 <main+0xc4>)
 8005672:	f001 f833 	bl	80066dc <HAL_GPIO_WritePin>


  MX_USART2_UART_Init();
 8005676:	f000 f8cf 	bl	8005818 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  ModbusH.uiModbusType = SLAVE_RTU;
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <main+0xc8>)
 800567c:	2203      	movs	r2, #3
 800567e:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart2; // This is the UART port connected to STLINK in the NUCLEO F429
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <main+0xc8>)
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <main+0xcc>)
 8005684:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1; //slave ID
 8005686:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <main+0xc8>)
 8005688:	2201      	movs	r2, #1
 800568a:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <main+0xc8>)
 800568e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005692:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = NULL; // No RS485
 8005696:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <main+0xc8>)
 8005698:	2200      	movs	r2, #0
 800569a:	60da      	str	r2, [r3, #12]
   //ModbusH2.EN_Port = LD2_GPIO_Port; // RS485 Enable
   //ModbusH2.EN_Pin = LD2_Pin; // RS485 Enable
  ModbusH.u32overTime = 0;
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <main+0xc8>)
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  ModbusH.au16regs = ModbusDATA;
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <main+0xc8>)
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <main+0xd0>)
 80056a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80056ac:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <main+0xc8>)
 80056ae:	2210      	movs	r2, #16
 80056b0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
   //Initialize Modbus library
  ModbusInit(&ModbusH);
 80056b4:	480f      	ldr	r0, [pc, #60]	; (80056f4 <main+0xc8>)
 80056b6:	f7fe fecd 	bl	8004454 <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80056ba:	480e      	ldr	r0, [pc, #56]	; (80056f4 <main+0xc8>)
 80056bc:	f7fe ff48 	bl	8004550 <ModbusStart>

  //prio = osPriorityNormal;
  prio = osPriorityLow;
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <main+0xd4>)
 80056c2:	2208      	movs	r2, #8
 80056c4:	601a      	str	r2, [r3, #0]
  xTaskCreate ((TaskFunction_t)StartTaskPLC, "TaskPLC", (uint16_t)(STACK_SIZE), NULL, prio, &hTaskPLC);
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <main+0xd4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a0e      	ldr	r2, [pc, #56]	; (8005704 <main+0xd8>)
 80056cc:	9201      	str	r2, [sp, #4]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d6:	490c      	ldr	r1, [pc, #48]	; (8005708 <main+0xdc>)
 80056d8:	480c      	ldr	r0, [pc, #48]	; (800570c <main+0xe0>)
 80056da:	f7fc fc0c 	bl	8001ef6 <xTaskCreate>



  /* USER CODE END 2 */
  /* Start the scheduler. */
  vTaskStartScheduler();
 80056de:	f7fc fd95 	bl	800220c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80056e2:	e7fe      	b.n	80056e2 <main+0xb6>
 80056e4:	20004db8 	.word	0x20004db8
 80056e8:	20004c78 	.word	0x20004c78
 80056ec:	20004db2 	.word	0x20004db2
 80056f0:	40020000 	.word	0x40020000
 80056f4:	20004b28 	.word	0x20004b28
 80056f8:	20004d70 	.word	0x20004d70
 80056fc:	20004cb4 	.word	0x20004cb4
 8005700:	20004c74 	.word	0x20004c74
 8005704:	20004b20 	.word	0x20004b20
 8005708:	080090ac 	.word	0x080090ac
 800570c:	08005305 	.word	0x08005305

08005710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b092      	sub	sp, #72	; 0x48
 8005714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005716:	f107 0314 	add.w	r3, r7, #20
 800571a:	2234      	movs	r2, #52	; 0x34
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fc90 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005724:	463b      	mov	r3, r7
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	609a      	str	r2, [r3, #8]
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <SystemClock_Config+0x98>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800573a:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <SystemClock_Config+0x98>)
 800573c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005740:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005742:	2302      	movs	r3, #2
 8005744:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005746:	2301      	movs	r3, #1
 8005748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800574a:	2310      	movs	r3, #16
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800574e:	2302      	movs	r3, #2
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005752:	2300      	movs	r3, #0
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005756:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800575a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800575c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	4618      	mov	r0, r3
 8005768:	f000 ffd0 	bl	800670c <HAL_RCC_OscConfig>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005772:	f000 f965 	bl	8005a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005776:	230f      	movs	r3, #15
 8005778:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800577a:	2303      	movs	r3, #3
 800577c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800578a:	463b      	mov	r3, r7
 800578c:	2101      	movs	r1, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f001 faec 	bl	8006d6c <HAL_RCC_ClockConfig>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800579a:	f000 f951 	bl	8005a40 <Error_Handler>
  }
}
 800579e:	bf00      	nop
 80057a0:	3748      	adds	r7, #72	; 0x48
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40007000 	.word	0x40007000

080057ac <MX_SPI1_Init>:



static void MX_SPI1_Init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <MX_SPI1_Init+0x64>)
 80057b2:	4a18      	ldr	r2, [pc, #96]	; (8005814 <MX_SPI1_Init+0x68>)
 80057b4:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <MX_SPI1_Init+0x64>)
 80057b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057bc:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <MX_SPI1_Init+0x64>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <MX_SPI1_Init+0x64>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <MX_SPI1_Init+0x64>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <MX_SPI1_Init+0x64>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <MX_SPI1_Init+0x64>)
 80057d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057dc:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <MX_SPI1_Init+0x64>)
 80057e0:	2230      	movs	r2, #48	; 0x30
 80057e2:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <MX_SPI1_Init+0x64>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <MX_SPI1_Init+0x64>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <MX_SPI1_Init+0x64>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 80057f6:	4b06      	ldr	r3, [pc, #24]	; (8005810 <MX_SPI1_Init+0x64>)
 80057f8:	220a      	movs	r2, #10
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80057fc:	4804      	ldr	r0, [pc, #16]	; (8005810 <MX_SPI1_Init+0x64>)
 80057fe:	f001 fd07 	bl	8007210 <HAL_SPI_Init>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <MX_SPI1_Init+0x60>
	  {
	    Error_Handler();
 8005808:	f000 f91a 	bl	8005a40 <Error_Handler>
	  }
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20004d18 	.word	0x20004d18
 8005814:	40013000 	.word	0x40013000

08005818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <MX_USART2_UART_Init+0x50>)
 8005820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 8005824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 8005838:	2200      	movs	r2, #0
 800583a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 800583e:	220c      	movs	r2, #12
 8005840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 8005844:	2200      	movs	r2, #0
 8005846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 800584a:	2200      	movs	r2, #0
 800584c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800584e:	4805      	ldr	r0, [pc, #20]	; (8005864 <MX_USART2_UART_Init+0x4c>)
 8005850:	f002 fed3 	bl	80085fa <HAL_UART_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800585a:	f000 f8f1 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20004d70 	.word	0x20004d70
 8005868:	40004400 	.word	0x40004400

0800586c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005872:	f107 0314 	add.w	r3, r7, #20
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	609a      	str	r2, [r3, #8]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <MX_GPIO_Init+0xdc>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <MX_GPIO_Init+0xdc>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	61d3      	str	r3, [r2, #28]
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <MX_GPIO_Init+0xdc>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <MX_GPIO_Init+0xdc>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058a0:	f043 0320 	orr.w	r3, r3, #32
 80058a4:	61d3      	str	r3, [r2, #28]
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b2:	4b25      	ldr	r3, [pc, #148]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4a24      	ldr	r2, [pc, #144]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	61d3      	str	r3, [r2, #28]
 80058be:	4b22      	ldr	r3, [pc, #136]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	61d3      	str	r3, [r2, #28]
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <MX_GPIO_Init+0xdc>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80058e2:	2200      	movs	r2, #0
 80058e4:	2120      	movs	r1, #32
 80058e6:	4819      	ldr	r0, [pc, #100]	; (800594c <MX_GPIO_Init+0xe0>)
 80058e8:	f000 fef8 	bl	80066dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80058ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <MX_GPIO_Init+0xe4>)
 80058f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80058fa:	f107 0314 	add.w	r3, r7, #20
 80058fe:	4619      	mov	r1, r3
 8005900:	4814      	ldr	r0, [pc, #80]	; (8005954 <MX_GPIO_Init+0xe8>)
 8005902:	f000 fd5b 	bl	80063bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005906:	2320      	movs	r3, #32
 8005908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800590a:	2301      	movs	r3, #1
 800590c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005912:	2300      	movs	r3, #0
 8005914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4619      	mov	r1, r3
 800591c:	480b      	ldr	r0, [pc, #44]	; (800594c <MX_GPIO_Init+0xe0>)
 800591e:	f000 fd4d 	bl	80063bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_TERMO */
  GPIO_InitStruct.Pin = CS_TERMO_Pin;
 8005922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005928:	2301      	movs	r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005930:	2302      	movs	r3, #2
 8005932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_TERMO_Port, &GPIO_InitStruct);
 8005934:	f107 0314 	add.w	r3, r7, #20
 8005938:	4619      	mov	r1, r3
 800593a:	4804      	ldr	r0, [pc, #16]	; (800594c <MX_GPIO_Init+0xe0>)
 800593c:	f000 fd3e 	bl	80063bc <HAL_GPIO_Init>


}
 8005940:	bf00      	nop
 8005942:	3728      	adds	r7, #40	; 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40023800 	.word	0x40023800
 800594c:	40020000 	.word	0x40020000
 8005950:	10110000 	.word	0x10110000
 8005954:	40020800 	.word	0x40020800

08005958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800596a:	f000 fbeb 	bl	8006144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if ( htim == &htim7)  // if interrput source is channel 1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d150      	bne.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0xc0>
   	{
#if (configUSE_TRACE_FACILITY ==1)
//vTraceStoreISRBegin(TimerHandle);
#endif
      		if(is_fisrt_capture)
 8005976:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005978:	f993 3000 	ldrsb.w	r3, [r3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_TIM_PeriodElapsedCallback+0x3a>
      		{
      			vcap1 = TIM4->CNT;
 8005980:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	b29a      	uxth	r2, r3
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005988:	801a      	strh	r2, [r3, #0]
      			is_fisrt_capture = 0;
 800598a:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
#endif
     	}


  /* USER CODE END Callback 1 */
}
 8005990:	e042      	b.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0xc0>
      		else if(!is_fisrt_capture)
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005994:	f993 3000 	ldrsb.w	r3, [r3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d13d      	bne.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0xc0>
      			vcap2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800599c:	2100      	movs	r1, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 fbf6 	bl	8008190 <HAL_TIM_ReadCapturedValue>
 80059a4:	4603      	mov	r3, r0
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80059aa:	801a      	strh	r2, [r3, #0]
      			vcap2 = TIM4->CNT;
 80059ac:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80059b4:	801a      	strh	r2, [r3, #0]
      			speed_aux = vcap2>vcap1 ? (vcap2 - vcap1) : (vcap1 - vcap2);
 80059b6:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d906      	bls.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x78>
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	e005      	b.n	80059dc <HAL_TIM_PeriodElapsedCallback+0x84>
 80059d0:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	81fb      	strh	r3, [r7, #14]
      			if(speed_aux>300)
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80059e4:	d905      	bls.n	80059f2 <HAL_TIM_PeriodElapsedCallback+0x9a>
      				speed = 0xffff - speed_aux +1;
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	425b      	negs	r3, r3
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <HAL_TIM_PeriodElapsedCallback+0xa0>
      				speed = speed_aux;
 80059f2:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	8013      	strh	r3, [r2, #0]
      			frequency = speed *20;
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fa ffca 	bl	80009a0 <__aeabi_i2f>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4a0b      	ldr	r2, [pc, #44]	; (8005a3c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8005a10:	6013      	str	r3, [r2, #0]
      			is_fisrt_capture = 1;
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40001000 	.word	0x40001000
 8005a24:	20004db8 	.word	0x20004db8
 8005a28:	20004db2 	.word	0x20004db2
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	20004d14 	.word	0x20004d14
 8005a34:	20004db0 	.word	0x20004db0
 8005a38:	20004d16 	.word	0x20004d16
 8005a3c:	20004b24 	.word	0x20004b24

08005a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8005a56:	e7fe      	b.n	8005a56 <vApplicationStackOverflowHook+0xa>

08005a58 <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8005a5c:	e7fe      	b.n	8005a5c <vApplicationMallocFailedHook+0x4>
	...

08005a60 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a70:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vApplicationGetIdleTaskMemory+0x30>)
 8005a76:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	2000422c 	.word	0x2000422c
 8005a90:	2000428c 	.word	0x2000428c

08005a94 <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005aa4:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <vApplicationGetTimerTaskMemory+0x30>)
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2000468c 	.word	0x2000468c
 8005ac4:	200046ec 	.word	0x200046ec

08005ac8 <MX_TIM3_Init>:




static void MX_TIM3_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ad8:	463b      	mov	r3, r7
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005ae6:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <MX_TIM3_Init+0xa8>)
 8005ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005aec:	220f      	movs	r2, #15
 8005aee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af0:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005afe:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8005b0a:	4818      	ldr	r0, [pc, #96]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b0c:	f002 f827 	bl	8007b5e <HAL_TIM_OC_Init>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005b16:	f7ff ff93 	bl	8005a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4619      	mov	r1, r3
 8005b28:	4810      	ldr	r0, [pc, #64]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b2a:	f002 fd22 	bl	8008572 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005b34:	f7ff ff84 	bl	8005a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b48:	463b      	mov	r3, r7
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4807      	ldr	r0, [pc, #28]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b50:	f002 f9f8 	bl	8007f44 <HAL_TIM_OC_ConfigChannel>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005b5a:	f7ff ff71 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b5e:	4803      	ldr	r0, [pc, #12]	; (8005b6c <MX_TIM3_Init+0xa4>)
 8005b60:	f000 f91a 	bl	8005d98 <HAL_TIM_MspPostInit>

}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20004cd4 	.word	0x20004cd4
 8005b70:	40000400 	.word	0x40000400

08005b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b7a:	f107 030c 	add.w	r3, r7, #12
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f003 fa5e 	bl	8009044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005b92:	4a21      	ldr	r2, [pc, #132]	; (8005c18 <MX_TIM4_Init+0xa4>)
 8005b94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b96:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ba8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	4619      	mov	r1, r3
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005be2:	f002 f809 	bl	8007bf8 <HAL_TIM_Encoder_Init>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005bec:	f7ff ff28 	bl	8005a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4805      	ldr	r0, [pc, #20]	; (8005c14 <MX_TIM4_Init+0xa0>)
 8005bfe:	f002 fcb8 	bl	8008572 <HAL_TIMEx_MasterConfigSynchronization>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005c08:	f7ff ff1a 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005c0c:	bf00      	nop
 8005c0e:	3730      	adds	r7, #48	; 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20004c78 	.word	0x20004c78
 8005c18:	40000800 	.word	0x40000800

08005c1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c22:	463b      	mov	r3, r7
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <MX_TIM7_Init+0x68>)
 8005c2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c32:	223f      	movs	r2, #63	; 0x3f
 8005c34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period =50000;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c3e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005c42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c4a:	480d      	ldr	r0, [pc, #52]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c4c:	f001 ff39 	bl	8007ac2 <HAL_TIM_Base_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005c56:	f7ff fef3 	bl	8005a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c62:	463b      	mov	r3, r7
 8005c64:	4619      	mov	r1, r3
 8005c66:	4806      	ldr	r0, [pc, #24]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c68:	f002 fc83 	bl	8008572 <HAL_TIMEx_MasterConfigSynchronization>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005c72:	f7ff fee5 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20004db8 	.word	0x20004db8
 8005c84:	40001400 	.word	0x40001400

08005c88 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <HAL_TIM_OC_MspInit+0x34>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10b      	bne.n	8005cb2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_TIM_OC_MspInit+0x38>)
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <HAL_TIM_OC_MspInit+0x38>)
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	6253      	str	r3, [r2, #36]	; 0x24
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <HAL_TIM_OC_MspInit+0x38>)
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d127      	bne.n	8005d36 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005cec:	f043 0304 	orr.w	r3, r3, #4
 8005cf0:	6253      	str	r3, [r2, #36]	; 0x24
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	61d3      	str	r3, [r2, #28]
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d16:	23c0      	movs	r3, #192	; 0xc0
 8005d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d22:	2300      	movs	r3, #0
 8005d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d26:	2302      	movs	r3, #2
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4805      	ldr	r0, [pc, #20]	; (8005d48 <HAL_TIM_Encoder_MspInit+0x84>)
 8005d32:	f000 fb43 	bl	80063bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d36:	bf00      	nop
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40020400 	.word	0x40020400

08005d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a0d      	ldr	r2, [pc, #52]	; (8005d90 <HAL_TIM_Base_MspInit+0x44>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_TIM_Base_MspInit+0x48>)
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <HAL_TIM_Base_MspInit+0x48>)
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	6253      	str	r3, [r2, #36]	; 0x24
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <HAL_TIM_Base_MspInit+0x48>)
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005d76:	2200      	movs	r2, #0
 8005d78:	2105      	movs	r1, #5
 8005d7a:	202c      	movs	r0, #44	; 0x2c
 8005d7c:	f000 fab3 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005d80:	202c      	movs	r0, #44	; 0x2c
 8005d82:	f000 facc 	bl	800631e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40001400 	.word	0x40001400
 8005d94:	40023800 	.word	0x40023800

08005d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da0:	f107 030c 	add.w	r3, r7, #12
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <HAL_TIM_MspPostInit+0x64>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d11b      	bne.n	8005df2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dba:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <HAL_TIM_MspPostInit+0x68>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	4a10      	ldr	r2, [pc, #64]	; (8005e00 <HAL_TIM_MspPostInit+0x68>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	61d3      	str	r3, [r2, #28]
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <HAL_TIM_MspPostInit+0x68>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005de2:	2302      	movs	r3, #2
 8005de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	4619      	mov	r1, r3
 8005dec:	4805      	ldr	r0, [pc, #20]	; (8005e04 <HAL_TIM_MspPostInit+0x6c>)
 8005dee:	f000 fae5 	bl	80063bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005df2:	bf00      	nop
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40020000 	.word	0x40020000

08005e08 <TIM7_IRQHandler>:
}



void TIM7_IRQHandler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e0c:	4802      	ldr	r0, [pc, #8]	; (8005e18 <TIM7_IRQHandler+0x10>)
 8005e0e:	f001 ffbd 	bl	8007d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20004db8 	.word	0x20004db8

08005e1c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e20:	4802      	ldr	r0, [pc, #8]	; (8005e2c <TIM3_IRQHandler+0x10>)
 8005e22:	f001 ffb3 	bl	8007d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20004cd4 	.word	0x20004cd4

08005e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_MspInit+0x58>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <HAL_MspInit+0x58>)
 8005e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	6253      	str	r3, [r2, #36]	; 0x24
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <HAL_MspInit+0x58>)
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <HAL_MspInit+0x58>)
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <HAL_MspInit+0x58>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	6213      	str	r3, [r2, #32]
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_MspInit+0x58>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_MspInit+0x58>)
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <HAL_MspInit+0x58>)
 8005e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e70:	6253      	str	r3, [r2, #36]	; 0x24
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_MspInit+0x58>)
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	40023800 	.word	0x40023800

08005e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_UART_MspInit+0x8c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d12f      	bne.n	8005f0e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005eae:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb8:	6253      	str	r3, [r2, #36]	; 0x24
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec6:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	61d3      	str	r3, [r2, #28]
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <HAL_UART_MspInit+0x90>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005ede:	230c      	movs	r3, #12
 8005ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eea:	2303      	movs	r3, #3
 8005eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005eee:	2307      	movs	r3, #7
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef2:	f107 0314 	add.w	r3, r7, #20
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4809      	ldr	r0, [pc, #36]	; (8005f20 <HAL_UART_MspInit+0x94>)
 8005efa:	f000 fa5f 	bl	80063bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005efe:	2200      	movs	r2, #0
 8005f00:	2105      	movs	r1, #5
 8005f02:	2026      	movs	r0, #38	; 0x26
 8005f04:	f000 f9ef 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f08:	2026      	movs	r0, #38	; 0x26
 8005f0a:	f000 fa08 	bl	800631e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f0e:	bf00      	nop
 8005f10:	3728      	adds	r7, #40	; 0x28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40004400 	.word	0x40004400
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40020000 	.word	0x40020000

08005f24 <HAL_SPI_MspInit>:
}

/* USER CODE BEGIN 1 */

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2c:	f107 0314 	add.w	r3, r7, #20
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <HAL_SPI_MspInit+0x7c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d127      	bne.n	8005f96 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f46:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f50:	6213      	str	r3, [r2, #32]
 8005f52:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	4a10      	ldr	r2, [pc, #64]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	61d3      	str	r3, [r2, #28]
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <HAL_SPI_MspInit+0x80>)
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005f76:	2338      	movs	r3, #56	; 0x38
 8005f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f82:	2302      	movs	r3, #2
 8005f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f86:	2305      	movs	r3, #5
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <HAL_SPI_MspInit+0x84>)
 8005f92:	f000 fa13 	bl	80063bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005f96:	bf00      	nop
 8005f98:	3728      	adds	r7, #40	; 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40013000 	.word	0x40013000
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40020400 	.word	0x40020400

08005fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	202b      	movs	r0, #43	; 0x2b
 8005fc2:	f000 f990 	bl	80062e6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8005fc6:	202b      	movs	r0, #43	; 0x2b
 8005fc8:	f000 f9a9 	bl	800631e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <HAL_InitTick+0x9c>)
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_InitTick+0x9c>)
 8005fd2:	f043 0310 	orr.w	r3, r3, #16
 8005fd6:	6253      	str	r3, [r2, #36]	; 0x24
 8005fd8:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <HAL_InitTick+0x9c>)
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005fe4:	f107 0210 	add.w	r2, r7, #16
 8005fe8:	f107 0314 	add.w	r3, r7, #20
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f87e 	bl	80070f0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f001 f854 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	4a13      	ldr	r2, [pc, #76]	; (800604c <HAL_InitTick+0xa0>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	0c9b      	lsrs	r3, r3, #18
 8006004:	3b01      	subs	r3, #1
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_InitTick+0xa4>)
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <HAL_InitTick+0xa8>)
 800600c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_InitTick+0xa4>)
 8006010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006014:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006016:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <HAL_InitTick+0xa4>)
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <HAL_InitTick+0xa4>)
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_InitTick+0xa4>)
 8006024:	2200      	movs	r2, #0
 8006026:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006028:	4809      	ldr	r0, [pc, #36]	; (8006050 <HAL_InitTick+0xa4>)
 800602a:	f001 fd4a 	bl	8007ac2 <HAL_TIM_Base_Init>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006034:	4806      	ldr	r0, [pc, #24]	; (8006050 <HAL_InitTick+0xa4>)
 8006036:	f001 fd6f 	bl	8007b18 <HAL_TIM_Base_Start_IT>
 800603a:	4603      	mov	r3, r0
 800603c:	e000      	b.n	8006040 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
}
 8006040:	4618      	mov	r0, r3
 8006042:	3730      	adds	r7, #48	; 0x30
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40023800 	.word	0x40023800
 800604c:	431bde83 	.word	0x431bde83
 8006050:	20004df4 	.word	0x20004df4
 8006054:	40001000 	.word	0x40001000

08006058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006068:	e7fe      	b.n	8006068 <HardFault_Handler+0x4>

0800606a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800606e:	e7fe      	b.n	800606e <BusFault_Handler+0x4>

08006070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006074:	e7fe      	b.n	8006074 <UsageFault_Handler+0x4>

08006076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006076:	b480      	push	{r7}
 8006078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr
	...

08006084 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006088:	4802      	ldr	r0, [pc, #8]	; (8006094 <TIM6_IRQHandler+0x10>)
 800608a:	f001 fe7f 	bl	8007d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20004df4 	.word	0x20004df4

08006098 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800609c:	4802      	ldr	r0, [pc, #8]	; (80060a8 <USART2_IRQHandler+0x10>)
 800609e:	f002 fb91 	bl	80087c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20004d70 	.word	0x20004d70

080060ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <SystemInit+0x5c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <SystemInit+0x5c>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <SystemInit+0x5c>)
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	4911      	ldr	r1, [pc, #68]	; (8006108 <SystemInit+0x5c>)
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <SystemInit+0x60>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <SystemInit+0x5c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <SystemInit+0x5c>)
 80060ce:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80060d2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80060d6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <SystemInit+0x5c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <SystemInit+0x5c>)
 80060de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060e2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <SystemInit+0x5c>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a07      	ldr	r2, [pc, #28]	; (8006108 <SystemInit+0x5c>)
 80060ea:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80060ee:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <SystemInit+0x5c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <SystemInit+0x64>)
 80060f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060fc:	609a      	str	r2, [r3, #8]
#endif
}
 80060fe:	bf00      	nop
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40023800 	.word	0x40023800
 800610c:	88ffc00c 	.word	0x88ffc00c
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800611e:	2003      	movs	r0, #3
 8006120:	f000 f8d6 	bl	80062d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006124:	2000      	movs	r0, #0
 8006126:	f7ff ff41 	bl	8005fac <HAL_InitTick>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	71fb      	strb	r3, [r7, #7]
 8006134:	e001      	b.n	800613a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006136:	f7ff fe7b 	bl	8005e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800613a:	79fb      	ldrb	r3, [r7, #7]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_IncTick+0x1c>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_IncTick+0x20>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4413      	add	r3, r2
 8006152:	4a03      	ldr	r2, [pc, #12]	; (8006160 <HAL_IncTick+0x1c>)
 8006154:	6013      	str	r3, [r2, #0]
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20004e30 	.word	0x20004e30
 8006164:	20000010 	.word	0x20000010

08006168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return uwTick;
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <HAL_GetTick+0x10>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	20004e30 	.word	0x20004e30

0800617c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <__NVIC_SetPriorityGrouping+0x44>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006198:	4013      	ands	r3, r2
 800619a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ae:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <__NVIC_SetPriorityGrouping+0x44>)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	60d3      	str	r3, [r2, #12]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	e000ed00 	.word	0xe000ed00

080061c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <__NVIC_GetPriorityGrouping+0x18>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	f003 0307 	and.w	r3, r3, #7
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	e000ed00 	.word	0xe000ed00

080061e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db0b      	blt.n	800620a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	f003 021f 	and.w	r2, r3, #31
 80061f8:	4906      	ldr	r1, [pc, #24]	; (8006214 <__NVIC_EnableIRQ+0x34>)
 80061fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	2001      	movs	r0, #1
 8006202:	fa00 f202 	lsl.w	r2, r0, r2
 8006206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	e000e100 	.word	0xe000e100

08006218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006228:	2b00      	cmp	r3, #0
 800622a:	db0a      	blt.n	8006242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	490c      	ldr	r1, [pc, #48]	; (8006264 <__NVIC_SetPriority+0x4c>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	0112      	lsls	r2, r2, #4
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	440b      	add	r3, r1
 800623c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006240:	e00a      	b.n	8006258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	4908      	ldr	r1, [pc, #32]	; (8006268 <__NVIC_SetPriority+0x50>)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	3b04      	subs	r3, #4
 8006250:	0112      	lsls	r2, r2, #4
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	440b      	add	r3, r1
 8006256:	761a      	strb	r2, [r3, #24]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	e000e100 	.word	0xe000e100
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf28      	it	cs
 800628a:	2304      	movcs	r3, #4
 800628c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3304      	adds	r3, #4
 8006292:	2b06      	cmp	r3, #6
 8006294:	d902      	bls.n	800629c <NVIC_EncodePriority+0x30>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3b03      	subs	r3, #3
 800629a:	e000      	b.n	800629e <NVIC_EncodePriority+0x32>
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	401a      	ands	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43d9      	mvns	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	4313      	orrs	r3, r2
         );
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	; 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff4f 	bl	800617c <__NVIC_SetPriorityGrouping>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4603      	mov	r3, r0
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062f8:	f7ff ff64 	bl	80061c4 <__NVIC_GetPriorityGrouping>
 80062fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff ffb2 	bl	800626c <NVIC_EncodePriority>
 8006308:	4602      	mov	r2, r0
 800630a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff81 	bl	8006218 <__NVIC_SetPriority>
}
 8006316:	bf00      	nop
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	4603      	mov	r3, r0
 8006326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff57 	bl	80061e0 <__NVIC_EnableIRQ>
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d005      	beq.n	800635e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2204      	movs	r2, #4
 8006356:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	e029      	b.n	80063b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 020e 	bic.w	r2, r2, #14
 800636c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 021c 	and.w	r2, r3, #28
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f202 	lsl.w	r2, r1, r2
 8006390:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
    }
  }
  return status;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80063d2:	e160      	b.n	8006696 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	2101      	movs	r1, #1
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8152 	beq.w	8006690 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x40>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b12      	cmp	r3, #18
 80063fa:	d123      	bne.n	8006444 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	08da      	lsrs	r2, r3, #3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3208      	adds	r2, #8
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	220f      	movs	r2, #15
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4013      	ands	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	08da      	lsrs	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3208      	adds	r2, #8
 800643e:	6939      	ldr	r1, [r7, #16]
 8006440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2203      	movs	r2, #3
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4013      	ands	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 0203 	and.w	r2, r3, #3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d00b      	beq.n	8006498 <HAL_GPIO_Init+0xdc>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d007      	beq.n	8006498 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800648c:	2b11      	cmp	r3, #17
 800648e:	d003      	beq.n	8006498 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b12      	cmp	r3, #18
 8006496:	d130      	bne.n	80064fa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	2203      	movs	r2, #3
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4013      	ands	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80064ce:	2201      	movs	r2, #1
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 0201 	and.w	r2, r3, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	2203      	movs	r2, #3
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80ac 	beq.w	8006690 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006538:	4b5e      	ldr	r3, [pc, #376]	; (80066b4 <HAL_GPIO_Init+0x2f8>)
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	4a5d      	ldr	r2, [pc, #372]	; (80066b4 <HAL_GPIO_Init+0x2f8>)
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	6213      	str	r3, [r2, #32]
 8006544:	4b5b      	ldr	r3, [pc, #364]	; (80066b4 <HAL_GPIO_Init+0x2f8>)
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8006550:	4a59      	ldr	r2, [pc, #356]	; (80066b8 <HAL_GPIO_Init+0x2fc>)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	089b      	lsrs	r3, r3, #2
 8006556:	3302      	adds	r3, #2
 8006558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	220f      	movs	r2, #15
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4013      	ands	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a51      	ldr	r2, [pc, #324]	; (80066bc <HAL_GPIO_Init+0x300>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d025      	beq.n	80065c8 <HAL_GPIO_Init+0x20c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a50      	ldr	r2, [pc, #320]	; (80066c0 <HAL_GPIO_Init+0x304>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d01f      	beq.n	80065c4 <HAL_GPIO_Init+0x208>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a4f      	ldr	r2, [pc, #316]	; (80066c4 <HAL_GPIO_Init+0x308>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d019      	beq.n	80065c0 <HAL_GPIO_Init+0x204>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a4e      	ldr	r2, [pc, #312]	; (80066c8 <HAL_GPIO_Init+0x30c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_GPIO_Init+0x200>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a4d      	ldr	r2, [pc, #308]	; (80066cc <HAL_GPIO_Init+0x310>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00d      	beq.n	80065b8 <HAL_GPIO_Init+0x1fc>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a4c      	ldr	r2, [pc, #304]	; (80066d0 <HAL_GPIO_Init+0x314>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <HAL_GPIO_Init+0x1f8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a4b      	ldr	r2, [pc, #300]	; (80066d4 <HAL_GPIO_Init+0x318>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <HAL_GPIO_Init+0x1f4>
 80065ac:	2306      	movs	r3, #6
 80065ae:	e00c      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065b0:	2307      	movs	r3, #7
 80065b2:	e00a      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065b4:	2305      	movs	r3, #5
 80065b6:	e008      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065b8:	2304      	movs	r3, #4
 80065ba:	e006      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065bc:	2303      	movs	r3, #3
 80065be:	e004      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e002      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <HAL_GPIO_Init+0x20e>
 80065c8:	2300      	movs	r3, #0
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	f002 0203 	and.w	r2, r2, #3
 80065d0:	0092      	lsls	r2, r2, #2
 80065d2:	4093      	lsls	r3, r2
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065da:	4937      	ldr	r1, [pc, #220]	; (80066b8 <HAL_GPIO_Init+0x2fc>)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	3302      	adds	r3, #2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e8:	4b3b      	ldr	r3, [pc, #236]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800660c:	4a32      	ldr	r2, [pc, #200]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43db      	mvns	r3, r3
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006636:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800663c:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	43db      	mvns	r3, r3
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4013      	ands	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	43db      	mvns	r3, r3
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4013      	ands	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <HAL_GPIO_Init+0x31c>)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3301      	adds	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f47f ae97 	bne.w	80063d4 <HAL_GPIO_Init+0x18>
  } 
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40020000 	.word	0x40020000
 80066c0:	40020400 	.word	0x40020400
 80066c4:	40020800 	.word	0x40020800
 80066c8:	40020c00 	.word	0x40020c00
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40021400 	.word	0x40021400
 80066d4:	40021800 	.word	0x40021800
 80066d8:	40010400 	.word	0x40010400

080066dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	807b      	strh	r3, [r7, #2]
 80066e8:	4613      	mov	r3, r2
 80066ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066ec:	787b      	ldrb	r3, [r7, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066f2:	887a      	ldrh	r2, [r7, #2]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80066f8:	e003      	b.n	8006702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	041a      	lsls	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	619a      	str	r2, [r3, #24]
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e31d      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671e:	4b94      	ldr	r3, [pc, #592]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
 8006726:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006728:	4b91      	ldr	r3, [pc, #580]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006730:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d07b      	beq.n	8006836 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d006      	beq.n	8006752 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b0c      	cmp	r3, #12
 8006748:	d10f      	bne.n	800676a <HAL_RCC_OscConfig+0x5e>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006750:	d10b      	bne.n	800676a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006752:	4b87      	ldr	r3, [pc, #540]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d06a      	beq.n	8006834 <HAL_RCC_OscConfig+0x128>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d166      	bne.n	8006834 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e2f7      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d106      	bne.n	8006780 <HAL_RCC_OscConfig+0x74>
 8006772:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a7e      	ldr	r2, [pc, #504]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e02d      	b.n	80067dc <HAL_RCC_OscConfig+0xd0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10c      	bne.n	80067a2 <HAL_RCC_OscConfig+0x96>
 8006788:	4b79      	ldr	r3, [pc, #484]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a78      	ldr	r2, [pc, #480]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800678e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b76      	ldr	r3, [pc, #472]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a75      	ldr	r2, [pc, #468]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800679a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e01c      	b.n	80067dc <HAL_RCC_OscConfig+0xd0>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCC_OscConfig+0xb8>
 80067aa:	4b71      	ldr	r3, [pc, #452]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a70      	ldr	r2, [pc, #448]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b6e      	ldr	r3, [pc, #440]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6d      	ldr	r2, [pc, #436]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e00b      	b.n	80067dc <HAL_RCC_OscConfig+0xd0>
 80067c4:	4b6a      	ldr	r3, [pc, #424]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a69      	ldr	r2, [pc, #420]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	4b67      	ldr	r3, [pc, #412]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a66      	ldr	r2, [pc, #408]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80067d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7ff fcc0 	bl	8006168 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ec:	f7ff fcbc 	bl	8006168 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b64      	cmp	r3, #100	; 0x64
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e2ad      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067fe:	4b5c      	ldr	r3, [pc, #368]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0xe0>
 800680a:	e014      	b.n	8006836 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7ff fcac 	bl	8006168 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006814:	f7ff fca8 	bl	8006168 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e299      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006826:	4b52      	ldr	r3, [pc, #328]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x108>
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05a      	beq.n	80068f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d005      	beq.n	8006854 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b0c      	cmp	r3, #12
 800684c:	d119      	bne.n	8006882 <HAL_RCC_OscConfig+0x176>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006854:	4b46      	ldr	r3, [pc, #280]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_RCC_OscConfig+0x160>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e276      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686c:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	493d      	ldr	r1, [pc, #244]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800687c:	4313      	orrs	r3, r2
 800687e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006880:	e03a      	b.n	80068f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d020      	beq.n	80068cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800688a:	4b3a      	ldr	r3, [pc, #232]	; (8006974 <HAL_RCC_OscConfig+0x268>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7ff fc6a 	bl	8006168 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006898:	f7ff fc66 	bl	8006168 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e257      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068aa:	4b31      	ldr	r3, [pc, #196]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	492a      	ldr	r1, [pc, #168]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]
 80068ca:	e015      	b.n	80068f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068cc:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_RCC_OscConfig+0x268>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7ff fc49 	bl	8006168 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068da:	f7ff fc45 	bl	8006168 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e236      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068ec:	4b20      	ldr	r3, [pc, #128]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f0      	bne.n	80068da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80b8 	beq.w	8006a76 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d170      	bne.n	80069ee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_OscConfig+0x218>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e21a      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006930:	429a      	cmp	r2, r3
 8006932:	d921      	bls.n	8006978 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fc09 	bl	8007150 <RCC_SetFlashLatencyFromMSIRange>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e208      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	4906      	ldr	r1, [pc, #24]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 8006956:	4313      	orrs	r3, r2
 8006958:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	4901      	ldr	r1, [pc, #4]	; (8006970 <HAL_RCC_OscConfig+0x264>)
 800696a:	4313      	orrs	r3, r2
 800696c:	604b      	str	r3, [r1, #4]
 800696e:	e020      	b.n	80069b2 <HAL_RCC_OscConfig+0x2a6>
 8006970:	40023800 	.word	0x40023800
 8006974:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006978:	4ba4      	ldr	r3, [pc, #656]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	49a1      	ldr	r1, [pc, #644]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006986:	4313      	orrs	r3, r2
 8006988:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800698a:	4ba0      	ldr	r3, [pc, #640]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	499c      	ldr	r1, [pc, #624]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 800699a:	4313      	orrs	r3, r2
 800699c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fbd4 	bl	8007150 <RCC_SetFlashLatencyFromMSIRange>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e1d3      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	0b5b      	lsrs	r3, r3, #13
 80069b8:	3301      	adds	r3, #1
 80069ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80069c2:	4a92      	ldr	r2, [pc, #584]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 80069c4:	6892      	ldr	r2, [r2, #8]
 80069c6:	0912      	lsrs	r2, r2, #4
 80069c8:	f002 020f 	and.w	r2, r2, #15
 80069cc:	4990      	ldr	r1, [pc, #576]	; (8006c10 <HAL_RCC_OscConfig+0x504>)
 80069ce:	5c8a      	ldrb	r2, [r1, r2]
 80069d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80069d2:	4a90      	ldr	r2, [pc, #576]	; (8006c14 <HAL_RCC_OscConfig+0x508>)
 80069d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069d6:	4b90      	ldr	r3, [pc, #576]	; (8006c18 <HAL_RCC_OscConfig+0x50c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fae6 	bl	8005fac <HAL_InitTick>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d045      	beq.n	8006a76 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	e1b5      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d029      	beq.n	8006a4a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069f6:	4b89      	ldr	r3, [pc, #548]	; (8006c1c <HAL_RCC_OscConfig+0x510>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fc:	f7ff fbb4 	bl	8006168 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a04:	f7ff fbb0 	bl	8006168 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e1a1      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a16:	4b7d      	ldr	r3, [pc, #500]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a22:	4b7a      	ldr	r3, [pc, #488]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	4977      	ldr	r1, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a34:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	4972      	ldr	r1, [pc, #456]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
 8006a48:	e015      	b.n	8006a76 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a4a:	4b74      	ldr	r3, [pc, #464]	; (8006c1c <HAL_RCC_OscConfig+0x510>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7ff fb8a 	bl	8006168 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a58:	f7ff fb86 	bl	8006168 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e177      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006a6a:	4b68      	ldr	r3, [pc, #416]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d030      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a8a:	4b65      	ldr	r3, [pc, #404]	; (8006c20 <HAL_RCC_OscConfig+0x514>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a90:	f7ff fb6a 	bl	8006168 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a98:	f7ff fb66 	bl	8006168 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e157      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006aaa:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x38c>
 8006ab6:	e015      	b.n	8006ae4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab8:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <HAL_RCC_OscConfig+0x514>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006abe:	f7ff fb53 	bl	8006168 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac6:	f7ff fb4f 	bl	8006168 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e140      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f0      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80b5 	beq.w	8006c5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b45      	ldr	r3, [pc, #276]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	4a41      	ldr	r2, [pc, #260]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	6253      	str	r3, [r2, #36]	; 0x24
 8006b0e:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1e:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <HAL_RCC_OscConfig+0x518>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d118      	bne.n	8006b5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2a:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <HAL_RCC_OscConfig+0x518>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3d      	ldr	r2, [pc, #244]	; (8006c24 <HAL_RCC_OscConfig+0x518>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b36:	f7ff fb17 	bl	8006168 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3e:	f7ff fb13 	bl	8006168 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b64      	cmp	r3, #100	; 0x64
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e104      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b50:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <HAL_RCC_OscConfig+0x518>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d106      	bne.n	8006b72 <HAL_RCC_OscConfig+0x466>
 8006b64:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8006b70:	e02d      	b.n	8006bce <HAL_RCC_OscConfig+0x4c2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x488>
 8006b7a:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	4a23      	ldr	r2, [pc, #140]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	6353      	str	r3, [r2, #52]	; 0x34
 8006b86:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	4a20      	ldr	r2, [pc, #128]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b90:	6353      	str	r3, [r2, #52]	; 0x34
 8006b92:	e01c      	b.n	8006bce <HAL_RCC_OscConfig+0x4c2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d10c      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x4aa>
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8006ba8:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb2:	6353      	str	r3, [r2, #52]	; 0x34
 8006bb4:	e00b      	b.n	8006bce <HAL_RCC_OscConfig+0x4c2>
 8006bb6:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	4a14      	ldr	r2, [pc, #80]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	6353      	str	r3, [r2, #52]	; 0x34
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bcc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d015      	beq.n	8006c02 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd6:	f7ff fac7 	bl	8006168 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bdc:	e00a      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bde:	f7ff fac3 	bl	8006168 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e0b2      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HAL_RCC_OscConfig+0x500>)
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0ee      	beq.n	8006bde <HAL_RCC_OscConfig+0x4d2>
 8006c00:	e023      	b.n	8006c4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c02:	f7ff fab1 	bl	8006168 <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c08:	e019      	b.n	8006c3e <HAL_RCC_OscConfig+0x532>
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	080090c8 	.word	0x080090c8
 8006c14:	20000008 	.word	0x20000008
 8006c18:	2000000c 	.word	0x2000000c
 8006c1c:	42470020 	.word	0x42470020
 8006c20:	42470680 	.word	0x42470680
 8006c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c28:	f7ff fa9e 	bl	8006168 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e08d      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c3e:	4b49      	ldr	r3, [pc, #292]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1ee      	bne.n	8006c28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c4a:	7ffb      	ldrb	r3, [r7, #31]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d105      	bne.n	8006c5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c50:	4b44      	ldr	r3, [pc, #272]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	4a43      	ldr	r2, [pc, #268]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d079      	beq.n	8006d58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d056      	beq.n	8006d18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d13b      	bne.n	8006cea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c72:	4b3d      	ldr	r3, [pc, #244]	; (8006d68 <HAL_RCC_OscConfig+0x65c>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c78:	f7ff fa76 	bl	8006168 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c80:	f7ff fa72 	bl	8006168 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e063      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c92:	4b34      	ldr	r3, [pc, #208]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c9e:	4b31      	ldr	r3, [pc, #196]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4319      	orrs	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	492b      	ldr	r1, [pc, #172]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cbc:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <HAL_RCC_OscConfig+0x65c>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc2:	f7ff fa51 	bl	8006168 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cca:	f7ff fa4d 	bl	8006168 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e03e      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x5be>
 8006ce8:	e036      	b.n	8006d58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cea:	4b1f      	ldr	r3, [pc, #124]	; (8006d68 <HAL_RCC_OscConfig+0x65c>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7ff fa3a 	bl	8006168 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7ff fa36 	bl	8006168 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e027      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d0a:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x5ec>
 8006d16:	e01f      	b.n	8006d58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e01a      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d24:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <HAL_RCC_OscConfig+0x658>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d10d      	bne.n	8006d54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	42470060 	.word	0x42470060

08006d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e11a      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d80:	4b8f      	ldr	r3, [pc, #572]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d919      	bls.n	8006dc2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d105      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x34>
 8006d94:	4b8a      	ldr	r3, [pc, #552]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a89      	ldr	r2, [pc, #548]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006d9a:	f043 0304 	orr.w	r3, r3, #4
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b87      	ldr	r3, [pc, #540]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f023 0201 	bic.w	r2, r3, #1
 8006da8:	4985      	ldr	r1, [pc, #532]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db0:	4b83      	ldr	r3, [pc, #524]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0f9      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dce:	4b7d      	ldr	r3, [pc, #500]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	497a      	ldr	r1, [pc, #488]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 808e 	beq.w	8006f0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d107      	bne.n	8006e06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006df6:	4b73      	ldr	r3, [pc, #460]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d121      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0d7      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e0e:	4b6d      	ldr	r3, [pc, #436]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d115      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0cb      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e26:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0bf      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e36:	4b63      	ldr	r3, [pc, #396]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e0b7      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 0203 	bic.w	r2, r3, #3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	495c      	ldr	r1, [pc, #368]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e58:	f7ff f986 	bl	8006168 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d112      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7ff f97e 	bl	8006168 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e09b      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e7e:	4b51      	ldr	r3, [pc, #324]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d1ee      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xfc>
 8006e8a:	e03e      	b.n	8006f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d112      	bne.n	8006eba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e94:	e00a      	b.n	8006eac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e96:	f7ff f967 	bl	8006168 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e084      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006eac:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b0c      	cmp	r3, #12
 8006eb6:	d1ee      	bne.n	8006e96 <HAL_RCC_ClockConfig+0x12a>
 8006eb8:	e027      	b.n	8006f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d11d      	bne.n	8006efe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7ff f950 	bl	8006168 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e06d      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eda:	4b3a      	ldr	r3, [pc, #232]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d1ee      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x158>
 8006ee6:	e010      	b.n	8006f0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7ff f93e 	bl	8006168 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e05b      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ee      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0a:	4b2d      	ldr	r3, [pc, #180]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d219      	bcs.n	8006f4c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d105      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x1be>
 8006f1e:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a27      	ldr	r2, [pc, #156]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f24:	f043 0304 	orr.w	r3, r3, #4
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 0201 	bic.w	r2, r3, #1
 8006f32:	4923      	ldr	r1, [pc, #140]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3a:	4b21      	ldr	r3, [pc, #132]	; (8006fc0 <HAL_RCC_ClockConfig+0x254>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e034      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f58:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4917      	ldr	r1, [pc, #92]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f76:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	490f      	ldr	r1, [pc, #60]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f8a:	f000 f823 	bl	8006fd4 <HAL_RCC_GetSysClockFreq>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <HAL_RCC_ClockConfig+0x258>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	490b      	ldr	r1, [pc, #44]	; (8006fc8 <HAL_RCC_ClockConfig+0x25c>)
 8006f9c:	5ccb      	ldrb	r3, [r1, r3]
 8006f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <HAL_RCC_ClockConfig+0x264>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fffe 	bl	8005fac <HAL_InitTick>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023c00 	.word	0x40023c00
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	080090c8 	.word	0x080090c8
 8006fcc:	20000008 	.word	0x20000008
 8006fd0:	2000000c 	.word	0x2000000c

08006fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8006fda:	4b28      	ldr	r3, [pc, #160]	; (800707c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d00c      	beq.n	8007004 <HAL_RCC_GetSysClockFreq+0x30>
 8006fea:	2b0c      	cmp	r3, #12
 8006fec:	d831      	bhi.n	8007052 <HAL_RCC_GetSysClockFreq+0x7e>
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d002      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x24>
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCC_GetSysClockFreq+0x2a>
 8006ff6:	e02c      	b.n	8007052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ff8:	4b21      	ldr	r3, [pc, #132]	; (8007080 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ffa:	613b      	str	r3, [r7, #16]
      break;
 8006ffc:	e037      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007000:	613b      	str	r3, [r7, #16]
      break;
 8007002:	e034      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	0c9b      	lsrs	r3, r3, #18
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <HAL_RCC_GetSysClockFreq+0xb4>)
 800700e:	5cd3      	ldrb	r3, [r2, r3]
 8007010:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	0d9b      	lsrs	r3, r3, #22
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800701e:	4b17      	ldr	r3, [pc, #92]	; (800707c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a15      	ldr	r2, [pc, #84]	; (8007084 <HAL_RCC_GetSysClockFreq+0xb0>)
 800702e:	fb02 f203 	mul.w	r2, r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e007      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <HAL_RCC_GetSysClockFreq+0xac>)
 8007040:	fb02 f203 	mul.w	r2, r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	fbb2 f3f3 	udiv	r3, r2, r3
 800704a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	613b      	str	r3, [r7, #16]
      break;
 8007050:	e00d      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	0b5b      	lsrs	r3, r3, #13
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	613b      	str	r3, [r7, #16]
      break;
 800706c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706e:	693b      	ldr	r3, [r7, #16]
}
 8007070:	4618      	mov	r0, r3
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	00f42400 	.word	0x00f42400
 8007084:	007a1200 	.word	0x007a1200
 8007088:	080090bc 	.word	0x080090bc

0800708c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007090:	4b02      	ldr	r3, [pc, #8]	; (800709c <HAL_RCC_GetHCLKFreq+0x10>)
 8007092:	681b      	ldr	r3, [r3, #0]
}
 8007094:	4618      	mov	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr
 800709c:	20000008 	.word	0x20000008

080070a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070a4:	f7ff fff2 	bl	800708c <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	; (80070c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	080090d8 	.word	0x080090d8

080070c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070cc:	f7ff ffde 	bl	800708c <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0adb      	lsrs	r3, r3, #11
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	080090d8 	.word	0x080090d8

080070f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220f      	movs	r2, #15
 80070fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007100:	4b11      	ldr	r3, [pc, #68]	; (8007148 <HAL_RCC_GetClockConfig+0x58>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0203 	and.w	r2, r3, #3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RCC_GetClockConfig+0x58>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetClockConfig+0x58>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_RCC_GetClockConfig+0x58>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007132:	4b06      	ldr	r3, [pc, #24]	; (800714c <HAL_RCC_GetClockConfig+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0201 	and.w	r2, r3, #1
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	601a      	str	r2, [r3, #0]
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	40023800 	.word	0x40023800
 800714c:	40023c00 	.word	0x40023c00

08007150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800715c:	4b29      	ldr	r3, [pc, #164]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d12c      	bne.n	80071c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007174:	4b24      	ldr	r3, [pc, #144]	; (8007208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	e016      	b.n	80071ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007180:	4b20      	ldr	r3, [pc, #128]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	4a1f      	ldr	r2, [pc, #124]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718a:	6253      	str	r3, [r2, #36]	; 0x24
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80071a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80071a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80071b4:	d105      	bne.n	80071c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071bc:	d101      	bne.n	80071c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80071be:	2301      	movs	r3, #1
 80071c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0f      	ldr	r2, [pc, #60]	; (800720c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ce:	f043 0304 	orr.w	r3, r3, #4
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 0201 	bic.w	r2, r3, #1
 80071dc:	490b      	ldr	r1, [pc, #44]	; (800720c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d001      	beq.n	80071f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800
 8007208:	40007000 	.word	0x40007000
 800720c:	40023c00 	.word	0x40023c00

08007210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e07b      	b.n	800731a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007232:	d009      	beq.n	8007248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	61da      	str	r2, [r3, #28]
 800723a:	e005      	b.n	8007248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe fe5e 	bl	8005f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	ea42 0103 	orr.w	r1, r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0104 	and.w	r1, r3, #4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	f003 0210 	and.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af02      	add	r7, sp, #8
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733e:	d112      	bne.n	8007366 <HAL_SPI_Receive+0x44>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10e      	bne.n	8007366 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2204      	movs	r2, #4
 800734c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4613      	mov	r3, r2
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f8f1 	bl	8007544 <HAL_SPI_TransmitReceive>
 8007362:	4603      	mov	r3, r0
 8007364:	e0ea      	b.n	800753c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_SPI_Receive+0x52>
 8007370:	2302      	movs	r3, #2
 8007372:	e0e3      	b.n	800753c <HAL_SPI_Receive+0x21a>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737c:	f7fe fef4 	bl	8006168 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d002      	beq.n	8007394 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800738e:	2302      	movs	r3, #2
 8007390:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007392:	e0ca      	b.n	800752a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_SPI_Receive+0x7e>
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073a4:	e0c1      	b.n	800752a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ec:	d10f      	bne.n	800740e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800740c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d007      	beq.n	800742c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800742a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d162      	bne.n	80074fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007434:	e02e      	b.n	8007494 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d115      	bne.n	8007470 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f103 020c 	add.w	r2, r3, #12
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	7812      	ldrb	r2, [r2, #0]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800746e:	e011      	b.n	8007494 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007470:	f7fe fe7a 	bl	8006168 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d803      	bhi.n	8007488 <HAL_SPI_Receive+0x166>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d102      	bne.n	800748e <HAL_SPI_Receive+0x16c>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007492:	e04a      	b.n	800752a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1cb      	bne.n	8007436 <HAL_SPI_Receive+0x114>
 800749e:	e031      	b.n	8007504 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d113      	bne.n	80074d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	b292      	uxth	r2, r2
 80074ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	1c9a      	adds	r2, r3, #2
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074d4:	e011      	b.n	80074fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d6:	f7fe fe47 	bl	8006168 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d803      	bhi.n	80074ee <HAL_SPI_Receive+0x1cc>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_Receive+0x1d2>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074f8:	e017      	b.n	800752a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1cd      	bne.n	80074a0 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fa40 	bl	800798e <SPI_EndRxTransaction>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
 8007526:	e000      	b.n	800752a <HAL_SPI_Receive+0x208>
  }

error :
 8007528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08c      	sub	sp, #48	; 0x30
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_SPI_TransmitReceive+0x26>
 8007566:	2302      	movs	r3, #2
 8007568:	e18a      	b.n	8007880 <HAL_SPI_TransmitReceive+0x33c>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007572:	f7fe fdf9 	bl	8006168 <HAL_GetTick>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800758c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00f      	beq.n	80075b4 <HAL_SPI_TransmitReceive+0x70>
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800759a:	d107      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x68>
 80075a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d003      	beq.n	80075b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075b2:	e15b      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x82>
 80075c0:	887b      	ldrh	r3, [r7, #2]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075cc:	e14e      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d003      	beq.n	80075e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2205      	movs	r2, #5
 80075de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	887a      	ldrh	r2, [r7, #2]
 80075f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	887a      	ldrh	r2, [r7, #2]
 80075f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	887a      	ldrh	r2, [r7, #2]
 8007604:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	887a      	ldrh	r2, [r7, #2]
 800760a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d007      	beq.n	8007636 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763e:	d178      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_SPI_TransmitReceive+0x10a>
 8007648:	8b7b      	ldrh	r3, [r7, #26]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d166      	bne.n	800771c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	1c9a      	adds	r2, r3, #2
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007672:	e053      	b.n	800771c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d11b      	bne.n	80076ba <HAL_SPI_TransmitReceive+0x176>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d016      	beq.n	80076ba <HAL_SPI_TransmitReceive+0x176>
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d113      	bne.n	80076ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	881a      	ldrh	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	1c9a      	adds	r2, r3, #2
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d119      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x1b8>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d014      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	b292      	uxth	r2, r2
 80076de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	1c9a      	adds	r2, r3, #2
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076f8:	2301      	movs	r3, #1
 80076fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076fc:	f7fe fd34 	bl	8006168 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007708:	429a      	cmp	r2, r3
 800770a:	d807      	bhi.n	800771c <HAL_SPI_TransmitReceive+0x1d8>
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d003      	beq.n	800771c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800771a:	e0a7      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1a6      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x130>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1a1      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x130>
 8007730:	e07c      	b.n	800782c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_SPI_TransmitReceive+0x1fc>
 800773a:	8b7b      	ldrh	r3, [r7, #26]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d16b      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007766:	e057      	b.n	8007818 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d11c      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x26c>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d017      	beq.n	80077b0 <HAL_SPI_TransmitReceive+0x26c>
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d114      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d119      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x2ae>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d014      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077f2:	f7fe fcb9 	bl	8006168 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fe:	429a      	cmp	r2, r3
 8007800:	d803      	bhi.n	800780a <HAL_SPI_TransmitReceive+0x2c6>
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d102      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x2cc>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007816:	e029      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1a2      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x224>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d19d      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800782c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f911 	bl	8007a58 <SPI_EndRxTxTransaction>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d006      	beq.n	800784a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2220      	movs	r2, #32
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007848:	e010      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	e000      	b.n	800786c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800786a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800787c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	; 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007898:	f7fe fc66 	bl	8006168 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078a8:	f7fe fc5e 	bl	8006168 <HAL_GetTick>
 80078ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  //count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
  count = tmp_timeout * ((32000000 * 32U) >> 20U);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ba:	e054      	b.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xde>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d050      	beq.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xde>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078c4:	f7fe fc50 	bl	8006168 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d902      	bls.n	80078da <SPI_WaitFlagStateUntilTimeout+0x52>
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d13d      	bne.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xce>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f2:	d111      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x90>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fc:	d004      	beq.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x80>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007906:	d107      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x90>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007920:	d10f      	bne.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xba>
        {
          SPI_RESET_CRC(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e017      	b.n	8007986 <SPI_WaitFlagStateUntilTimeout+0xfe>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0xd8>
      {
        tmp_timeout = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3b01      	subs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4013      	ands	r3, r2
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	429a      	cmp	r2, r3
 8007982:	d19b      	bne.n	80078bc <SPI_WaitFlagStateUntilTimeout+0x34>
    }
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af02      	add	r7, sp, #8
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a2:	d111      	bne.n	80079c8 <SPI_EndRxTransaction+0x3a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ac:	d004      	beq.n	80079b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b6:	d107      	bne.n	80079c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079d0:	d12a      	bne.n	8007a28 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079da:	d012      	beq.n	8007a02 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	2180      	movs	r1, #128	; 0x80
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ff4e 	bl	8007888 <SPI_WaitFlagStateUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d02d      	beq.n	8007a4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e026      	b.n	8007a50 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff ff3b 	bl	8007888 <SPI_WaitFlagStateUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01a      	beq.n	8007a4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f043 0220 	orr.w	r2, r3, #32
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e013      	b.n	8007a50 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2101      	movs	r1, #1
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff ff28 	bl	8007888 <SPI_WaitFlagStateUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d007      	beq.n	8007a4e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	f043 0220 	orr.w	r2, r3, #32
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e000      	b.n	8007a50 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  //__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (320000000 / 24U / 1000000U);
 8007a64:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8007a68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a72:	d112      	bne.n	8007a9a <SPI_EndRxTxTransaction+0x42>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff ff02 	bl	8007888 <SPI_WaitFlagStateUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d016      	beq.n	8007ab8 <SPI_EndRxTxTransaction+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8e:	f043 0220 	orr.w	r2, r3, #32
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e00f      	b.n	8007aba <SPI_EndRxTxTransaction+0x62>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <SPI_EndRxTxTransaction+0x5e>
      {
        break;
      }
      count--;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d0f2      	beq.n	8007a9a <SPI_EndRxTxTransaction+0x42>
 8007ab4:	e000      	b.n	8007ab8 <SPI_EndRxTxTransaction+0x60>
        break;
 8007ab6:	bf00      	nop
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e01d      	b.n	8007b10 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fe f92f 	bl	8005d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f000 fbad 	bl	8008260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b06      	cmp	r3, #6
 8007b40:	d007      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0201 	orr.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e01d      	b.n	8007bac <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7fe f87f 	bl	8005c88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f000 fb5f 	bl	8008260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fcaf 	bl	800852a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d007      	beq.n	8007bee <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0201 	orr.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e083      	b.n	8007d14 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fe f84f 	bl	8005cc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f000 fb07 	bl	8008260 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c98:	f023 030c 	bic.w	r3, r3, #12
 8007c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	011a      	lsls	r2, r3, #4
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	031b      	lsls	r3, r3, #12
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	4313      	orrs	r3, r2
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_TIM_Encoder_Start+0x18>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d008      	beq.n	8007d44 <HAL_TIM_Encoder_Start+0x28>
 8007d32:	e00f      	b.n	8007d54 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fbf4 	bl	800852a <TIM_CCxChannelCmd>
      break;
 8007d42:	e016      	b.n	8007d72 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fbec 	bl	800852a <TIM_CCxChannelCmd>
      break;
 8007d52:	e00e      	b.n	8007d72 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fbe4 	bl	800852a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2201      	movs	r2, #1
 8007d68:	2104      	movs	r1, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fbdd 	bl	800852a <TIM_CCxChannelCmd>
      break;
 8007d70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0201 	orr.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d122      	bne.n	8007de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d11b      	bne.n	8007de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0202 	mvn.w	r2, #2
 8007db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa2b 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007dd4:	e005      	b.n	8007de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa1e 	bl	8008218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa2d 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d122      	bne.n	8007e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d11b      	bne.n	8007e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0204 	mvn.w	r2, #4
 8007e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa01 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007e28:	e005      	b.n	8007e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9f4 	bl	8008218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa03 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d122      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d11b      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0208 	mvn.w	r2, #8
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2204      	movs	r2, #4
 8007e66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9d7 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9ca 	bl	8008218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9d9 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d122      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0310 	and.w	r3, r3, #16
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d11b      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0210 	mvn.w	r2, #16
 8007eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9ad 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007ed0:	e005      	b.n	8007ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9a0 	bl	8008218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9af 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10e      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d107      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0201 	mvn.w	r2, #1
 8007f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fd fd24 	bl	8005958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	d10e      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d107      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f989 	bl	800824e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e04e      	b.n	8007ffc <HAL_TIM_OC_ConfigChannel+0xb8>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d839      	bhi.n	8007fe8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_TIM_OC_ConfigChannel+0x38>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fbf 	.word	0x08007fbf
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fdb 	.word	0x08007fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f9c2 	bl	8008340 <TIM_OC1_SetConfig>
      break;
 8007fbc:	e015      	b.n	8007fea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f9f7 	bl	80083b8 <TIM_OC2_SetConfig>
      break;
 8007fca:	e00e      	b.n	8007fea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fa2e 	bl	8008434 <TIM_OC3_SetConfig>
      break;
 8007fd8:	e007      	b.n	8007fea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fa64 	bl	80084ae <TIM_OC4_SetConfig>
      break;
 8007fe6:	e000      	b.n	8007fea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007fe8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800801a:	2302      	movs	r3, #2
 800801c:	e0b4      	b.n	8008188 <HAL_TIM_PWM_ConfigChannel+0x184>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b0c      	cmp	r3, #12
 8008032:	f200 809f 	bhi.w	8008174 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008071 	.word	0x08008071
 8008040:	08008175 	.word	0x08008175
 8008044:	08008175 	.word	0x08008175
 8008048:	08008175 	.word	0x08008175
 800804c:	080080b1 	.word	0x080080b1
 8008050:	08008175 	.word	0x08008175
 8008054:	08008175 	.word	0x08008175
 8008058:	08008175 	.word	0x08008175
 800805c:	080080f3 	.word	0x080080f3
 8008060:	08008175 	.word	0x08008175
 8008064:	08008175 	.word	0x08008175
 8008068:	08008175 	.word	0x08008175
 800806c:	08008133 	.word	0x08008133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f962 	bl	8008340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0208 	orr.w	r2, r2, #8
 800808a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0204 	bic.w	r2, r2, #4
 800809a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6999      	ldr	r1, [r3, #24]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	619a      	str	r2, [r3, #24]
      break;
 80080ae:	e062      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f97e 	bl	80083b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6999      	ldr	r1, [r3, #24]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	619a      	str	r2, [r3, #24]
      break;
 80080f0:	e041      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f99b 	bl	8008434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0208 	orr.w	r2, r2, #8
 800810c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0204 	bic.w	r2, r2, #4
 800811c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69d9      	ldr	r1, [r3, #28]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	61da      	str	r2, [r3, #28]
      break;
 8008130:	e021      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f9b8 	bl	80084ae <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800814c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800815c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69d9      	ldr	r1, [r3, #28]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	021a      	lsls	r2, r3, #8
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	61da      	str	r2, [r3, #28]
      break;
 8008172:	e000      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008174:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b0c      	cmp	r3, #12
 80081a2:	d831      	bhi.n	8008208 <HAL_TIM_ReadCapturedValue+0x78>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081e1 	.word	0x080081e1
 80081b0:	08008209 	.word	0x08008209
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008209 	.word	0x08008209
 80081bc:	080081eb 	.word	0x080081eb
 80081c0:	08008209 	.word	0x08008209
 80081c4:	08008209 	.word	0x08008209
 80081c8:	08008209 	.word	0x08008209
 80081cc:	080081f5 	.word	0x080081f5
 80081d0:	08008209 	.word	0x08008209
 80081d4:	08008209 	.word	0x08008209
 80081d8:	08008209 	.word	0x08008209
 80081dc:	080081ff 	.word	0x080081ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e6:	60fb      	str	r3, [r7, #12]

      break;
 80081e8:	e00f      	b.n	800820a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	60fb      	str	r3, [r7, #12]

      break;
 80081f2:	e00a      	b.n	800820a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	60fb      	str	r3, [r7, #12]

      break;
 80081fc:	e005      	b.n	800820a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	60fb      	str	r3, [r7, #12]

      break;
 8008206:	e000      	b.n	800820a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008208:	bf00      	nop
  }

  return tmpreg;
 800820a:	68fb      	ldr	r3, [r7, #12]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop

08008218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr

0800823c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr

0800824e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008276:	d00f      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <TIM_Base_SetConfig+0xc8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a2a      	ldr	r2, [pc, #168]	; (800832c <TIM_Base_SetConfig+0xcc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a29      	ldr	r2, [pc, #164]	; (8008330 <TIM_Base_SetConfig+0xd0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a28      	ldr	r2, [pc, #160]	; (8008334 <TIM_Base_SetConfig+0xd4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d108      	bne.n	80082aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b0:	d017      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <TIM_Base_SetConfig+0xc8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a1b      	ldr	r2, [pc, #108]	; (800832c <TIM_Base_SetConfig+0xcc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <TIM_Base_SetConfig+0xd0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <TIM_Base_SetConfig+0xd4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a18      	ldr	r2, [pc, #96]	; (8008338 <TIM_Base_SetConfig+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0x82>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a17      	ldr	r2, [pc, #92]	; (800833c <TIM_Base_SetConfig+0xdc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	615a      	str	r2, [r3, #20]
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40010800 	.word	0x40010800
 8008338:	40010c00 	.word	0x40010c00
 800833c:	40011000 	.word	0x40011000

08008340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 0302 	bic.w	r3, r3, #2
 8008388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	621a      	str	r2, [r3, #32]
}
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f023 0210 	bic.w	r2, r3, #16
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0320 	bic.w	r3, r3, #32
 8008402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	621a      	str	r2, [r3, #32]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800847c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	621a      	str	r2, [r3, #32]
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc80      	pop	{r7}
 80084ac:	4770      	bx	lr

080084ae <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b087      	sub	sp, #28
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	031b      	lsls	r3, r3, #12
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	621a      	str	r2, [r3, #32]
}
 8008520:	bf00      	nop
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800852a:	b480      	push	{r7}
 800852c:	b087      	sub	sp, #28
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	2201      	movs	r2, #1
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a1a      	ldr	r2, [r3, #32]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	43db      	mvns	r3, r3
 800854c:	401a      	ands	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1a      	ldr	r2, [r3, #32]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f003 031f 	and.w	r3, r3, #31
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	fa01 f303 	lsl.w	r3, r1, r3
 8008562:	431a      	orrs	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008586:	2302      	movs	r3, #2
 8008588:	e032      	b.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr

080085fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e03f      	b.n	800868c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fd fc33 	bl	8005e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2224      	movs	r2, #36	; 0x24
 800862a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800863c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fb00 	bl	8008c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691a      	ldr	r2, [r3, #16]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008652:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695a      	ldr	r2, [r3, #20]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008662:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008672:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b20      	cmp	r3, #32
 80086ac:	d130      	bne.n	8008710 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <HAL_UART_Transmit_IT+0x26>
 80086b4:	88fb      	ldrh	r3, [r7, #6]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e029      	b.n	8008712 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_UART_Transmit_IT+0x38>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e022      	b.n	8008712 <HAL_UART_Transmit_IT+0x7e>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	88fa      	ldrh	r2, [r7, #6]
 80086de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	88fa      	ldrh	r2, [r7, #6]
 80086e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2221      	movs	r2, #33	; 0x21
 80086f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800870a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	e000      	b.n	8008712 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
  }
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b20      	cmp	r3, #32
 8008734:	d140      	bne.n	80087b8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_UART_Receive_IT+0x26>
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e039      	b.n	80087ba <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_UART_Receive_IT+0x38>
 8008750:	2302      	movs	r3, #2
 8008752:	e032      	b.n	80087ba <HAL_UART_Receive_IT+0x9e>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	88fa      	ldrh	r2, [r7, #6]
 8008766:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	88fa      	ldrh	r2, [r7, #6]
 800876c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2222      	movs	r2, #34	; 0x22
 8008778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008792:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0220 	orr.w	r2, r2, #32
 80087b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e000      	b.n	80087ba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr

080087c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f003 030f 	and.w	r3, r3, #15
 80087f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10d      	bne.n	8008816 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_UART_IRQHandler+0x52>
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f996 	bl	8008b40 <UART_Receive_IT>
      return;
 8008814:	e0cb      	b.n	80089ae <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80ab 	beq.w	8008974 <HAL_UART_IRQHandler+0x1b0>
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <HAL_UART_IRQHandler+0x70>
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 80a0 	beq.w	8008974 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <HAL_UART_IRQHandler+0x90>
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f003 0304 	and.w	r3, r3, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <HAL_UART_IRQHandler+0xb0>
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886c:	f043 0202 	orr.w	r2, r3, #2
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_UART_IRQHandler+0xd0>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888c:	f043 0204 	orr.w	r2, r3, #4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <HAL_UART_IRQHandler+0xf0>
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ac:	f043 0208 	orr.w	r2, r3, #8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d077      	beq.n	80089ac <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_UART_IRQHandler+0x112>
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f935 	bl	8008b40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e0:	2b40      	cmp	r3, #64	; 0x40
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <HAL_UART_IRQHandler+0x13a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d031      	beq.n	8008962 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f880 	bl	8008a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d123      	bne.n	800895a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695a      	ldr	r2, [r3, #20]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008920:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	2b00      	cmp	r3, #0
 8008928:	d013      	beq.n	8008952 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	4a21      	ldr	r2, [pc, #132]	; (80089b4 <HAL_UART_IRQHandler+0x1f0>)
 8008930:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd fcff 	bl	800633a <HAL_DMA_Abort_IT>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d016      	beq.n	8008970 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008950:	e00e      	b.n	8008970 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f830 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	e00a      	b.n	8008970 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f82c 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	e006      	b.n	8008970 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f828 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800896e:	e01d      	b.n	80089ac <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008970:	bf00      	nop
    return;
 8008972:	e01b      	b.n	80089ac <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_UART_IRQHandler+0x1cc>
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f86c 	bl	8008a66 <UART_Transmit_IT>
    return;
 800898e:	e00e      	b.n	80089ae <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <HAL_UART_IRQHandler+0x1ea>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f8b3 	bl	8008b10 <UART_EndTransmit_IT>
    return;
 80089aa:	e000      	b.n	80089ae <HAL_UART_IRQHandler+0x1ea>
    return;
 80089ac:	bf00      	nop
  }
}
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08008a3f 	.word	0x08008a3f

080089b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr

080089ca <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	4313      	orrs	r3, r2
 80089f8:	b2db      	uxtb	r3, r3
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr

08008a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695a      	ldr	r2, [r3, #20]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr

08008a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff ffad 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b21      	cmp	r3, #33	; 0x21
 8008a78:	d144      	bne.n	8008b04 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a82:	d11a      	bne.n	8008aba <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a98:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d105      	bne.n	8008aae <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	1c9a      	adds	r2, r3, #2
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	621a      	str	r2, [r3, #32]
 8008aac:	e00e      	b.n	8008acc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	621a      	str	r2, [r3, #32]
 8008ab8:	e008      	b.n	8008acc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	1c59      	adds	r1, r3, #1
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	6211      	str	r1, [r2, #32]
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10f      	bne.n	8008b00 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr

08008b10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7fc fb47 	bl	80051c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b22      	cmp	r3, #34	; 0x22
 8008b52:	d171      	bne.n	8008c38 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	d123      	bne.n	8008ba6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10e      	bne.n	8008b8a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	1c9a      	adds	r2, r3, #2
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	629a      	str	r2, [r3, #40]	; 0x28
 8008b88:	e029      	b.n	8008bde <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ba4:	e01b      	b.n	8008bde <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6858      	ldr	r0, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6291      	str	r1, [r2, #40]	; 0x28
 8008bbe:	b2c2      	uxtb	r2, r0
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e00c      	b.n	8008bde <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	1c58      	adds	r0, r3, #1
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	6288      	str	r0, [r1, #40]	; 0x28
 8008bd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4619      	mov	r1, r3
 8008bec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d120      	bne.n	8008c34 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0220 	bic.w	r2, r2, #32
 8008c00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695a      	ldr	r2, [r3, #20]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fc fb0a 	bl	8005244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e002      	b.n	8008c3a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e000      	b.n	8008c3a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008c38:	2302      	movs	r3, #2
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	431a      	orrs	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008c84:	f023 030c 	bic.w	r3, r3, #12
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6812      	ldr	r2, [r2, #0]
 8008c8c:	68f9      	ldr	r1, [r7, #12]
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb0:	f040 80a5 	bne.w	8008dfe <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4aa4      	ldr	r2, [pc, #656]	; (8008f4c <UART_SetConfig+0x308>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d14f      	bne.n	8008d5e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cbe:	f7fe fa03 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 8008cc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009a      	lsls	r2, r3, #2
 8008cce:	441a      	add	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	4a9d      	ldr	r2, [pc, #628]	; (8008f50 <UART_SetConfig+0x30c>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	0119      	lsls	r1, r3, #4
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009a      	lsls	r2, r3, #2
 8008cee:	441a      	add	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cfa:	4b95      	ldr	r3, [pc, #596]	; (8008f50 <UART_SetConfig+0x30c>)
 8008cfc:	fba3 0302 	umull	r0, r3, r3, r2
 8008d00:	095b      	lsrs	r3, r3, #5
 8008d02:	2064      	movs	r0, #100	; 0x64
 8008d04:	fb00 f303 	mul.w	r3, r0, r3
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	3332      	adds	r3, #50	; 0x32
 8008d0e:	4a90      	ldr	r2, [pc, #576]	; (8008f50 <UART_SetConfig+0x30c>)
 8008d10:	fba2 2303 	umull	r2, r3, r2, r3
 8008d14:	095b      	lsrs	r3, r3, #5
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d1c:	4419      	add	r1, r3
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009a      	lsls	r2, r3, #2
 8008d28:	441a      	add	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d34:	4b86      	ldr	r3, [pc, #536]	; (8008f50 <UART_SetConfig+0x30c>)
 8008d36:	fba3 0302 	umull	r0, r3, r3, r2
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	2064      	movs	r0, #100	; 0x64
 8008d3e:	fb00 f303 	mul.w	r3, r0, r3
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	3332      	adds	r3, #50	; 0x32
 8008d48:	4a81      	ldr	r2, [pc, #516]	; (8008f50 <UART_SetConfig+0x30c>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	f003 0207 	and.w	r2, r3, #7
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	440a      	add	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008d5c:	e0f1      	b.n	8008f42 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d5e:	f7fe f99f 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8008d62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009a      	lsls	r2, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7a:	4a75      	ldr	r2, [pc, #468]	; (8008f50 <UART_SetConfig+0x30c>)
 8008d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d80:	095b      	lsrs	r3, r3, #5
 8008d82:	0119      	lsls	r1, r3, #4
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009a      	lsls	r2, r3, #2
 8008d8e:	441a      	add	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d9a:	4b6d      	ldr	r3, [pc, #436]	; (8008f50 <UART_SetConfig+0x30c>)
 8008d9c:	fba3 0302 	umull	r0, r3, r3, r2
 8008da0:	095b      	lsrs	r3, r3, #5
 8008da2:	2064      	movs	r0, #100	; 0x64
 8008da4:	fb00 f303 	mul.w	r3, r0, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	3332      	adds	r3, #50	; 0x32
 8008dae:	4a68      	ldr	r2, [pc, #416]	; (8008f50 <UART_SetConfig+0x30c>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dbc:	4419      	add	r1, r3
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009a      	lsls	r2, r3, #2
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dd4:	4b5e      	ldr	r3, [pc, #376]	; (8008f50 <UART_SetConfig+0x30c>)
 8008dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8008dda:	095b      	lsrs	r3, r3, #5
 8008ddc:	2064      	movs	r0, #100	; 0x64
 8008dde:	fb00 f303 	mul.w	r3, r0, r3
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	3332      	adds	r3, #50	; 0x32
 8008de8:	4a59      	ldr	r2, [pc, #356]	; (8008f50 <UART_SetConfig+0x30c>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	f003 0207 	and.w	r2, r3, #7
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	440a      	add	r2, r1
 8008dfa:	609a      	str	r2, [r3, #8]
}
 8008dfc:	e0a1      	b.n	8008f42 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a52      	ldr	r2, [pc, #328]	; (8008f4c <UART_SetConfig+0x308>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d14e      	bne.n	8008ea6 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e08:	f7fe f95e 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 8008e0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009a      	lsls	r2, r3, #2
 8008e18:	441a      	add	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e24:	4a4a      	ldr	r2, [pc, #296]	; (8008f50 <UART_SetConfig+0x30c>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	0119      	lsls	r1, r3, #4
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009a      	lsls	r2, r3, #2
 8008e38:	441a      	add	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e44:	4b42      	ldr	r3, [pc, #264]	; (8008f50 <UART_SetConfig+0x30c>)
 8008e46:	fba3 0302 	umull	r0, r3, r3, r2
 8008e4a:	095b      	lsrs	r3, r3, #5
 8008e4c:	2064      	movs	r0, #100	; 0x64
 8008e4e:	fb00 f303 	mul.w	r3, r0, r3
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	3332      	adds	r3, #50	; 0x32
 8008e58:	4a3d      	ldr	r2, [pc, #244]	; (8008f50 <UART_SetConfig+0x30c>)
 8008e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5e:	095b      	lsrs	r3, r3, #5
 8008e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e64:	4419      	add	r1, r3
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009a      	lsls	r2, r3, #2
 8008e70:	441a      	add	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e7c:	4b34      	ldr	r3, [pc, #208]	; (8008f50 <UART_SetConfig+0x30c>)
 8008e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2064      	movs	r0, #100	; 0x64
 8008e86:	fb00 f303 	mul.w	r3, r0, r3
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	3332      	adds	r3, #50	; 0x32
 8008e90:	4a2f      	ldr	r2, [pc, #188]	; (8008f50 <UART_SetConfig+0x30c>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	f003 020f 	and.w	r2, r3, #15
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	e04d      	b.n	8008f42 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ea6:	f7fe f8fb 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8008eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009a      	lsls	r2, r3, #2
 8008eb6:	441a      	add	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	4a23      	ldr	r2, [pc, #140]	; (8008f50 <UART_SetConfig+0x30c>)
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	0119      	lsls	r1, r3, #4
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009a      	lsls	r2, r3, #2
 8008ed6:	441a      	add	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	; (8008f50 <UART_SetConfig+0x30c>)
 8008ee4:	fba3 0302 	umull	r0, r3, r3, r2
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	2064      	movs	r0, #100	; 0x64
 8008eec:	fb00 f303 	mul.w	r3, r0, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	3332      	adds	r3, #50	; 0x32
 8008ef6:	4a16      	ldr	r2, [pc, #88]	; (8008f50 <UART_SetConfig+0x30c>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f02:	4419      	add	r1, r3
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009a      	lsls	r2, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <UART_SetConfig+0x30c>)
 8008f1c:	fba3 0302 	umull	r0, r3, r3, r2
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	2064      	movs	r0, #100	; 0x64
 8008f24:	fb00 f303 	mul.w	r3, r0, r3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	3332      	adds	r3, #50	; 0x32
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <UART_SetConfig+0x30c>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 020f 	and.w	r2, r3, #15
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	440a      	add	r2, r1
 8008f40:	609a      	str	r2, [r3, #8]
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40013800 	.word	0x40013800
 8008f50:	51eb851f 	.word	0x51eb851f

08008f54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008f54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008f56:	e003      	b.n	8008f60 <LoopCopyDataInit>

08008f58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008f5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008f5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008f5e:	3104      	adds	r1, #4

08008f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008f60:	480a      	ldr	r0, [pc, #40]	; (8008f8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008f64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008f66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008f68:	d3f6      	bcc.n	8008f58 <CopyDataInit>
  ldr r2, =_sbss
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008f6c:	e002      	b.n	8008f74 <LoopFillZerobss>

08008f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008f6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008f70:	f842 3b04 	str.w	r3, [r2], #4

08008f74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008f74:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008f76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008f78:	d3f9      	bcc.n	8008f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f7a:	f7fd f897 	bl	80060ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f7e:	f000 f82f 	bl	8008fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008f82:	f7fc fb53 	bl	800562c <main>
  bx lr
 8008f86:	4770      	bx	lr
  ldr r3, =_sidata
 8008f88:	080090e8 	.word	0x080090e8
  ldr r0, =_sdata
 8008f8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008f90:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8008f94:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8008f98:	20004e34 	.word	0x20004e34

08008f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008f9c:	e7fe      	b.n	8008f9c <ADC1_IRQHandler>
	...

08008fa0 <arm_pid_init_f32>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	6986      	ldr	r6, [r0, #24]
 8008fa6:	6a25      	ldr	r5, [r4, #32]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	460f      	mov	r7, r1
 8008fac:	69e1      	ldr	r1, [r4, #28]
 8008fae:	f7f7 fc43 	bl	8000838 <__addsf3>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f7f7 fc40 	bl	8000838 <__addsf3>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7f7 fc3b 	bl	8000838 <__addsf3>
 8008fc2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7f7 fc33 	bl	8000834 <__aeabi_fsub>
 8008fce:	60a5      	str	r5, [r4, #8]
 8008fd0:	6060      	str	r0, [r4, #4]
 8008fd2:	b11f      	cbz	r7, 8008fdc <arm_pid_init_f32+0x3c>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60e3      	str	r3, [r4, #12]
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	6163      	str	r3, [r4, #20]
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fde:	bf00      	nop

08008fe0 <__libc_init_array>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	4d0c      	ldr	r5, [pc, #48]	; (8009018 <__libc_init_array+0x38>)
 8008fe6:	4c0d      	ldr	r4, [pc, #52]	; (800901c <__libc_init_array+0x3c>)
 8008fe8:	1b64      	subs	r4, r4, r5
 8008fea:	10a4      	asrs	r4, r4, #2
 8008fec:	42a6      	cmp	r6, r4
 8008fee:	d109      	bne.n	8009004 <__libc_init_array+0x24>
 8008ff0:	f000 f830 	bl	8009054 <_init>
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	4d0a      	ldr	r5, [pc, #40]	; (8009020 <__libc_init_array+0x40>)
 8008ff8:	4c0a      	ldr	r4, [pc, #40]	; (8009024 <__libc_init_array+0x44>)
 8008ffa:	1b64      	subs	r4, r4, r5
 8008ffc:	10a4      	asrs	r4, r4, #2
 8008ffe:	42a6      	cmp	r6, r4
 8009000:	d105      	bne.n	800900e <__libc_init_array+0x2e>
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	f855 3b04 	ldr.w	r3, [r5], #4
 8009008:	4798      	blx	r3
 800900a:	3601      	adds	r6, #1
 800900c:	e7ee      	b.n	8008fec <__libc_init_array+0xc>
 800900e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009012:	4798      	blx	r3
 8009014:	3601      	adds	r6, #1
 8009016:	e7f2      	b.n	8008ffe <__libc_init_array+0x1e>
 8009018:	080090e0 	.word	0x080090e0
 800901c:	080090e0 	.word	0x080090e0
 8009020:	080090e0 	.word	0x080090e0
 8009024:	080090e4 	.word	0x080090e4

08009028 <memcpy>:
 8009028:	440a      	add	r2, r1
 800902a:	4291      	cmp	r1, r2
 800902c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009030:	d100      	bne.n	8009034 <memcpy+0xc>
 8009032:	4770      	bx	lr
 8009034:	b510      	push	{r4, lr}
 8009036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903a:	4291      	cmp	r1, r2
 800903c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009040:	d1f9      	bne.n	8009036 <memcpy+0xe>
 8009042:	bd10      	pop	{r4, pc}

08009044 <memset>:
 8009044:	4603      	mov	r3, r0
 8009046:	4402      	add	r2, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <_init>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr

08009060 <_fini>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr
